/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef TERRAIN_CACHE_H
      |         ^~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_CACHE_H
    2 | #define TERRAIN_CACHE_H
      |         ~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_CACHE_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <unordered_map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:5:1: warning: system include unordered_map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <unordered_map>
      | ^~~~~~~~~~~~~~~~~~~~~~~~
    6 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:6:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    7 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:7:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:8:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:9:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
   10 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:18:12: warning: accessing fields in struct 'CacheEntry' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   18 |     struct CacheEntry {
      |            ^
   19 |         std::string data;
   20 |         std::chrono::steady_clock::time_point timestamp;
   21 |         std::chrono::milliseconds ttl;
   22 |         
   23 |         CacheEntry() = default;
   24 |         CacheEntry(const std::string& data, std::chrono::milliseconds ttl);
   25 |         
   26 |         /**
   27 |          * @brief Check if cache entry is valid
   28 |          * 
   29 |          * @return bool True if entry is still valid
   30 |          */
   31 |         bool isValid() const noexcept;
   32 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:18:12: note: use "__attribute__((aligned(64)))" to align struct 'CacheEntry' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:18:12: warning: constructor does not initialize these fields: ttl [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   18 |     struct CacheEntry {
      |            ^
   19 |         std::string data;
   20 |         std::chrono::steady_clock::time_point timestamp;
   21 |         std::chrono::milliseconds ttl;
      |                                      
      |                                      {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:19:21: warning: member variable 'data' has public visibility [misc-non-private-member-variables-in-classes]
   19 |         std::string data;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:20:47: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   20 |         std::chrono::steady_clock::time_point timestamp;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:21:35: warning: member variable 'ttl' has public visibility [misc-non-private-member-variables-in-classes]
   21 |         std::chrono::milliseconds ttl;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:23:9: warning: 'CacheEntry' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   23 |         CacheEntry() = default;
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:31:9: warning: function 'isValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
   31 |         bool isValid() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:31:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   31 |         bool isValid() const noexcept;
      |         ~~~~ ^                       
      |         auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:42:31: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   42 |         explicit TerrainCache(size_t maxSize = 1000, std::chrono::milliseconds defaultTtl = std::chrono::minutes(5));
      |                               ^              ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:42:48: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         explicit TerrainCache(size_t maxSize = 1000, std::chrono::milliseconds defaultTtl = std::chrono::minutes(5));
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:42:54: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   42 |         explicit TerrainCache(size_t maxSize = 1000, std::chrono::milliseconds defaultTtl = std::chrono::minutes(5));
      |                                                      ^                                    ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:42:114: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         explicit TerrainCache(size_t maxSize = 1000, std::chrono::milliseconds defaultTtl = std::chrono::minutes(5));
      |                                                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:43:9: warning: '~TerrainCache' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   43 |         ~TerrainCache() = default;
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:47:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   47 |         TerrainCache& operator=(const TerrainCache&) = delete;
      |         ~~~~~~~~~~~~~ ^
      |         auto                                         -> TerrainCache&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:49:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   49 |         TerrainCache& operator=(TerrainCache&&) noexcept;
      |         ~~~~~~~~~~~~~ ^                                 
      |         auto                                             -> TerrainCache&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:59:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   59 |         bool store(const std::string& key, const std::string& data, 
      |         ~~~~ ^
      |         auto
   60 |                   std::chrono::milliseconds ttl = std::chrono::milliseconds(0));
      |                                                                                
      |                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:60:19: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   60 |                   std::chrono::milliseconds ttl = std::chrono::milliseconds(0));
      |                   ^                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:68:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |         std::string retrieve(const std::string& key);
      |         ~~~~~~~~~~~ ^                               
      |         auto                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:76:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   76 |         bool exists(const std::string& key) const;
      |         ~~~~ ^                                   
      |         auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:84:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |         bool remove(const std::string& key);
      |         ~~~~ ^                             
      |         auto                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:96:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   96 |         std::string getStatistics() const;
      |         ~~~~~~~~~~~ ^                    
      |         auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:103:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |         size_t cleanExpiredEntries();
      |         ~~~~~~ ^                    
      |         auto                         -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:110:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  110 |         size_t size() const noexcept;
      |         ~~~~~~ ^                    
      |         auto                         -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:117:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |         bool empty() const noexcept;
      |         ~~~~ ^                     
      |         auto                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:149:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |         bool evictLRU();
      |         ~~~~ ^         
      |         auto            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:177:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  177 |         static std::string generateLOSKey(double txLat, double txLon, double txAlt,
      |                ~~~~~~~~~~~ ^
      |                auto
  178 |                                         double rxLat, double rxLon, double rxAlt);
      |                                                                                  
      |                                                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:187:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |         static std::string generateAltitudeKey(double lat, double lon);
      |                ~~~~~~~~~~~ ^                                          
      |                auto                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:196:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |         static std::string generateEnvironmentalKey(double lat, double lon);
      |                ~~~~~~~~~~~ ^                                               
      |                auto                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:208:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |         static std::string generateNoiseFloorKey(double lat, double lon, double frequency,
      |                ~~~~~~~~~~~ ^
      |                auto
  209 |                                                const std::string& timeOfDay, const std::string& season);
      |                                                                                                        
      |                                                                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:219:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |         static double normalizeCoordinate(double coord, int precision = 6);
      |                ~~~~~~ ^                                                   
      |                auto                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:219:57: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  219 |         static double normalizeCoordinate(double coord, int precision = 6);
      |                                                         ^             ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:219:73: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  219 |         static double normalizeCoordinate(double coord, int precision = 6);
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef TERRAIN_DATA_ACCESS_H
      |         ^~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_DATA_ACCESS_H
    2 | #define TERRAIN_DATA_ACCESS_H
      |         ~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_DATA_ACCESS_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:5:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:6:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
    7 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:7:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:8:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    9 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:17:12: warning: accessing fields in struct 'EnvironmentalConditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   17 |     struct EnvironmentalConditions {
      |            ^
   18 |         double temperature;
   19 |         double humidity;
   20 |         std::string precipitation_type;
   21 |         double precipitation_intensity;
   22 |         double atmospheric_pressure;
   23 |         double wind_speed;
   24 |         double wind_direction;
   25 |         double visibility;
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
   29 |               precipitation_intensity(0.0), atmospheric_pressure(1013.25),
   30 |               wind_speed(0.0), wind_direction(0.0), visibility(10000.0) {}
   31 |     };
      |      
      |       __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:17:12: note: use "__attribute__((aligned(128)))" to align struct 'EnvironmentalConditions' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:18:16: warning: use default member initializer for 'temperature' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   18 |         double temperature;
      |                ^          
      |                           {20.0}
   19 |         double humidity;
   20 |         std::string precipitation_type;
   21 |         double precipitation_intensity;
   22 |         double atmospheric_pressure;
   23 |         double wind_speed;
   24 |         double wind_direction;
   25 |         double visibility;
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
      |               ~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:18:16: warning: member variable 'temperature' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:19:16: warning: use default member initializer for 'humidity' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   19 |         double humidity;
      |                ^       
      |                        {50.0}
   20 |         std::string precipitation_type;
   21 |         double precipitation_intensity;
   22 |         double atmospheric_pressure;
   23 |         double wind_speed;
   24 |         double wind_direction;
   25 |         double visibility;
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
      |                                  ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:19:16: warning: member variable 'humidity' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:20:21: warning: member variable 'precipitation_type' has public visibility [misc-non-private-member-variables-in-classes]
   20 |         std::string precipitation_type;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:21:16: warning: use default member initializer for 'precipitation_intensity' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   21 |         double precipitation_intensity;
      |                ^                      
      |                                       {0.0}
   22 |         double atmospheric_pressure;
   23 |         double wind_speed;
   24 |         double wind_direction;
   25 |         double visibility;
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
   29 |               precipitation_intensity(0.0), atmospheric_pressure(1013.25),
      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:21:16: warning: member variable 'precipitation_intensity' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:22:16: warning: use default member initializer for 'atmospheric_pressure' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   22 |         double atmospheric_pressure;
      |                ^                   
      |                                    {1013.25}
   23 |         double wind_speed;
   24 |         double wind_direction;
   25 |         double visibility;
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
   29 |               precipitation_intensity(0.0), atmospheric_pressure(1013.25),
      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:22:16: warning: member variable 'atmospheric_pressure' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:23:16: warning: use default member initializer for 'wind_speed' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   23 |         double wind_speed;
      |                ^         
      |                          {0.0}
   24 |         double wind_direction;
   25 |         double visibility;
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
   29 |               precipitation_intensity(0.0), atmospheric_pressure(1013.25),
   30 |               wind_speed(0.0), wind_direction(0.0), visibility(10000.0) {}
      |               ~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:23:16: warning: member variable 'wind_speed' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:24:16: warning: use default member initializer for 'wind_direction' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   24 |         double wind_direction;
      |                ^             
      |                              {0.0}
   25 |         double visibility;
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
   29 |               precipitation_intensity(0.0), atmospheric_pressure(1013.25),
   30 |               wind_speed(0.0), wind_direction(0.0), visibility(10000.0) {}
      |                                ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:24:16: warning: member variable 'wind_direction' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:25:16: warning: use default member initializer for 'visibility' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   25 |         double visibility;
      |                ^         
      |                          {10000.0}
   26 |         
   27 |         EnvironmentalConditions() noexcept
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
   29 |               precipitation_intensity(0.0), atmospheric_pressure(1013.25),
   30 |               wind_speed(0.0), wind_direction(0.0), visibility(10000.0) {}
      |                                                     ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:25:16: warning: member variable 'visibility' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:27:9: warning: 'EnvironmentalConditions' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   27 |         EnvironmentalConditions() noexcept
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:28:27: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:28:43: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:28:50: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   28 |             : temperature(20.0), humidity(50.0), precipitation_type("none"),
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:29:66: warning: 1013.25 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   29 |               precipitation_intensity(0.0), atmospheric_pressure(1013.25),
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:30:64: warning: 10000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   30 |               wind_speed(0.0), wind_direction(0.0), visibility(10000.0) {}
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:39:11: warning: class 'TerrainDataAccess' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   39 |     class TerrainDataAccess {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:41:9: warning: '~TerrainDataAccess' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   41 |         virtual ~TerrainDataAccess() = default;
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:51:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   51 |         virtual double getTerrainHeight(double latitude, double longitude) = 0;
      |                 ~~~~~~ ^
      |                 auto                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:61:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   61 |         virtual EnvironmentalConditions getEnvironmentalConditions(double latitude, double longitude) = 0;
      |                 ~~~~~~~~~~~~~~~~~~~~~~~ ^
      |                 auto                                                                                  -> EnvironmentalConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:68:9: warning: function 'isDataSourceAvailable' should be marked [[nodiscard]] [modernize-use-nodiscard]
   68 |         virtual bool isDataSourceAvailable() const noexcept = 0;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:68:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |         virtual bool isDataSourceAvailable() const noexcept = 0;
      |                 ~~~~ ^
      |                 auto                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:75:9: warning: function 'getDataSourceName' should be marked [[nodiscard]] [modernize-use-nodiscard]
   75 |         virtual std::string getDataSourceName() const = 0;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:75:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   75 |         virtual std::string getDataSourceName() const = 0;
      |                 ~~~~~~~~~~~ ^
      |                 auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:85:9: warning: function 'validateCoordinates' should be marked [[nodiscard]] [modernize-use-nodiscard]
   85 |         bool validateCoordinates(double latitude, double longitude) const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:85:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |         bool validateCoordinates(double latitude, double longitude) const noexcept;
      |         ~~~~ ^                                                                    
      |         auto                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:97:9: warning: '~CallbackTerrainDataAccess' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   97 |         ~CallbackTerrainDataAccess() override = default;
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:101:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  101 |         CallbackTerrainDataAccess& operator=(const CallbackTerrainDataAccess&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                                   -> CallbackTerrainDataAccess&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:103:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |         CallbackTerrainDataAccess& operator=(CallbackTerrainDataAccess&&) noexcept;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                              
      |         auto                                                                       -> CallbackTerrainDataAccess&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:120:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |         double getTerrainHeight(double latitude, double longitude) override;
      |         ~~~~~~ ^
      |         auto                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:121:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |         EnvironmentalConditions getEnvironmentalConditions(double latitude, double longitude) override;
      |         ~~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                                                  -> EnvironmentalConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:122:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |         bool isDataSourceAvailable() const noexcept override;
      |         ~~~~ ^
      |         auto                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:123:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |         std::string getDataSourceName() const override;
      |         ~~~~~~~~~~~ ^
      |         auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:141:9: warning: '~MockTerrainDataAccess' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  141 |         ~MockTerrainDataAccess() override = default;
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:145:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |         MockTerrainDataAccess& operator=(const MockTerrainDataAccess&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                           -> MockTerrainDataAccess&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:147:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |         MockTerrainDataAccess& operator=(MockTerrainDataAccess&&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                      -> MockTerrainDataAccess&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:164:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  164 |         double getTerrainHeight(double latitude, double longitude) override;
      |         ~~~~~~ ^
      |         auto                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:165:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |         EnvironmentalConditions getEnvironmentalConditions(double latitude, double longitude) override;
      |         ~~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                                                  -> EnvironmentalConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:166:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |         bool isDataSourceAvailable() const noexcept override;
      |         ~~~~ ^
      |         auto                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:167:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |         std::string getDataSourceName() const override;
      |         ~~~~~~~~~~~ ^
      |         auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:187:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |         static std::unique_ptr<TerrainDataAccess> createCallbackAccess();
      |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |                auto                                                      -> std::unique_ptr<TerrainDataAccess>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:194:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |         static std::unique_ptr<TerrainDataAccess> createMockAccess();
      |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                 
      |                auto                                                  -> std::unique_ptr<TerrainDataAccess>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_data_access.h:202:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  202 |         static std::unique_ptr<TerrainDataAccess> createFromConfig(const std::string& configType);
      |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                              
      |                auto                                                                               -> std::unique_ptr<TerrainDataAccess>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:19:1: warning: #includes are not sorted properly [llvm-include-order]
   19 | #include <iostream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:19:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
   20 | #include <fstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:20:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
   20 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
   21 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:21:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   21 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:21:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:22:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   22 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   23 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:23:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   23 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   24 | #include <filesystem>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:24:1: warning: system include filesystem not allowed [llvmlibc-restrict-system-libc-headers]
   24 | #include <filesystem>
      | ^~~~~~~~~~~~~~~~~~~~~
   25 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:25:1: warning: system include chrono not allowed [llvmlibc-restrict-system-libc-headers]
   25 | #include <chrono>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:25:1: warning: included header chrono is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:26:1: warning: system include queue not allowed [llvmlibc-restrict-system-libc-headers]
   26 | #include <queue>
      | ^~~~~~~~~~~~~~~~
   27 | #include <condition_variable>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:27:1: warning: system include condition_variable not allowed [llvmlibc-restrict-system-libc-headers]
   27 | #include <condition_variable>
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   28 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:28:1: warning: system include thread not allowed [llvmlibc-restrict-system-libc-headers]
   28 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   29 | #include <future>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:29:1: warning: system include future not allowed [llvmlibc-restrict-system-libc-headers]
   29 | #include <future>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:29:1: warning: included header future is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:25: warning: no header providing "size_t" is directly included [misc-include-cleaner]
   19 | #include <iostream>
   20 | #include <fstream>
   21 | #include <sstream>
   22 | #include <algorithm>
   23 | #include <cmath>
   24 | #include <filesystem>
   25 | #include <chrono>
   26 | #include <queue>
   27 | #include <condition_variable>
   28 | #include <thread>
   29 | #include <future>
   30 | // #include <curl/curl.h>  // CURL not available, using alternative implementation
   31 | 
   32 | // Helper function for CURL downloads
   33 | // This function is used when CURL is available, but may be unused in current build
   34 | [[maybe_unused]] static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   34 | [[maybe_unused]] static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:32: warning: function 'WriteCallback' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   34 | [[maybe_unused]] static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
      |                         ~~~~~~ ^
      |                         auto                                                                         -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:35:5: warning: variable 'total_size' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
   35 |     size_t total_size = size * nmemb;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:36:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
   36 |     std::ofstream* file = static_cast<std::ofstream*>(userp);
      |     ^~~~~~~~~~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:37:47: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'streamsize' (aka 'long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
   37 |     file->write(static_cast<char*>(contents), total_size);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:45:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   45 | FGCom_TerrainElevationManager::FGCom_TerrainElevationManager() 
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:50:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   50 | FGCom_TerrainElevationManager::~FGCom_TerrainElevationManager() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:54:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   54 | bool FGCom_TerrainElevationManager::initialize(const TerrainElevationConfig& config) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:54:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   54 | bool FGCom_TerrainElevationManager::initialize(const TerrainElevationConfig& config) {
      | ~~~~                                ^
      | auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:55:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   55 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:55:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
   21 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:55:26: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   55 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:57:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   57 |     if (initialized.load()) {
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:61:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   61 |     this->config = config;
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: resolves to this declaration
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:64:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   64 |         initialized.store(true);
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:69:10: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |     if (!std::filesystem::exists(config.data_path)) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:69:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   69 |     if (!std::filesystem::exists(config.data_path)) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:71:13: warning: 'create_directories' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   71 |             std::filesystem::create_directories(config.data_path);
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:87:8: note: resolves to this declaration
   87 |   bool create_directories(const path& __p);
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:71:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   71 |             std::filesystem::create_directories(config.data_path);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:72:29: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
   19 |         } catch (const std::exception& e) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:73:62: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   73 |             setLastError("Failed to create data directory: " + std::string(e.what()));
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:73:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   73 |             setLastError("Failed to create data directory: " + std::string(e.what()));
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:73:69: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   28 |             setLastError("Failed to create data directory: " + std::string(e.what()));
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:79:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   79 |     workers_running.store(true);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:80:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   80 |     for (size_t i = 0; i < std::thread::hardware_concurrency(); ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:80:28: warning: 'hardware_concurrency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   80 |     for (size_t i = 0; i < std::thread::hardware_concurrency(); ++i) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:217:5: note: resolves to this declaration
  217 |     hardware_concurrency() noexcept;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:81:38: warning: 'workerThread' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |         worker_threads.emplace_back(&FGCom_TerrainElevationManager::workerThread, this);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:236:10: note: resolves to this declaration
  236 |     void workerThread();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:84:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   84 |     initialized.store(true);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:88:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   88 | void FGCom_TerrainElevationManager::shutdown() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:89:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   89 |     if (!initialized.load()) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:94:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   94 |     shutdown_requested.store(true);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:98:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   98 |         std::lock_guard<std::mutex> lock(task_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  103 |     for (auto& thread : worker_threads) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:23: warning: 'operator!=<std::thread *, std::vector<std::thread>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     for (auto& thread : worker_threads) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:23: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     for (auto& thread : worker_threads) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:23: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     for (auto& thread : worker_threads) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:109:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  109 |     workers_running.store(false);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:116:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  116 |     initialized.store(false);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:119:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  119 | void FGCom_TerrainElevationManager::setConfig(const TerrainElevationConfig& config) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:120:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  120 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:121:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  121 |     this->config = config;
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: resolves to this declaration
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:124:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  124 | double FGCom_TerrainElevationManager::getElevation(double latitude, double longitude) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:124:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 | double FGCom_TerrainElevationManager::getElevation(double latitude, double longitude) {
      | ~~~~~~                                ^
      | auto                                                                                  -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:125:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  125 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:129:5: warning: variable 'tile_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  129 |     std::string tile_name = getTileName(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:133:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  133 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:134:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  134 |         auto it = tile_cache.find(tile_name);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:135:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |         if (it != tile_cache.end() && it->second.loaded) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:135:41: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |         if (it != tile_cache.end() && it->second.loaded) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:136:23: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  136 |             cache_hits++;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:137:43: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |             return interpolateElevation(it->second, latitude, longitude);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:141:17: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |     cache_misses++;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:145:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  145 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:146:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  146 |         auto it = tile_cache.find(tile_name);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:147:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |         if (it != tile_cache.end() && it->second.loaded) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:147:41: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |         if (it != tile_cache.end() && it->second.loaded) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:148:43: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |             return interpolateElevation(it->second, latitude, longitude);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:155:47: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  155 | TerrainProfile FGCom_TerrainElevationManager::getTerrainProfile(double lat1, double lon1, 
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:155:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 | TerrainProfile FGCom_TerrainElevationManager::getTerrainProfile(double lat1, double lon1, 
      | ~~~~~~~~~~~~~~                                ^
      | auto
  156 |                                                                double lat2, double lon2, 
  157 |                                                                double resolution_m) {
      |                                                                                     -> TerrainProfile
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:160:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  160 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:5: warning: variable 'cache_key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:29: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:34: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:50: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:58: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:79: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:85: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:28: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:55: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:57: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:78: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:84: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:167:28: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |                            std::to_string(resolution_m);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:170:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  170 |         std::lock_guard<std::mutex> lock(cache_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:171:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  171 |         auto it = profile_cache.find(cache_key);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:172:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |         if (it != profile_cache.end()) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:173:23: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  173 |             cache_hits++;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:174:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  174 |             return it->second;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:178:17: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  178 |     cache_misses++;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:181:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     profile.points = generateProfilePoints(lat1, lon1, lat2, lon2, resolution_m);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:766:7: note: resolves to this declaration
  766 |       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:189:45: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  189 |     profile.max_elevation_m = profile.points[0].elevation_m;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:190:45: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     profile.min_elevation_m = profile.points[0].elevation_m;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  192 |     for (const auto& point : profile.points) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:28: warning: 'operator!=<TerrainPoint *, std::vector<TerrainPoint>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  192 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  192 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  192 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:194:35: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |         profile.max_elevation_m = std::max(profile.max_elevation_m, point.elevation_m);
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:195:35: warning: 'min<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  195 |         profile.min_elevation_m = std::min(profile.min_elevation_m, point.elevation_m);
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:198:51: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  198 |     profile.average_elevation_m = sum_elevation / profile.points.size();
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:206:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  206 |     for (size_t i = 0; i < profile.points.size(); ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:207:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  207 |         const auto& point = profile.points[i];
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:208:9: warning: variable 'expected_elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  208 |         double expected_elevation = profile.points[0].elevation_m + 
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:208:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  208 |         double expected_elevation = profile.points[0].elevation_m + 
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:209:64: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  209 |             (profile.points.back().elevation_m - profile.points[0].elevation_m) * 
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:212:54: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  212 |         if (point.elevation_m > expected_elevation + 10.0) { // 10m threshold
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:223:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  223 |         std::lock_guard<std::mutex> lock(cache_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:224:22: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |         profile_cache[cache_key] = profile;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:224:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |         profile_cache[cache_key] = profile;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: note: resolves to this declaration
   54 | struct TerrainProfile {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:225:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |         profiles_calculated++;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:50: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      | ~~~~~~~~~~~~~~~~~                                ^
      | auto
  232 |                                                                    double lat2, double lon2, double alt2,
  233 |                                                                    double frequency_mhz) {
      |                                                                                          -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:82: warning: 2 adjacent parameters of 'analyzeObstruction' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:89: note: the first parameter in the range is 'lon1'
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                                                         ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:102: note: the last parameter in the range is 'alt1'
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                                                                      ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:232:81: warning: 2 adjacent parameters of 'analyzeObstruction' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  232 |                                                                    double lat2, double lon2, double alt2,
      |                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:232:88: note: the first parameter in the range is 'lon2'
  232 |                                                                    double lat2, double lon2, double alt2,
      |                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:232:101: note: the last parameter in the range is 'alt2'
  232 |                                                                    double lat2, double lon2, double alt2,
      |                                                                                                     ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:236:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  236 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:241:5: warning: variable 'profile' of type 'TerrainProfile' can be declared 'const' [misc-const-correctness]
  241 |     TerrainProfile profile = getTerrainProfile(lat1, lon1, lat2, lon2, config.terrain_resolution_m);
      |     ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:253:12: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  253 |     result = analyzer.analyzeObstruction(profile, alt1, alt2, frequency_mhz);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: note: resolves to this declaration
   70 | struct ObstructionResult {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:258:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  258 | bool FGCom_TerrainElevationManager::loadASTERGDEMTile(double latitude, double longitude) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:258:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 | bool FGCom_TerrainElevationManager::loadASTERGDEMTile(double latitude, double longitude) {
      | ~~~~                                ^
      | auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:259:5: warning: variable 'tile_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  259 |     std::string tile_name = getTileName(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:263:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  263 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:264:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  264 |         auto it = tile_cache.find(tile_name);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:265:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  265 |         if (it != tile_cache.end() && it->second.loaded) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:265:41: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  265 |         if (it != tile_cache.end() && it->second.loaded) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:272:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     tile.filename = tile_name + ".tif";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:272:31: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     tile.filename = tile_name + ".tif";
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:277:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  277 |     tile.file_path = config.data_path + "/" + tile.filename;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:277:39: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  277 |     tile.file_path = config.data_path + "/" + tile.filename;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:277:45: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  277 |     tile.file_path = config.data_path + "/" + tile.filename;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:282:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  282 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:283:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  283 |         tile_cache[tile_name] = tile;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:283:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  283 |         tile_cache[tile_name] = tile;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: resolves to this declaration
  102 | struct ASTERGDEMTile {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:284:21: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |         tiles_loaded++;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:293:17: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  293 |                 std::lock_guard<std::mutex> lock(tile_mutex);
      |                 ^
      |                                             const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:294:27: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  294 |                 tile_cache[tile_name] = tile;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:294:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  294 |                 tile_cache[tile_name] = tile;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: resolves to this declaration
  102 | struct ASTERGDEMTile {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:295:29: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  295 |                 tiles_loaded++;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:304:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
   30 | std::vector<ASTERGDEMTile> FGCom_TerrainElevationManager::getAvailableTiles() const {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:304:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  304 | std::vector<ASTERGDEMTile> FGCom_TerrainElevationManager::getAvailableTiles() const {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:304:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  304 | std::vector<ASTERGDEMTile> FGCom_TerrainElevationManager::getAvailableTiles() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto                                                                                -> std::vector<ASTERGDEMTile>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:307:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  307 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  308 |     for (const auto& pair : tile_cache) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     for (const auto& pair : tile_cache) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     for (const auto& pair : tile_cache) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     for (const auto& pair : tile_cache) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:309:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  308 |     for (const auto& pair : tile_cache) {
  309 |         tiles.push_back(pair.second);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:311:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  311 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:316:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  316 | bool FGCom_TerrainElevationManager::downloadASTERGDEMTile(const std::string& tile_name) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:316:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  316 | bool FGCom_TerrainElevationManager::downloadASTERGDEMTile(const std::string& tile_name) {
      | ~~~~                                ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:316:37: warning: method 'downloadASTERGDEMTile' can be made const [readability-make-member-function-const]
  316 | bool FGCom_TerrainElevationManager::downloadASTERGDEMTile(const std::string& tile_name) {
      |                                     ^
      |                                                                                         const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:50: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      | ~~~~~~~~~~~~~~~~~                                ^
      | auto
  322 |                                                                       double lat2, double lon2, double alt2,
  323 |                                                                       double frequency_mhz) {
      |                                                                                             -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:84: warning: 2 adjacent parameters of 'calculateFresnelZone' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:91: note: the first parameter in the range is 'lon1'
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:104: note: the last parameter in the range is 'alt1'
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:322:84: warning: 2 adjacent parameters of 'calculateFresnelZone' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  322 |                                                                       double lat2, double lon2, double alt2,
      |                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:322:91: note: the first parameter in the range is 'lon2'
  322 |                                                                       double lat2, double lon2, double alt2,
      |                                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:322:104: note: the last parameter in the range is 'alt2'
  322 |                                                                       double lat2, double lon2, double alt2,
      |                                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:326:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  326 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:331:5: warning: variable 'profile' of type 'TerrainProfile' can be declared 'const' [misc-const-correctness]
  331 |     TerrainProfile profile = getTerrainProfile(lat1, lon1, lat2, lon2, config.terrain_resolution_m);
      |     ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:343:12: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     result = analyzer.calculateFresnelZone(profile, alt1, alt2, frequency_mhz);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: note: resolves to this declaration
   88 | struct FresnelZoneResult {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:348:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  348 | double FGCom_TerrainElevationManager::calculateDiffractionLoss(double obstruction_height_m, 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:348:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  348 | double FGCom_TerrainElevationManager::calculateDiffractionLoss(double obstruction_height_m, 
      | ~~~~~~                                ^
      | auto
  349 |                                                               double distance_km,
  350 |                                                               double frequency_mhz) {
      |                                                                                     -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:348:39: warning: method 'calculateDiffractionLoss' can be made const [readability-make-member-function-const]
  348 | double FGCom_TerrainElevationManager::calculateDiffractionLoss(double obstruction_height_m, 
      |                                       ^
  349 |                                                               double distance_km,
  350 |                                                               double frequency_mhz) {
      |                                                                                     const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:363:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  363 | void FGCom_TerrainElevationManager::clearCache() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:364:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  364 |     std::lock_guard<std::mutex> lock(tile_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:366:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  366 |     tiles_loaded.store(0);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:473:29: note: default parameter was declared here
  473 |       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:369:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  369 | void FGCom_TerrainElevationManager::clearProfileCache() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:370:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  370 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:372:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  372 |     profiles_calculated.store(0);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:473:29: note: default parameter was declared here
  473 |       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:375:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  375 | size_t FGCom_TerrainElevationManager::getCacheSize() const {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:375:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  375 | size_t FGCom_TerrainElevationManager::getCacheSize() const {
      | ~~~~~~                                ^
      | auto                                                       -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:376:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  376 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:377:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  377 |     size_t size = tile_cache.size();
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:378:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  378 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:382:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  382 | size_t FGCom_TerrainElevationManager::getProfileCacheSize() const {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:382:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  382 | size_t FGCom_TerrainElevationManager::getProfileCacheSize() const {
      | ~~~~~~                                ^
      | auto                                                              -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:383:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  383 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:384:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  384 |     size_t size = profile_cache.size();
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:385:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  385 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:389:74: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  389 | FGCom_TerrainElevationManager::Statistics FGCom_TerrainElevationManager::getStatistics() const {
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:389:74: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  389 | FGCom_TerrainElevationManager::Statistics FGCom_TerrainElevationManager::getStatistics() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto                                                                                           -> FGCom_TerrainElevationManager::Statistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:390:5: warning: uninitialized record type: 'stats' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  390 |     Statistics stats;
      |     ^               
      |                     {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:391:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  391 |     stats.tiles_loaded = tiles_loaded.load();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:392:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  392 |     stats.profiles_calculated = profiles_calculated.load();
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:393:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  393 |     stats.cache_hits = cache_hits.load();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:394:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  394 |     stats.cache_misses = cache_misses.load();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:396:5: warning: variable 'total_requests' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  396 |     size_t total_requests = stats.cache_hits + stats.cache_misses;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:397:49: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  397 |     stats.cache_hit_rate = total_requests > 0 ? (double)stats.cache_hits / total_requests : 0.0;
      |                                                 ^~~~~~~~
      |                                                 static_cast<double>(    )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:397:76: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  397 |     stats.cache_hit_rate = total_requests > 0 ? (double)stats.cache_hits / total_requests : 0.0;
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: warning: performing an implicit widening conversion to type 'unsigned long' of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: note: make conversion explicit to silence this warning
   19 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^~~~~~~~~~~
      |                                                                               static_cast<unsigned long>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: note: perform multiplication in a wider type
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^~~~
      |                                                                               static_cast<long>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:86: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:406:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  406 | std::string FGCom_TerrainElevationManager::getLastError() const {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:406:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  406 | std::string FGCom_TerrainElevationManager::getLastError() const {
      | ~~~~~~~~~~~                                ^
      | auto                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:407:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  407 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:409:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  409 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:413:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  413 | void FGCom_TerrainElevationManager::setLastError(const std::string& error) const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:414:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  414 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:415:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  415 |     const_cast<FGCom_TerrainElevationManager*>(this)->last_error = error;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:415:66: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     const_cast<FGCom_TerrainElevationManager*>(this)->last_error = error;
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:416:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  416 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:420:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  420 | std::string FGCom_TerrainElevationManager::getTileName(double latitude, double longitude) const {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:420:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:420:44: warning: method 'getTileName' can be made static [readability-convert-member-functions-to-static]
  420 | std::string FGCom_TerrainElevationManager::getTileName(double latitude, double longitude) const {
      |                                            ^                                              ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:421:5: warning: variable 'lat_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  421 |     int lat_tile = static_cast<int>(std::floor(latitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:422:5: warning: variable 'lon_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  422 |     int lon_tile = static_cast<int>(std::floor(longitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:5: warning: variable 'lat_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:56: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:5: warning: variable 'lon_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:427:20: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  427 |     return lat_str + lon_str;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3553:5: note: resolves to this declaration
 3553 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:430:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  430 | bool FGCom_TerrainElevationManager::loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:430:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  430 | bool FGCom_TerrainElevationManager::loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile) {
      | ~~~~                                ^
      | auto                                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:430:37: warning: method 'loadTileFromFile' can be made const [readability-make-member-function-const]
  430 | bool FGCom_TerrainElevationManager::loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile) {
      |                                     ^
      |                                                                                                         const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:431:10: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  431 |     if (!std::filesystem::exists(tile_path)) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:431:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  431 |     if (!std::filesystem::exists(tile_path)) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:439:32: warning: 'file_size' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |         tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:150:13: note: resolves to this declaration
  150 |   uintmax_t file_size(const path& __p);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:439:59: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  439 |         tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:442:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  442 |         setLastError("Failed to load tile from file: " + std::string(e.what()));
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:442:58: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  442 |         setLastError("Failed to load tile from file: " + std::string(e.what()));
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      | ~~~~~~                                ^
      | auto                                                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:39: warning: method 'interpolateElevation' can be made static [readability-convert-member-functions-to-static]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:87: warning: 2 adjacent parameters of 'interpolateElevation' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                                                                       ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:94: note: the first parameter in the range is 'lat'
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                                                                              ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:106: note: the last parameter in the range is 'lon'
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                                                                                          ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:455:5: warning: variable 'lat_frac' of type 'double' can be declared 'const' [misc-const-correctness]
  455 |     double lat_frac = lat - tile.min_lat;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:456:5: warning: variable 'lon_frac' of type 'double' can be declared 'const' [misc-const-correctness]
  456 |     double lon_frac = lon - tile.min_lon;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:459:20: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  459 |     return 100.0 + 50.0 * std::sin(lat_frac * M_PI) * std::cos(lon_frac * M_PI);
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:459:47: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
   21 |     return 100.0 + 50.0 * std::sin(lat_frac * M_PI) * std::cos(lon_frac * M_PI);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:58: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:58: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      | ~~~~~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto
  463 |                                                                              double lat2, double lon2, 
  464 |                                                                              double resolution_m) {
      |                                                                                                   -> std::vector<TerrainPoint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:80: warning: 2 adjacent parameters of 'generateProfilePoints' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:87: note: the first parameter in the range is 'lat1'
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                                                       ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:100: note: the last parameter in the range is 'lon1'
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:463:78: warning: 3 adjacent parameters of 'generateProfilePoints' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  463 |                                                                              double lat2, double lon2, 
      |                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~
  464 |                                                                              double resolution_m) {
      |                                                                              ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:463:85: note: the first parameter in the range is 'lat2'
  463 |                                                                              double lat2, double lon2, 
      |                                                                                     ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:464:85: note: the last parameter in the range is 'resolution_m'
  464 |                                                                              double resolution_m) {
      |                                                                                     ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:472:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  472 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:472:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  472 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:473:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  473 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:473:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  473 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:474:5: warning: variable 'a' of type 'double' can be declared 'const' [misc-const-correctness]
  474 |     double a = std::sin(dlat/2) * std::sin(dlat/2) + 
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:474:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  474 |     double a = std::sin(dlat/2) * std::sin(dlat/2) + 
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:475:39: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  475 |                std::cos(lat1 * M_PI / 180.0) * std::cos(lat2 * M_PI / 180.0) * 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:475:71: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  475 |                std::cos(lat1 * M_PI / 180.0) * std::cos(lat2 * M_PI / 180.0) * 
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:477:5: warning: variable 'c' of type 'double' can be declared 'const' [misc-const-correctness]
  477 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:477:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  477 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:478:19: warning: 6371.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  478 |     distance_km = 6371.0 * c; // Earth radius in km
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:481:5: warning: variable 'num_points' of type 'int' can be declared 'const' [misc-const-correctness]
  481 |     int num_points = static_cast<int>(distance_km * 1000.0 / resolution_m) + 1;
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:481:53: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  481 |     int num_points = static_cast<int>(distance_km * 1000.0 / resolution_m) + 1;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:483:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  483 |     for (int i = 0; i < num_points; ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:483:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'num_points' and may cause performance degradation [altera-id-dependent-backward-branch]
  483 |     for (int i = 0; i < num_points; ++i) {
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:481:5: note: inferred assignment of ID-dependent value from ID-dependent 
  481 |     int num_points = static_cast<int>(distance_km * 1000.0 / resolution_m) + 1;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:484:9: warning: variable 'fraction' of type 'double' can be declared 'const' [misc-const-correctness]
  484 |         double fraction = static_cast<double>(i) / (num_points - 1);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:485:9: warning: variable 'lat' of type 'double' can be declared 'const' [misc-const-correctness]
  485 |         double lat = lat1 + (lat2 - lat1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:486:9: warning: variable 'lon' of type 'double' can be declared 'const' [misc-const-correctness]
  486 |         double lon = lon1 + (lon2 - lon1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:487:9: warning: variable 'dist' of type 'double' can be declared 'const' [misc-const-correctness]
  487 |         double dist = distance_km * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:489:9: warning: variable 'elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  489 |         double elevation = getElevation(lat, lon);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:497:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  497 | bool FGCom_TerrainElevationManager::isPointInTile(const ASTERGDEMTile& tile, double lat, double lon) const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:497:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:497:37: warning: method 'isPointInTile' can be made static [readability-convert-member-functions-to-static]
  497 | bool FGCom_TerrainElevationManager::isPointInTile(const ASTERGDEMTile& tile, double lat, double lon) const {
      |                                     ^                                                                ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:502:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  502 | void FGCom_TerrainElevationManager::workerThread() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:503:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  503 |     while (workers_running.load()) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:503:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  503 |     while (workers_running.load()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:504:14: warning: no header providing "std::function" is directly included [misc-include-cleaner]
   19 |         std::function<void()> task;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:507:18: warning: no header providing "std::unique_lock" is directly included [misc-include-cleaner]
  507 |             std::unique_lock<std::mutex> lock(task_mutex);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:508:72: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  508 |             task_cv.wait(lock, [this] { return !task_queue.empty() || !workers_running.load(); });
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:510:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  510 |             if (!workers_running.load()) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:515:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  515 |                 task = task_queue.front();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:469:7: note: resolves to this declaration
  469 |       operator=(const function& __x)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:522:21: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  522 |                 task();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:587:7: note: resolves to this declaration
  587 |       operator()(_ArgTypes... __args) const
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:524:50: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  524 |                 logError("Worker thread error: " + std::string(e.what()));
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:524:52: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  524 |                 logError("Worker thread error: " + std::string(e.what()));
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:530:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  530 | void FGCom_TerrainElevationManager::submitTask(std::function<void()> task) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:530:70: warning: the parameter 'task' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  530 | void FGCom_TerrainElevationManager::submitTask(std::function<void()> task) {
      |                                                                      ^
      |                                                const                &
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:531:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  531 |     if (workers_running.load()) {
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:532:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  532 |         std::lock_guard<std::mutex> lock(task_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:538:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  538 | void FGCom_TerrainElevationManager::evictOldCacheEntries() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:541:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  541 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:542:56: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  542 |         if (tile_cache.size() > config.cache_size_mb / 10) { // Rough estimate
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:543:18: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  543 |             auto it = tile_cache.begin();
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:549:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  549 | bool FGCom_TerrainElevationManager::isCacheFull() const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:549:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  549 | bool FGCom_TerrainElevationManager::isCacheFull() const {
      | ~~~~                                ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:550:52: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  550 |     return getCacheSize() > config.cache_size_mb / 10; // Rough estimate
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:553:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  553 | void FGCom_TerrainElevationManager::logError(const std::string& error) const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:53: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:62: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:65: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:65: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:24: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:46: warning: 2 adjacent parameters of 'FGCom_ASTERGDEMLoader' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:65: note: the first parameter in the range is 'data_path'
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                                                 ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:95: note: the last parameter in the range is 'download_url'
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                                                                               ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:46: warning: pass by value and use std::move [modernize-pass-by-value]
   30 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                              ^~~~~~~~~~~~~~~~~~
      |                                              std::string 
   31 |     : data_path(data_path), download_url(download_url), download_enabled(true) {
      |                          
      |                 std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:76: warning: pass by value and use std::move [modernize-pass-by-value]
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                                                            ^~~~~~~~~~~~~~~~~~
      |                                                                            std::string 
  563 |     : data_path(data_path), download_url(download_url), download_enabled(true) {
      |                                                      
      |                                          std::move(  )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:566:24: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
  566 | FGCom_ASTERGDEMLoader::~FGCom_ASTERGDEMLoader() {
      |                        ^                        ~
      |                                                 = default;
  567 | }
      | ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:566:24: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  569 | bool FGCom_ASTERGDEMLoader::loadTile(double latitude, double longitude, ASTERGDEMTile& tile) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: warning: function 'loadTile' is within a recursive call chain [misc-no-recursion]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: note: example recursive call chain, starting from function 'loadTile'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:576:24: note: Frame #1: function 'loadTile' calls function 'loadTile' here:
  576 |                 return loadTile(latitude, longitude, tile);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:576:24: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  569 | bool FGCom_ASTERGDEMLoader::loadTile(double latitude, double longitude, ASTERGDEMTile& tile) {
      | ~~~~                        ^
      | auto                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:570:5: warning: variable 'tile_path' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  570 |     std::string tile_path = getTilePath(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:572:10: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |     if (!std::filesystem::exists(tile_path)) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:572:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  572 |     if (!std::filesystem::exists(tile_path)) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:573:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  573 |         if (download_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:574:13: warning: variable 'tile_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  574 |             std::string tile_name = getTileFilename(latitude, longitude);
      |             ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:583:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  583 |     tile.filename = getTileFilename(latitude, longitude);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:588:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  588 |     tile.file_path = tile_path;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:590:28: warning: 'file_size' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  590 |     tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:150:13: note: resolves to this declaration
  150 |   uintmax_t file_size(const path& __p);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:590:55: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  590 |     tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:595:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  595 | bool FGCom_ASTERGDEMLoader::downloadTile(const std::string& tile_name) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:595:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  595 | bool FGCom_ASTERGDEMLoader::downloadTile(const std::string& tile_name) {
      | ~~~~                        ^
      | auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:596:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  596 |     if (!download_enabled.load()) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:600:5: warning: variable 'url' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  600 |     std::string url = constructDownloadURL(tile_name);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:5: warning: variable 'filepath' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:38: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:44: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:606:49: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  606 | std::vector<std::string> FGCom_ASTERGDEMLoader::getAvailableTiles() const {
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:606:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  606 | std::vector<std::string> FGCom_ASTERGDEMLoader::getAvailableTiles() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                        ^
      | auto                                                                      -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'begin' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:484:3: note: resolves to this declaration
  484 |   begin(directory_iterator __iter) noexcept
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'end' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:489:3: note: resolves to this declaration
  489 |   end(directory_iterator) noexcept
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:460:5: note: resolves to this declaration
  460 |     operator!=(const directory_iterator& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:431:28: note: resolves to this declaration
  431 |     const directory_entry& operator*() const noexcept;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:433:28: note: resolves to this declaration
  433 |     directory_iterator&    operator++();
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:70: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:611:69: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  611 |             if (entry.is_regular_file() && entry.path().extension() == ".tif") {
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:560:17: note: resolves to this declaration
  560 |     friend bool operator==(const path& __lhs, const path& __rhs) noexcept
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:611:72: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  611 |             if (entry.is_regular_file() && entry.path().extension() == ".tif") {
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:616:53: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  616 |         logError("Failed to list available tiles: " + std::string(e.what()));
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:616:55: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  616 |         logError("Failed to list available tiles: " + std::string(e.what()));
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:622:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  622 | bool FGCom_ASTERGDEMLoader::isTileAvailable(double latitude, double longitude) const {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:622:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  622 | bool FGCom_ASTERGDEMLoader::isTileAvailable(double latitude, double longitude) const {
      | ~~~~                        ^
      | auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:623:5: warning: variable 'tile_path' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  623 |     std::string tile_path = getTilePath(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:624:12: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  624 |     return std::filesystem::exists(tile_path);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:624:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  624 |     return std::filesystem::exists(tile_path);
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:627:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  627 | std::string FGCom_ASTERGDEMLoader::getTilePath(double latitude, double longitude) const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:627:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  627 | std::string FGCom_ASTERGDEMLoader::getTilePath(double latitude, double longitude) const {
      | ~~~~~~~~~~~                        ^
      | auto                                                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:628:22: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  628 |     return data_path + "/" + getTileFilename(latitude, longitude);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:628:28: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  628 |     return data_path + "/" + getTileFilename(latitude, longitude);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:631:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  631 | std::string FGCom_ASTERGDEMLoader::getTileFilename(double latitude, double longitude) const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:631:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:631:36: warning: method 'getTileFilename' can be made static [readability-convert-member-functions-to-static]
  631 | std::string FGCom_ASTERGDEMLoader::getTileFilename(double latitude, double longitude) const {
      |                                    ^                                                  ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:632:5: warning: variable 'lat_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  632 |     int lat_tile = static_cast<int>(std::floor(latitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:633:5: warning: variable 'lon_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  633 |     int lon_tile = static_cast<int>(std::floor(longitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:5: warning: variable 'lat_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:5: warning: variable 'lon_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:638:20: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  638 |     return lat_str + lon_str;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3553:5: note: resolves to this declaration
 3553 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:641:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  641 | bool FGCom_ASTERGDEMLoader::createDataDirectory() {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:641:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  641 | bool FGCom_ASTERGDEMLoader::createDataDirectory() {
      | ~~~~                        ^
      | auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:643:14: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  643 |         if (!std::filesystem::exists(data_path)) {
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:643:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  643 |         if (!std::filesystem::exists(data_path)) {
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:644:13: warning: 'create_directories' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  644 |             std::filesystem::create_directories(data_path);
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:87:8: note: resolves to this declaration
   87 |   bool create_directories(const path& __p);
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:644:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  644 |             std::filesystem::create_directories(data_path);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:648:54: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  648 |         logError("Failed to create data directory: " + std::string(e.what()));
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:648:56: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  648 |         logError("Failed to create data directory: " + std::string(e.what()));
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:653:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  653 | std::string FGCom_ASTERGDEMLoader::getLastError() const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:653:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  653 | std::string FGCom_ASTERGDEMLoader::getLastError() const {
      | ~~~~~~~~~~~                        ^
      | auto                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:657:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  657 | void FGCom_ASTERGDEMLoader::setLastError(const std::string& error) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:658:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  658 |     last_error = error;
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:661:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  661 | std::string FGCom_ASTERGDEMLoader::constructDownloadURL(const std::string& tile_name) const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:661:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  661 | std::string FGCom_ASTERGDEMLoader::constructDownloadURL(const std::string& tile_name) const {
      | ~~~~~~~~~~~                        ^
      | auto                                                                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:662:25: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  662 |     return download_url + tile_name + ".tif";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3553:5: note: resolves to this declaration
 3553 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:662:37: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  662 |     return download_url + tile_name + ".tif";
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:665:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  665 | bool FGCom_ASTERGDEMLoader::downloadFile(const std::string& url, const std::string& filepath) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:665:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  665 | bool FGCom_ASTERGDEMLoader::downloadFile(const std::string& url, const std::string& filepath) {
      | ~~~~                        ^
      | auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:670:5: warning: variable 'temp_file' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  670 |     std::string temp_file = filepath + ".tmp";
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:670:38: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  670 |     std::string temp_file = filepath + ".tmp";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:13: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:94: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:102: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:108: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: calling 'system' uses a command processor [cert-env33-c]
  674 |     int result = system(command.c_str());
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: function is not thread safe [concurrency-mt-unsafe]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: 'system' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/stdlib.h:923:12: note: resolves to this declaration
  923 | extern int system (const char *__command) __wur;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: no header providing "system" is directly included [misc-include-cleaner]
   19 |     int result = system(command.c_str());
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:99: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:111: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:119: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:125: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:679:18: warning: calling 'system' uses a command processor [cert-env33-c]
  679 |         result = system(command.c_str());
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:679:18: warning: function is not thread safe [concurrency-mt-unsafe]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:679:18: warning: 'system' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/stdlib.h:923:12: note: resolves to this declaration
  923 | extern int system (const char *__command) __wur;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:683:50: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  683 |         setLastError("Failed to download file: " + url + " (wget/curl failed)");
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:683:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  683 |         setLastError("Failed to download file: " + url + " (wget/curl failed)");
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:688:52: warning: 'operator|' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  688 |     std::ifstream file(temp_file, std::ios::binary | std::ios::ate);
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/ios_base.h:130:3: note: resolves to this declaration
  130 |   operator|(_Ios_Openmode __a, _Ios_Openmode __b)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:690:62: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  690 |         setLastError("Downloaded file could not be opened: " + temp_file);
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:694:5: warning: variable 'size' of type 'std::streamsize' (aka 'long') can be declared 'const' [misc-const-correctness]
  694 |     std::streamsize size = file.tellg();
      |     ^
      |                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:698:51: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  698 |         setLastError("Downloaded file is empty: " + temp_file);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:9: warning: the value returned by this function should not be disregarded; neglecting it may lead to errors [cert-err33-c]
  699 |         std::remove(temp_file.c_str());
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:9: note: cast the expression to void to silence this warning
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:9: warning: 'remove' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  699 |         std::remove(temp_file.c_str());
      |         ^
/usr/include/stdio.h:158:12: note: resolves to this declaration
  158 | extern int remove (const char *__filename) __THROW;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:14: warning: no header providing "std::remove" is directly included [misc-include-cleaner]
   19 |         std::remove(temp_file.c_str());
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:704:9: warning: 'rename' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  704 |     if (std::rename(temp_file.c_str(), filepath.c_str()) != 0) {
      |         ^
/usr/include/stdio.h:160:12: note: resolves to this declaration
  160 | extern int rename (const char *__old, const char *__new) __THROW;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:704:14: warning: no header providing "std::rename" is directly included [misc-include-cleaner]
  704 |     if (std::rename(temp_file.c_str(), filepath.c_str()) != 0) {
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:705:75: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  705 |         setLastError("Failed to move downloaded file to final location: " + filepath);
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:706:9: warning: the value returned by this function should not be disregarded; neglecting it may lead to errors [cert-err33-c]
  706 |         std::remove(temp_file.c_str());
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:706:9: note: cast the expression to void to silence this warning
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:706:9: warning: 'remove' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  706 |         std::remove(temp_file.c_str());
      |         ^
/usr/include/stdio.h:158:12: note: resolves to this declaration
  158 | extern int remove (const char *__filename) __THROW;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:713:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  713 | void FGCom_ASTERGDEMLoader::logError(const std::string& error) const {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:713:29: warning: method 'logError' can be made static [readability-convert-member-functions-to-static]
  713 | void FGCom_ASTERGDEMLoader::logError(const std::string& error) const {
      |                             ^                                  ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:45: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:54: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:57: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:721:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  721 | FGCom_TerrainObstructionAnalyzer::FGCom_TerrainObstructionAnalyzer(double fresnel_clearance, 
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:728:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  728 | ObstructionResult FGCom_TerrainObstructionAnalyzer::analyzeObstruction(const TerrainProfile& profile,
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:728:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  728 | ObstructionResult FGCom_TerrainObstructionAnalyzer::analyzeObstruction(const TerrainProfile& profile,
      | ~~~~~~~~~~~~~~~~~                                   ^
      | auto
  729 |                                                                        double alt1, double alt2,
  730 |                                                                        double frequency_mhz) {
      |                                                                                              -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:743:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  743 |         result.obstruction_type = "mountain"; // Simplified classification
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:746:34: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  746 |         result.terrain_loss_db = 20.0 * std::log10(profile.obstruction_height_m / 10.0);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:746:83: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  746 |         result.terrain_loss_db = 20.0 * std::log10(profile.obstruction_height_m / 10.0);
      |                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:758:9: warning: variable 'fresnel' of type 'FresnelZoneResult' can be declared 'const' [misc-const-correctness]
  758 |         FresnelZoneResult fresnel = calculateFresnelZone(profile, alt1, alt2, frequency_mhz);
      |         ^
      |                           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:766:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  766 | FresnelZoneResult FGCom_TerrainObstructionAnalyzer::calculateFresnelZone(const TerrainProfile& profile,
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:766:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  766 | FresnelZoneResult FGCom_TerrainObstructionAnalyzer::calculateFresnelZone(const TerrainProfile& profile,
      | ~~~~~~~~~~~~~~~~~                                   ^
      | auto
  767 |                                                                          double alt1, double alt2,
  768 |                                                                          double frequency_mhz) {
      |                                                                                                -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:767:87: warning: 2 adjacent parameters of 'calculateFresnelZone' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  767 |                                                                          double alt1, double alt2,
      |                                                                                       ^~~~~~~~~~~~
  768 |                                                                          double frequency_mhz) {
      |                                                                          ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:767:94: note: the first parameter in the range is 'alt2'
  767 |                                                                          double alt1, double alt2,
      |                                                                                              ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:768:81: note: the last parameter in the range is 'frequency_mhz'
  768 |                                                                          double frequency_mhz) {
      |                                                                                 ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:776:5: warning: variable 'total_distance_km' of type 'double' can be declared 'const' [misc-const-correctness]
  776 |     double total_distance_km = profile.points.back().distance_km;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      | ~~~~~~                                   ^
      | auto
  793 |                                                                 double distance_km,
  794 |                                                                 double frequency_mhz) {
      |                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:42: warning: method 'calculateDiffractionLoss' can be made const [readability-make-member-function-const]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                          ^
  793 |                                                                 double distance_km,
  794 |                                                                 double frequency_mhz) {
      |                                                                                       const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:67: warning: 3 adjacent parameters of 'calculateDiffractionLoss' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
  793 |                                                                 double distance_km,
      |                                                                 ~~~~~~~~~~~~~~~~~~~
  794 |                                                                 double frequency_mhz) {
      |                                                                 ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:74: note: the first parameter in the range is 'obstruction_height_m'
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                                                          ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:794:72: note: the last parameter in the range is 'frequency_mhz'
  794 |                                                                 double frequency_mhz) {
      |                                                                        ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:800:5: warning: variable 'wavelength_m' of type 'double' can be declared 'const' [misc-const-correctness]
  800 |     double wavelength_m = 300.0 / frequency_mhz; // Speed of light / frequency
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:800:27: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  800 |     double wavelength_m = 300.0 / frequency_mhz; // Speed of light / frequency
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:801:5: warning: variable 'fresnel_radius' of type 'double' can be declared 'const' [misc-const-correctness]
  801 |     double fresnel_radius = std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:801:68: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  801 |     double fresnel_radius = std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:801:77: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  801 |     double fresnel_radius = std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:803:5: warning: variable 'v' of type 'double' can be declared 'const' [misc-const-correctness]
  803 |     double v = obstruction_height_m / fresnel_radius;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:803:12: warning: variable name 'v' is too short, expected at least 3 characters [readability-identifier-length]
  803 |     double v = obstruction_height_m / fresnel_radius;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:805:14: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  805 |     if (v < -0.8) {
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:807:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  807 |     } else if (v < 0.0) {
      |       ^~~~~~~~~~~~~~~~~~~
  808 |         return 6.0 + 8.0 * v; // Partial obstruction
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  809 |     } else {
      |     ~~~~~~~~
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  811 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:808:16: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  808 |         return 6.0 + 8.0 * v; // Partial obstruction
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:808:22: warning: 8.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  808 |         return 6.0 + 8.0 * v; // Partial obstruction
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:810:16: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:810:22: warning: 8.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:810:32: warning: 8.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:814:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  814 | bool FGCom_TerrainObstructionAnalyzer::isLineOfSightClear(const TerrainProfile& profile, 
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:814:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  814 | bool FGCom_TerrainObstructionAnalyzer::isLineOfSightClear(const TerrainProfile& profile, 
      | ~~~~                                   ^
      | auto
  815 |                                                          double alt1, double alt2) {
      |                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:814:40: warning: method 'isLineOfSightClear' can be made static [readability-convert-member-functions-to-static]
  814 | bool FGCom_TerrainObstructionAnalyzer::isLineOfSightClear(const TerrainProfile& profile, 
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:820:5: warning: variable 'total_distance_km' of type 'double' can be declared 'const' [misc-const-correctness]
  820 |     double total_distance_km = profile.points.back().distance_km;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  822 |     for (const auto& point : profile.points) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:5: warning: replace loop by 'std::all_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:28: warning: 'operator!=<const TerrainPoint *, std::vector<TerrainPoint>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  822 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  822 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  822 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:824:9: warning: variable 'fraction' of type 'double' can be declared 'const' [misc-const-correctness]
  824 |         double fraction = point.distance_km / total_distance_km;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:825:9: warning: variable 'expected_elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  825 |         double expected_elevation = alt1 + (alt2 - alt1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:828:54: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  828 |         if (point.elevation_m > expected_elevation + 10.0) { // 10m threshold
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:42: warning: method 'calculateFresnelRadius' can be made static [readability-convert-member-functions-to-static]
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                          ^                                                                ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:65: warning: 2 adjacent parameters of 'calculateFresnelRadius' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:72: note: the first parameter in the range is 'distance_km'
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                                                        ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:92: note: the last parameter in the range is 'frequency_mhz'
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                                                                            ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:837:5: warning: variable 'wavelength_m' of type 'double' can be declared 'const' [misc-const-correctness]
  837 |     double wavelength_m = 300.0 / frequency_mhz;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:837:27: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  837 |     double wavelength_m = 300.0 / frequency_mhz;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:838:51: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  838 |     return std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:838:60: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  838 |     return std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:841:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  841 | double FGCom_TerrainObstructionAnalyzer::calculateRequiredClearance(const TerrainProfile& profile, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:841:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:841:42: warning: method 'calculateRequiredClearance' can be made static [readability-convert-member-functions-to-static]
  841 | double FGCom_TerrainObstructionAnalyzer::calculateRequiredClearance(const TerrainProfile& profile, 
      |                                          ^
  842 |                                                                    double alt1, double alt2) const {
      |                                                                                              ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  845 |     for (const auto& point : profile.points) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:28: warning: 'operator!=<const TerrainPoint *, std::vector<TerrainPoint>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  845 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  845 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  845 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:846:9: warning: variable 'fraction' of type 'double' can be declared 'const' [misc-const-correctness]
  846 |         double fraction = point.distance_km / profile.points.back().distance_km;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:847:9: warning: variable 'expected_elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  847 |         double expected_elevation = alt1 + (alt2 - alt1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:848:9: warning: variable 'clearance' of type 'double' can be declared 'const' [misc-const-correctness]
  848 |         double clearance = point.elevation_m - expected_elevation;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:849:25: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  849 |         max_clearance = std::max(max_clearance, clearance);
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:855:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  855 | bool FGCom_TerrainObstructionAnalyzer::checkFresnelZoneClearance(const TerrainProfile& profile, 
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:855:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  855 | bool FGCom_TerrainObstructionAnalyzer::checkFresnelZoneClearance(const TerrainProfile& profile, 
      | ~~~~                                   ^
      | auto
  856 |                                                                double alt1, double alt2,
  857 |                                                                double frequency_mhz) const {
      |                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:859:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
  859 |     FGCom_TerrainObstructionAnalyzer* non_const_this = const_cast<FGCom_TerrainObstructionAnalyzer*>(this);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:859:56: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  859 |     FGCom_TerrainObstructionAnalyzer* non_const_this = const_cast<FGCom_TerrainObstructionAnalyzer*>(this);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:860:5: warning: variable 'fresnel' of type 'FresnelZoneResult' can be declared 'const' [misc-const-correctness]
  860 |     FresnelZoneResult fresnel = non_const_this->calculateFresnelZone(profile, alt1, alt2, frequency_mhz);
      |     ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_TERRAIN_ELEVATION_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_ELEVATION_H
   19 | #define FGCOM_TERRAIN_ELEVATION_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_ELEVATION_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:24:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   24 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
   25 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:25:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   25 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   26 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:26:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   26 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   27 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:27:1: warning: system include thread not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   27 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   28 | #include <future>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:28:1: warning: system include future not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   28 | #include <future>
      | ^~~~~~~~~~~~~~~~~
   29 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:29:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   29 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   30 | #include <queue>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:30:1: warning: system include queue not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   30 | #include <queue>
      | ^~~~~~~~~~~~~~~~
   31 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:40:8: warning: accessing fields in struct 'TerrainPoint' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   40 | struct TerrainPoint {
      |        ^
   41 |     double latitude;
   42 |     double longitude;
   43 |     double elevation_m;
   44 |     double distance_km;
   45 |     
   46 |     TerrainPoint() : latitude(0.0), longitude(0.0), elevation_m(0.0), distance_km(0.0) {}
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
   48 |         : latitude(lat), longitude(lon), elevation_m(elev), distance_km(dist) {}
   49 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:40:8: note: use "__attribute__((aligned(32)))" to align struct 'TerrainPoint' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:41:12: warning: member variable 'latitude' has public visibility [misc-non-private-member-variables-in-classes]
   41 |     double latitude;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:42:12: warning: member variable 'longitude' has public visibility [misc-non-private-member-variables-in-classes]
   42 |     double longitude;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:43:12: warning: member variable 'elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
   43 |     double elevation_m;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:44:12: warning: member variable 'distance_km' has public visibility [misc-non-private-member-variables-in-classes]
   44 |     double distance_km;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:46:5: warning: 'TerrainPoint' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   46 |     TerrainPoint() : latitude(0.0), longitude(0.0), elevation_m(0.0), distance_km(0.0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:5: warning: 'TerrainPoint' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:18: warning: 4 adjacent parameters of 'TerrainPoint' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:25: note: the first parameter in the range is 'lat'
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                         ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:62: note: the last parameter in the range is 'dist'
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                                                              ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:55: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                                                       ^           ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: warning: accessing fields in struct 'TerrainProfile' is inefficient due to padding; only needs 65 bytes but is using 72 bytes [altera-struct-pack-align]
   54 | struct TerrainProfile {
      |        ^
   55 |     std::vector<TerrainPoint> points;
   56 |     double max_elevation_m;
   57 |     double min_elevation_m;
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
   65 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'TerrainProfile'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: warning: accessing fields in struct 'TerrainProfile' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   54 | struct TerrainProfile {
      |        ^
   55 |     std::vector<TerrainPoint> points;
   56 |     double max_elevation_m;
   57 |     double min_elevation_m;
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
   65 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: note: use "__attribute__((aligned(128)))" to align struct 'TerrainProfile' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:55:31: warning: member variable 'points' has public visibility [misc-non-private-member-variables-in-classes]
   55 |     std::vector<TerrainPoint> points;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:56:12: warning: use default member initializer for 'max_elevation_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   56 |     double max_elevation_m;
      |            ^              
      |                           {0.0}
   57 |     double min_elevation_m;
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |                        ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:56:12: warning: member variable 'max_elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:57:12: warning: use default member initializer for 'min_elevation_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   57 |     double min_elevation_m;
      |            ^              
      |                           {0.0}
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |                                              ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:57:12: warning: member variable 'min_elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:58:12: warning: use default member initializer for 'average_elevation_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   58 |     double average_elevation_m;
      |            ^                  
      |                               {0.0}
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:58:12: warning: member variable 'average_elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:59:10: warning: use default member initializer for 'line_of_sight_clear' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   59 |     bool line_of_sight_clear;
      |          ^                  
      |                             {true}
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:59:10: warning: member variable 'line_of_sight_clear' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:60:12: warning: use default member initializer for 'obstruction_height_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   60 |     double obstruction_height_m;
      |            ^                   
      |                                {0.0}
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
      |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:60:12: warning: member variable 'obstruction_height_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:61:12: warning: use default member initializer for 'obstruction_distance_km' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   61 |     double obstruction_distance_km;
      |            ^                      
      |                                   {0.0}
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
      |                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:61:12: warning: member variable 'obstruction_distance_km' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:63:5: warning: 'TerrainProfile' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: warning: accessing fields in struct 'ObstructionResult' is inefficient due to padding; only needs 74 bytes but is using 88 bytes [altera-struct-pack-align]
   70 | struct ObstructionResult {
      |        ^
   71 |     bool blocked;
   72 |     double obstruction_height_m;
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
   83 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ObstructionResult'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: warning: accessing fields in struct 'ObstructionResult' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   70 | struct ObstructionResult {
      |        ^
   71 |     bool blocked;
   72 |     double obstruction_height_m;
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
   83 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: note: use "__attribute__((aligned(128)))" to align struct 'ObstructionResult' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:71:10: warning: use default member initializer for 'blocked' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   71 |     bool blocked;
      |          ^      
      |                 {false}
   72 |     double obstruction_height_m;
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |                           ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:71:10: warning: member variable 'blocked' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:72:12: warning: use default member initializer for 'obstruction_height_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   72 |     double obstruction_height_m;
      |            ^                   
      |                                {0.0}
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:72:12: warning: member variable 'obstruction_height_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:73:12: warning: use default member initializer for 'obstruction_distance_km' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   73 |     double obstruction_distance_km;
      |            ^                      
      |                                   {0.0}
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:73:12: warning: member variable 'obstruction_distance_km' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:74:12: warning: use default member initializer for 'terrain_loss_db' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   74 |     double terrain_loss_db;
      |            ^              
      |                           {0.0}
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
      |                          ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:74:12: warning: member variable 'terrain_loss_db' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:75:12: warning: use default member initializer for 'diffraction_loss_db' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   75 |     double diffraction_loss_db;
      |            ^                  
      |                               {0.0}
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
      |                                                ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:75:12: warning: member variable 'diffraction_loss_db' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:76:10: warning: use default member initializer for 'fresnel_zone_clear' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   76 |     bool fresnel_zone_clear;
      |          ^                 
      |                            {true}
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
      |                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:76:10: warning: member variable 'fresnel_zone_clear' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:77:12: warning: use default member initializer for 'fresnel_clearance_percent' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   77 |     double fresnel_clearance_percent;
      |            ^                        
      |                                     {0.0}
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:77:12: warning: member variable 'fresnel_clearance_percent' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:78:17: warning: member variable 'obstruction_type' has public visibility [misc-non-private-member-variables-in-classes]
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:80:5: warning: 'ObstructionResult' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:82:58: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: warning: accessing fields in struct 'FresnelZoneResult' is inefficient due to padding; only needs 33 bytes but is using 40 bytes [altera-struct-pack-align]
   88 | struct FresnelZoneResult {
      |        ^
   89 |     double fresnel_radius_m;
   90 |     double clearance_percent;
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
   97 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FresnelZoneResult'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: warning: accessing fields in struct 'FresnelZoneResult' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   88 | struct FresnelZoneResult {
      |        ^
   89 |     double fresnel_radius_m;
   90 |     double clearance_percent;
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
   97 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: note: use "__attribute__((aligned(64)))" to align struct 'FresnelZoneResult' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:89:12: warning: use default member initializer for 'fresnel_radius_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   89 |     double fresnel_radius_m;
      |            ^               
      |                            {0.0}
   90 |     double clearance_percent;
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |                           ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:89:12: warning: member variable 'fresnel_radius_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:90:12: warning: use default member initializer for 'clearance_percent' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   90 |     double clearance_percent;
      |            ^                
      |                             {0.0}
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |                                                  ~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:90:12: warning: member variable 'clearance_percent' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:91:10: warning: use default member initializer for 'zone_clear' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   91 |     bool zone_clear;
      |          ^         
      |                    {true}
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |                                                                          ~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:91:10: warning: member variable 'zone_clear' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:92:12: warning: use default member initializer for 'required_clearance_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   92 |     double required_clearance_m;
      |            ^                   
      |                                {0.0}
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:92:12: warning: member variable 'required_clearance_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:93:12: warning: use default member initializer for 'actual_clearance_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   93 |     double actual_clearance_m;
      |            ^                 
      |                              {0.0}
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
      |                                                     ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:93:12: warning: member variable 'actual_clearance_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:95:5: warning: 'FresnelZoneResult' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: warning: accessing fields in struct 'ASTERGDEMTile' is inefficient due to padding; only needs 105 bytes but is using 112 bytes [altera-struct-pack-align]
  102 | struct ASTERGDEMTile {
      |        ^
  103 |     std::string filename;
  104 |     double min_lat, max_lat;
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
  112 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ASTERGDEMTile'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: warning: accessing fields in struct 'ASTERGDEMTile' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  102 | struct ASTERGDEMTile {
      |        ^
  103 |     std::string filename;
  104 |     double min_lat, max_lat;
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
  112 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: use "__attribute__((aligned(128)))" to align struct 'ASTERGDEMTile' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:103:17: warning: member variable 'filename' has public visibility [misc-non-private-member-variables-in-classes]
  103 |     std::string filename;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:12: warning: use default member initializer for 'min_lat' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  104 |     double min_lat, max_lat;
      |            ^      
      |                   {0.0}
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                       ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:12: warning: member variable 'min_lat' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:21: warning: use default member initializer for 'max_lat' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  104 |     double min_lat, max_lat;
      |                     ^      
      |                            {0.0}
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                                     ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:21: warning: member variable 'max_lat' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:12: warning: use default member initializer for 'min_lon' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  105 |     double min_lon, max_lon;
      |            ^      
      |                   {0.0}
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                                                   ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:12: warning: member variable 'min_lon' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:21: warning: use default member initializer for 'max_lon' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  105 |     double min_lon, max_lon;
      |                     ^      
      |                            {0.0}
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                                                                 ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:21: warning: member variable 'max_lon' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:106:17: warning: member variable 'file_path' has public visibility [misc-non-private-member-variables-in-classes]
  106 |     std::string file_path;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:107:10: warning: use default member initializer for 'loaded' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  107 |     bool loaded;
      |          ^     
      |                {false}
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
      |                      ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:107:10: warning: member variable 'loaded' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:108:12: warning: use default member initializer for 'file_size_bytes' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  108 |     size_t file_size_bytes;
      |            ^              
      |                           {0}
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
      |                                     ~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:108:12: warning: member variable 'file_size_bytes' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:110:5: warning: 'ASTERGDEMTile' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: warning: accessing fields in struct 'TerrainElevationConfig' is inefficient due to padding; only needs 142 bytes but is using 184 bytes [altera-struct-pack-align]
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'TerrainElevationConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: warning: accessing fields in struct 'TerrainElevationConfig' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: use "__attribute__((aligned(128)))" to align struct 'TerrainElevationConfig' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: warning: Excessive padding in 'struct TerrainElevationConfig' (42 padding bytes, where 2 is optimal). Optimal fields order: cache_size_mb, terrain_resolution_m, fresnel_clearance_percent, max_profile_distance_km, profile_cache_size_mb, elevation_source, data_path, download_url, enabled, auto_download, enable_obstruction_detection, enable_fresnel_zone, enable_diffraction, enable_profile_caching, consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
  117 | struct TerrainElevationConfig {
      | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
  118 |     bool enabled;
      |     ~~~~~~~~~~~~~
  119 |     std::string elevation_source;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  120 |     std::string data_path;
      |     ~~~~~~~~~~~~~~~~~~~~~~
  121 |     bool auto_download;
      |     ~~~~~~~~~~~~~~~~~~~
  122 |     std::string download_url;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  123 |     size_t cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~
  124 |     bool enable_obstruction_detection;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  125 |     double terrain_resolution_m;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  126 |     bool enable_fresnel_zone;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     double fresnel_clearance_percent;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  128 |     bool enable_diffraction;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     double max_profile_distance_km;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  130 |     bool enable_profile_caching;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 |     size_t profile_cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  132 |     
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: Excessive padding in 'struct TerrainElevationConfig' (42 padding bytes, where 2 is optimal). Optimal fields order: cache_size_mb, terrain_resolution_m, fresnel_clearance_percent, max_profile_distance_km, profile_cache_size_mb, elevation_source, data_path, download_url, enabled, auto_download, enable_obstruction_detection, enable_fresnel_zone, enable_diffraction, enable_profile_caching, consider reordering the fields or adding explicit padding members
  117 | struct TerrainElevationConfig {
      | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
  118 |     bool enabled;
      |     ~~~~~~~~~~~~~
  119 |     std::string elevation_source;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  120 |     std::string data_path;
      |     ~~~~~~~~~~~~~~~~~~~~~~
  121 |     bool auto_download;
      |     ~~~~~~~~~~~~~~~~~~~
  122 |     std::string download_url;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  123 |     size_t cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~
  124 |     bool enable_obstruction_detection;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  125 |     double terrain_resolution_m;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  126 |     bool enable_fresnel_zone;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     double fresnel_clearance_percent;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  128 |     bool enable_diffraction;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     double max_profile_distance_km;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  130 |     bool enable_profile_caching;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 |     size_t profile_cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  132 |     
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:118:10: warning: use default member initializer for 'enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  118 |     bool enabled;
      |          ^      
      |                 {false}
  119 |     std::string elevation_source;
  120 |     std::string data_path;
  121 |     bool auto_download;
  122 |     std::string download_url;
  123 |     size_t cache_size_mb;
  124 |     bool enable_obstruction_detection;
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
      |                                ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:118:10: warning: member variable 'enabled' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:119:17: warning: member variable 'elevation_source' has public visibility [misc-non-private-member-variables-in-classes]
  119 |     std::string elevation_source;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:120:17: warning: member variable 'data_path' has public visibility [misc-non-private-member-variables-in-classes]
  120 |     std::string data_path;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:121:10: warning: use default member initializer for 'auto_download' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  121 |     bool auto_download;
      |          ^            
      |                       {false}
  122 |     std::string download_url;
  123 |     size_t cache_size_mb;
  124 |     bool enable_obstruction_detection;
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
      |                                                                                ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:121:10: warning: member variable 'auto_download' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:122:17: warning: member variable 'download_url' has public visibility [misc-non-private-member-variables-in-classes]
  122 |     std::string download_url;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:123:12: warning: use default member initializer for 'cache_size_mb' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  123 |     size_t cache_size_mb;
      |            ^            
      |                         {1000}
  124 |     bool enable_obstruction_detection;
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
      |                               ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:123:12: warning: member variable 'cache_size_mb' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:124:10: warning: use default member initializer for 'enable_obstruction_detection' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  124 |     bool enable_obstruction_detection;
      |          ^                           
      |                                      {true}
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
      |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:124:10: warning: member variable 'enable_obstruction_detection' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:125:12: warning: use default member initializer for 'terrain_resolution_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  125 |     double terrain_resolution_m;
      |            ^                   
      |                                {30.0}
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:125:12: warning: member variable 'terrain_resolution_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:126:10: warning: use default member initializer for 'enable_fresnel_zone' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  126 |     bool enable_fresnel_zone;
      |          ^                  
      |                             {true}
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
      |                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:126:10: warning: member variable 'enable_fresnel_zone' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:127:12: warning: use default member initializer for 'fresnel_clearance_percent' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  127 |     double fresnel_clearance_percent;
      |            ^                        
      |                                     {0.6}
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:127:12: warning: member variable 'fresnel_clearance_percent' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:128:10: warning: use default member initializer for 'enable_diffraction' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  128 |     bool enable_diffraction;
      |          ^                 
      |                            {true}
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
      |                                                               ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:128:10: warning: member variable 'enable_diffraction' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:129:12: warning: use default member initializer for 'max_profile_distance_km' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  129 |     double max_profile_distance_km;
      |            ^                      
      |                                   {100.0}
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
  139 |                               max_profile_distance_km(100.0), enable_profile_caching(true),
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:129:12: warning: member variable 'max_profile_distance_km' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:130:10: warning: use default member initializer for 'enable_profile_caching' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  130 |     bool enable_profile_caching;
      |          ^                     
      |                                {true}
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
  139 |                               max_profile_distance_km(100.0), enable_profile_caching(true),
      |                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:130:10: warning: member variable 'enable_profile_caching' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:131:12: warning: use default member initializer for 'profile_cache_size_mb' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  131 |     size_t profile_cache_size_mb;
      |            ^                    
      |                                 {500}
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
  139 |                               max_profile_distance_km(100.0), enable_profile_caching(true),
  140 |                               profile_cache_size_mb(500) {}
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:131:12: warning: member variable 'profile_cache_size_mb' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:133:5: warning: 'TerrainElevationConfig' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:133:48: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:134:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:135:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:136:45: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:137:52: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:138:57: warning: 0.6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:140:53: warning: 500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  140 |                               profile_cache_size_mb(500) {}
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:146:7: warning: class 'FGCom_TerrainElevationManager' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  146 | class FGCom_TerrainElevationManager {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:174:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     bool initialize(const TerrainElevationConfig& config);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:176:5: warning: 'isInitialized' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  176 |     bool isInitialized() const { return initialized.load(); }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool isInitialized() const { return initialized.load(); }
      |     ~~~~ ^
      |     auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:176:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  176 |     bool isInitialized() const { return initialized.load(); }
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:180:5: warning: 'getConfig' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  180 |     TerrainElevationConfig getConfig() const { return config; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:180:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  180 |     TerrainElevationConfig getConfig() const { return config; }
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                     -> TerrainElevationConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:183:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     double getElevation(double latitude, double longitude);
      |     ~~~~~~ ^                                              
      |     auto                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:184:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     TerrainProfile getTerrainProfile(double lat1, double lon1, double lat2, double lon2, 
      |     ~~~~~~~~~~~~~~ ^
      |     auto
  185 |                                    double resolution_m = 30.0);
      |                                                               
      |                                                                -> TerrainProfile
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:185:36: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  185 |                                    double resolution_m = 30.0);
      |                                    ^                   ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:185:58: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  185 |                                    double resolution_m = 30.0);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:186:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     ObstructionResult analyzeObstruction(double lat1, double lon1, double alt1,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  187 |                                         double lat2, double lon2, double alt2,
  188 |                                         double frequency_mhz);
      |                                                              
      |                                                               -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:191:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     bool loadASTERGDEMTile(double latitude, double longitude);
      |     ~~~~ ^                                                   
      |     auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:192:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     std::vector<ASTERGDEMTile> getAvailableTiles() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                        
      |     auto                                                 -> std::vector<ASTERGDEMTile>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:193:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     bool downloadASTERGDEMTile(const std::string& tile_name);
      |     ~~~~ ^                                                  
      |     auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:196:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |     FresnelZoneResult calculateFresnelZone(double lat1, double lon1, double alt1,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  197 |                                          double lat2, double lon2, double alt2,
  198 |                                          double frequency_mhz);
      |                                                               
      |                                                                -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:201:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     double calculateDiffractionLoss(double obstruction_height_m, double distance_km,
      |     ~~~~~~ ^
      |     auto
  202 |                                   double frequency_mhz);
      |                                                        
      |                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:207:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  207 |     size_t getCacheSize() const;
      |     ~~~~~~ ^                   
      |     auto                        -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:208:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     size_t getProfileCacheSize() const;
      |     ~~~~~~ ^                          
      |     auto                               -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:211:12: warning: accessing fields in struct 'Statistics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  211 |     struct Statistics {
      |            ^
  212 |         size_t tiles_loaded;
  213 |         size_t profiles_calculated;
  214 |         size_t cache_hits;
  215 |         size_t cache_misses;
  216 |         double cache_hit_rate;
  217 |         size_t memory_usage_mb;
  218 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:211:12: note: use "__attribute__((aligned(64)))" to align struct 'Statistics' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:219:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     Statistics getStatistics() const;
      |     ~~~~~~~~~~ ^                    
      |     auto                             -> Statistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:222:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 |     std::string getLastError() const;
      |     ~~~~~~~~~~~ ^                   
      |     auto                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:227:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     std::string getTileName(double latitude, double longitude) const;
      |     ~~~~~~~~~~~ ^                                                   
      |     auto                                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:228:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     bool loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile);
      |     ~~~~ ^                                                                  
      |     auto                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:229:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     double interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon);
      |     ~~~~~~ ^                                                                      
      |     auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:230:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  230 |     std::vector<TerrainPoint> generateProfilePoints(double lat1, double lon1, 
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  231 |                                                    double lat2, double lon2, 
  232 |                                                    double resolution_m);
      |                                                                        
      |                                                                         -> std::vector<TerrainPoint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:233:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     bool isPointInTile(const ASTERGDEMTile& tile, double lat, double lon) const;
      |     ~~~~ ^                                                                     
      |     auto                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:241:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  241 |     bool isCacheFull() const;
      |     ~~~~ ^                  
      |     auto                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:251:7: warning: class 'FGCom_ASTERGDEMLoader' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  251 | class FGCom_ASTERGDEMLoader {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:262:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  262 |     bool loadTile(double latitude, double longitude, ASTERGDEMTile& tile);
      |     ~~~~ ^                                                               
      |     auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:263:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  263 |     bool downloadTile(const std::string& tile_name);
      |     ~~~~ ^                                         
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:264:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 |     std::vector<std::string> getAvailableTiles() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                        
      |     auto                                               -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:265:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     bool isTileAvailable(double latitude, double longitude) const;
      |     ~~~~ ^                                                       
      |     auto                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:268:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  268 |     std::string getTilePath(double latitude, double longitude) const;
      |     ~~~~~~~~~~~ ^                                                   
      |     auto                                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:269:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  269 |     std::string getTileFilename(double latitude, double longitude) const;
      |     ~~~~~~~~~~~ ^                                                       
      |     auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:270:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  270 |     bool createDataDirectory();
      |     ~~~~ ^                    
      |     auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:273:5: warning: 'setDownloadEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  273 |     void setDownloadEnabled(bool enabled) { download_enabled.store(enabled); }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:273:45: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  273 |     void setDownloadEnabled(bool enabled) { download_enabled.store(enabled); }
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:274:5: warning: 'isDownloadEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  274 |     bool isDownloadEnabled() const { return download_enabled.load(); }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:274:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  274 |     bool isDownloadEnabled() const { return download_enabled.load(); }
      |     ~~~~ ^
      |     auto                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:274:45: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  274 |     bool isDownloadEnabled() const { return download_enabled.load(); }
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:277:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  277 |     std::string getLastError() const;
      |     ~~~~~~~~~~~ ^                   
      |     auto                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:282:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  282 |     std::string constructDownloadURL(const std::string& tile_name) const;
      |     ~~~~~~~~~~~ ^                                                       
      |     auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:283:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  283 |     bool downloadFile(const std::string& url, const std::string& filepath);
      |     ~~~~ ^                                                                
      |     auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:297:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
  297 |     FGCom_TerrainObstructionAnalyzer(double fresnel_clearance = 0.6, 
      |     ^
      |     explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:297:38: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  297 |     FGCom_TerrainObstructionAnalyzer(double fresnel_clearance = 0.6, 
      |                                      ^                        ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:297:65: warning: 0.6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  297 |     FGCom_TerrainObstructionAnalyzer(double fresnel_clearance = 0.6, 
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:298:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  298 |                                     bool enable_diffraction = true,
      |                                     ^                       ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:299:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  299 |                                     bool enable_fresnel = true);
      |                                     ^                   ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:302:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  302 |     ObstructionResult analyzeObstruction(const TerrainProfile& profile,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  303 |                                        double alt1, double alt2,
  304 |                                        double frequency_mhz);
      |                                                             
      |                                                              -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:307:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     FresnelZoneResult calculateFresnelZone(const TerrainProfile& profile,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  308 |                                          double alt1, double alt2,
  309 |                                          double frequency_mhz);
      |                                                               
      |                                                                -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:312:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  312 |     double calculateDiffractionLoss(double obstruction_height_m, double distance_km,
      |     ~~~~~~ ^
      |     auto
  313 |                                   double frequency_mhz);
      |                                                        
      |                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:316:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  316 |     bool isLineOfSightClear(const TerrainProfile& profile, double alt1, double alt2);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:319:5: warning: 'setFresnelClearancePercent' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  319 |     void setFresnelClearancePercent(double percent) { fresnel_clearance_percent = percent; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:320:5: warning: 'setDiffractionEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  320 |     void setDiffractionEnabled(bool enabled) { enable_diffraction = enabled; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:321:5: warning: 'setFresnelZoneEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  321 |     void setFresnelZoneEnabled(bool enabled) { enable_fresnel_zone = enabled; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:324:5: warning: function 'calculateFresnelRadius' should be marked [[nodiscard]] [modernize-use-nodiscard]
  324 |     double calculateFresnelRadius(double distance_km, double frequency_mhz) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:324:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  324 |     double calculateFresnelRadius(double distance_km, double frequency_mhz) const;
      |     ~~~~~~ ^                                                                     
      |     auto                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:325:5: warning: function 'calculateRequiredClearance' should be marked [[nodiscard]] [modernize-use-nodiscard]
  325 |     double calculateRequiredClearance(const TerrainProfile& profile, double alt1, double alt2) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:325:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  325 |     double calculateRequiredClearance(const TerrainProfile& profile, double alt1, double alt2) const;
      |     ~~~~~~ ^                                                                                        
      |     auto                                                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:326:5: warning: function 'checkFresnelZoneClearance' should be marked [[nodiscard]] [modernize-use-nodiscard]
  326 |     bool checkFresnelZoneClearance(const TerrainProfile& profile, double alt1, double alt2,
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:326:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  326 |     bool checkFresnelZoneClearance(const TerrainProfile& profile, double alt1, double alt2,
      |     ~~~~ ^
      |     auto
  327 |                                  double frequency_mhz) const;
      |                                                             
      |                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:2:1: warning: #includes are not sorted properly [llvm-include-order]
    2 | #include "terrain_exceptions.h"
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:7:1: warning: system include stdexcept not allowed [llvmlibc-restrict-system-libc-headers]
    7 | #include <stdexcept>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:7:1: warning: included header stdexcept is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:8:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
    8 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    9 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:9:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
    9 | #include <sstream>
      | ^~~~~~~~~~~~~~~~~~
   10 | #include <iomanip>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:10:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
   10 | #include <iomanip>
      | ^~~~~~~~~~~~~~~~~~
   11 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:11:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   11 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   12 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:12:1: warning: system include chrono not allowed [llvmlibc-restrict-system-libc-headers]
   12 | #include <chrono>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:12:1: warning: included header chrono is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:14:11: warning: the outermost namespace should be the 'LIBC_NAMESPACE' macro [llvmlibc-implementation-in-namespace]
   14 | namespace FGCom_TerrainEnvironmental {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:22:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   22 |     double Coordinate::getLatitude() const noexcept {
      |     ~~~~~~             ^
      |     auto                                            -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:26:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   26 |     double Coordinate::getLongitude() const noexcept {
      |     ~~~~~~             ^
      |     auto                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:30:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   30 |     double Coordinate::getAltitude() const noexcept {
      |     ~~~~~~             ^
      |     auto                                            -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:34:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   34 |     bool Coordinate::isValid() const noexcept {
      |     ~~~~             ^
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:40:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   40 |     double Coordinate::calculateDistance(const Coordinate& other) const {
      |     ~~~~~~             ^
      |     auto                                                                -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:42:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   42 |             throw InvalidCoordinateException("Invalid coordinates for distance calculation");
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:46:22: warning: variable name 'R' is too short, expected at least 3 characters [readability-identifier-length]
   46 |         const double R = 6371000.0; // Earth radius in meters
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:47:45: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
    7 |         const double lat1_rad = latitude_ * M_PI / 180.0;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:52:22: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   52 |         const double a = std::sin(delta_lat / 2.0) * std::sin(delta_lat / 2.0) +
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:55:22: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   55 |         const double c = 2.0 * std::atan2(std::sqrt(a), std::sqrt(1.0 - a));
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:60:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   60 |     std::string Coordinate::toString() const {
      |     ~~~~~~~~~~~             ^
      |     auto                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:62:13: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |         oss << std::fixed << std::setprecision(6);
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:129:7: note: resolves to this declaration
  129 |       operator<<(ios_base& (*__pf) (ios_base&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:62:16: warning: 'fixed' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |         oss << std::fixed << std::setprecision(6);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/ios_base.h:1084:3: note: resolves to this declaration
 1084 |   fixed(ios_base& __base)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:62:21: warning: no header providing "std::fixed" is directly included [misc-include-cleaner]
    7 |         oss << std::fixed << std::setprecision(6);
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:62:27: warning: 'operator<<<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |         oss << std::fixed << std::setprecision(6);
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/iomanip:210:5: note: resolves to this declaration
  210 |     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:62:30: warning: 'setprecision' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |         oss << std::fixed << std::setprecision(6);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/iomanip:197:3: note: resolves to this declaration
  197 |   setprecision(int __n)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:62:48: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   62 |         oss << std::fixed << std::setprecision(6);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:63:13: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |         oss << "(" << latitude_ << ", " << longitude_ << ", " << altitude_ << ")";
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:63:20: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |         oss << "(" << latitude_ << ", " << longitude_ << ", " << altitude_ << ")";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:63:33: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |         oss << "(" << latitude_ << ", " << longitude_ << ", " << altitude_ << ")";
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:63:41: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |         oss << "(" << latitude_ << ", " << longitude_ << ", " << altitude_ << ")";
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:63:55: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |         oss << "(" << latitude_ << ", " << longitude_ << ", " << altitude_ << ")";
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:63:63: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |         oss << "(" << latitude_ << ", " << longitude_ << ", " << altitude_ << ")";
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:63:76: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |         oss << "(" << latitude_ << ", " << longitude_ << ", " << altitude_ << ")";
      |                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:67:22: warning: method 'validateCoordinates' can be made static [readability-convert-member-functions-to-static]
   67 |     void Coordinate::validateCoordinates(double lat, double lon, double alt) const {
      |                      ^                                                       ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:69:72: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |             throw InvalidCoordinateException("Latitude out of range: " + std::to_string(lat));
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:69:74: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |             throw InvalidCoordinateException("Latitude out of range: " + std::to_string(lat));
      |                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:69:79: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
   13 |             throw InvalidCoordinateException("Latitude out of range: " + std::to_string(lat));
      |                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:72:73: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   72 |             throw InvalidCoordinateException("Longitude out of range: " + std::to_string(lon));
      |                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:72:75: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   72 |             throw InvalidCoordinateException("Longitude out of range: " + std::to_string(lon));
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:75:72: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |             throw InvalidCoordinateException("Altitude out of range: " + std::to_string(alt));
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:75:74: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |             throw InvalidCoordinateException("Altitude out of range: " + std::to_string(alt));
      |                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:77:14: warning: 'isfinite' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   77 |         if (!std::isfinite(lat) || !std::isfinite(lon) || !std::isfinite(alt)) {
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/cmath:1126:3: note: resolves to this declaration
 1126 |   isfinite(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:77:37: warning: 'isfinite' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   77 |         if (!std::isfinite(lat) || !std::isfinite(lon) || !std::isfinite(alt)) {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/cmath:1126:3: note: resolves to this declaration
 1126 |   isfinite(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:77:60: warning: 'isfinite' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   77 |         if (!std::isfinite(lat) || !std::isfinite(lon) || !std::isfinite(alt)) {
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/cmath:1126:3: note: resolves to this declaration
 1126 |   isfinite(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:78:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   78 |             throw InvalidCoordinateException("Non-finite coordinate values");
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:88:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     bool LineOfSightData::isValid() const noexcept {
      |     ~~~~                  ^
      |     auto                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:90:36: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   90 |                clearance_angle >= -90.0 && clearance_angle <= 90.0;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:90:63: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   90 |                clearance_angle >= -90.0 && clearance_angle <= 90.0;
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:95:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   95 |         : ground_altitude(0.0), terrain_type("unknown"), surface_material("unknown") {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:95:58: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   95 |         : ground_altitude(0.0), terrain_type("unknown"), surface_material("unknown") {
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:98:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   98 |     bool TerrainAltitudeData::isValid() const noexcept {
      |     ~~~~                      ^
      |     auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:99:36: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   99 |         return ground_altitude >= -500.0 && ground_altitude <= 10000.0 &&
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:99:64: warning: 10000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   99 |         return ground_altitude >= -500.0 && ground_altitude <= 10000.0 &&
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:104:5: warning: constructor does not initialize these fields: noise_breakdown [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  104 |     NoiseFloorData::NoiseFloorData() noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:105:32: warning: 120.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  105 |         : ambient_noise_level(-120.0), atmospheric_noise(-115.0), man_made_noise(-110.0),
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:105:59: warning: 115.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  105 |         : ambient_noise_level(-120.0), atmospheric_noise(-115.0), man_made_noise(-110.0),
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:105:83: warning: 110.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  105 |         : ambient_noise_level(-120.0), atmospheric_noise(-115.0), man_made_noise(-110.0),
      |                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:106:30: warning: 108.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |           total_noise_floor(-108.0), environment_type("rural") {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:106:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  106 |           total_noise_floor(-108.0), environment_type("rural") {
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:109:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 |     bool NoiseFloorData::isValid() const noexcept {
      |     ~~~~                 ^
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:110:40: warning: 200.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  110 |         return ambient_noise_level >= -200.0 && ambient_noise_level <= 0.0 &&
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:111:38: warning: 200.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  111 |                atmospheric_noise >= -200.0 && atmospheric_noise <= 0.0 &&
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:112:35: warning: 200.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  112 |                man_made_noise >= -200.0 && man_made_noise <= 0.0 &&
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:113:38: warning: 200.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  113 |                total_noise_floor >= -200.0 && total_noise_floor <= 0.0 &&
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:118:51: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
    7 |     TerrainDataProvider::TerrainDataProvider(std::unique_ptr<TerrainDataAccess> dataAccess,
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:121:29: warning: no header providing "std::move" is directly included [misc-include-cleaner]
   13 |         : data_access_(std::move(dataAccess)),
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:124:26: warning: 'make_unique<FGCom_TerrainEnvironmental::TerrainStateMachine>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  124 |           state_machine_(std::make_unique<TerrainStateMachine>()) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:124:31: warning: no header providing "std::make_unique" is directly included [misc-include-cleaner]
  124 |           state_machine_(std::make_unique<TerrainStateMachine>()) {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:127:42: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  127 |             throw ConfigurationException("TerrainDataAccess cannot be null");
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:132:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  132 |             cache_ = std::make_unique<TerrainCache>();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:132:22: warning: 'make_unique<FGCom_TerrainEnvironmental::TerrainCache>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  132 |             cache_ = std::make_unique<TerrainCache>();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:135:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |             statistics_ = std::make_unique<TerrainStatistics>();
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:135:27: warning: 'make_unique<FGCom_TerrainEnvironmental::TerrainStatistics>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |             statistics_ = std::make_unique<TerrainStatistics>();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:148:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     TerrainDataProvider& TerrainDataProvider::operator=(TerrainDataProvider&& other) noexcept {
      |     ~~~~~~~~~~~~~~~~~~~~                      ^
      |     auto                                                                                      -> TerrainDataProvider&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:150:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  150 |             data_access_ = std::move(other.data_access_);
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:151:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |             cache_ = std::move(other.cache_);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:152:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |             statistics_ = std::move(other.statistics_);
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:153:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |             state_machine_ = std::move(other.state_machine_);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:158:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  158 |     LineOfSightData TerrainDataProvider::checkLineOfSight(const Coordinate& transmitter, 
      |     ~~~~~~~~~~~~~~~                      ^
      |     auto
  159 |                                                        const Coordinate& receiver) {
      |                                                                                    -> LineOfSightData
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:161:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  161 |             throw InvalidCoordinateException("Invalid transmitter or receiver coordinates");
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:164:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  164 |         if (!state_machine_->canPerformOperations()) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:165:40: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  165 |             throw TerrainDataException("Terrain provider not ready for operations");
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:168:43: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  168 |         TerrainOperationRecorder recorder(*statistics_, "los_check");
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:451:7: note: resolves to this declaration
  451 |       operator*() const noexcept(noexcept(*std::declval<pointer>()))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:168:57: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  168 |         TerrainOperationRecorder recorder(*statistics_, "los_check");
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:171:13: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  171 |             std::lock_guard<std::mutex> lock(operation_mutex_);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:171:18: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
    7 |             std::lock_guard<std::mutex> lock(operation_mutex_);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:171:34: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
  171 |             std::lock_guard<std::mutex> lock(operation_mutex_);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:176:13: warning: variable 'distance' of type 'double' can be declared 'const' [misc-const-correctness]
  176 |             double distance = transmitter.calculateDistance(receiver);
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:179:13: warning: variable 'tx_height' of type 'double' can be declared 'const' [misc-const-correctness]
  179 |             double tx_height = data_access_->getTerrainHeight(transmitter.getLatitude(), 
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:179:44: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  179 |             double tx_height = data_access_->getTerrainHeight(transmitter.getLatitude(), 
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:181:13: warning: variable 'rx_height' of type 'double' can be declared 'const' [misc-const-correctness]
  181 |             double rx_height = data_access_->getTerrainHeight(receiver.getLatitude(), 
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:181:44: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |             double rx_height = data_access_->getTerrainHeight(receiver.getLatitude(), 
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:187:85: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  187 |             result.obstruction_distance = result.line_of_sight_blocked ? distance / 2.0 : 0.0;
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:188:41: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  188 |             result.obstruction_height = std::max(tx_height, rx_height);
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:191:13: warning: variable 'altitude_diff' of type 'double' can be declared 'const' [misc-const-correctness]
  191 |             double altitude_diff = receiver.getAltitude() - transmitter.getAltitude();
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:192:76: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  192 |             result.clearance_angle = std::atan2(altitude_diff, distance) * 180.0 / M_PI;
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:196:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  196 |             for (int i = 0; i <= 10; ++i) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:196:34: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  196 |             for (int i = 0; i <= 10; ++i) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:197:17: warning: variable 'fraction' of type 'double' can be declared 'const' [misc-const-correctness]
  197 |                 double fraction = static_cast<double>(i) / 10.0;
      |                 ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:197:60: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  197 |                 double fraction = static_cast<double>(i) / 10.0;
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:198:17: warning: variable 'lat' of type 'double' can be declared 'const' [misc-const-correctness]
  198 |                 double lat = transmitter.getLatitude() + 
      |                 ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:200:17: warning: variable 'lon' of type 'double' can be declared 'const' [misc-const-correctness]
  200 |                 double lon = transmitter.getLongitude() + 
      |                 ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:203:17: warning: variable 'terrain_height' of type 'double' can be declared 'const' [misc-const-correctness]
  203 |                 double terrain_height = data_access_->getTerrainHeight(lat, lon);
      |                 ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:203:53: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  203 |                 double terrain_height = data_access_->getTerrainHeight(lat, lon);
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:210:29: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
    7 |         } catch (const std::exception& e) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:211:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  211 |             recorder.markFailure("los_calculation_error");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:212:77: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  212 |             throw CalculationException("Line of sight calculation failed: " + std::string(e.what()));
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:212:79: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  212 |             throw CalculationException("Line of sight calculation failed: " + std::string(e.what()));
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:216:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     TerrainAltitudeData TerrainDataProvider::getTerrainAltitude(const Coordinate& coordinate) {
      |     ~~~~~~~~~~~~~~~~~~~                      ^
      |     auto                                                                                      -> TerrainAltitudeData
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:218:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  218 |             throw InvalidCoordinateException("Invalid coordinate for terrain altitude query");
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:221:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |         if (!state_machine_->canPerformOperations()) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:222:40: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  222 |             throw TerrainDataException("Terrain provider not ready for operations");
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:225:43: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |         TerrainOperationRecorder recorder(*statistics_, "altitude_query");
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:451:7: note: resolves to this declaration
  451 |       operator*() const noexcept(noexcept(*std::declval<pointer>()))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:225:57: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  225 |         TerrainOperationRecorder recorder(*statistics_, "altitude_query");
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:228:13: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  228 |             std::lock_guard<std::mutex> lock(operation_mutex_);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:233:13: warning: variable 'terrain_height' of type 'double' can be declared 'const' [misc-const-correctness]
  233 |             double terrain_height = data_access_->getTerrainHeight(coordinate.getLatitude(), 
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:233:49: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  233 |             double terrain_height = data_access_->getTerrainHeight(coordinate.getLatitude(), 
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:237:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  237 |             result.terrain_type = "unknown"; // Would be determined by terrain analysis
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:238:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  238 |             result.surface_material = "unknown"; // Would be determined by terrain analysis
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:244:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  244 |             recorder.markFailure("altitude_query_error");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:245:74: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  245 |             throw TerrainDataException("Terrain altitude query failed: " + std::string(e.what()));
      |                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:245:76: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  245 |             throw TerrainDataException("Terrain altitude query failed: " + std::string(e.what()));
      |                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:249:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  249 |     EnvironmentalConditions TerrainDataProvider::getEnvironmentalConditions(const Coordinate& coordinate) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~                      ^
      |     auto                                                                                                  -> EnvironmentalConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:251:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  251 |             throw InvalidCoordinateException("Invalid coordinate for environmental query");
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:254:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  254 |         if (!state_machine_->canPerformOperations()) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:255:40: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  255 |             throw TerrainDataException("Terrain provider not ready for operations");
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:258:43: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  258 |         TerrainOperationRecorder recorder(*statistics_, "environmental_query");
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:451:7: note: resolves to this declaration
  451 |       operator*() const noexcept(noexcept(*std::declval<pointer>()))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:258:57: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  258 |         TerrainOperationRecorder recorder(*statistics_, "environmental_query");
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:261:13: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  261 |             std::lock_guard<std::mutex> lock(operation_mutex_);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:264:58: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  264 |             EnvironmentalConditions result = data_access_->getEnvironmentalConditions(
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:271:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  271 |             recorder.markFailure("environmental_query_error");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:272:77: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |             throw EnvironmentalDataException("Environmental query failed: " + std::string(e.what()));
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:272:79: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  272 |             throw EnvironmentalDataException("Environmental query failed: " + std::string(e.what()));
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:276:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     NoiseFloorData TerrainDataProvider::calculateNoiseFloor(const Coordinate& coordinate, 
      |     ~~~~~~~~~~~~~~                      ^
      |     auto
  277 |                                                           double frequency, 
  278 |                                                           const std::string& timeOfDay, 
  279 |                                                           const std::string& season) {
      |                                                                                      -> NoiseFloorData
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:278:59: warning: 2 adjacent parameters of 'calculateNoiseFloor' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  278 |                                                           const std::string& timeOfDay, 
      |                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  279 |                                                           const std::string& season) {
      |                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:278:78: note: the first parameter in the range is 'timeOfDay'
  278 |                                                           const std::string& timeOfDay, 
      |                                                                              ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:279:78: note: the last parameter in the range is 'season'
  279 |                                                           const std::string& season) {
      |                                                                              ^~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:278:78: warning: parameter 'timeOfDay' is unused [misc-unused-parameters]
  278 |                                                           const std::string& timeOfDay, 
      |                                                                              ^~~~~~~~~
      |                                                                               /*timeOfDay*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:279:78: warning: parameter 'season' is unused [misc-unused-parameters]
  279 |                                                           const std::string& season) {
      |                                                                              ^~~~~~
      |                                                                               /*season*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:281:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  281 |             throw InvalidCoordinateException("Invalid coordinate for noise floor calculation");
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:285:67: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  285 |             throw InvalidFrequencyException("Invalid frequency: " + std::to_string(frequency));
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:285:69: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  285 |             throw InvalidFrequencyException("Invalid frequency: " + std::to_string(frequency));
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:288:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  288 |         if (!state_machine_->canPerformOperations()) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:289:40: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  289 |             throw TerrainDataException("Terrain provider not ready for operations");
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:292:43: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  292 |         TerrainOperationRecorder recorder(*statistics_, "noise_calculation");
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:451:7: note: resolves to this declaration
  451 |       operator*() const noexcept(noexcept(*std::declval<pointer>()))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:292:57: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  292 |         TerrainOperationRecorder recorder(*statistics_, "noise_calculation");
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:295:13: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  295 |             std::lock_guard<std::mutex> lock(operation_mutex_);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:300:13: warning: variable 'env' of type 'EnvironmentalConditions' can be declared 'const' [misc-const-correctness]
  300 |             EnvironmentalConditions env = data_access_->getEnvironmentalConditions(
      |             ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:300:55: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |             EnvironmentalConditions env = data_access_->getEnvironmentalConditions(
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:307:59: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  307 |             result.man_made_noise = calculateManMadeNoise("urban"); // Simplified
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:310:43: warning: 120.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  310 |             result.ambient_noise_level = -120.0; // Base thermal noise
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:313:40: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  313 |             result.total_noise_floor = std::max({result.ambient_noise_level, 
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:5795:5: note: resolves to this declaration
 5795 |     max(initializer_list<_Tp> __l)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:317:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  317 |             result.environment_type = "urban"; // Simplified
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:323:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  323 |             recorder.markFailure("noise_calculation_error");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:324:75: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  324 |             throw CalculationException("Noise floor calculation failed: " + std::string(e.what()));
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:324:77: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  324 |             throw CalculationException("Noise floor calculation failed: " + std::string(e.what()));
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:328:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  328 |     std::string TerrainDataProvider::getPerformanceStats() const {
      |     ~~~~~~~~~~~                      ^
      |     auto                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:329:27: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  329 |         return statistics_->getStatistics();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:333:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  333 |     bool TerrainDataProvider::validateCoordinate(const Coordinate& coord) const noexcept {
      |     ~~~~                      ^
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:333:31: warning: method 'validateCoordinate' can be made static [readability-convert-member-functions-to-static]
  333 |     bool TerrainDataProvider::validateCoordinate(const Coordinate& coord) const noexcept {
      |                               ^                                           ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:337:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  337 |     bool TerrainDataProvider::validateFrequency(double frequency) const noexcept {
      |     ~~~~                      ^
      |     auto                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:337:31: warning: method 'validateFrequency' can be made static [readability-convert-member-functions-to-static]
  337 |     bool TerrainDataProvider::validateFrequency(double frequency) const noexcept {
      |                               ^                                   ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:338:47: warning: 1000000000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  338 |         return frequency > 0.0 && frequency < 1000000000.0 && std::isfinite(frequency);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:338:63: warning: 'isfinite' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  338 |         return frequency > 0.0 && frequency < 1000000000.0 && std::isfinite(frequency);
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/cmath:1126:3: note: resolves to this declaration
 1126 |   isfinite(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:341:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  341 |     bool TerrainDataProvider::validateTimeOfDay(const std::string& timeOfDay) const noexcept {
      |     ~~~~                      ^
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:341:31: warning: method 'validateTimeOfDay' can be made static [readability-convert-member-functions-to-static]
  341 |     bool TerrainDataProvider::validateTimeOfDay(const std::string& timeOfDay) const noexcept {
      |                               ^                                               ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:342:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  342 |         return timeOfDay == "day" || timeOfDay == "night";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:342:48: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  342 |         return timeOfDay == "day" || timeOfDay == "night";
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:345:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  345 |     bool TerrainDataProvider::validateSeason(const std::string& season) const noexcept {
      |     ~~~~                      ^
      |     auto                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:345:31: warning: method 'validateSeason' can be made static [readability-convert-member-functions-to-static]
  345 |     bool TerrainDataProvider::validateSeason(const std::string& season) const noexcept {
      |                               ^                                         ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:346:23: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |         return season == "spring" || season == "summer" || season == "autumn" || season == "winter";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:346:45: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |         return season == "spring" || season == "summer" || season == "autumn" || season == "winter";
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:346:67: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |         return season == "spring" || season == "summer" || season == "autumn" || season == "winter";
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:346:89: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |         return season == "spring" || season == "summer" || season == "autumn" || season == "winter";
      |                                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:349:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  349 |     double TerrainDataProvider::calculateTerrainHeight(double latitude, double longitude) const {
      |     ~~~~~~                      ^
      |     auto                                                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:350:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  350 |         return data_access_->getTerrainHeight(latitude, longitude);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:353:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  353 |     EnvironmentalConditions TerrainDataProvider::getEnvironmentalData(double latitude, double longitude) const {
      |     ~~~~~~~~~~~~~~~~~~~~~~~                      ^
      |     auto                                                                                                       -> EnvironmentalConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:354:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  354 |         return data_access_->getEnvironmentalConditions(latitude, longitude);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:357:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  357 |     double TerrainDataProvider::calculateAtmosphericNoise(double frequency, const EnvironmentalConditions& env) const {
      |                                 ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:357:33: warning: method 'calculateAtmosphericNoise' can be made static [readability-convert-member-functions-to-static]
  357 |     double TerrainDataProvider::calculateAtmosphericNoise(double frequency, const EnvironmentalConditions& env) const {
      |                                 ^                                                                               ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:357:66: warning: parameter 'frequency' is unused [misc-unused-parameters]
  357 |     double TerrainDataProvider::calculateAtmosphericNoise(double frequency, const EnvironmentalConditions& env) const {
      |                                                                  ^~~~~~~~~
      |                                                                   /*frequency*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:359:30: warning: 115.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  359 |         double base_noise = -115.0;
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:362:31: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  362 |         if (env.temperature > 30.0) {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:363:27: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  363 |             base_noise += 2.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:365:27: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  365 |             base_noise -= 2.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:369:28: warning: 80.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  369 |         if (env.humidity > 80.0) {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:374:36: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  374 |         if (env.precipitation_type != "none") {
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:375:57: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  375 |             base_noise += env.precipitation_intensity * 5.0;
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:381:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  381 |     double TerrainDataProvider::calculateManMadeNoise(const std::string& environmentType) const {
      |                                 ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:381:33: warning: method 'calculateManMadeNoise' can be made static [readability-convert-member-functions-to-static]
  381 |     double TerrainDataProvider::calculateManMadeNoise(const std::string& environmentType) const {
      |                                 ^                                                         ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:382:29: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  382 |         if (environmentType == "urban") {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:383:21: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  383 |             return -90.0;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:384:11: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  384 |         } else if (environmentType == "suburban") {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  385 |             return -100.0;
      |             ~~~~~~~~~~~~~~
  386 |         } else {
      |         ~~~~~~~~
  387 |             return -110.0; // Rural
      |             ~~~~~~~~~~~~~~~~~~~~~~~
  388 |         }
      |         ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:384:36: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |         } else if (environmentType == "suburban") {
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:387:21: warning: 110.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |             return -110.0; // Rural
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:391:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  391 |     std::string TerrainDataProvider::generateCacheKey(const std::string& operation, 
      |                                      ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:391:38: warning: method 'generateCacheKey' can be made static [readability-convert-member-functions-to-static]
  391 |     std::string TerrainDataProvider::generateCacheKey(const std::string& operation, 
      |                                      ^
  392 |                                                      const Coordinate& coord1, 
  393 |                                                      const Coordinate& coord2) const {
      |                                                                                ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:395:13: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |         oss << operation << "_" << std::fixed << std::setprecision(6)
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:395:26: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |         oss << operation << "_" << std::fixed << std::setprecision(6)
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:395:33: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |         oss << operation << "_" << std::fixed << std::setprecision(6)
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:129:7: note: resolves to this declaration
  129 |       operator<<(ios_base& (*__pf) (ios_base&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:395:36: warning: 'fixed' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |         oss << operation << "_" << std::fixed << std::setprecision(6)
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/ios_base.h:1084:3: note: resolves to this declaration
 1084 |   fixed(ios_base& __base)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:395:47: warning: 'operator<<<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |         oss << operation << "_" << std::fixed << std::setprecision(6)
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/iomanip:210:5: note: resolves to this declaration
  210 |     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:395:50: warning: 'setprecision' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |         oss << operation << "_" << std::fixed << std::setprecision(6)
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/iomanip:197:3: note: resolves to this declaration
  197 |   setprecision(int __n)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:395:68: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  395 |         oss << operation << "_" << std::fixed << std::setprecision(6)
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:396:13: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  396 |             << coord1.getLatitude() << "_" << coord1.getLongitude() << "_" << coord1.getAltitude();
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:396:37: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  396 |             << coord1.getLatitude() << "_" << coord1.getLongitude() << "_" << coord1.getAltitude();
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:396:44: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  396 |             << coord1.getLatitude() << "_" << coord1.getLongitude() << "_" << coord1.getAltitude();
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:396:69: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  396 |             << coord1.getLatitude() << "_" << coord1.getLongitude() << "_" << coord1.getAltitude();
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:396:76: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  396 |             << coord1.getLatitude() << "_" << coord1.getLongitude() << "_" << coord1.getAltitude();
      |                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:398:17: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |             oss << "_" << coord2.getLatitude() << "_" << coord2.getLongitude() << "_" << coord2.getAltitude();
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:398:24: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |             oss << "_" << coord2.getLatitude() << "_" << coord2.getLongitude() << "_" << coord2.getAltitude();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:398:48: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |             oss << "_" << coord2.getLatitude() << "_" << coord2.getLongitude() << "_" << coord2.getAltitude();
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:398:55: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |             oss << "_" << coord2.getLatitude() << "_" << coord2.getLongitude() << "_" << coord2.getAltitude();
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:398:80: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |             oss << "_" << coord2.getLatitude() << "_" << coord2.getLongitude() << "_" << coord2.getAltitude();
      |                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:398:87: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |             oss << "_" << coord2.getLatitude() << "_" << coord2.getLongitude() << "_" << coord2.getAltitude();
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:403:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  403 |     bool TerrainDataProvider::isCacheValid(const std::string& key) const {
      |     ~~~~                      ^
      |     auto                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:404:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  404 |         return cache_->exists(key);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:408:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  408 |         cache_->store(key, data);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:60:19: note: default parameter was declared here
   60 |                   std::chrono::milliseconds ttl = std::chrono::milliseconds(0));
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:408:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  408 |         cache_->store(key, data);
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:411:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  411 |     std::string TerrainDataProvider::getCachedData(const std::string& key) {
      |     ~~~~~~~~~~~                      ^
      |     auto                                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.cpp:412:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  412 |         return cache_->retrieve(key);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef TERRAIN_ENVIRONMENTAL_API_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_ENVIRONMENTAL_API_H
    2 | #define TERRAIN_ENVIRONMENTAL_API_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_ENVIRONMENTAL_API_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:5:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:7:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    8 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:8:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:9:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   10 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:10:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   11 | #include "terrain_exceptions.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:38:9: warning: function 'getLatitude' should be marked [[nodiscard]] [modernize-use-nodiscard]
   38 |         double getLatitude() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:38:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   38 |         double getLatitude() const noexcept;
      |         ~~~~~~ ^                           
      |         auto                                -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:39:9: warning: function 'getLongitude' should be marked [[nodiscard]] [modernize-use-nodiscard]
   39 |         double getLongitude() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:39:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   39 |         double getLongitude() const noexcept;
      |         ~~~~~~ ^                            
      |         auto                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:40:9: warning: function 'getAltitude' should be marked [[nodiscard]] [modernize-use-nodiscard]
   40 |         double getAltitude() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:40:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   40 |         double getAltitude() const noexcept;
      |         ~~~~~~ ^                           
      |         auto                                -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:43:9: warning: function 'isValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
   43 |         bool isValid() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:43:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   43 |         bool isValid() const noexcept;
      |         ~~~~ ^                       
      |         auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:46:9: warning: function 'calculateDistance' should be marked [[nodiscard]] [modernize-use-nodiscard]
   46 |         double calculateDistance(const Coordinate& other) const;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:46:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   46 |         double calculateDistance(const Coordinate& other) const;
      |         ~~~~~~ ^                                               
      |         auto                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:49:9: warning: function 'toString' should be marked [[nodiscard]] [modernize-use-nodiscard]
   49 |         std::string toString() const;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:49:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   49 |         std::string toString() const;
      |         ~~~~~~~~~~~ ^               
      |         auto                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:52:22: warning: member 'latitude_' of type 'const double' is const qualified [cppcoreguidelines-avoid-const-or-ref-data-members]
   52 |         const double latitude_;
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:53:22: warning: member 'longitude_' of type 'const double' is const qualified [cppcoreguidelines-avoid-const-or-ref-data-members]
   53 |         const double longitude_;
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:54:22: warning: member 'altitude_' of type 'const double' is const qualified [cppcoreguidelines-avoid-const-or-ref-data-members]
   54 |         const double altitude_;
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:74:12: warning: accessing fields in struct 'LineOfSightData' is inefficient due to padding; only needs 49 bytes but is using 56 bytes [altera-struct-pack-align]
   74 |     struct LineOfSightData {
      |            ^
   75 |         bool line_of_sight_blocked;
   76 |         double obstruction_distance;
   77 |         double obstruction_height;
   78 |         double clearance_angle;
   79 |         std::vector<std::pair<double, double>> terrain_profile;
   80 |         
   81 |         // Validation
   82 |         bool isValid() const noexcept;
   83 |         
   84 |         // Default constructor with safe defaults
   85 |         LineOfSightData() noexcept;
   86 |     };
      |      
      |       __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:74:12: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'LineOfSightData'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:74:12: warning: accessing fields in struct 'LineOfSightData' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   74 |     struct LineOfSightData {
      |            ^
   75 |         bool line_of_sight_blocked;
   76 |         double obstruction_distance;
   77 |         double obstruction_height;
   78 |         double clearance_angle;
   79 |         std::vector<std::pair<double, double>> terrain_profile;
   80 |         
   81 |         // Validation
   82 |         bool isValid() const noexcept;
   83 |         
   84 |         // Default constructor with safe defaults
   85 |         LineOfSightData() noexcept;
   86 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:74:12: note: use "__attribute__((aligned(64)))" to align struct 'LineOfSightData' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:75:14: warning: use default member initializer for 'line_of_sight_blocked' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   75 |         bool line_of_sight_blocked;
      |              ^                    
      |                                   {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:75:14: warning: member variable 'line_of_sight_blocked' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:76:16: warning: use default member initializer for 'obstruction_distance' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   76 |         double obstruction_distance;
      |                ^                   
      |                                    {0.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:76:16: warning: member variable 'obstruction_distance' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:77:16: warning: use default member initializer for 'obstruction_height' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   77 |         double obstruction_height;
      |                ^                 
      |                                  {0.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:77:16: warning: member variable 'obstruction_height' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:78:16: warning: use default member initializer for 'clearance_angle' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   78 |         double clearance_angle;
      |                ^              
      |                               {0.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:78:16: warning: member variable 'clearance_angle' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:79:48: warning: member variable 'terrain_profile' has public visibility [misc-non-private-member-variables-in-classes]
   79 |         std::vector<std::pair<double, double>> terrain_profile;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:82:9: warning: function 'isValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
   82 |         bool isValid() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:82:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |         bool isValid() const noexcept;
      |         ~~~~ ^                       
      |         auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:91:12: warning: accessing fields in struct 'TerrainAltitudeData' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   91 |     struct TerrainAltitudeData {
      |            ^
   92 |         double ground_altitude;
   93 |         std::string terrain_type;
   94 |         std::string surface_material;
   95 |         
   96 |         bool isValid() const noexcept;
   97 |         TerrainAltitudeData() noexcept;
   98 |     };
      |      
      |       __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:91:12: note: use "__attribute__((aligned(128)))" to align struct 'TerrainAltitudeData' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:92:16: warning: use default member initializer for 'ground_altitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   92 |         double ground_altitude;
      |                ^              
      |                               {0.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:92:16: warning: member variable 'ground_altitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:93:21: warning: member variable 'terrain_type' has public visibility [misc-non-private-member-variables-in-classes]
   93 |         std::string terrain_type;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:94:21: warning: member variable 'surface_material' has public visibility [misc-non-private-member-variables-in-classes]
   94 |         std::string surface_material;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:96:9: warning: function 'isValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
   96 |         bool isValid() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:96:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   96 |         bool isValid() const noexcept;
      |         ~~~~ ^                       
      |         auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:105:12: warning: accessing fields in struct 'NoiseFloorData' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  105 |     struct NoiseFloorData {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:105:12: note: use "__attribute__((aligned(128)))" to align struct 'NoiseFloorData' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:106:16: warning: use default member initializer for 'ambient_noise_level' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  106 |         double ambient_noise_level;
      |                ^                  
      |                                   {-120.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:106:16: warning: member variable 'ambient_noise_level' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:107:16: warning: use default member initializer for 'atmospheric_noise' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  107 |         double atmospheric_noise;
      |                ^                
      |                                 {-115.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:107:16: warning: member variable 'atmospheric_noise' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:108:16: warning: use default member initializer for 'man_made_noise' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  108 |         double man_made_noise;
      |                ^             
      |                              {-110.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:108:16: warning: member variable 'man_made_noise' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:109:16: warning: use default member initializer for 'total_noise_floor' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  109 |         double total_noise_floor;
      |                ^                
      |                                 {-108.0}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:109:16: warning: member variable 'total_noise_floor' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:110:21: warning: member variable 'environment_type' has public visibility [misc-non-private-member-variables-in-classes]
  110 |         std::string environment_type;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:112:16: warning: accessing fields in struct 'NoiseBreakdown' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
  112 |         struct NoiseBreakdown {
      |                ^
  113 |             double thermal;
  114 |             double galactic;
  115 |             double atmospheric;
  116 |             double man_made;
  117 |         } noise_breakdown;
      |           __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:112:16: note: use "__attribute__((aligned(32)))" to align struct 'NoiseBreakdown' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:117:11: warning: member variable 'noise_breakdown' has public visibility [misc-non-private-member-variables-in-classes]
  117 |         } noise_breakdown;
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:119:9: warning: function 'isValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
  119 |         bool isValid() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:119:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 |         bool isValid() const noexcept;
      |         ~~~~ ^                       
      |         auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:140:36: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  140 |                                    std::unique_ptr<TerrainCache> cache = nullptr,
      |                                    ^                                   ~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:141:36: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  141 |                                    std::unique_ptr<TerrainStatistics> statistics = nullptr);
      |                                    ^                                             ~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:147:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |         TerrainDataProvider& operator=(const TerrainDataProvider&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                       -> TerrainDataProvider&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:148:50: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
  148 |         TerrainDataProvider(TerrainDataProvider&&) noexcept;
      |                                                  ^
      |                                                   /*other*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:149:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |         TerrainDataProvider& operator=(TerrainDataProvider&&) noexcept;
      |         ~~~~~~~~~~~~~~~~~~~~ ^                                        
      |         auto                                                           -> TerrainDataProvider&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:149:61: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
  149 |         TerrainDataProvider& operator=(TerrainDataProvider&&) noexcept;
      |                                                             ^
      |                                                              /*other*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:161:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |         LineOfSightData checkLineOfSight(const Coordinate& transmitter, 
      |         ~~~~~~~~~~~~~~~ ^
      |         auto
  162 |                                        const Coordinate& receiver);
      |                                                                   
      |                                                                    -> LineOfSightData
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:172:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  172 |         TerrainAltitudeData getTerrainAltitude(const Coordinate& coordinate);
      |         ~~~~~~~~~~~~~~~~~~~ ^                                               
      |         auto                                                                 -> TerrainAltitudeData
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:182:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |         EnvironmentalConditions getEnvironmentalConditions(const Coordinate& coordinate);
      |         ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                       
      |         auto                                                                             -> EnvironmentalConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:195:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  195 |         NoiseFloorData calculateNoiseFloor(const Coordinate& coordinate,
      |         ~~~~~~~~~~~~~~ ^
      |         auto
  196 |                                           double frequency,
  197 |                                           const std::string& timeOfDay,
  198 |                                           const std::string& season);
      |                                                                     
      |                                                                      -> NoiseFloorData
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:231:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  231 |         std::string getPerformanceStats() const;
      |         ~~~~~~~~~~~ ^                          
      |         auto                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:244:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  244 |         bool validateCoordinate(const Coordinate& coord) const noexcept;
      |         ~~~~ ^                                                         
      |         auto                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:245:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  245 |         bool validateFrequency(double frequency) const noexcept;
      |         ~~~~ ^                                                 
      |         auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:246:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 |         bool validateTimeOfDay(const std::string& timeOfDay) const noexcept;
      |         ~~~~ ^                                                             
      |         auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:247:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |         bool validateSeason(const std::string& season) const noexcept;
      |         ~~~~ ^                                                       
      |         auto                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:250:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  250 |         double calculateTerrainHeight(double latitude, double longitude) const;
      |         ~~~~~~ ^                                                              
      |         auto                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:251:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  251 |         EnvironmentalConditions getEnvironmentalData(double latitude, double longitude) const;
      |         ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                            
      |         auto                                                                                  -> EnvironmentalConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:252:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  252 |         double calculateAtmosphericNoise(double frequency, const EnvironmentalConditions& env) const;
      |         ~~~~~~ ^                                                                                    
      |         auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:253:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  253 |         double calculateManMadeNoise(const std::string& environmentType) const;
      |         ~~~~~~ ^                                                              
      |         auto                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:256:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |         std::string generateCacheKey(const std::string& operation, 
      |         ~~~~~~~~~~~ ^
      |         auto
  257 |                                    const Coordinate& coord1, 
  258 |                                    const Coordinate& coord2 = Coordinate(0, 0, 0)) const;
      |                                                                                         
      |                                                                                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:258:36: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  258 |                                    const Coordinate& coord2 = Coordinate(0, 0, 0)) const;
      |                                    ^                        ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:259:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  259 |         bool isCacheValid(const std::string& key) const;
      |         ~~~~ ^                                         
      |         auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:261:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  261 |         std::string getCachedData(const std::string& key);
      |         ~~~~~~~~~~~ ^                                    
      |         auto                                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:283:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  283 |         TerrainEnvironmentalAPIServer& operator=(const TerrainEnvironmentalAPIServer&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                                           -> TerrainEnvironmentalAPIServer&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:285:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  285 |         TerrainEnvironmentalAPIServer& operator=(TerrainEnvironmentalAPIServer&&) noexcept;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                  
      |         auto                                                                               -> TerrainEnvironmentalAPIServer&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:295:20: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  295 |         void start(int port = 8080, const std::string& host = "localhost");
      |                    ^        ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:295:31: warning: 8080 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  295 |         void start(int port = 8080, const std::string& host = "localhost");
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:295:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  295 |         void start(int port = 8080, const std::string& host = "localhost");
      |                                     ^                       ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:295:63: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  295 |         void start(int port = 8080, const std::string& host = "localhost");
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:307:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |         bool isRunning() const noexcept;
      |         ~~~~ ^                         
      |         auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:315:52: warning: performing an implicit widening conversion to type 'const size_t' (aka 'const unsigned long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  315 |         static constexpr size_t MAX_REQUEST_SIZE = 1024 * 1024; // 1MB max request
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:315:52: note: make conversion explicit to silence this warning
    4 |         static constexpr size_t MAX_REQUEST_SIZE = 1024 * 1024; // 1MB max request
      |                                                    ^~~~~~~~~~~
      |                                                    static_cast<const size_t>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:315:52: note: perform multiplication in a wider type
  315 |         static constexpr size_t MAX_REQUEST_SIZE = 1024 * 1024; // 1MB max request
      |                                                    ^~~~
      |                                                    static_cast<long>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:319:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  319 |         std::string handleLOSCheck(const std::string& requestBody);
      |         ~~~~~~~~~~~ ^                                             
      |         auto                                                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:320:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  320 |         std::string handleAltitudeQuery(const std::string& requestBody);
      |         ~~~~~~~~~~~ ^                                                  
      |         auto                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:321:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 |         std::string handleEnvironmentalQuery(const std::string& requestBody);
      |         ~~~~~~~~~~~ ^                                                       
      |         auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:322:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  322 |         std::string handleNoiseFloorQuery(const std::string& requestBody);
      |         ~~~~~~~~~~~ ^                                                    
      |         auto                                                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:325:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  325 |         bool validateRequestSize(const std::string& request) const noexcept;
      |         ~~~~ ^                                                             
      |         auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:326:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  326 |         bool sanitizeInput(std::string& input) const;
      |         ~~~~ ^                                      
      |         auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:327:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  327 |         bool validateCoordinateInput(double lat, double lon, double alt) const noexcept;
      |         ~~~~ ^                                                                         
      |         auto                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:330:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  330 |         bool parseCoordinate(const std::string& json, Coordinate& coord);
      |         ~~~~ ^                                                          
      |         auto                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:331:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  331 |         bool parseRequest(const std::string& json, std::string& error);
      |         ~~~~ ^                                                        
      |         auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:334:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  334 |         std::string generateErrorResponse(const std::string& error, int code);
      |         ~~~~~~~~~~~ ^                                                        
      |         auto                                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:335:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  335 |         std::string generateSuccessResponse(const std::string& data);
      |         ~~~~~~~~~~~ ^                                               
      |         auto                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_environmental_api.h:338:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  338 |         bool isRequestRateLimited(const std::string& clientIP) const;
      |         ~~~~ ^                                                      
      |         auto                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef TERRAIN_EXCEPTIONS_H
      |         ^~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_EXCEPTIONS_H
    2 | #define TERRAIN_EXCEPTIONS_H
      |         ~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_EXCEPTIONS_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:4:1: warning: system include stdexcept not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <stdexcept>
      | ^~~~~~~~~~~~~~~~~~~~
    5 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:5:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    6 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:17:9: warning: 'TerrainException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   17 |         explicit TerrainException(const std::string& message, int errorCode = 0)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:17:63: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   17 |         explicit TerrainException(const std::string& message, int errorCode = 0)
      |                                                               ^             ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:20:9: warning: 'getErrorCode' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   20 |         int getErrorCode() const noexcept { return error_code_; }
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:20:9: warning: function 'getErrorCode' should be marked [[nodiscard]] [modernize-use-nodiscard]
   20 |         int getErrorCode() const noexcept { return error_code_; }
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:20:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   20 |         int getErrorCode() const noexcept { return error_code_; }
      |         ~~~ ^
      |         auto                              -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:23:19: warning: member 'error_code_' of type 'const int' is const qualified [cppcoreguidelines-avoid-const-or-ref-data-members]
   23 |         const int error_code_;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:33:9: warning: 'InvalidCoordinateException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   33 |         explicit InvalidCoordinateException(const std::string& message)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:34:55: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   34 |             : TerrainException("Invalid coordinate: " + message, 1001) {}
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:34:66: warning: 1001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   34 |             : TerrainException("Invalid coordinate: " + message, 1001) {}
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:44:9: warning: 'InvalidFrequencyException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   44 |         explicit InvalidFrequencyException(const std::string& message)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:45:54: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   45 |             : TerrainException("Invalid frequency: " + message, 1002) {}
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:45:65: warning: 1002 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   45 |             : TerrainException("Invalid frequency: " + message, 1002) {}
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:55:9: warning: 'TerrainDataException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   55 |         explicit TerrainDataException(const std::string& message)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:56:55: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   56 |             : TerrainException("Terrain data error: " + message, 1003) {}
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:56:66: warning: 1003 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   56 |             : TerrainException("Terrain data error: " + message, 1003) {}
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:66:9: warning: 'EnvironmentalDataException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   66 |         explicit EnvironmentalDataException(const std::string& message)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:67:61: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |             : TerrainException("Environmental data error: " + message, 1004) {}
      |                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:67:72: warning: 1004 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   67 |             : TerrainException("Environmental data error: " + message, 1004) {}
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:77:9: warning: 'CalculationException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   77 |         explicit CalculationException(const std::string& message)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:78:54: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   78 |             : TerrainException("Calculation error: " + message, 1005) {}
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:78:65: warning: 1005 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   78 |             : TerrainException("Calculation error: " + message, 1005) {}
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:88:9: warning: 'APIServerException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   88 |         explicit APIServerException(const std::string& message)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:89:53: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |             : TerrainException("API server error: " + message, 1006) {}
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:89:64: warning: 1006 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   89 |             : TerrainException("API server error: " + message, 1006) {}
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:99:9: warning: 'ConfigurationException' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   99 |         explicit ConfigurationException(const std::string& message)
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:100:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  100 |             : TerrainException("Configuration error: " + message, 1007) {}
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_exceptions.h:100:67: warning: 1007 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  100 |             : TerrainException("Configuration error: " + message, 1007) {}
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef TERRAIN_STATE_MACHINE_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_STATE_MACHINE_H
    2 | #define TERRAIN_STATE_MACHINE_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_STATE_MACHINE_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:4:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:5:1: warning: #includes are not sorted properly [llvm-include-order]
    5 | #include <mutex>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:5:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    6 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:6:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:7:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    8 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:17:16: warning: enum 'TerrainProviderState' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   17 |     enum class TerrainProviderState {
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:35:9: warning: '~TerrainStateMachine' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   35 |         ~TerrainStateMachine() = default;
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:39:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   39 |         TerrainStateMachine& operator=(const TerrainStateMachine&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                       -> TerrainStateMachine&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:41:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   41 |         TerrainStateMachine& operator=(TerrainStateMachine&&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                  -> TerrainStateMachine&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:48:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   48 |         TerrainProviderState getCurrentState() const noexcept;
      |         ~~~~~~~~~~~~~~~~~~~~ ^                               
      |         auto                                                  -> TerrainProviderState
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:55:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   55 |         bool transitionToInitializing();
      |         ~~~~ ^                         
      |         auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:62:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   62 |         bool transitionToReady();
      |         ~~~~ ^                  
      |         auto                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:70:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   70 |         bool transitionToError(const std::string& errorMessage);
      |         ~~~~ ^                                                 
      |         auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:77:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   77 |         bool transitionToShutdown();
      |         ~~~~ ^                     
      |         auto                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:84:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |         bool transitionToShutdownComplete();
      |         ~~~~ ^                             
      |         auto                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:91:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |         bool canPerformOperations() const noexcept;
      |         ~~~~ ^                                    
      |         auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:98:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   98 |         std::string getStateName() const;
      |         ~~~~~~~~~~~ ^                   
      |         auto                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:105:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |         std::string getLastErrorMessage() const;
      |         ~~~~~~~~~~~ ^                          
      |         auto                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:112:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |         std::chrono::milliseconds getTimeInCurrentState() const;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |         auto                                                    -> std::chrono::milliseconds
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:119:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 |         bool reset();
      |         ~~~~ ^      
      |         auto         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:134:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |         bool isValidTransition(TerrainProviderState from, TerrainProviderState to) const noexcept;
      |         ~~~~ ^                                                                                   
      |         auto                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:134:80: warning: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length]
  134 |         bool isValidTransition(TerrainProviderState from, TerrainProviderState to) const noexcept;
      |                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:154:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |         TerrainStateGuard& operator=(const TerrainStateGuard&) = delete;
      |         ~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                   -> TerrainStateGuard&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:156:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |         TerrainStateGuard& operator=(TerrainStateGuard&&) = delete;
      |         ~~~~~~~~~~~~~~~~~~ ^
      |         auto                                              -> TerrainStateGuard&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:163:9: warning: function 'isValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
  163 |         bool isValid() const noexcept;
      |         ^
      |         [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_state_machine.h:163:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 |         bool isValid() const noexcept;
      |         ~~~~ ^                       
      |         auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef TERRAIN_STATISTICS_H
      |         ^~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_STATISTICS_H
    2 | #define TERRAIN_STATISTICS_H
      |         ~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_STATISTICS_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:4:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:5:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:6:1: warning: #includes are not sorted properly [llvm-include-order]
    6 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:6:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:7:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    8 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:8:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <unordered_map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:9:1: warning: system include unordered_map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <unordered_map>
      | ^~~~~~~~~~~~~~~~~~~~~~~~
   10 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:22:9: warning: '~TerrainStatistics' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   22 |         ~TerrainStatistics() = default;
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:26:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   26 |         TerrainStatistics& operator=(const TerrainStatistics&) = delete;
      |         ~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                   -> TerrainStatistics&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:28:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   28 |         TerrainStatistics& operator=(TerrainStatistics&&) = delete;
      |         ~~~~~~~~~~~~~~~~~~ ^
      |         auto                                              -> TerrainStatistics&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:84:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |         std::string getStatistics() const;
      |         ~~~~~~~~~~~ ^                    
      |         auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:91:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |         std::string getPerformanceSummary() const;
      |         ~~~~~~~~~~~ ^                            
      |         auto                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:103:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |         std::vector<uint64_t> getOperationCounts() const;
      |         ~~~~~~~~~~~~~~~~~~~~~ ^                         
      |         auto                                             -> std::vector<uint64_t>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:110:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  110 |         std::vector<double> getAverageOperationTimes() const;
      |         ~~~~~~~~~~~~~~~~~~~ ^                               
      |         auto                                                 -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:117:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |         std::vector<double> getSuccessRates() const;
      |         ~~~~~~~~~~~~~~~~~~~ ^                      
      |         auto                                        -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:124:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |         double getCacheHitRate() const noexcept;
      |         ~~~~~~ ^                               
      |         auto                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:131:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |         uint64_t getTotalOperations() const noexcept;
      |         ~~~~~~~~ ^                                  
      |         auto                                         -> uint64_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:138:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 |         std::chrono::milliseconds getUptime() const noexcept;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~ ^                         
      |         auto                                                 -> std::chrono::milliseconds
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:175:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |         double calculateAverageTime(uint64_t totalTime, uint64_t count) const noexcept;
      |         ~~~~~~ ^                                                                      
      |         auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:184:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |         double calculateSuccessRate(uint64_t successful, uint64_t total) const noexcept;
      |         ~~~~~~ ^                                                                       
      |         auto                                                                            -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:199:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  199 |         TerrainOperationRecorder& operator=(const TerrainOperationRecorder&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                                 -> TerrainOperationRecorder&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_statistics.h:201:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |         TerrainOperationRecorder& operator=(TerrainOperationRecorder&&) = delete;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |         auto                                                            -> TerrainOperationRecorder&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:2:1: warning: #includes are not sorted properly [llvm-include-order]
    2 | #include <cmath>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:2:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
    2 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    3 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:3:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    3 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    4 | #include <iostream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:4:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
    4 | #include <iostream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:4:1: warning: included header iostream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:5:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
    5 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:5:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:6:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
    6 | #include <iomanip>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:6:1: warning: included header iomanip is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
    5 | #include <sstream>
    6 | #include <iomanip>
    7 | 
    8 | // Global instance
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:47: warning: variable 'g_vehicle_dynamics_manager' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:47: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:12:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   12 | const double EARTH_RADIUS_KM = 6371.0;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:13:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   13 | const double DEG_TO_RAD = M_PI / 180.0;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:13:27: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
    5 | #include <sstream>
    6 | #include <iomanip>
    7 | 
    8 | // Global instance
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
   10 | 
   11 | // Constants
   12 | const double EARTH_RADIUS_KM = 6371.0;
   13 | const double DEG_TO_RAD = M_PI / 180.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:14:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   14 | const double RAD_TO_DEG = 180.0 / M_PI;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:16:31: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   16 | FGCom_VehicleDynamicsManager::FGCom_VehicleDynamicsManager() 
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:17:60: warning: 300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   17 |     : auto_cleanup_enabled(true), cleanup_interval_seconds(300) {
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:18:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   18 |     last_cleanup = std::chrono::system_clock::now();
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:18:20: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   18 |     last_cleanup = std::chrono::system_clock::now();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:18:33: warning: no header providing "std::chrono::system_clock" is directly included [misc-include-cleaner]
    2 |     last_cleanup = std::chrono::system_clock::now();
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:21:31: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
   21 | FGCom_VehicleDynamicsManager::~FGCom_VehicleDynamicsManager() {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:21:31: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:25:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   25 | bool FGCom_VehicleDynamicsManager::registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:25:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   25 | bool FGCom_VehicleDynamicsManager::registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type) {
      | ~~~~                               ^
      | auto                                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:25:63: warning: no header providing "std::string" is directly included [misc-include-cleaner]
    7 | bool FGCom_VehicleDynamicsManager::registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type) {
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:26:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   26 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:26:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
    5 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:26:26: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   26 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:28:35: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   28 |     if (vehicles.find(vehicle_id) != vehicles.end()) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:33:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   33 |     dynamics.vehicle_id = vehicle_id;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:34:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   34 |     dynamics.position.vehicle_type = vehicle_type;
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:35:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   35 |     dynamics.status = "active";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:36:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   36 |     dynamics.last_update = std::chrono::system_clock::now();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:36:28: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   36 |     dynamics.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:38:13: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   38 |     vehicles[vehicle_id] = dynamics;
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:38:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   38 |     vehicles[vehicle_id] = dynamics;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: resolves to this declaration
   73 | struct fgcom_vehicle_dynamics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:42:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   42 | bool FGCom_VehicleDynamicsManager::unregisterVehicle(const std::string& vehicle_id) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:42:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 | bool FGCom_VehicleDynamicsManager::unregisterVehicle(const std::string& vehicle_id) {
      | ~~~~                               ^
      | auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:43:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   43 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:45:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   45 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:46:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:54:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   54 | bool FGCom_VehicleDynamicsManager::updateVehiclePosition(const std::string& vehicle_id, const fgcom_vehicle_position& position) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:54:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   54 | bool FGCom_VehicleDynamicsManager::updateVehiclePosition(const std::string& vehicle_id, const fgcom_vehicle_position& position) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:55:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   55 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:57:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   57 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:58:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:62:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |     it->second.position = position;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:62:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |     it->second.position = position;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: note: resolves to this declaration
   41 | struct fgcom_vehicle_position {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:63:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:63:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:63:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:66:9: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |     if (std::abs(it->second.position.latitude - position.latitude) > 0.01 ||
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:71:3: note: resolves to this declaration
   71 |   abs(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:66:20: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |     if (std::abs(it->second.position.latitude - position.latitude) > 0.01 ||
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:66:70: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   66 |     if (std::abs(it->second.position.latitude - position.latitude) > 0.01 ||
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:67:9: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |         std::abs(it->second.position.longitude - position.longitude) > 0.01) {
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:71:3: note: resolves to this declaration
   71 |   abs(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:67:20: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |         std::abs(it->second.position.longitude - position.longitude) > 0.01) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:67:72: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   67 |         std::abs(it->second.position.longitude - position.longitude) > 0.01) {
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:68:11: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |         it->second.attitude.magnetic_declination_deg = calculateMagneticDeclination(position.latitude, position.longitude);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:74:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   74 | bool FGCom_VehicleDynamicsManager::updateVehicleAttitude(const std::string& vehicle_id, const fgcom_vehicle_attitude& attitude) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:74:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 | bool FGCom_VehicleDynamicsManager::updateVehicleAttitude(const std::string& vehicle_id, const fgcom_vehicle_attitude& attitude) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:75:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   75 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:77:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   77 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:78:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   78 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:82:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     it->second.attitude = attitude;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:82:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     it->second.attitude = attitude;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:12:8: note: resolves to this declaration
   12 | struct fgcom_vehicle_attitude {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:83:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:83:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:83:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   86 |     for (auto& antenna : it->second.antennas) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:24: warning: 'operator!=<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:93:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   93 | bool FGCom_VehicleDynamicsManager::updateVehicleVelocity(const std::string& vehicle_id, const fgcom_vehicle_velocity& velocity) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:93:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 | bool FGCom_VehicleDynamicsManager::updateVehicleVelocity(const std::string& vehicle_id, const fgcom_vehicle_velocity& velocity) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:94:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   94 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:96:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   96 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:97:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:101:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |     it->second.velocity = velocity;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:101:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |     it->second.velocity = velocity;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:26:8: note: resolves to this declaration
   26 | struct fgcom_vehicle_velocity {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:102:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:102:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:102:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:106:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  106 | bool FGCom_VehicleDynamicsManager::updateVehicleDynamics(const std::string& vehicle_id, const fgcom_vehicle_dynamics& dynamics) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:106:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 | bool FGCom_VehicleDynamicsManager::updateVehicleDynamics(const std::string& vehicle_id, const fgcom_vehicle_dynamics& dynamics) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:107:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  107 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:109:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  109 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:110:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  110 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:114:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |     it->second = dynamics;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:114:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |     it->second = dynamics;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: resolves to this declaration
   73 | struct fgcom_vehicle_dynamics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:115:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:115:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:115:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:119:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  119 | bool FGCom_VehicleDynamicsManager::addAntenna(const std::string& vehicle_id, const fgcom_antenna_orientation& antenna) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:119:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 | bool FGCom_VehicleDynamicsManager::addAntenna(const std::string& vehicle_id, const fgcom_antenna_orientation& antenna) {
      | ~~~~                               ^
      | auto                                                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:120:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  120 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:122:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  122 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:123:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  123 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:39: warning: 'operator!=<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:39: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:39: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:43: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:129:41: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  129 |         if (existing_antenna.antenna_id == antenna.antenna_id) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:134:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |     it->second.antennas.push_back(antenna);
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:135:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:135:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:135:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      | ~~~~                               ^
      | auto                                                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:50: warning: 2 adjacent parameters of 'removeAntenna' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:69: note: the first parameter in the range is 'vehicle_id'
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                     ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:100: note: the last parameter in the range is 'antenna_id'
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                                                    ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:140:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  140 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:142:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  142 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:143:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  143 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:147:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:148:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:147:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:147:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:149:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  149 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:152:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:152:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:156:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  156 |     it->second.antennas.erase(antenna_it);
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:157:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:157:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:157:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      | ~~~~                               ^
      | auto
  162 |                                                            const fgcom_antenna_orientation& orientation) {
      |                                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:61: warning: 2 adjacent parameters of 'updateAntennaOrientation' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:80: note: the first parameter in the range is 'vehicle_id'
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                                ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:111: note: the last parameter in the range is 'antenna_id'
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                                                               ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:163:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  163 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:165:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  165 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:166:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:170:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:171:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:170:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:170:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:172:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:175:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  175 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:175:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  175 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:179:5: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  179 |     *antenna_it = orientation;
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:179:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  179 |     *antenna_it = orientation;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: resolves to this declaration
   57 | struct fgcom_antenna_orientation {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:180:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:180:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:180:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:181:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:181:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:181:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      | ~~~~                               ^
      | auto
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:50: warning: 2 adjacent parameters of 'rotateAntenna' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:69: note: the first parameter in the range is 'vehicle_id'
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                     ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:100: note: the last parameter in the range is 'antenna_id'
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                                                    ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:186:49: warning: 2 adjacent parameters of 'rotateAntenna' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:186:55: note: the first parameter in the range is 'target_azimuth'
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                       ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:186:77: note: the last parameter in the range is 'target_elevation'
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                                             ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:187:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  187 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:189:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  189 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:190:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:194:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:195:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:194:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:194:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:196:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  196 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:199:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:199:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:204:5: warning: if with identical then and else branches [bugprone-branch-clone]
  204 |     if (immediate) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:207:7: note: else branch starts here
  207 |     } else {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:205:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  205 |         antenna_it->azimuth_deg = normalizeAngle(target_azimuth);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:37: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:47: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^   ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:54: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:63: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^   ~
      |                                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:210:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  210 |         antenna_it->azimuth_deg = normalizeAngle(target_azimuth);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:37: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:47: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^   ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:54: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:63: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^   ~
      |                                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:214:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  214 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:214:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  214 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:214:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  214 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:215:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:215:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:215:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:219:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  219 | VehicleDynamicsResponse FGCom_VehicleDynamicsManager::getVehicleDynamics(const std::string& vehicle_id) {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:219:55: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 | VehicleDynamicsResponse FGCom_VehicleDynamicsManager::getVehicleDynamics(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                    -> VehicleDynamicsResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:222:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  222 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:224:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  224 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:225:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:226:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |         response.message = "Vehicle not found";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:231:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |     response.dynamics = it->second;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: resolves to this declaration
   73 | struct fgcom_vehicle_dynamics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:231:27: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |     response.dynamics = it->second;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:232:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  232 |     response.message = "Vehicle dynamics retrieved successfully";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:236:51: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  236 | VehicleListResponse FGCom_VehicleDynamicsManager::getAllVehicles() {
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:236:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  236 | VehicleListResponse FGCom_VehicleDynamicsManager::getAllVehicles() {
      | ~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                               -> VehicleListResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:239:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  239 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:242:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  242 |     response.message = "Vehicle list retrieved successfully";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  244 |     for (const auto& vehicle : vehicles) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  244 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  244 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  244 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:246:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  246 |         response.vehicle_types[vehicle.first] = vehicle.second.position.vehicle_type;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:246:47: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  246 |         response.vehicle_types[vehicle.first] = vehicle.second.position.vehicle_type;
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:247:32: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  247 |         response.vehicle_status[vehicle.first] = vehicle.second.status;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:247:48: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  247 |         response.vehicle_status[vehicle.first] = vehicle.second.status;
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:253:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
    7 | std::vector<fgcom_antenna_orientation> FGCom_VehicleDynamicsManager::getVehicleAntennas(const std::string& vehicle_id) {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:253:70: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  253 | std::vector<fgcom_antenna_orientation> FGCom_VehicleDynamicsManager::getVehicleAntennas(const std::string& vehicle_id) {
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:253:70: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  253 | std::vector<fgcom_antenna_orientation> FGCom_VehicleDynamicsManager::getVehicleAntennas(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                                   -> std::vector<fgcom_antenna_orientation>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:254:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  254 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:256:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  256 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:257:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  257 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:258:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  258 |         return std::vector<fgcom_antenna_orientation>();
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:261:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  261 |     return it->second.antennas;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:264:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  264 | fgcom_vehicle_position FGCom_VehicleDynamicsManager::getVehiclePosition(const std::string& vehicle_id) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:264:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 | fgcom_vehicle_position FGCom_VehicleDynamicsManager::getVehiclePosition(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                   -> fgcom_vehicle_position
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:265:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  265 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:267:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  267 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:268:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:269:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  269 |         return fgcom_vehicle_position(); // Return default position
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:272:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     return it->second.position;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:275:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  275 | fgcom_vehicle_attitude FGCom_VehicleDynamicsManager::getVehicleAttitude(const std::string& vehicle_id) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:275:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  275 | fgcom_vehicle_attitude FGCom_VehicleDynamicsManager::getVehicleAttitude(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                   -> fgcom_vehicle_attitude
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:276:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  276 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:278:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  278 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:279:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  279 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:280:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  280 |         return fgcom_vehicle_attitude(); // Return default attitude
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:283:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  283 |     return it->second.attitude;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:286:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  286 | fgcom_vehicle_velocity FGCom_VehicleDynamicsManager::getVehicleVelocity(const std::string& vehicle_id) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:286:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  286 | fgcom_vehicle_velocity FGCom_VehicleDynamicsManager::getVehicleVelocity(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                   -> fgcom_vehicle_velocity
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:287:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  287 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:289:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  289 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:290:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  290 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:291:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  291 |         return fgcom_vehicle_velocity(); // Return default velocity
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:294:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  294 |     return it->second.velocity;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:297:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  297 | AntennaRotationResponse FGCom_VehicleDynamicsManager::calculateAntennaRotation(const AntennaRotationRequest& request) {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:297:55: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  297 | AntennaRotationResponse FGCom_VehicleDynamicsManager::calculateAntennaRotation(const AntennaRotationRequest& request) {
      | ~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                                  -> AntennaRotationResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:300:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  300 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:302:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  302 |     auto it = vehicles.find(request.vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:303:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  303 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:304:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  304 |         response.message = "Vehicle not found";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:308:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:309:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:308:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:308:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:310:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  310 |                                       return antenna.antenna_id == request.antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:313:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  313 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:313:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  313 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:314:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |         response.message = "Antenna not found";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:320:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  320 |     response.current_orientation = *antenna_it;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: resolves to this declaration
   57 | struct fgcom_antenna_orientation {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:320:36: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  320 |     response.current_orientation = *antenna_it;
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:323:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  323 |         response.estimated_arrival_time_sec = 0.0f;
      |                                               ^  ~
      |                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:324:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  324 |         response.message = "Antenna rotation completed immediately";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:327:9: warning: variable 'azimuth_diff' of type 'float' can be declared 'const' [misc-const-correctness]
  327 |         float azimuth_diff = std::abs(normalizeAngle(request.target_azimuth_deg - antenna_it->azimuth_deg));
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:327:30: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  327 |         float azimuth_diff = std::abs(normalizeAngle(request.target_azimuth_deg - antenna_it->azimuth_deg));
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:327:93: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  327 |         float azimuth_diff = std::abs(normalizeAngle(request.target_azimuth_deg - antenna_it->azimuth_deg));
      |                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:328:9: warning: variable 'elevation_diff' of type 'float' can be declared 'const' [misc-const-correctness]
  328 |         float elevation_diff = std::abs(request.target_elevation_deg - antenna_it->elevation_deg);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:328:32: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |         float elevation_diff = std::abs(request.target_elevation_deg - antenna_it->elevation_deg);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:328:82: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |         float elevation_diff = std::abs(request.target_elevation_deg - antenna_it->elevation_deg);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:330:9: warning: variable 'total_rotation_deg' of type 'float' can be declared 'const' [misc-const-correctness]
  330 |         float total_rotation_deg = std::sqrt(azimuth_diff * azimuth_diff + elevation_diff * elevation_diff);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:330:36: warning: 'sqrt' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |         float total_rotation_deg = std::sqrt(azimuth_diff * azimuth_diff + elevation_diff * elevation_diff);
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/cmath:438:3: note: resolves to this declaration
  438 |   sqrt(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:331:78: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  331 |         response.estimated_arrival_time_sec = total_rotation_deg / antenna_it->rotation_speed_deg_per_sec;
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:332:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |         response.message = "Antenna rotation calculated successfully";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:56: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:56: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                                             -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:94: warning: 2 adjacent parameters of 'getVehiclesInRange' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:101: note: the first parameter in the range is 'center_lon'
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                                     ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:119: note: the last parameter in the range is 'radius_km'
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                                                       ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:113: note: 'double' and 'float' may be implicitly converted
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:341:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  341 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  343 |     for (const auto& vehicle : vehicles) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:344:9: warning: variable 'distance' of type 'float' can be declared 'const' [misc-const-correctness]
  344 |         float distance = calculateDistance(center_lat, center_lon, 
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:356:56: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  356 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesByType(const std::string& vehicle_type) {
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:356:56: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  356 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesByType(const std::string& vehicle_type) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                      -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:359:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  359 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  361 |     for (const auto& vehicle : vehicles) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  361 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  361 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  361 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:362:50: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  362 |         if (vehicle.second.position.vehicle_type == vehicle_type) {
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      | ~~~~                               ^
      | auto
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:55: warning: 3 adjacent parameters of 'enableAutoTracking' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:74: note: the first parameter in the range is 'vehicle_id'
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:371:73: note: the last parameter in the range is 'target_vehicle_id'
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                                         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:371:73: warning: parameter 'target_vehicle_id' is unused [misc-unused-parameters]
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                                         ^~~~~~~~~~~~~~~~~
      |                                                                          /*target_vehicle_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:372:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  372 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:374:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  374 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:375:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  375 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:379:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:380:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  379 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:379:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  379 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:379:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  379 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:381:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  381 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:384:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:384:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:389:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  389 |     antenna_it->is_auto_tracking = true;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:390:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  390 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:390:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  390 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:390:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  390 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:391:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  391 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:391:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  391 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:391:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  391 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      | ~~~~                               ^
      | auto                                                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:56: warning: 2 adjacent parameters of 'disableAutoTracking' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:75: note: the first parameter in the range is 'vehicle_id'
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                           ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:106: note: the last parameter in the range is 'antenna_id'
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:397:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  397 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:399:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  399 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:400:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  400 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:404:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:405:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  404 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:404:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  404 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:404:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  404 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:406:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  406 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:409:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  409 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:409:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  409 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:413:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  413 |     antenna_it->is_auto_tracking = false;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:414:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:414:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:414:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:415:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:415:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:415:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:420:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  420 | bool FGCom_VehicleDynamicsManager::updateAutoTracking() {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:420:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  420 | bool FGCom_VehicleDynamicsManager::updateAutoTracking() {
      | ~~~~                               ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:421:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  421 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:425:24: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     for (auto& vehicle : vehicles) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:425:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     for (auto& vehicle : vehicles) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:425:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     for (auto& vehicle : vehicles) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:28: warning: 'operator!=<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:430:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  430 |                 antenna.timestamp = std::chrono::system_clock::now();
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:430:37: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  430 |                 antenna.timestamp = std::chrono::system_clock::now();
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:439:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  439 | void FGCom_VehicleDynamicsManager::cleanupInactiveVehicles() {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:440:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  440 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:442:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  442 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:443:33: warning: no header providing "std::chrono::seconds" is directly included [misc-include-cleaner]
  443 |     auto timeout = std::chrono::seconds(cleanup_interval_seconds);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:445:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  445 |     auto it = vehicles.begin();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:446:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  446 |     while (it != vehicles.end()) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:446:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'it' and may cause performance degradation [altera-id-dependent-backward-branch]
  446 |     while (it != vehicles.end()) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:445:5: note: inferred assignment of ID-dependent value from ID-dependent 
  445 |     auto it = vehicles.begin();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:446:15: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  446 |     while (it != vehicles.end()) {
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:447:17: warning: 'operator-<std::chrono::system_clock, std::chrono::duration<long, std::ratio<1, 1000000000>>, std::chrono::duration<long, std::ratio<1, 1000000000>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |         if (now - it->second.last_update > timeout) {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1141:7: note: resolves to this declaration
 1141 |       operator-(const time_point<_Clock, _Dur1>& __lhs,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:447:21: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |         if (now - it->second.last_update > timeout) {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:447:42: warning: 'operator><long, std::ratio<1, 1000000000>, long, std::ratio<1>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |         if (now - it->second.last_update > timeout) {
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:862:7: note: resolves to this declaration
  862 |       operator>(const duration<_Rep1, _Period1>& __lhs,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:448:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  448 |             it = vehicles.erase(it);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:256:12: note: resolves to this declaration
  256 |     struct _Rb_tree_iterator
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:450:13: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  450 |             ++it;
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:454:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  454 |     last_cleanup = now;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:457:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  457 | void FGCom_VehicleDynamicsManager::setAutoCleanup(bool enabled, int interval_seconds) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:462:6: warning: no header providing "std::map" is directly included [misc-include-cleaner]
    5 | std::map<std::string, std::string> FGCom_VehicleDynamicsManager::getSystemStatus() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:462:66: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  462 | std::map<std::string, std::string> FGCom_VehicleDynamicsManager::getSystemStatus() {
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:462:66: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  462 | std::map<std::string, std::string> FGCom_VehicleDynamicsManager::getSystemStatus() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                               -> std::map<std::string, std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:465:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  465 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:32: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4204:3: note: resolves to this declaration
 4204 |   to_string(unsigned long __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:37: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:468:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  468 |     status["auto_cleanup_enabled"] = auto_cleanup_enabled ? "true" : "false";
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:468:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  468 |     status["auto_cleanup_enabled"] = auto_cleanup_enabled ? "true" : "false";
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:468:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  468 |     status["auto_cleanup_enabled"] = auto_cleanup_enabled ? "true" : "false";
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:40: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:42: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:47: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:473:5: warning: variable 'rotatable_antennas' of type 'int' can be declared 'const' [misc-const-correctness]
  473 |     int rotatable_antennas = 0;
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:476:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  476 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:476:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  476 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:476:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  476 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:477:35: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  477 |         if (vehicle.second.status == "active") {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:481:27: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  481 |         total_antennas += vehicle.second.antennas.size();
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:34: warning: 'operator!=<const fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:34: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:34: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:33: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:32: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:36: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:38: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:40: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:498:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  498 | void FGCom_VehicleDynamicsManager::setDefaultRotationSpeed(float deg_per_sec) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:503:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  503 | void FGCom_VehicleDynamicsManager::setMagneticDeclinationSource(const std::string& source) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:507:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  507 | void FGCom_VehicleDynamicsManager::setManualMagneticDeclination(float declination_deg) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      | ~~~~~                               ^
      | auto                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:37: warning: method 'calculateMagneticDeclination' can be made static [readability-convert-member-functions-to-static]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:66: warning: 2 adjacent parameters of 'calculateMagneticDeclination' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                  ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:73: note: the first parameter in the range is 'lat'
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                         ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:85: note: the last parameter in the range is 'lon'
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                                     ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:85: warning: parameter 'lon' is unused [misc-unused-parameters]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                                     ^~~
      |                                                                                      /*lon*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:516:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  516 |     return lat * 0.1f; // Very rough approximation
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:516:18: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  516 |     return lat * 0.1f; // Very rough approximation
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:516:18: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  516 |     return lat * 0.1f; // Very rough approximation
      |                  ^  ~
      |                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:519:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  519 | void FGCom_VehicleDynamicsManager::transformAttitudeToAntennaOrientation(const fgcom_vehicle_attitude& attitude,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:524:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  524 |     if (antenna.antenna_type == "yagi" || antenna.antenna_type == "dipole") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:524:64: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  524 |     if (antenna.antenna_type == "yagi" || antenna.antenna_type == "dipole") {
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:33: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:43: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                           ^   ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:50: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:59: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:59: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:533:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  533 | float FGCom_VehicleDynamicsManager::normalizeAngle(float angle_deg) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:533:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  533 | float FGCom_VehicleDynamicsManager::normalizeAngle(float angle_deg) {
      | ~~~~~                               ^
      | auto                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:533:37: warning: method 'normalizeAngle' can be made static [readability-convert-member-functions-to-static]
  533 | float FGCom_VehicleDynamicsManager::normalizeAngle(float angle_deg) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:24: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                        ^  ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                             ^                    
      |                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:43: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                                           ^    ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:25: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                         ^    ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                ^                    
      |                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:46: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:46: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                              ^    ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      | ~~~~~                               ^
      | auto                                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:37: warning: method 'calculateDistance' can be made static [readability-convert-member-functions-to-static]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:55: warning: 2 adjacent parameters of 'calculateDistance' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                       ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:62: note: the first parameter in the range is 'lat1'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                              ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:75: note: the last parameter in the range is 'lon1'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:81: warning: 2 adjacent parameters of 'calculateDistance' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:88: note: the first parameter in the range is 'lat2'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:101: note: the last parameter in the range is 'lon2'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                                     ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:541:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  541 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:542:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  542 |     double dlon = (lon2 - lon1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:544:5: warning: variable 'a' of type 'double' can be declared 'const' [misc-const-correctness]
  544 |     double a = std::sin(dlat/2) * std::sin(dlat/2) +
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:544:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  544 |     double a = std::sin(dlat/2) * std::sin(dlat/2) +
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:548:5: warning: variable 'c' of type 'double' can be declared 'const' [misc-const-correctness]
  548 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:548:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  548 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:550:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  550 |     return EARTH_RADIUS_KM * c;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      | ~~~~~                               ^
      | auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:54: warning: 2 adjacent parameters of 'calculateBearing' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                      ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:61: note: the first parameter in the range is 'lat1'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                             ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:74: note: the last parameter in the range is 'lon1'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                          ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:80: warning: 2 adjacent parameters of 'calculateBearing' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:87: note: the first parameter in the range is 'lat2'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                       ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:100: note: the last parameter in the range is 'lon2'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:555:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  555 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:555:12: warning: Value stored to 'dlat' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  555 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |            ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:555:12: note: Value stored to 'dlat' during its initialization is never read
  555 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |            ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:556:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  556 |     double dlon = (lon2 - lon1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:558:5: warning: variable 'y' of type 'double' can be declared 'const' [misc-const-correctness]
  558 |     double y = std::sin(dlon) * std::cos(lat2 * DEG_TO_RAD);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:558:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  558 |     double y = std::sin(dlon) * std::cos(lat2 * DEG_TO_RAD);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:559:5: warning: variable 'x' of type 'double' can be declared 'const' [misc-const-correctness]
  559 |     double x = std::cos(lat1 * DEG_TO_RAD) * std::sin(lat2 * DEG_TO_RAD) -
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:559:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  559 |     double x = std::cos(lat1 * DEG_TO_RAD) * std::sin(lat2 * DEG_TO_RAD) -
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:562:5: warning: variable 'bearing' of type 'double' can be declared 'const' [misc-const-correctness]
  562 |     double bearing = std::atan2(y, x) * RAD_TO_DEG;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:563:27: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  563 |     return normalizeAngle(bearing);
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:567:6: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  567 | bool initializeVehicleDynamicsManager() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:567:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  567 | bool initializeVehicleDynamicsManager() {
      | ~~~~ ^
      | auto                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:572:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |     g_vehicle_dynamics_manager = std::make_unique<FGCom_VehicleDynamicsManager>();
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:572:34: warning: 'make_unique<FGCom_VehicleDynamicsManager>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |     g_vehicle_dynamics_manager = std::make_unique<FGCom_VehicleDynamicsManager>();
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:572:39: warning: no header providing "std::make_unique" is directly included [misc-include-cleaner]
  572 |     g_vehicle_dynamics_manager = std::make_unique<FGCom_VehicleDynamicsManager>();
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:576:6: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  576 | void shutdownVehicleDynamicsManager() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:577:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  577 |     g_vehicle_dynamics_manager.reset();
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:505:13: note: default parameter was declared here
  505 |       reset(pointer __p = pointer()) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_VEHICLE_DYNAMICS_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_VEHICLE_DYNAMICS_H
    2 | #define FGCOM_VEHICLE_DYNAMICS_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_VEHICLE_DYNAMICS_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:5:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:6:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <map>
      | ^~~~~~~~~~~~~~
    7 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:7:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:9:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
   10 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:12:8: warning: accessing fields in struct 'fgcom_vehicle_attitude' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   12 | struct fgcom_vehicle_attitude {
      |        ^
   13 |     float pitch_deg;        // Pitch angle in degrees (-90 to +90)
   14 |     float roll_deg;         // Roll angle in degrees (-180 to +180)
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
   22 |         timestamp = std::chrono::system_clock::now();
   23 |     }
   24 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:12:8: note: use "__attribute__((aligned(32)))" to align struct 'fgcom_vehicle_attitude' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:13:11: warning: use default member initializer for 'pitch_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   13 |     float pitch_deg;        // Pitch angle in degrees (-90 to +90)
      |           ^        
      |                    {0.0f}
   14 |     float roll_deg;         // Roll angle in degrees (-180 to +180)
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                ~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:13:11: warning: member variable 'pitch_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:14:11: warning: use default member initializer for 'roll_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   14 |     float roll_deg;         // Roll angle in degrees (-180 to +180)
      |           ^       
      |                   {0.0f}
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                 ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:14:11: warning: member variable 'roll_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:15:11: warning: use default member initializer for 'yaw_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
      |           ^      
      |                  {0.0f}
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                                 ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:15:11: warning: member variable 'yaw_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:16:11: warning: use default member initializer for 'magnetic_heading_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
      |           ^                   
      |                               {0.0f}
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:16:11: warning: member variable 'magnetic_heading_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:17:11: warning: use default member initializer for 'magnetic_declination_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
      |           ^                       
      |                                   {0.0f}
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:17:11: warning: member variable 'magnetic_declination_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:18:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   18 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:5: warning: 'fgcom_vehicle_attitude' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:58: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:73: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:21:52: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:21:84: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:22:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   22 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:22:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   22 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:26:8: warning: accessing fields in struct 'fgcom_vehicle_velocity' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   26 | struct fgcom_vehicle_velocity {
      |        ^
   27 |     float speed_knots;      // Speed in knots
   28 |     float speed_kmh;        // Speed in km/h
   29 |     float speed_ms;         // Speed in m/s
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
   37 |         timestamp = std::chrono::system_clock::now();
   38 |     }
   39 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:26:8: note: use "__attribute__((aligned(32)))" to align struct 'fgcom_vehicle_velocity' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:27:11: warning: use default member initializer for 'speed_knots' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   27 |     float speed_knots;      // Speed in knots
      |           ^          
      |                      {0.0f}
   28 |     float speed_kmh;        // Speed in km/h
   29 |     float speed_ms;         // Speed in m/s
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                ~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:27:11: warning: member variable 'speed_knots' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:28:11: warning: use default member initializer for 'speed_kmh' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   28 |     float speed_kmh;        // Speed in km/h
      |           ^        
      |                    {0.0f}
   29 |     float speed_ms;         // Speed in m/s
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                   ~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:28:11: warning: member variable 'speed_kmh' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:29:11: warning: use default member initializer for 'speed_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   29 |     float speed_ms;         // Speed in m/s
      |           ^       
      |                   {0.0f}
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                                    ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:29:11: warning: member variable 'speed_ms' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:30:11: warning: use default member initializer for 'course_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   30 |     float course_deg;       // Course over ground in degrees (0-360)
      |           ^         
      |                     {0.0f}
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                               ~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:30:11: warning: member variable 'course_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:31:11: warning: use default member initializer for 'vertical_speed_fpm' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
      |           ^                 
      |                             {0.0f}
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:31:11: warning: member variable 'vertical_speed_fpm' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:32:11: warning: use default member initializer for 'vertical_speed_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
      |           ^                
      |                            {0.0f}
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                                           ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:32:11: warning: member variable 'vertical_speed_ms' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:33:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:5: warning: 'fgcom_vehicle_velocity' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:61: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:77: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:36:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:36:68: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:36:93: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:37:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   37 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:37:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   37 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: warning: accessing fields in struct 'fgcom_vehicle_position' is inefficient due to padding; only needs 100 bytes but is using 104 bytes [altera-struct-pack-align]
   41 | struct fgcom_vehicle_position {
      |        ^
   42 |     double latitude;        // Latitude in decimal degrees
   43 |     double longitude;       // Longitude in decimal degrees
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
   53 |         timestamp = std::chrono::system_clock::now();
   54 |     }
   55 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_vehicle_position'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: warning: accessing fields in struct 'fgcom_vehicle_position' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   41 | struct fgcom_vehicle_position {
      |        ^
   42 |     double latitude;        // Latitude in decimal degrees
   43 |     double longitude;       // Longitude in decimal degrees
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
   53 |         timestamp = std::chrono::system_clock::now();
   54 |     }
   55 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_vehicle_position' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:42:12: warning: use default member initializer for 'latitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   42 |     double latitude;        // Latitude in decimal degrees
      |            ^       
      |                    {0.0}
   43 |     double longitude;       // Longitude in decimal degrees
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:42:12: warning: member variable 'latitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:43:12: warning: use default member initializer for 'longitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   43 |     double longitude;       // Longitude in decimal degrees
      |            ^        
      |                     {0.0}
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                               ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:43:12: warning: member variable 'longitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:44:11: warning: use default member initializer for 'altitude_ft_msl' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
      |           ^              
      |                          {0.0f}
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                                               ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:44:11: warning: member variable 'altitude_ft_msl' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:45:11: warning: use default member initializer for 'altitude_ft_agl' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
      |           ^              
      |                          {0.0f}
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                               ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:45:11: warning: member variable 'altitude_ft_agl' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:46:11: warning: use default member initializer for 'ground_elevation_ft' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
      |           ^                  
      |                              {0.0f}
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:46:11: warning: member variable 'ground_elevation_ft' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:47:17: warning: member variable 'callsign' has public visibility [misc-non-private-member-variables-in-classes]
   47 |     std::string callsign;   // Vehicle callsign
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:48:17: warning: member variable 'vehicle_type' has public visibility [misc-non-private-member-variables-in-classes]
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:49:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   49 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:51:5: warning: 'fgcom_vehicle_position' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:51:79: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:52:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:52:74: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                                                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:53:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:53:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: warning: accessing fields in struct 'fgcom_antenna_orientation' is inefficient due to padding; only needs 85 bytes but is using 88 bytes [altera-struct-pack-align]
   57 | struct fgcom_antenna_orientation {
      |        ^
   58 |     std::string antenna_id;     // Unique antenna identifier
   59 |     std::string antenna_type;   // "yagi", "dipole", "vertical", "loop", "whip"
   60 |     float azimuth_deg;          // Azimuth pointing direction (0-360)
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
   69 |         timestamp = std::chrono::system_clock::now();
   70 |     }
   71 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_antenna_orientation'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: warning: accessing fields in struct 'fgcom_antenna_orientation' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   57 | struct fgcom_antenna_orientation {
      |        ^
   58 |     std::string antenna_id;     // Unique antenna identifier
   59 |     std::string antenna_type;   // "yagi", "dipole", "vertical", "loop", "whip"
   60 |     float azimuth_deg;          // Azimuth pointing direction (0-360)
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
   69 |         timestamp = std::chrono::system_clock::now();
   70 |     }
   71 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_antenna_orientation' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:58:17: warning: member variable 'antenna_id' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string antenna_id;     // Unique antenna identifier
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:59:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     std::string antenna_type;   // "yagi", "dipole", "vertical", "loop", "whip"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:60:11: warning: use default member initializer for 'azimuth_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   60 |     float azimuth_deg;          // Azimuth pointing direction (0-360)
      |           ^          
      |                      {0.0f}
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                   ~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:60:11: warning: member variable 'azimuth_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:61:11: warning: use default member initializer for 'elevation_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
      |           ^            
      |                        {0.0f}
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                                      ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:61:11: warning: member variable 'elevation_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:62:10: warning: use default member initializer for 'is_auto_tracking' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
      |          ^               
      |                          {false}
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:62:10: warning: member variable 'is_auto_tracking' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:63:11: warning: use default member initializer for 'rotation_speed_deg_per_sec' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
      |           ^                         
      |                                     {0.0f}
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:63:11: warning: member variable 'rotation_speed_deg_per_sec' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:64:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:66:5: warning: 'fgcom_antenna_orientation' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:66:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:66:68: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:68:61: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
      |                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:69:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:69:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: warning: accessing fields in struct 'fgcom_vehicle_dynamics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   73 | struct fgcom_vehicle_dynamics {
      |        ^
   74 |     fgcom_vehicle_position position;
   75 |     fgcom_vehicle_attitude attitude;
   76 |     fgcom_vehicle_velocity velocity;
   77 |     std::vector<fgcom_antenna_orientation> antennas;
   78 |     std::string vehicle_id;     // Unique vehicle identifier
   79 |     std::string status;         // "active", "inactive", "maintenance"
   80 |     std::chrono::system_clock::time_point last_update;
   81 |     
   82 |     fgcom_vehicle_dynamics() : status("active") {
   83 |         last_update = std::chrono::system_clock::now();
   84 |     }
   85 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_vehicle_dynamics' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:74:28: warning: member variable 'position' has public visibility [misc-non-private-member-variables-in-classes]
   74 |     fgcom_vehicle_position position;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:75:28: warning: member variable 'attitude' has public visibility [misc-non-private-member-variables-in-classes]
   75 |     fgcom_vehicle_attitude attitude;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:76:28: warning: member variable 'velocity' has public visibility [misc-non-private-member-variables-in-classes]
   76 |     fgcom_vehicle_velocity velocity;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:77:44: warning: member variable 'antennas' has public visibility [misc-non-private-member-variables-in-classes]
   77 |     std::vector<fgcom_antenna_orientation> antennas;
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:78:17: warning: member variable 'vehicle_id' has public visibility [misc-non-private-member-variables-in-classes]
   78 |     std::string vehicle_id;     // Unique vehicle identifier
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:79:17: warning: member variable 'status' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     std::string status;         // "active", "inactive", "maintenance"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:80:43: warning: member variable 'last_update' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     std::chrono::system_clock::time_point last_update;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:82:5: warning: 'fgcom_vehicle_dynamics' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   82 |     fgcom_vehicle_dynamics() : status("active") {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:82:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   82 |     fgcom_vehicle_dynamics() : status("active") {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:83:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |         last_update = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:83:23: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |         last_update = std::chrono::system_clock::now();
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: warning: accessing fields in struct 'VehicleDynamicsRequest' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
   88 | struct VehicleDynamicsRequest {
      |        ^
   89 |     std::string vehicle_id;
   90 |     bool include_attitude = true;
   91 |     bool include_velocity = true;
   92 |     bool include_antennas = true;
   93 |     bool include_position = true;
   94 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'VehicleDynamicsRequest'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: warning: accessing fields in struct 'VehicleDynamicsRequest' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   88 | struct VehicleDynamicsRequest {
      |        ^
   89 |     std::string vehicle_id;
   90 |     bool include_attitude = true;
   91 |     bool include_velocity = true;
   92 |     bool include_antennas = true;
   93 |     bool include_position = true;
   94 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: note: use "__attribute__((aligned(64)))" to align struct 'VehicleDynamicsRequest' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: warning: accessing fields in struct 'VehicleDynamicsResponse' is inefficient due to padding; only needs 305 bytes but is using 312 bytes [altera-struct-pack-align]
   96 | struct VehicleDynamicsResponse {
      |        ^
   97 |     bool success;
   98 |     std::string message;
   99 |     fgcom_vehicle_dynamics dynamics;
  100 |     std::chrono::system_clock::time_point timestamp;
  101 |     
  102 |     VehicleDynamicsResponse() : success(false) {
  103 |         timestamp = std::chrono::system_clock::now();
  104 |     }
  105 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'VehicleDynamicsResponse'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: warning: accessing fields in struct 'VehicleDynamicsResponse' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   96 | struct VehicleDynamicsResponse {
      |        ^
   97 |     bool success;
   98 |     std::string message;
   99 |     fgcom_vehicle_dynamics dynamics;
  100 |     std::chrono::system_clock::time_point timestamp;
  101 |     
  102 |     VehicleDynamicsResponse() : success(false) {
  103 |         timestamp = std::chrono::system_clock::now();
  104 |     }
  105 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: note: use "__attribute__((aligned(128)))" to align struct 'VehicleDynamicsResponse' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:97:10: warning: use default member initializer for 'success' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   97 |     bool success;
      |          ^      
      |                 {false}
   98 |     std::string message;
   99 |     fgcom_vehicle_dynamics dynamics;
  100 |     std::chrono::system_clock::time_point timestamp;
  101 |     
  102 |     VehicleDynamicsResponse() : success(false) {
      |                                 ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:97:10: warning: member variable 'success' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:98:17: warning: member variable 'message' has public visibility [misc-non-private-member-variables-in-classes]
   98 |     std::string message;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:99:28: warning: member variable 'dynamics' has public visibility [misc-non-private-member-variables-in-classes]
   99 |     fgcom_vehicle_dynamics dynamics;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:100:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
  100 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:102:5: warning: 'VehicleDynamicsResponse' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  102 |     VehicleDynamicsResponse() : success(false) {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:103:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:103:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: warning: accessing fields in struct 'AntennaRotationRequest' is inefficient due to padding; only needs 105 bytes but is using 112 bytes [altera-struct-pack-align]
  107 | struct AntennaRotationRequest {
      |        ^
  108 |     std::string vehicle_id;
  109 |     std::string antenna_id;
  110 |     float target_azimuth_deg;
  111 |     float target_elevation_deg;
  112 |     bool immediate = false;     // If false, use rotation speed
  113 |     std::string rotation_mode = "absolute"; // "absolute" or "relative"
  114 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaRotationRequest'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: warning: accessing fields in struct 'AntennaRotationRequest' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  107 | struct AntennaRotationRequest {
      |        ^
  108 |     std::string vehicle_id;
  109 |     std::string antenna_id;
  110 |     float target_azimuth_deg;
  111 |     float target_elevation_deg;
  112 |     bool immediate = false;     // If false, use rotation speed
  113 |     std::string rotation_mode = "absolute"; // "absolute" or "relative"
  114 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaRotationRequest' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:113:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  113 |     std::string rotation_mode = "absolute"; // "absolute" or "relative"
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: warning: accessing fields in struct 'AntennaRotationResponse' is inefficient due to padding; only needs 133 bytes but is using 144 bytes [altera-struct-pack-align]
  116 | struct AntennaRotationResponse {
      |        ^
  117 |     bool success;
  118 |     std::string message;
  119 |     fgcom_antenna_orientation current_orientation;
  120 |     float estimated_arrival_time_sec;
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
  124 |         timestamp = std::chrono::system_clock::now();
  125 |     }
  126 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaRotationResponse'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: warning: accessing fields in struct 'AntennaRotationResponse' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  116 | struct AntennaRotationResponse {
      |        ^
  117 |     bool success;
  118 |     std::string message;
  119 |     fgcom_antenna_orientation current_orientation;
  120 |     float estimated_arrival_time_sec;
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
  124 |         timestamp = std::chrono::system_clock::now();
  125 |     }
  126 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaRotationResponse' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:117:10: warning: use default member initializer for 'success' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  117 |     bool success;
      |          ^      
      |                 {false}
  118 |     std::string message;
  119 |     fgcom_antenna_orientation current_orientation;
  120 |     float estimated_arrival_time_sec;
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |                                 ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:117:10: warning: member variable 'success' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:118:17: warning: member variable 'message' has public visibility [misc-non-private-member-variables-in-classes]
  118 |     std::string message;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:119:31: warning: member variable 'current_orientation' has public visibility [misc-non-private-member-variables-in-classes]
  119 |     fgcom_antenna_orientation current_orientation;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:120:11: warning: use default member initializer for 'estimated_arrival_time_sec' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  120 |     float estimated_arrival_time_sec;
      |           ^                         
      |                                     {0.0f}
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:120:11: warning: member variable 'estimated_arrival_time_sec' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:121:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
  121 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:123:5: warning: 'AntennaRotationResponse' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:123:76: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |                                                                            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:124:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  124 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:124:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  124 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: warning: accessing fields in struct 'VehicleListResponse' is inefficient due to padding; only needs 161 bytes but is using 168 bytes [altera-struct-pack-align]
  128 | struct VehicleListResponse {
      |        ^
  129 |     bool success;
  130 |     std::string message;
  131 |     std::vector<std::string> vehicle_ids;
  132 |     std::map<std::string, std::string> vehicle_types;
  133 |     std::map<std::string, std::string> vehicle_status;
  134 |     std::chrono::system_clock::time_point timestamp;
  135 |     
  136 |     VehicleListResponse() : success(false) {
  137 |         timestamp = std::chrono::system_clock::now();
  138 |     }
  139 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'VehicleListResponse'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: warning: accessing fields in struct 'VehicleListResponse' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  128 | struct VehicleListResponse {
      |        ^
  129 |     bool success;
  130 |     std::string message;
  131 |     std::vector<std::string> vehicle_ids;
  132 |     std::map<std::string, std::string> vehicle_types;
  133 |     std::map<std::string, std::string> vehicle_status;
  134 |     std::chrono::system_clock::time_point timestamp;
  135 |     
  136 |     VehicleListResponse() : success(false) {
  137 |         timestamp = std::chrono::system_clock::now();
  138 |     }
  139 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: note: use "__attribute__((aligned(128)))" to align struct 'VehicleListResponse' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:129:10: warning: use default member initializer for 'success' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  129 |     bool success;
      |          ^      
      |                 {false}
  130 |     std::string message;
  131 |     std::vector<std::string> vehicle_ids;
  132 |     std::map<std::string, std::string> vehicle_types;
  133 |     std::map<std::string, std::string> vehicle_status;
  134 |     std::chrono::system_clock::time_point timestamp;
  135 |     
  136 |     VehicleListResponse() : success(false) {
      |                             ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:129:10: warning: member variable 'success' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:130:17: warning: member variable 'message' has public visibility [misc-non-private-member-variables-in-classes]
  130 |     std::string message;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:131:30: warning: member variable 'vehicle_ids' has public visibility [misc-non-private-member-variables-in-classes]
  131 |     std::vector<std::string> vehicle_ids;
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:132:40: warning: member variable 'vehicle_types' has public visibility [misc-non-private-member-variables-in-classes]
  132 |     std::map<std::string, std::string> vehicle_types;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:133:40: warning: member variable 'vehicle_status' has public visibility [misc-non-private-member-variables-in-classes]
  133 |     std::map<std::string, std::string> vehicle_status;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:134:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
  134 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:136:5: warning: 'VehicleListResponse' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  136 |     VehicleListResponse() : success(false) {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:137:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:137:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:142:7: warning: class 'FGCom_VehicleDynamicsManager' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  142 | class FGCom_VehicleDynamicsManager {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:147:10: warning: use default member initializer for 'auto_cleanup_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  147 |     bool auto_cleanup_enabled;
      |          ^                   
      |                              {true}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:148:9: warning: use default member initializer for 'cleanup_interval_seconds' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  148 |     int cleanup_interval_seconds;
      |         ^                       
      |                                 {300}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:151:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     float calculateMagneticDeclination(double lat, double lon);
      |     ~~~~~ ^                                                   
      |     auto                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:158:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  158 |     float normalizeAngle(float angle_deg);
      |     ~~~~~ ^                              
      |     auto                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:159:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     float calculateDistance(double lat1, double lon1, double lat2, double lon2);
      |     ~~~~~ ^                                                                    
      |     auto                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:160:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     float calculateBearing(double lat1, double lon1, double lat2, double lon2);
      |     ~~~~~ ^                                                                   
      |     auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type);
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:168:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  168 |     bool unregisterVehicle(const std::string& vehicle_id);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:169:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  169 |     bool updateVehiclePosition(const std::string& vehicle_id, const fgcom_vehicle_position& position);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:170:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     bool updateVehicleAttitude(const std::string& vehicle_id, const fgcom_vehicle_attitude& attitude);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:171:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     bool updateVehicleVelocity(const std::string& vehicle_id, const fgcom_vehicle_velocity& velocity);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:172:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  172 |     bool updateVehicleDynamics(const std::string& vehicle_id, const fgcom_vehicle_dynamics& dynamics);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:175:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     bool addAntenna(const std::string& vehicle_id, const fgcom_antenna_orientation& antenna);
      |     ~~~~ ^                                                                                  
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool removeAntenna(const std::string& vehicle_id, const std::string& antenna_id);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:177:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  177 |     bool updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |     ~~~~ ^
      |     auto
  178 |                                  const fgcom_antenna_orientation& orientation);
      |                                                                               
      |                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:179:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  179 |     bool rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |     ~~~~ ^
      |     auto
  180 |                       float target_azimuth, float target_elevation, bool immediate = false);
      |                                                                                            
      |                                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:180:69: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  180 |                       float target_azimuth, float target_elevation, bool immediate = false);
      |                                                                     ^              ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:183:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     VehicleDynamicsResponse getVehicleDynamics(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                      -> VehicleDynamicsResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:184:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     VehicleListResponse getAllVehicles();
      |     ~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                 -> VehicleListResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:185:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     std::vector<fgcom_antenna_orientation> getVehicleAntennas(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                                     -> std::vector<fgcom_antenna_orientation>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:186:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     fgcom_vehicle_position getVehiclePosition(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                     -> fgcom_vehicle_position
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:187:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     fgcom_vehicle_attitude getVehicleAttitude(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                     -> fgcom_vehicle_attitude
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:188:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 |     fgcom_vehicle_velocity getVehicleVelocity(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                     -> fgcom_vehicle_velocity
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:191:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     AntennaRotationResponse calculateAntennaRotation(const AntennaRotationRequest& request);
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                              
      |     auto                                                                                    -> AntennaRotationResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:192:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     std::vector<std::string> getVehiclesInRange(double center_lat, double center_lon, float radius_km);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                        
      |     auto                                                                                               -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:193:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     std::vector<std::string> getVehiclesByType(const std::string& vehicle_type);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                 
      |     auto                                                                        -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:196:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |     bool enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |     ~~~~ ^
      |     auto
  197 |                            const std::string& target_vehicle_id);
      |                                                                 
      |                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:198:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 |     bool disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id);
      |     ~~~~ ^                                                                                
      |     auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:199:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  199 |     bool updateAutoTracking();
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:203:39: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  203 |     void setAutoCleanup(bool enabled, int interval_seconds = 300);
      |                                       ^                    ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:203:62: warning: 300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  203 |     void setAutoCleanup(bool enabled, int interval_seconds = 300);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:204:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     std::map<std::string, std::string> getSystemStatus();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                                 -> std::map<std::string, std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:213:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 |     std::string getVehicleModulationMode(const std::string& vehicle_id);
      |     ~~~~~~~~~~~ ^                                                      
      |     auto                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:214:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     bool validateModulationMode(const std::string& mode);
      |     ~~~~ ^                                              
      |     auto                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:215:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     std::vector<std::string> getSupportedModulationModes();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |     auto                                                   -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:219:54: warning: variable 'g_vehicle_dynamics_manager' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  219 | extern std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager;
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:222:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 | bool initializeVehicleDynamicsManager();
      | ~~~~ ^                                 
      | auto                                    -> bool
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/predefined_ops.h:318:16: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  318 |         { return bool(_M_pred(*__it)); }
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:148:35: note: resolves to this declaration
  148 |                                   [&antenna_id](const fgcom_antenna_orientation& antenna) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:388:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  388 |               *__result = *__first;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: resolves to this declaration
   57 | struct fgcom_antenna_orientation {
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:398:10: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |         { *__to = *__from; }
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:40:8: note: resolves to this declaration
   40 | struct TerrainPoint {
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:413:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  413 |               *__result = std::move(*__first);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: resolves to this declaration
   57 | struct fgcom_antenna_orientation {
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1070:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
 1070 |     { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_cache.h:42:31: note: default parameter was declared here
   42 |         explicit TerrainCache(size_t maxSize = 1000, std::chrono::milliseconds defaultTtl = std::chrono::minutes(5));
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/condition_variable:104:10: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  104 |         while (!__p())
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:508:32: note: resolves to this declaration
  508 |             task_cv.wait(lock, [this] { return !task_queue.empty() || !workers_running.load(); });
      |                                ^
