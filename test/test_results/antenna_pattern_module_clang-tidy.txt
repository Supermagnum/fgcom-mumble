/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:19:1: warning: #includes are not sorted properly [llvm-include-order]
   19 | #include <iostream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:19:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
   20 | #include <fstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:20:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
   20 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
   21 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:21:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   21 | #include <sstream>
      | ^~~~~~~~~~~~~~~~~~
   22 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:22:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   22 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   23 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:23:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   23 | #include <algorithm>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:23:1: warning: included header algorithm is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:24:1: warning: system include complex not allowed [llvmlibc-restrict-system-libc-headers]
   24 | #include <complex>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:24:1: warning: included header complex is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:27:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   27 | std::map<std::string, GroundSystem> FGCom_AntennaGroundSystem::predefined_ground_systems;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:27:6: warning: no header providing "std::map" is directly included [misc-include-cleaner]
   21 | #include <sstream>
   22 | #include <cmath>
   23 | #include <algorithm>
   24 | #include <complex>
   25 | 
   26 | // Static member definitions
   27 | std::map<std::string, GroundSystem> FGCom_AntennaGroundSystem::predefined_ground_systems;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:27:15: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   25 | 
   26 | // Static member definitions
   27 | std::map<std::string, GroundSystem> FGCom_AntennaGroundSystem::predefined_ground_systems;
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:27:64: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   27 | std::map<std::string, GroundSystem> FGCom_AntennaGroundSystem::predefined_ground_systems;
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:28:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   28 | std::map<std::string, AntennaPattern> FGCom_AntennaGroundSystem::antenna_patterns;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:28:66: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   28 | std::map<std::string, AntennaPattern> FGCom_AntennaGroundSystem::antenna_patterns;
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:29:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   29 | std::string FGCom_AntennaGroundSystem::pattern_directory = "/usr/share/fgcom-mumble/antenna_patterns/";
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:29:40: warning: initialization of 'pattern_directory' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   29 | std::string FGCom_AntennaGroundSystem::pattern_directory = "/usr/share/fgcom-mumble/antenna_patterns/";
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: possibly throwing constructor declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:29:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   29 | std::string FGCom_AntennaGroundSystem::pattern_directory = "/usr/share/fgcom-mumble/antenna_patterns/";
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:29:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   29 | std::string FGCom_AntennaGroundSystem::pattern_directory = "/usr/share/fgcom-mumble/antenna_patterns/";
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:30:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   30 | bool FGCom_AntennaGroundSystem::initialized = false;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:32:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   32 | std::map<std::string, std::string> FGCom_AntennaConfig::config_values;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:32:57: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   32 | std::map<std::string, std::string> FGCom_AntennaConfig::config_values;
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:33:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   33 | bool FGCom_AntennaConfig::config_loaded = false;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:35:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   35 | bool FGCom_AntennaGroundSystem::initialize() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:35:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   35 | bool FGCom_AntennaGroundSystem::initialize() {
      | ~~~~                            ^
      | auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:36:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   36 |     if (initialized) return true;
      |                     ^            
      |                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:38:5: warning: 'setupPredefinedGroundSystems' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   38 |     setupPredefinedGroundSystems();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:180:17: note: resolves to this declaration
  180 |     static void setupPredefinedGroundSystems();
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:43:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   43 | void FGCom_AntennaGroundSystem::setPatternDirectory(const std::string& dir) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:44:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   44 |     pattern_directory = dir;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:47:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   47 | void FGCom_AntennaGroundSystem::setupPredefinedGroundSystems() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:50:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |     excellent_star.type = "star_network";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:51:35: warning: 15.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     excellent_star.conductivity = 15.0;      // Saltwater coastal
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:52:36: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     excellent_star.area_coverage = 3000.0;   // >2000 m²
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:53:35: warning: 64 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   53 |     excellent_star.radial_count = 64;        // 60+ radials
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:54:36: warning: 25.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   54 |     excellent_star.radial_length = 25.0;     // λ/4 at HF
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:55:40: warning: 0.05 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   55 |     excellent_star.ground_resistance = 0.05; // <0.1 Ω
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:57:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   57 |     excellent_star.material = "copper";
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:58:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     excellent_star.notes = "Excellent star network for coastal HF station";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:59:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   59 |     predefined_ground_systems["excellent_star"] = excellent_star;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:59:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   59 |     predefined_ground_systems["excellent_star"] = excellent_star;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:59:49: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   59 |     predefined_ground_systems["excellent_star"] = excellent_star;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:62:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |     excellent_plate.type = "copper_plate";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:63:36: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   63 |     excellent_plate.conductivity = 5.0;      // Saltwater environment
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:65:41: warning: 0.02 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   65 |     excellent_plate.ground_resistance = 0.02; // <0.1 Ω
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:67:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |     excellent_plate.material = "copper";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:68:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |     excellent_plate.notes = "Large copper plate in saltwater";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:69:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |     predefined_ground_systems["excellent_plate"] = excellent_plate;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:69:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   69 |     predefined_ground_systems["excellent_plate"] = excellent_plate;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:69:50: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |     predefined_ground_systems["excellent_plate"] = excellent_plate;
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:73:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   73 |     good_star.type = "star_network";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:74:30: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   74 |     good_star.conductivity = 5.0;            // Average soil
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:75:31: warning: 1500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   75 |     good_star.area_coverage = 1500.0;        // 500-2000 m²
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:76:30: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   76 |     good_star.radial_count = 32;             // 16-32 radials
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:77:31: warning: 15.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   77 |     good_star.radial_length = 15.0;          // λ/8 to λ/4
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:78:35: warning: 0.3 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   78 |     good_star.ground_resistance = 0.3;       // 0.1-0.5 Ω
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:80:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   80 |     good_star.material = "copper";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:81:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |     good_star.notes = "Good star network for inland HF station";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:82:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     predefined_ground_systems["good_star"] = good_star;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:82:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   82 |     predefined_ground_systems["good_star"] = good_star;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:82:44: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     predefined_ground_systems["good_star"] = good_star;
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:85:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   85 |     good_plate.type = "copper_plate";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:86:31: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   86 |     good_plate.conductivity = 0.5;           // Freshwater or moderate soil
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:87:32: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   87 |     good_plate.area_coverage = 30.0;         // 10-50 m²
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:88:36: warning: 0.2 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   88 |     good_plate.ground_resistance = 0.2;      // 0.1-0.5 Ω
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:90:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |     good_plate.material = "copper";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:91:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   91 |     good_plate.notes = "Good copper plate for freshwater/moderate soil";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:92:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   92 |     predefined_ground_systems["good_plate"] = good_plate;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:92:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   92 |     predefined_ground_systems["good_plate"] = good_plate;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:92:45: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   92 |     predefined_ground_systems["good_plate"] = good_plate;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:96:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   96 |     average_star.type = "star_network";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:97:33: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   97 |     average_star.conductivity = 0.1;         // Average soil
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:98:34: warning: 800.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   98 |     average_star.area_coverage = 800.0;      // 500-2000 m²
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:99:33: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   99 |     average_star.radial_count = 16;          // 16-32 radials
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:100:34: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  100 |     average_star.radial_length = 10.0;       // λ/8 to λ/4
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:103:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     average_star.material = "copper";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:104:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  104 |     average_star.notes = "Average star network for typical soil";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:105:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  105 |     predefined_ground_systems["average_star"] = average_star;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:105:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  105 |     predefined_ground_systems["average_star"] = average_star;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:105:47: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  105 |     predefined_ground_systems["average_star"] = average_star;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:108:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  108 |     average_plate.type = "copper_plate";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:109:34: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  109 |     average_plate.conductivity = 0.01;       // Poor soil
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:110:35: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  110 |     average_plate.area_coverage = 5.0;       // <10 m²
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:111:39: warning: 1.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  111 |     average_plate.ground_resistance = 1.5;   // 0.5-2 Ω
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:113:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  113 |     average_plate.material = "copper";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:114:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |     average_plate.notes = "Average copper plate for poor soil";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:115:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     predefined_ground_systems["average_plate"] = average_plate;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:115:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  115 |     predefined_ground_systems["average_plate"] = average_plate;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:115:48: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     predefined_ground_systems["average_plate"] = average_plate;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:119:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  119 |     poor_star.type = "star_network";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:120:30: warning: 0.0001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  120 |     poor_star.conductivity = 0.0001;         // Dry sand, rocky terrain
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:121:31: warning: 200.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  121 |     poor_star.area_coverage = 200.0;         // <500 m²
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:122:30: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  122 |     poor_star.radial_count = 8;              // <16 radials
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:123:31: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  123 |     poor_star.radial_length = 5.0;           // Very short radials
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:124:35: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  124 |     poor_star.ground_resistance = 5.0;       // >2 Ω
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:126:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  126 |     poor_star.material = "aluminum";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:127:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  127 |     poor_star.notes = "Poor star network for dry/rocky terrain";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:128:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     predefined_ground_systems["poor_star"] = poor_star;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:128:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  128 |     predefined_ground_systems["poor_star"] = poor_star;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:128:44: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     predefined_ground_systems["poor_star"] = poor_star;
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:131:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  131 |     poor_plate.type = "copper_plate";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:132:31: warning: 0.0001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  132 |     poor_plate.conductivity = 0.0001;        // Very poor conductivity
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:133:32: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  133 |     poor_plate.area_coverage = 2.0;          // <10 m²
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:134:36: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  134 |     poor_plate.ground_resistance = 10.0;     // >2 Ω
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:136:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  136 |     poor_plate.material = "steel";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:137:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |     poor_plate.notes = "Poor copper plate for very poor soil";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:138:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  138 |     predefined_ground_systems["poor_plate"] = poor_plate;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:138:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  138 |     predefined_ground_systems["poor_plate"] = poor_plate;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:138:45: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  138 |     predefined_ground_systems["poor_plate"] = poor_plate;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:142:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  142 |     large_aircraft.type = "fuselage";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:143:35: warning: 3.5e7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  143 |     large_aircraft.conductivity = 3.5e7;     // Aluminum conductivity
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:144:36: warning: 600.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  144 |     large_aircraft.area_coverage = 600.0;    // 500-800 m² effective area
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:145:40: warning: 0.05 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  145 |     large_aircraft.ground_resistance = 0.05; // <0.1 Ω
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:147:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |     large_aircraft.material = "aluminum";
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:148:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |     large_aircraft.notes = "Large aircraft (747, A380) fuselage";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:149:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  149 |     predefined_ground_systems["large_aircraft"] = large_aircraft;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:149:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  149 |     predefined_ground_systems["large_aircraft"] = large_aircraft;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:149:49: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  149 |     predefined_ground_systems["large_aircraft"] = large_aircraft;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:152:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |     medium_aircraft.type = "fuselage";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:153:36: warning: 3.5e7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  153 |     medium_aircraft.conductivity = 3.5e7;    // Aluminum conductivity
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:154:37: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  154 |     medium_aircraft.area_coverage = 300.0;   // 200-400 m² effective area
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:155:41: warning: 0.2 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  155 |     medium_aircraft.ground_resistance = 0.2; // 0.1-0.5 Ω
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:157:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     medium_aircraft.material = "aluminum";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:158:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |     medium_aircraft.notes = "Medium aircraft (737, A320) fuselage";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:159:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  159 |     predefined_ground_systems["medium_aircraft"] = medium_aircraft;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:159:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  159 |     predefined_ground_systems["medium_aircraft"] = medium_aircraft;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:159:50: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  159 |     predefined_ground_systems["medium_aircraft"] = medium_aircraft;
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:162:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  162 |     small_aircraft.type = "fuselage";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:163:35: warning: 3.5e7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  163 |     small_aircraft.conductivity = 3.5e7;     // Aluminum conductivity
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:167:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |     small_aircraft.material = "aluminum";
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:168:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  168 |     small_aircraft.notes = "Small aircraft (Cessna 172) fuselage";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:169:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |     predefined_ground_systems["small_aircraft"] = small_aircraft;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:169:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  169 |     predefined_ground_systems["small_aircraft"] = small_aircraft;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:169:49: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |     predefined_ground_systems["small_aircraft"] = small_aircraft;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:173:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  173 |     large_ship.type = "fuselage";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:174:31: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  174 |     large_ship.conductivity = 5.0;           // Saltwater conductivity
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:175:32: warning: 2000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  175 |     large_ship.area_coverage = 2000.0;       // 1000+ m² hull area
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:176:36: warning: 0.005 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  176 |     large_ship.ground_resistance = 0.005;    // <0.01 Ω
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:178:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  178 |     large_ship.material = "steel";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:179:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  179 |     large_ship.notes = "Large ship hull in saltwater";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:180:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     predefined_ground_systems["large_ship"] = large_ship;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:180:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  180 |     predefined_ground_systems["large_ship"] = large_ship;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:180:45: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     predefined_ground_systems["large_ship"] = large_ship;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:183:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  183 |     medium_ship.type = "fuselage";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:184:32: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  184 |     medium_ship.conductivity = 5.0;          // Saltwater conductivity
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:185:33: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  185 |     medium_ship.area_coverage = 500.0;       // 100-1000 m²
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:186:37: warning: 0.05 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  186 |     medium_ship.ground_resistance = 0.05;    // 0.01-0.1 Ω
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:188:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  188 |     medium_ship.material = "steel";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:189:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  189 |     medium_ship.notes = "Medium ship/boat hull in saltwater";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:190:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     predefined_ground_systems["medium_ship"] = medium_ship;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:190:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  190 |     predefined_ground_systems["medium_ship"] = medium_ship;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:190:46: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     predefined_ground_systems["medium_ship"] = medium_ship;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:193:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  193 |     small_boat.type = "fuselage";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:194:31: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  194 |     small_boat.conductivity = 5.0;           // Saltwater conductivity
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:195:32: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  195 |     small_boat.area_coverage = 50.0;         // 20-100 m²
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:196:36: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  196 |     small_boat.ground_resistance = 0.5;      // 0.1-1 Ω
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:198:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  198 |     small_boat.material = "fiberglass";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:199:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |     small_boat.notes = "Small boat hull in saltwater";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:200:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  200 |     predefined_ground_systems["small_boat"] = small_boat;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:200:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  200 |     predefined_ground_systems["small_boat"] = small_boat;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:200:45: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  200 |     predefined_ground_systems["small_boat"] = small_boat;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: resolves to this declaration
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:203:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  203 | GroundSystem FGCom_AntennaGroundSystem::createGroundSystem(const std::string& type, float conductivity, float area) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:203:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 | GroundSystem FGCom_AntennaGroundSystem::createGroundSystem(const std::string& type, float conductivity, float area) {
      | ~~~~~~~~~~~~                            ^
      | auto                                                                                                                -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:203:85: warning: 2 adjacent parameters of 'createGroundSystem' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  203 | GroundSystem FGCom_AntennaGroundSystem::createGroundSystem(const std::string& type, float conductivity, float area) {
      |                                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:203:91: note: the first parameter in the range is 'conductivity'
  203 | GroundSystem FGCom_AntennaGroundSystem::createGroundSystem(const std::string& type, float conductivity, float area) {
      |                                                                                           ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:203:111: note: the last parameter in the range is 'area'
  203 | GroundSystem FGCom_AntennaGroundSystem::createGroundSystem(const std::string& type, float conductivity, float area) {
      |                                                                                                               ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:205:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  205 |     ground.type = type;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:208:32: warning: 'calculateGroundResistance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  208 |     ground.ground_resistance = calculateGroundResistance(ground);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:128:18: note: resolves to this declaration
  128 |     static float calculateGroundResistance(const GroundSystem& ground);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:212:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  212 | GroundSystem FGCom_AntennaGroundSystem::getPredefinedGroundSystem(const std::string& name) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:212:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  212 | GroundSystem FGCom_AntennaGroundSystem::getPredefinedGroundSystem(const std::string& name) {
      | ~~~~~~~~~~~~                            ^
      | auto                                                                                       -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:213:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  213 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:213:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  213 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:35:33: note: resolves to this declaration
   35 | bool FGCom_AntennaGroundSystem::initialize() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:215:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     auto it = predefined_ground_systems.find(name);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:216:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  216 |     if (it != predefined_ground_systems.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:217:18: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  217 |         return it->second;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:221:37: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |     return predefined_ground_systems["average_star"];
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:221:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  221 |     return predefined_ground_systems["average_star"];
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:224:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
   25 | std::vector<std::string> FGCom_AntennaGroundSystem::getAvailableGroundSystems() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:224:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  224 | std::vector<std::string> FGCom_AntennaGroundSystem::getAvailableGroundSystems() {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:224:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  224 | std::vector<std::string> FGCom_AntennaGroundSystem::getAvailableGroundSystems() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                            ^
      | auto                                                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:225:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  225 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:225:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:35:33: note: resolves to this declaration
   35 | bool FGCom_AntennaGroundSystem::initialize() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:228:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  228 |     for (const auto& pair : predefined_ground_systems) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:228:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  228 |     for (const auto& pair : predefined_ground_systems) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:228:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  228 |     for (const auto& pair : predefined_ground_systems) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:228:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  228 |     for (const auto& pair : predefined_ground_systems) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:229:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  228 |     for (const auto& pair : predefined_ground_systems) {
  229 |         systems.push_back(pair.first);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:234:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  234 | GroundPerformance FGCom_AntennaGroundSystem::evaluateGroundPerformance(const GroundSystem& ground) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:234:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  234 | GroundPerformance FGCom_AntennaGroundSystem::evaluateGroundPerformance(const GroundSystem& ground) {
      | ~~~~~~~~~~~~~~~~~                            ^
      | auto                                                                                               -> GroundPerformance
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:235:36: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  235 |     if (ground.ground_resistance < 0.1 && ground.conductivity > 10.0) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:235:65: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  235 |     if (ground.ground_resistance < 0.1 && ground.conductivity > 10.0) {
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:237:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  237 |     } else if (ground.ground_resistance < 0.5 && ground.conductivity > 1.0) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  238 |         return GroundPerformance::GOOD;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  239 |     } else if (ground.ground_resistance < 2.0 && ground.conductivity > 0.01) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  240 |         return GroundPerformance::AVERAGE;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  241 |     } else {
      |     ~~~~~~~~
  242 |         return GroundPerformance::POOR;
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  243 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:237:43: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  237 |     } else if (ground.ground_resistance < 0.5 && ground.conductivity > 1.0) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:239:43: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  239 |     } else if (ground.ground_resistance < 2.0 && ground.conductivity > 0.01) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:239:72: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  239 |     } else if (ground.ground_resistance < 2.0 && ground.conductivity > 0.01) {
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:246:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  246 | float FGCom_AntennaGroundSystem::calculateGroundLoss(const GroundSystem& ground, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:246:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 | float FGCom_AntennaGroundSystem::calculateGroundLoss(const GroundSystem& ground, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:250:36: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  250 |     if (ground.ground_resistance > 0.1) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:251:20: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  251 |         loss_db += 20.0 * log10(1.0 + ground.ground_resistance);
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:251:20: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:255:31: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  255 |     if (ground.conductivity < 0.01) {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:256:20: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  256 |         loss_db += 6.0; // 6 dB loss for poor conductivity
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:257:38: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  257 |     } else if (ground.conductivity < 0.1) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:258:20: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  258 |         loss_db += 3.0; // 3 dB loss for moderate conductivity
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:262:25: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  262 |     if (frequency_mhz < 5.0) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:263:20: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  263 |         loss_db += 2.0; // Additional loss at lower frequencies
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:269:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  269 | float FGCom_AntennaGroundSystem::calculateGroundResistance(const GroundSystem& ground) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:269:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  269 | float FGCom_AntennaGroundSystem::calculateGroundResistance(const GroundSystem& ground) {
      | ~~~~~                            ^
      | auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:270:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  270 |     if (ground.type == "star_network") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:271:16: warning: 'calculateStarNetworkResistance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  271 |         return calculateStarNetworkResistance(ground.radial_count, ground.radial_length, ground.conductivity);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:133:18: note: resolves to this declaration
  133 |     static float calculateStarNetworkResistance(int radials, float length, float conductivity);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:272:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  272 |     } else if (ground.type == "copper_plate") {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  273 |         return calculatePlateResistance(ground.area_coverage, ground.conductivity);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  274 |     } else if (ground.type == "fuselage") {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  275 |         return calculateFuselageResistance(ground.area_coverage, ground.material);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  276 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:272:28: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     } else if (ground.type == "copper_plate") {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:273:16: warning: 'calculatePlateResistance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  273 |         return calculatePlateResistance(ground.area_coverage, ground.conductivity);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:138:18: note: resolves to this declaration
  138 |     static float calculatePlateResistance(float area, float conductivity);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:274:28: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  274 |     } else if (ground.type == "fuselage") {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:275:16: warning: 'calculateFuselageResistance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  275 |         return calculateFuselageResistance(ground.area_coverage, ground.material);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:145:18: note: resolves to this declaration
  145 |     static float calculateFuselageResistance(float area, const std::string& material);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:281:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  281 | float FGCom_AntennaGroundSystem::calculateGroundConductivity(const GroundSystem& ground) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:281:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  281 | float FGCom_AntennaGroundSystem::calculateGroundConductivity(const GroundSystem& ground) {
      | ~~~~~                            ^
      | auto                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:286:30: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  286 |         base_conductivity *= 5.0; // Saltwater enhancement
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:289:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  289 |     if (ground.type == "star_network") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:291:30: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  291 |         base_conductivity *= (1.0 + ground.radial_count / 100.0);
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:297:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  297 | GroundSystem FGCom_AntennaGroundSystem::createStarNetwork(int radials, float length, float conductivity) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:297:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  297 | GroundSystem FGCom_AntennaGroundSystem::createStarNetwork(int radials, float length, float conductivity) {
      | ~~~~~~~~~~~~                            ^
      | auto                                                                                                     -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:299:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  299 |     ground.type = "star_network";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:303:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  303 |     ground.area_coverage = radials * length * length * 0.1; // Approximate coverage
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:303:28: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:303:56: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  303 |     ground.area_coverage = radials * length * length * 0.1; // Approximate coverage
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:304:32: warning: 'calculateStarNetworkResistance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  304 |     ground.ground_resistance = calculateStarNetworkResistance(radials, length, conductivity);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:133:18: note: resolves to this declaration
  133 |     static float calculateStarNetworkResistance(int radials, float length, float conductivity);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:305:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  305 |     ground.material = "copper";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:309:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  309 | float FGCom_AntennaGroundSystem::calculateStarNetworkResistance(int radials, float length, float conductivity) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:309:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  309 | float FGCom_AntennaGroundSystem::calculateStarNetworkResistance(int radials, float length, float conductivity) {
      | ~~~~~                            ^
      | auto                                                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:309:65: warning: 2 adjacent parameters of 'calculateStarNetworkResistance' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  309 | float FGCom_AntennaGroundSystem::calculateStarNetworkResistance(int radials, float length, float conductivity) {
      |                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:309:69: note: the first parameter in the range is 'radials'
  309 | float FGCom_AntennaGroundSystem::calculateStarNetworkResistance(int radials, float length, float conductivity) {
      |                                                                     ^~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:309:84: note: the last parameter in the range is 'length'
  309 | float FGCom_AntennaGroundSystem::calculateStarNetworkResistance(int radials, float length, float conductivity) {
      |                                                                                    ^~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:309:78: note: 'int' and 'float' may be implicitly converted
  309 | float FGCom_AntennaGroundSystem::calculateStarNetworkResistance(int radials, float length, float conductivity) {
      |                                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:311:5: warning: variable 'single_radial_resistance' of type 'float' can be declared 'const' [misc-const-correctness]
  311 |     float single_radial_resistance = 1.0 / (conductivity * length * 0.001); // 1mm wire
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:311:38: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  311 |     float single_radial_resistance = 1.0 / (conductivity * length * 0.001); // 1mm wire
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:311:69: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  311 |     float single_radial_resistance = 1.0 / (conductivity * length * 0.001); // 1mm wire
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:312:39: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  312 |     return single_radial_resistance / radials;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:315:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  315 | float FGCom_AntennaGroundSystem::calculateOptimalRadialLength(float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:315:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  315 | float FGCom_AntennaGroundSystem::calculateOptimalRadialLength(float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:317:5: warning: variable 'wavelength_m' of type 'float' can be declared 'const' [misc-const-correctness]
  317 |     float wavelength_m = 300.0 / frequency_mhz; // Wavelength in meters
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:317:26: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  317 |     float wavelength_m = 300.0 / frequency_mhz; // Wavelength in meters
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:317:26: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:318:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  318 |     return wavelength_m / 4.0;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:318:27: warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  318 |     return wavelength_m / 4.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:321:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  321 | GroundSystem FGCom_AntennaGroundSystem::createCopperPlate(float area, float conductivity, bool saltwater) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:321:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 | GroundSystem FGCom_AntennaGroundSystem::createCopperPlate(float area, float conductivity, bool saltwater) {
      | ~~~~~~~~~~~~                            ^
      | auto                                                                                                      -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:323:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  323 |     ground.type = "copper_plate";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:327:32: warning: 'calculatePlateResistance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  327 |     ground.ground_resistance = calculatePlateResistance(area, conductivity);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:138:18: note: resolves to this declaration
  138 |     static float calculatePlateResistance(float area, float conductivity);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:328:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |     ground.material = "copper";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:332:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  332 | float FGCom_AntennaGroundSystem::calculatePlateResistance(float area, float conductivity) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:332:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  332 | float FGCom_AntennaGroundSystem::calculatePlateResistance(float area, float conductivity) {
      | ~~~~~                            ^
      | auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:334:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  334 |     return 1.0 / (conductivity * area);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:337:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  337 | float FGCom_AntennaGroundSystem::calculatePlateCapacitance(float area, float depth) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:337:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  337 | float FGCom_AntennaGroundSystem::calculatePlateCapacitance(float area, float depth) {
      | ~~~~~                            ^
      | auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:344:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  344 | GroundSystem FGCom_AntennaGroundSystem::createFuselageGround(const std::string& vehicle_type, float area) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:344:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  344 | GroundSystem FGCom_AntennaGroundSystem::createFuselageGround(const std::string& vehicle_type, float area) {
      | ~~~~~~~~~~~~                            ^
      | auto                                                                                                      -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:346:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |     ground.type = "fuselage";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:349:22: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  349 |     if (vehicle_type == "aircraft") {
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:350:31: warning: 3.5e7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  350 |         ground.conductivity = 3.5e7; // Aluminum conductivity
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:351:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |         ground.material = "aluminum";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:352:29: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  352 |     } else if (vehicle_type == "ship") {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:353:31: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  353 |         ground.conductivity = 5.0; // Saltwater conductivity
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:354:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  354 |         ground.material = "steel";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:358:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  358 |         ground.material = "steel";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:361:32: warning: 'calculateFuselageResistance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  361 |     ground.ground_resistance = calculateFuselageResistance(area, ground.material);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:145:18: note: resolves to this declaration
  145 |     static float calculateFuselageResistance(float area, const std::string& material);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:365:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  365 | GroundSystem FGCom_AntennaGroundSystem::createAircraftFuselage(const std::string& aircraft_type) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:365:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  365 | GroundSystem FGCom_AntennaGroundSystem::createAircraftFuselage(const std::string& aircraft_type) {
      | ~~~~~~~~~~~~                            ^
      | auto                                                                                             -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:368:23: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  368 |     if (aircraft_type == "large" || aircraft_type == "747" || aircraft_type == "A380") {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:368:51: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  368 |     if (aircraft_type == "large" || aircraft_type == "747" || aircraft_type == "A380") {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:368:77: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  368 |     if (aircraft_type == "large" || aircraft_type == "747" || aircraft_type == "A380") {
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:369:16: warning: 600.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  369 |         area = 600.0;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:370:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  370 |     } else if (aircraft_type == "medium" || aircraft_type == "737" || aircraft_type == "A320") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:370:59: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  370 |     } else if (aircraft_type == "medium" || aircraft_type == "737" || aircraft_type == "A320") {
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:370:85: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  370 |     } else if (aircraft_type == "medium" || aircraft_type == "737" || aircraft_type == "A320") {
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:371:16: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  371 |         area = 300.0;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:372:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  372 |     } else if (aircraft_type == "small" || aircraft_type == "C172") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:372:58: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  372 |     } else if (aircraft_type == "small" || aircraft_type == "C172") {
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:376:12: warning: 'createFuselageGround' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  376 |     return createFuselageGround("aircraft", area);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:344:41: note: resolves to this declaration
  344 | GroundSystem FGCom_AntennaGroundSystem::createFuselageGround(const std::string& vehicle_type, float area) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:376:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  376 |     return createFuselageGround("aircraft", area);
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:379:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  379 | GroundSystem FGCom_AntennaGroundSystem::createMaritimeVessel(const std::string& vessel_type, float hull_area) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:379:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  379 | GroundSystem FGCom_AntennaGroundSystem::createMaritimeVessel(const std::string& vessel_type, float hull_area) {
      | ~~~~~~~~~~~~                            ^
      | auto                                                                                                          -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:379:81: warning: parameter 'vessel_type' is unused [misc-unused-parameters]
  379 | GroundSystem FGCom_AntennaGroundSystem::createMaritimeVessel(const std::string& vessel_type, float hull_area) {
      |                                                                                 ^~~~~~~~~~~
      |                                                                                  /*vessel_type*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:380:12: warning: 'createFuselageGround' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  380 |     return createFuselageGround("ship", hull_area);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:344:41: note: resolves to this declaration
  344 | GroundSystem FGCom_AntennaGroundSystem::createFuselageGround(const std::string& vehicle_type, float area) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:380:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  380 |     return createFuselageGround("ship", hull_area);
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:383:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  383 | float FGCom_AntennaGroundSystem::calculateFuselageResistance(float area, const std::string& material) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:383:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  383 | float FGCom_AntennaGroundSystem::calculateFuselageResistance(float area, const std::string& material) {
      | ~~~~~                            ^
      | auto                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:386:18: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  386 |     if (material == "aluminum") {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:387:24: warning: 3.5e7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |         conductivity = 3.5e7;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:388:25: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  388 |     } else if (material == "copper") {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:389:24: warning: 5.8e7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |         conductivity = 5.8e7;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:390:25: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  390 |     } else if (material == "steel") {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:391:24: warning: 1.0e7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  391 |         conductivity = 1.0e7;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:394:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  394 |     return 1.0 / (conductivity * area * 0.001); // Assume 1mm thickness
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:394:41: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  394 |     return 1.0 / (conductivity * area * 0.001); // Assume 1mm thickness
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:397:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  397 | bool FGCom_AntennaGroundSystem::loadAntennaPattern(const std::string& pattern_file) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:397:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  397 | bool FGCom_AntennaGroundSystem::loadAntennaPattern(const std::string& pattern_file) {
      | ~~~~                            ^
      | auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:398:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  398 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:398:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:35:33: note: resolves to this declaration
   35 | bool FGCom_AntennaGroundSystem::initialize() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:401:9: warning: 'parse4NEC2File' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  401 |     if (parse4NEC2File(pattern_file, pattern)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:181:17: note: resolves to this declaration
  181 |     static bool parse4NEC2File(const std::string& filename, AntennaPattern& pattern);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:402:9: warning: variable 'key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  402 |         std::string key = pattern.antenna_name + "_" + std::to_string(pattern.frequency_mhz);
      |         ^
      |                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:402:48: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  402 |         std::string key = pattern.antenna_name + "_" + std::to_string(pattern.frequency_mhz);
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:402:54: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  402 |         std::string key = pattern.antenna_name + "_" + std::to_string(pattern.frequency_mhz);
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:402:56: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  402 |         std::string key = pattern.antenna_name + "_" + std::to_string(pattern.frequency_mhz);
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4241:3: note: resolves to this declaration
 4241 |   to_string(float __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:402:61: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  402 |         std::string key = pattern.antenna_name + "_" + std::to_string(pattern.frequency_mhz);
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:403:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  403 |         antenna_patterns[key] = pattern;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:403:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  403 |         antenna_patterns[key] = pattern;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: note: resolves to this declaration
   55 | struct AntennaPattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:410:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  410 | bool FGCom_AntennaGroundSystem::load4NEC2Pattern(const std::string& filename) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:410:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  410 | bool FGCom_AntennaGroundSystem::load4NEC2Pattern(const std::string& filename) {
      | ~~~~                            ^
      | auto                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:411:5: warning: variable 'full_path' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  411 |     std::string full_path = pattern_directory + filename;
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:411:47: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  411 |     std::string full_path = pattern_directory + filename;
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3553:5: note: resolves to this declaration
 3553 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:412:12: warning: 'loadAntennaPattern' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  412 |     return loadAntennaPattern(full_path);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:397:33: note: resolves to this declaration
  397 | bool FGCom_AntennaGroundSystem::loadAntennaPattern(const std::string& pattern_file) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:415:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  415 | AntennaPattern FGCom_AntennaGroundSystem::getAntennaPattern(const std::string& antenna_name, float frequency_mhz) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:415:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  415 | AntennaPattern FGCom_AntennaGroundSystem::getAntennaPattern(const std::string& antenna_name, float frequency_mhz) {
      | ~~~~~~~~~~~~~~                            ^
      | auto                                                                                                              -> AntennaPattern
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:416:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  416 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:416:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  416 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:35:33: note: resolves to this declaration
   35 | bool FGCom_AntennaGroundSystem::initialize() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:418:5: warning: variable 'key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  418 |     std::string key = antenna_name + "_" + std::to_string(frequency_mhz);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:418:36: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  418 |     std::string key = antenna_name + "_" + std::to_string(frequency_mhz);
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:418:42: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  418 |     std::string key = antenna_name + "_" + std::to_string(frequency_mhz);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:418:44: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  418 |     std::string key = antenna_name + "_" + std::to_string(frequency_mhz);
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4241:3: note: resolves to this declaration
 4241 |   to_string(float __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:419:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  419 |     auto it = antenna_patterns.find(key);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:420:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  420 |     if (it != antenna_patterns.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:421:18: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  421 |         return it->second;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:425:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  425 |     return AntennaPattern();
      |            ^~~~~~~~~~~~~~~~
      |            {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:428:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  428 | std::vector<std::string> FGCom_AntennaGroundSystem::getAvailablePatterns() {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:428:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  428 | std::vector<std::string> FGCom_AntennaGroundSystem::getAvailablePatterns() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                            ^
      | auto                                                                       -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:429:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  429 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:429:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  429 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:35:33: note: resolves to this declaration
   35 | bool FGCom_AntennaGroundSystem::initialize() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:432:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  432 |     for (const auto& pair : antenna_patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:432:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  432 |     for (const auto& pair : antenna_patterns) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:432:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  432 |     for (const auto& pair : antenna_patterns) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:432:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  432 |     for (const auto& pair : antenna_patterns) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:433:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  432 |     for (const auto& pair : antenna_patterns) {
  433 |         patterns.push_back(pair.first);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:438:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  438 | bool FGCom_AntennaGroundSystem::parse4NEC2File(const std::string& filename, AntennaPattern& pattern) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:438:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  438 | bool FGCom_AntennaGroundSystem::parse4NEC2File(const std::string& filename, AntennaPattern& pattern) {
      | ~~~~                            ^
      | auto                                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:438:33: warning: function 'parse4NEC2File' has cognitive complexity of 27 (threshold 25) [readability-function-cognitive-complexity]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:440:5: note: +1, including nesting penalty of 0, nesting level increased to 1
  440 |     if (!file.is_open()) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:447:5: note: +1, including nesting penalty of 0, nesting level increased to 1
  447 |     while (std::getline(file, line)) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:449:9: note: +2, including nesting penalty of 1, nesting level increased to 2
  449 |         if (line.empty() || line[0] == '#' || line[0] == '!') {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:449:44: note: +1
  449 |         if (line.empty() || line[0] == '#' || line[0] == '!') {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:454:9: note: +2, including nesting penalty of 1, nesting level increased to 2
  454 |         if (line.find("FREQUENCY") != std::string::npos) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:457:13: note: +3, including nesting penalty of 2, nesting level increased to 3
  457 |             while (iss >> token) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:458:17: note: +4, including nesting penalty of 3, nesting level increased to 4
  458 |                 if (token.find("MHz") != std::string::npos) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:466:9: note: +2, including nesting penalty of 1, nesting level increased to 2
  466 |         if (line.find("ANTENNA") != std::string::npos) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:470:13: note: +3, including nesting penalty of 2, nesting level increased to 3
  470 |             if (iss >> token) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:476:9: note: +2, including nesting penalty of 1, nesting level increased to 2
  476 |         if (line.find("THETA") != std::string::npos && line.find("PHI") != std::string::npos) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:476:53: note: +1
  476 |         if (line.find("THETA") != std::string::npos && line.find("PHI") != std::string::npos) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:482:9: note: +2, including nesting penalty of 1, nesting level increased to 2
  482 |         if (in_data_section) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:485:13: note: +3, including nesting penalty of 2, nesting level increased to 3
  485 |             if (iss >> theta >> phi >> gain >> phase) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:439:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  439 |     std::ifstream file(filename);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:447:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
  447 |     while (std::getline(file, line)) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:439:5: note: inferred assignment of ID-dependent value from ID-dependent 
  439 |     std::ifstream file(filename);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:447:12: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |     while (std::getline(file, line)) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:447:17: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
  447 |     while (std::getline(file, line)) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:449:33: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  449 |         if (line.empty() || line[0] == '#' || line[0] == '!') {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:449:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  449 |         if (line.empty() || line[0] == '#' || line[0] == '!') {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:454:13: warning: use absl::StrContains instead of find() != npos [abseil-string-find-str-contains]
   25 |         if (line.find("FREQUENCY") != std::string::npos) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |             absl::StrContains(line, "FREQUENCY")
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:454:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2695:31: note: default parameter was declared here
 2695 |       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:455:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  455 |             std::istringstream iss(line);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/sstream:616:6: note: default parameter was declared here
  616 |                           ios_base::openmode __mode = ios_base::in)
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:457:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  457 |             while (iss >> token) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:457:20: warning: backward branch (while loop) is ID-dependent due to variable reference to 'iss' and may cause performance degradation [altera-id-dependent-backward-branch]
  457 |             while (iss >> token) {
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:455:13: note: inferred assignment of ID-dependent value from ID-dependent 
  455 |             std::istringstream iss(line);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:457:24: warning: 'operator>><char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  457 |             while (iss >> token) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4019:5: note: resolves to this declaration
 4019 |     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:458:21: warning: use absl::StrContains instead of find() != npos [abseil-string-find-str-contains]
  458 |                 if (token.find("MHz") != std::string::npos) {
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                     absl::StrContains(token, "MHz")
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:458:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2695:31: note: default parameter was declared here
 2695 |       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:459:45: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  459 |                     pattern.frequency_mhz = std::stof(token);
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:459:45: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  459 |                     pattern.frequency_mhz = std::stof(token);
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:459:50: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
  459 |                     pattern.frequency_mhz = std::stof(token);
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:466:13: warning: use absl::StrContains instead of find() != npos [abseil-string-find-str-contains]
  466 |         if (line.find("ANTENNA") != std::string::npos) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |             absl::StrContains(line, "ANTENNA")
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:466:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2695:31: note: default parameter was declared here
 2695 |       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:467:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  467 |             std::istringstream iss(line);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/sstream:616:6: note: default parameter was declared here
  616 |                           ios_base::openmode __mode = ios_base::in)
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:469:17: warning: 'operator>><char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  469 |             iss >> token; // Skip "ANTENNA"
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4019:5: note: resolves to this declaration
 4019 |     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:470:21: warning: 'operator>><char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  470 |             if (iss >> token) {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4019:5: note: resolves to this declaration
 4019 |     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:471:38: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  471 |                 pattern.antenna_name = token;
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:476:13: warning: use absl::StrContains instead of find() != npos [abseil-string-find-str-contains]
  476 |         if (line.find("THETA") != std::string::npos && line.find("PHI") != std::string::npos) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |             absl::StrContains(line, "THETA")
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:476:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2695:31: note: default parameter was declared here
 2695 |       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:476:56: warning: use absl::StrContains instead of find() != npos [abseil-string-find-str-contains]
  476 |         if (line.find("THETA") != std::string::npos && line.find("PHI") != std::string::npos) {
      |                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                                                        absl::StrContains(line, "PHI")
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:476:56: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2695:31: note: default parameter was declared here
 2695 |       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:483:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  483 |             std::istringstream iss(line);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/sstream:616:6: note: default parameter was declared here
  616 |                           ios_base::openmode __mode = ios_base::in)
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:484:13: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  484 |             float theta, phi, gain, phase;
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:484:19: warning: variable 'theta' is not initialized [cppcoreguidelines-init-variables]
  484 |             float theta, phi, gain, phase;
      |                   ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:484:26: warning: variable 'phi' is not initialized [cppcoreguidelines-init-variables]
  484 |             float theta, phi, gain, phase;
      |                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:484:31: warning: variable 'gain' is not initialized [cppcoreguidelines-init-variables]
  484 |             float theta, phi, gain, phase;
      |                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:484:37: warning: variable 'phase' is not initialized [cppcoreguidelines-init-variables]
  484 |             float theta, phi, gain, phase;
      |                                     ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:485:21: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  485 |             if (iss >> theta >> phi >> gain >> phase) {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:216:7: note: resolves to this declaration
  216 |       operator>>(float& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:485:30: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  485 |             if (iss >> theta >> phi >> gain >> phase) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:216:7: note: resolves to this declaration
  216 |       operator>>(float& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:485:37: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  485 |             if (iss >> theta >> phi >> gain >> phase) {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:216:7: note: resolves to this declaration
  216 |       operator>>(float& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:485:45: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  485 |             if (iss >> theta >> phi >> gain >> phase) {
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:216:7: note: resolves to this declaration
  216 |       operator>>(float& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:498:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  498 | float FGCom_AntennaGroundSystem::getAntennaGain(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:498:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  498 | float FGCom_AntennaGroundSystem::getAntennaGain(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      | ~~~~~                            ^
      | auto                                                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:503:12: warning: 'interpolatePattern' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  503 |     return interpolatePattern(pattern, azimuth_deg, elevation_deg);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:182:18: note: resolves to this declaration
  182 |     static float interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:506:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  506 | float FGCom_AntennaGroundSystem::getAntennaGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:506:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  506 | float FGCom_AntennaGroundSystem::getAntennaGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg) {
      | ~~~~~                            ^
      | auto                                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:508:16: warning: 'getAntennaGain' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  508 |         return getAntennaGain(antenna.pattern, azimuth_deg, elevation_deg);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:498:34: note: resolves to this declaration
  498 | float FGCom_AntennaGroundSystem::getAntennaGain(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:512:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  512 |     if (antenna.antenna_type == "yagi") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:513:16: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  513 |         return 10.0; // 10 dBi typical for Yagi
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:514:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  514 |     } else if (antenna.antenna_type == "dipole") {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  515 |         return 2.15; // 2.15 dBi for dipole
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  516 |     } else if (antenna.antenna_type == "vertical") {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  517 |         return 0.0; // 0 dBi for vertical
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  518 |     } else if (antenna.antenna_type == "whip") {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  519 |         return -3.0; // -3 dBi for whip
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  520 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:514:37: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  514 |     } else if (antenna.antenna_type == "dipole") {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:515:16: warning: 2.15 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  515 |         return 2.15; // 2.15 dBi for dipole
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:516:37: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  516 |     } else if (antenna.antenna_type == "vertical") {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:518:37: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  518 |     } else if (antenna.antenna_type == "whip") {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:519:17: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  519 |         return -3.0; // -3 dBi for whip
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:525:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  525 | float FGCom_AntennaGroundSystem::interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:525:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  525 | float FGCom_AntennaGroundSystem::interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      | ~~~~~                            ^
      | auto                                                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:525:84: warning: 2 adjacent parameters of 'interpolatePattern' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  525 | float FGCom_AntennaGroundSystem::interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      |                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:525:90: note: the first parameter in the range is 'azimuth_deg'
  525 | float FGCom_AntennaGroundSystem::interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      |                                                                                          ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:525:109: note: the last parameter in the range is 'elevation_deg'
  525 | float FGCom_AntennaGroundSystem::interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg) {
      |                                                                                                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:531:26: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  531 |     float min_distance = 1000.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:534:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  534 |     for (size_t i = 0; i < pattern.theta_angles.size(); i++) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:534:10: warning: no header providing "size_t" is directly included [misc-include-cleaner]
   19 |     for (size_t i = 0; i < pattern.theta_angles.size(); i++) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:535:9: warning: variable 'theta_diff' of type 'float' can be declared 'const' [misc-const-correctness]
  535 |         float theta_diff = std::abs(pattern.theta_angles[i] - elevation_deg);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:535:28: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  535 |         float theta_diff = std::abs(pattern.theta_angles[i] - elevation_deg);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:535:57: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  535 |         float theta_diff = std::abs(pattern.theta_angles[i] - elevation_deg);
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1145:7: note: resolves to this declaration
 1145 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:536:9: warning: variable 'phi_diff' of type 'float' can be declared 'const' [misc-const-correctness]
  536 |         float phi_diff = std::abs(pattern.phi_angles[i] - azimuth_deg);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:536:26: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  536 |         float phi_diff = std::abs(pattern.phi_angles[i] - azimuth_deg);
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:536:53: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  536 |         float phi_diff = std::abs(pattern.phi_angles[i] - azimuth_deg);
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1145:7: note: resolves to this declaration
 1145 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:537:9: warning: variable 'distance' of type 'float' can be declared 'const' [misc-const-correctness]
  537 |         float distance = sqrt(theta_diff * theta_diff + phi_diff * phi_diff);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:537:26: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  537 |         float distance = sqrt(theta_diff * theta_diff + phi_diff * phi_diff);
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:537:26: warning: call to 'sqrt' promotes float to double [performance-type-promotion-in-math-fn]
   19 |         float distance = sqrt(theta_diff * theta_diff + phi_diff * phi_diff);
      |                          ^~~~
      |                          std::sqrt
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:541:41: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  541 |             best_gain = pattern.gain_dbi[i];
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1145:7: note: resolves to this declaration
 1145 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:548:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  548 | float FGCom_AntennaGroundSystem::calculateDipoleGroundEffect(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:548:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  548 | float FGCom_AntennaGroundSystem::calculateDipoleGroundEffect(const AntennaSystem& antenna, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:551:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  551 |     if (antenna.antenna_type == "dipole") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:553:9: warning: variable 'wavelength' of type 'float' can be declared 'const' [misc-const-correctness]
  553 |         float wavelength = 300.0 / frequency_mhz;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:553:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  553 |         float wavelength = 300.0 / frequency_mhz;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:553:28: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:554:9: warning: variable 'height_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  554 |         float height_factor = antenna.height_meters / wavelength;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:556:29: warning: 0.25 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  556 |         if (height_factor < 0.25) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:557:23: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  557 |             effect *= 0.7; // λ/4 height: strong ground reflection
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:558:36: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  558 |         } else if (height_factor < 0.5) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:559:23: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  559 |             effect *= 0.8; // λ/2 height: good compromise
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:561:23: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  561 |             effect *= 0.9; // >λ height: multiple lobes
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:565:9: warning: variable 'performance' of type 'GroundPerformance' can be declared 'const' [misc-const-correctness]
  565 |         GroundPerformance performance = evaluateGroundPerformance(antenna.ground_system);
      |         ^
      |                           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:565:41: warning: 'evaluateGroundPerformance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  565 |         GroundPerformance performance = evaluateGroundPerformance(antenna.ground_system);
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:234:46: note: resolves to this declaration
  234 | GroundPerformance FGCom_AntennaGroundSystem::evaluateGroundPerformance(const GroundSystem& ground) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:571:27: warning: 0.95 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  571 |                 effect *= 0.95; // 0.5 dB loss
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:574:27: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  574 |                 effect *= 0.8; // 2 dB loss
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:577:27: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  577 |                 effect *= 0.5; // 6 dB loss
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:585:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  585 | float FGCom_AntennaGroundSystem::calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:585:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  585 | float FGCom_AntennaGroundSystem::calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:585:72: warning: 2 adjacent parameters of 'calculateHorizontalDipoleHeightEffect' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  585 | float FGCom_AntennaGroundSystem::calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz) {
      |                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:585:78: note: the first parameter in the range is 'height_meters'
  585 | float FGCom_AntennaGroundSystem::calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz) {
      |                                                                              ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:585:99: note: the last parameter in the range is 'frequency_mhz'
  585 | float FGCom_AntennaGroundSystem::calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz) {
      |                                                                                                   ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:586:5: warning: variable 'wavelength' of type 'float' can be declared 'const' [misc-const-correctness]
  586 |     float wavelength = 300.0 / frequency_mhz;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:586:24: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  586 |     float wavelength = 300.0 / frequency_mhz;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:586:24: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:587:5: warning: variable 'height_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  587 |     float height_factor = height_meters / wavelength;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:589:25: warning: 0.25 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  589 |     if (height_factor < 0.25) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:590:16: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  590 |         return 0.7; // 3-6 dB loss, severe nulls
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:591:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  591 |     } else if (height_factor < 0.5) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  592 |         return 0.8; // 1-3 dB loss, moderate
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  593 |     } else if (height_factor < 1.0) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  594 |         return 0.95; // 0-1 dB loss, minimal
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  595 |     } else {
      |     ~~~~~~~~
  596 |         return 1.0; // 0 dB loss, negligible
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  597 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:591:32: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  591 |     } else if (height_factor < 0.5) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:592:16: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  592 |         return 0.8; // 1-3 dB loss, moderate
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:594:16: warning: 0.95 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  594 |         return 0.95; // 0-1 dB loss, minimal
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:600:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  600 | float FGCom_AntennaGroundSystem::calculateVerticalDipoleGroundEffect(const GroundSystem& ground, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:600:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  600 | float FGCom_AntennaGroundSystem::calculateVerticalDipoleGroundEffect(const GroundSystem& ground, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:600:104: warning: parameter 'frequency_mhz' is unused [misc-unused-parameters]
  600 | float FGCom_AntennaGroundSystem::calculateVerticalDipoleGroundEffect(const GroundSystem& ground, float frequency_mhz) {
      |                                                                                                        ^~~~~~~~~~~~~
      |                                                                                                         /*frequency_mhz*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:601:5: warning: variable 'performance' of type 'GroundPerformance' can be declared 'const' [misc-const-correctness]
  601 |     GroundPerformance performance = evaluateGroundPerformance(ground);
      |     ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:601:37: warning: 'evaluateGroundPerformance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     GroundPerformance performance = evaluateGroundPerformance(ground);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:234:46: note: resolves to this declaration
  234 | GroundPerformance FGCom_AntennaGroundSystem::evaluateGroundPerformance(const GroundSystem& ground) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:607:20: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  607 |             return 0.7; // 3 dB degradation
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:609:20: warning: 0.4 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  609 |             return 0.4; // 8 dB degradation
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:611:20: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  611 |             return 0.1; // 20 dB degradation, high SWR
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:617:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  617 | float FGCom_AntennaGroundSystem::calculateYagiGroundEffect(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:617:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  617 | float FGCom_AntennaGroundSystem::calculateYagiGroundEffect(const AntennaSystem& antenna, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:620:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  620 |     if (antenna.antenna_type == "yagi") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:622:9: warning: variable 'wavelength' of type 'float' can be declared 'const' [misc-const-correctness]
  622 |         float wavelength = 300.0 / frequency_mhz;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:622:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  622 |         float wavelength = 300.0 / frequency_mhz;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:622:28: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:623:9: warning: variable 'height_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  623 |         float height_factor = antenna.height_meters / wavelength;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:625:29: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  625 |         if (height_factor < 0.5) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:626:23: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  626 |             effect *= 0.7; // 3-6 dB loss, severe nulls
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:628:23: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  628 |             effect *= 0.9; // 1-3 dB loss, moderate
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:629:36: warning: 1.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  629 |         } else if (height_factor < 1.5) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:630:23: warning: 0.95 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  630 |             effect *= 0.95; // 0-1 dB loss, minimal
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:636:9: warning: variable 'performance' of type 'GroundPerformance' can be declared 'const' [misc-const-correctness]
  636 |         GroundPerformance performance = evaluateGroundPerformance(antenna.ground_system);
      |         ^
      |                           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:636:41: warning: 'evaluateGroundPerformance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |         GroundPerformance performance = evaluateGroundPerformance(antenna.ground_system);
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:234:46: note: resolves to this declaration
  234 | GroundPerformance FGCom_AntennaGroundSystem::evaluateGroundPerformance(const GroundSystem& ground) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:642:27: warning: 0.95 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  642 |                 effect *= 0.95;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:645:27: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  645 |                 effect *= 0.8;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:648:27: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  648 |                 effect *= 0.5;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:656:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  656 | float FGCom_AntennaGroundSystem::calculateYagiHeightEffect(float height_meters, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:656:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  656 | float FGCom_AntennaGroundSystem::calculateYagiHeightEffect(float height_meters, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:656:60: warning: 2 adjacent parameters of 'calculateYagiHeightEffect' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  656 | float FGCom_AntennaGroundSystem::calculateYagiHeightEffect(float height_meters, float frequency_mhz) {
      |                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:656:66: note: the first parameter in the range is 'height_meters'
  656 | float FGCom_AntennaGroundSystem::calculateYagiHeightEffect(float height_meters, float frequency_mhz) {
      |                                                                  ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:656:87: note: the last parameter in the range is 'frequency_mhz'
  656 | float FGCom_AntennaGroundSystem::calculateYagiHeightEffect(float height_meters, float frequency_mhz) {
      |                                                                                       ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:657:5: warning: variable 'wavelength' of type 'float' can be declared 'const' [misc-const-correctness]
  657 |     float wavelength = 300.0 / frequency_mhz;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:657:24: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  657 |     float wavelength = 300.0 / frequency_mhz;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:657:24: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:658:5: warning: variable 'height_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  658 |     float height_factor = height_meters / wavelength;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:660:25: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  660 |     if (height_factor < 0.5) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:661:16: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  661 |         return 0.7; // 3-6 dB loss
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:662:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  662 |     } else if (height_factor < 1.0) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  663 |         return 0.9; // 1-3 dB loss
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~
  664 |     } else if (height_factor < 1.5) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  665 |         return 0.95; // 0-1 dB loss
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  666 |     } else {
      |     ~~~~~~~~
  667 |         return 1.0; // 0 dB loss
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
  668 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:663:16: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  663 |         return 0.9; // 1-3 dB loss
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:664:32: warning: 1.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  664 |     } else if (height_factor < 1.5) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:665:16: warning: 0.95 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |         return 0.95; // 0-1 dB loss
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:671:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  671 | float FGCom_AntennaGroundSystem::calculateYagiPatternDistortion(float height_meters, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:671:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  671 | float FGCom_AntennaGroundSystem::calculateYagiPatternDistortion(float height_meters, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:671:65: warning: 2 adjacent parameters of 'calculateYagiPatternDistortion' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  671 | float FGCom_AntennaGroundSystem::calculateYagiPatternDistortion(float height_meters, float frequency_mhz) {
      |                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:671:71: note: the first parameter in the range is 'height_meters'
  671 | float FGCom_AntennaGroundSystem::calculateYagiPatternDistortion(float height_meters, float frequency_mhz) {
      |                                                                       ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:671:92: note: the last parameter in the range is 'frequency_mhz'
  671 | float FGCom_AntennaGroundSystem::calculateYagiPatternDistortion(float height_meters, float frequency_mhz) {
      |                                                                                            ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:672:5: warning: variable 'wavelength' of type 'float' can be declared 'const' [misc-const-correctness]
  672 |     float wavelength = 300.0 / frequency_mhz;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:672:24: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  672 |     float wavelength = 300.0 / frequency_mhz;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:672:24: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:673:5: warning: variable 'height_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  673 |     float height_factor = height_meters / wavelength;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:675:25: warning: 0.25 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  675 |     if (height_factor < 0.25) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:676:16: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  676 |         return 0.5; // Severe nulls
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:677:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  677 |     } else if (height_factor < 0.5) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  678 |         return 0.7; // Moderate distortion
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  679 |     } else if (height_factor < 1.0) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  680 |         return 0.9; // Minimal distortion
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  681 |     } else {
      |     ~~~~~~~~
  682 |         return 1.0; // Negligible distortion
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  683 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:677:32: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  677 |     } else if (height_factor < 0.5) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:678:16: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         return 0.7; // Moderate distortion
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:680:16: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  680 |         return 0.9; // Minimal distortion
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:686:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  686 | float FGCom_AntennaGroundSystem::calculateWhipEfficiency(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:686:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  686 | float FGCom_AntennaGroundSystem::calculateWhipEfficiency(const AntennaSystem& antenna, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:687:24: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  687 |     float efficiency = 0.7; // Base efficiency
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:690:5: warning: variable 'wavelength' of type 'float' can be declared 'const' [misc-const-correctness]
  690 |     float wavelength = 300.0 / frequency_mhz;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:690:24: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  690 |     float wavelength = 300.0 / frequency_mhz;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:690:24: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:691:22: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  691 |     if (wavelength > 10.0) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:692:23: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  692 |         efficiency *= 0.5; // Very long wavelength, poor efficiency
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:693:29: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  693 |     } else if (wavelength > 5.0) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:694:23: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  694 |         efficiency *= 0.7; // Long wavelength, reduced efficiency
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:698:5: warning: variable 'performance' of type 'GroundPerformance' can be declared 'const' [misc-const-correctness]
  698 |     GroundPerformance performance = evaluateGroundPerformance(antenna.ground_system);
      |     ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:698:37: warning: 'evaluateGroundPerformance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  698 |     GroundPerformance performance = evaluateGroundPerformance(antenna.ground_system);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:234:46: note: resolves to this declaration
  234 | GroundPerformance FGCom_AntennaGroundSystem::evaluateGroundPerformance(const GroundSystem& ground) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:704:27: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  704 |             efficiency *= 0.9;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:707:27: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |             efficiency *= 0.7;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:710:27: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  710 |             efficiency *= 0.5;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:717:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  717 | float FGCom_AntennaGroundSystem::calculateWhipGroundEffect(const GroundSystem& ground, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:717:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  717 | float FGCom_AntennaGroundSystem::calculateWhipGroundEffect(const GroundSystem& ground, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:718:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  718 |     return calculateGroundLoss(ground, frequency_mhz) / 10.0; // Convert dB to linear
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:718:12: warning: 'calculateGroundLoss' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:246:34: note: resolves to this declaration
  246 | float FGCom_AntennaGroundSystem::calculateGroundLoss(const GroundSystem& ground, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:718:57: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  718 |     return calculateGroundLoss(ground, frequency_mhz) / 10.0; // Convert dB to linear
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:721:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  721 | float FGCom_AntennaGroundSystem::calculateWhipImpedance(float length_meters, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:721:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  721 | float FGCom_AntennaGroundSystem::calculateWhipImpedance(float length_meters, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:721:57: warning: 2 adjacent parameters of 'calculateWhipImpedance' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  721 | float FGCom_AntennaGroundSystem::calculateWhipImpedance(float length_meters, float frequency_mhz) {
      |                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:721:63: note: the first parameter in the range is 'length_meters'
  721 | float FGCom_AntennaGroundSystem::calculateWhipImpedance(float length_meters, float frequency_mhz) {
      |                                                               ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:721:84: note: the last parameter in the range is 'frequency_mhz'
  721 | float FGCom_AntennaGroundSystem::calculateWhipImpedance(float length_meters, float frequency_mhz) {
      |                                                                                    ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:723:5: warning: variable 'wavelength' of type 'float' can be declared 'const' [misc-const-correctness]
  723 |     float wavelength = 300.0 / frequency_mhz;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:723:24: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  723 |     float wavelength = 300.0 / frequency_mhz;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:723:24: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:724:5: warning: variable 'length_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  724 |     float length_factor = length_meters / wavelength;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:726:25: warning: 0.25 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  726 |     if (length_factor < 0.25) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:727:16: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  727 |         return 50.0; // Near 50 ohms for short whip
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:728:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  728 |     } else if (length_factor < 0.5) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  729 |         return 75.0; // Higher impedance for longer whip
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  730 |     } else {
      |     ~~~~~~~~
  731 |         return 100.0; // High impedance for very long whip
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  732 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:728:32: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  728 |     } else if (length_factor < 0.5) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:729:16: warning: 75.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  729 |         return 75.0; // Higher impedance for longer whip
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:735:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  735 | float FGCom_AntennaGroundSystem::calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:735:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  735 | float FGCom_AntennaGroundSystem::calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:735:103: warning: 2 adjacent parameters of 'calculateSystemGain' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  735 | float FGCom_AntennaGroundSystem::calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      |                                                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:735:109: note: the first parameter in the range is 'elevation_deg'
  735 | float FGCom_AntennaGroundSystem::calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      |                                                                                                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:735:130: note: the last parameter in the range is 'frequency_mhz'
  735 | float FGCom_AntennaGroundSystem::calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      |                                                                                                                                  ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:736:18: warning: 'getAntennaGain' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  736 |     float gain = getAntennaGain(antenna, azimuth_deg, elevation_deg);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:506:34: note: resolves to this declaration
  506 | float FGCom_AntennaGroundSystem::getAntennaGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:739:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  739 |     if (antenna.antenna_type == "dipole") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:740:17: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  740 |         gain += 10.0 * log10(calculateDipoleGroundEffect(antenna, frequency_mhz));
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:740:17: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:740:24: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  740 |         gain += 10.0 * log10(calculateDipoleGroundEffect(antenna, frequency_mhz));
      |                        ^~~~~
      |                        std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:740:30: warning: 'calculateDipoleGroundEffect' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  740 |         gain += 10.0 * log10(calculateDipoleGroundEffect(antenna, frequency_mhz));
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:548:34: note: resolves to this declaration
  548 | float FGCom_AntennaGroundSystem::calculateDipoleGroundEffect(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:741:37: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  741 |     } else if (antenna.antenna_type == "yagi") {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:742:17: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  742 |         gain += 10.0 * log10(calculateYagiGroundEffect(antenna, frequency_mhz));
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:742:17: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:742:24: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  742 |         gain += 10.0 * log10(calculateYagiGroundEffect(antenna, frequency_mhz));
      |                        ^~~~~
      |                        std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:742:30: warning: 'calculateYagiGroundEffect' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  742 |         gain += 10.0 * log10(calculateYagiGroundEffect(antenna, frequency_mhz));
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:617:34: note: resolves to this declaration
  617 | float FGCom_AntennaGroundSystem::calculateYagiGroundEffect(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:743:37: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  743 |     } else if (antenna.antenna_type == "whip") {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:744:17: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  744 |         gain += 10.0 * log10(calculateWhipEfficiency(antenna, frequency_mhz));
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:744:17: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:744:24: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  744 |         gain += 10.0 * log10(calculateWhipEfficiency(antenna, frequency_mhz));
      |                        ^~~~~
      |                        std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:744:30: warning: 'calculateWhipEfficiency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  744 |         gain += 10.0 * log10(calculateWhipEfficiency(antenna, frequency_mhz));
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:686:34: note: resolves to this declaration
  686 | float FGCom_AntennaGroundSystem::calculateWhipEfficiency(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:750:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  750 | float FGCom_AntennaGroundSystem::calculateSystemLoss(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:750:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  750 | float FGCom_AntennaGroundSystem::calculateSystemLoss(const AntennaSystem& antenna, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:754:13: warning: 'calculateGroundLoss' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  754 |     loss += calculateGroundLoss(antenna.ground_system, frequency_mhz);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:246:34: note: resolves to this declaration
  246 | float FGCom_AntennaGroundSystem::calculateGroundLoss(const GroundSystem& ground, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:757:13: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  757 |     loss += 10.0 * log10(1.0 / antenna.efficiency);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:757:13: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:760:13: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  760 |     loss += 10.0 * log10(antenna.swr);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:760:13: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:760:20: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  760 |     loss += 10.0 * log10(antenna.swr);
      |                    ^~~~~
      |                    std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:765:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  765 | float FGCom_AntennaGroundSystem::calculateEffectiveRadiatedPower(float tx_power_watts, const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:765:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  765 | float FGCom_AntennaGroundSystem::calculateEffectiveRadiatedPower(float tx_power_watts, const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      | ~~~~~                            ^
      | auto                                                                                                                                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:766:5: warning: variable 'gain_db' of type 'float' can be declared 'const' [misc-const-correctness]
  766 |     float gain_db = calculateSystemGain(antenna, azimuth_deg, elevation_deg, frequency_mhz);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:766:21: warning: 'calculateSystemGain' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  766 |     float gain_db = calculateSystemGain(antenna, azimuth_deg, elevation_deg, frequency_mhz);
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:735:34: note: resolves to this declaration
  735 | float FGCom_AntennaGroundSystem::calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:767:5: warning: variable 'loss_db' of type 'float' can be declared 'const' [misc-const-correctness]
  767 |     float loss_db = calculateSystemLoss(antenna, frequency_mhz);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:767:21: warning: 'calculateSystemLoss' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     float loss_db = calculateSystemLoss(antenna, frequency_mhz);
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:750:34: note: resolves to this declaration
  750 | float FGCom_AntennaGroundSystem::calculateSystemLoss(const AntennaSystem& antenna, float frequency_mhz) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:768:5: warning: variable 'net_gain_db' of type 'float' can be declared 'const' [misc-const-correctness]
  768 |     float net_gain_db = gain_db - loss_db;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:770:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  770 |     return tx_power_watts * pow(10.0, net_gain_db / 10.0);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:770:33: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  770 |     return tx_power_watts * pow(10.0, net_gain_db / 10.0);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:770:53: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  770 |     return tx_power_watts * pow(10.0, net_gain_db / 10.0);
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:774:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  774 | bool FGCom_AntennaConfig::loadConfig(const std::string& config_file) {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:774:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  774 | bool FGCom_AntennaConfig::loadConfig(const std::string& config_file) {
      | ~~~~                      ^
      | auto                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:775:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  775 |     std::ifstream file(config_file);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:777:9: warning: 'setDefaultConfig' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  777 |         setDefaultConfig();
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:226:17: note: resolves to this declaration
  226 |     static void setDefaultConfig();
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:782:17: warning: redundant string initialization [readability-redundant-string-init]
  782 |     std::string current_section = "";
      |                 ^~~~~~~~~~~~~~~~~~~~
      |                 current_section
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:782:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  782 |     std::string current_section = "";
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:784:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  784 |     while (std::getline(file, line)) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:784:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
  784 |     while (std::getline(file, line)) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:775:5: note: inferred assignment of ID-dependent value from ID-dependent 
  775 |     std::ifstream file(config_file);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:784:12: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  784 |     while (std::getline(file, line)) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:785:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         line = trimString(line);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:785:16: warning: 'trimString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         line = trimString(line);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:227:24: note: resolves to this declaration
  227 |     static std::string trimString(const std::string& str);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:787:33: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  787 |         if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:787:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  787 |         if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:791:17: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  791 |         if (line[0] == '[' && line.back() == ']') {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:792:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  792 |             current_section = line.substr(1, line.length() - 2);
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:796:9: warning: variable 'equal_pos' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  796 |         size_t equal_pos = line.find('=');
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:796:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  796 |         size_t equal_pos = line.find('=');
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2713:24: note: default parameter was declared here
 2713 |       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:798:31: warning: 'trimString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  798 |             std::string key = trimString(line.substr(0, equal_pos));
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:227:24: note: resolves to this declaration
  227 |     static std::string trimString(const std::string& str);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:799:13: warning: variable 'value' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  799 |             std::string value = trimString(line.substr(equal_pos + 1));
      |             ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:799:33: warning: 'trimString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  799 |             std::string value = trimString(line.substr(equal_pos + 1));
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:227:24: note: resolves to this declaration
  227 |     static std::string trimString(const std::string& str);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:799:44: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  799 |             std::string value = trimString(line.substr(equal_pos + 1));
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3163:35: note: default parameter was declared here
 3163 |       substr(size_type __pos = 0, size_type __n = npos) const
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:802:17: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
  802 |                 key = current_section + "." + key;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:802:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  802 |                 key = current_section + "." + key;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:802:39: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  802 |                 key = current_section + "." + key;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:802:45: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  802 |                 key = current_section + "." + key;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:802:45: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
  802 |                 key = current_section + "." + key;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:805:26: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  805 |             config_values[key] = value;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:805:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  805 |             config_values[key] = value;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:813:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  813 | bool FGCom_AntennaConfig::saveConfig(const std::string& config_file) {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:813:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  813 | bool FGCom_AntennaConfig::saveConfig(const std::string& config_file) {
      | ~~~~                      ^
      | auto                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:814:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  814 |     std::ofstream file(config_file);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:833:8: note: default parameter was declared here
  833 |                      ios_base::openmode __mode = ios_base::out)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:819:17: warning: redundant string initialization [readability-redundant-string-init]
  819 |     std::string current_section = "";
      |                 ^~~~~~~~~~~~~~~~~~~~
      |                 current_section
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:819:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  819 |     std::string current_section = "";
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:821:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  821 |     for (const auto& pair : config_values) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:821:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  821 |     for (const auto& pair : config_values) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:821:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  821 |     for (const auto& pair : config_values) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:821:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  821 |     for (const auto& pair : config_values) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:822:9: warning: variable 'dot_pos' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  822 |         size_t dot_pos = pair.first.find('.');
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:822:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  822 |         size_t dot_pos = pair.first.find('.');
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2713:24: note: default parameter was declared here
 2713 |       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:823:9: warning: variable 'section' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  823 |         std::string section = (dot_pos != std::string::npos) ? pair.first.substr(0, dot_pos) : "";
      |         ^
      |                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:823:96: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  823 |         std::string section = (dot_pos != std::string::npos) ? pair.first.substr(0, dot_pos) : "";
      |                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:824:9: warning: variable 'key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  824 |         std::string key = (dot_pos != std::string::npos) ? pair.first.substr(dot_pos + 1) : pair.first;
      |         ^
      |                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:824:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  824 |         std::string key = (dot_pos != std::string::npos) ? pair.first.substr(dot_pos + 1) : pair.first;
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3163:35: note: default parameter was declared here
 3163 |       substr(size_type __pos = 0, size_type __n = npos) const
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:826:21: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  826 |         if (section != current_section) {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3788:5: note: resolves to this declaration
 3788 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:828:22: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  828 |                 file << std::endl;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:828:25: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  828 |                 file << std::endl;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:828:25: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  828 |                 file << std::endl;
      |                         ^~~~~~~~~
      |                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:830:18: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  830 |             file << "[" << section << "]" << std::endl;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:830:25: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  830 |             file << "[" << section << "]" << std::endl;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:830:36: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  830 |             file << "[" << section << "]" << std::endl;
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:830:43: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  830 |             file << "[" << section << "]" << std::endl;
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:830:46: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  830 |             file << "[" << section << "]" << std::endl;
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:830:46: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  830 |             file << "[" << section << "]" << std::endl;
      |                                              ^~~~~~~~~
      |                                              '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:831:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  831 |             current_section = section;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:834:14: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  834 |         file << key << "=" << pair.second << std::endl;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:834:21: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  834 |         file << key << "=" << pair.second << std::endl;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:834:28: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  834 |         file << key << "=" << pair.second << std::endl;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:834:43: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  834 |         file << key << "=" << pair.second << std::endl;
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:834:46: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  834 |         file << key << "=" << pair.second << std::endl;
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:834:46: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  834 |         file << key << "=" << pair.second << std::endl;
      |                                              ^~~~~~~~~
      |                                              '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      | ~~~~~~~~~~~                      ^
      | auto                                                                                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:49: warning: 2 adjacent parameters of 'getConfigValue' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:68: note: the first parameter in the range is 'key'
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                                                    ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:92: note: the last parameter in the range is 'default_value'
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                                                                            ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:842:9: warning: 'setDefaultConfig' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  842 |         setDefaultConfig();
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:226:17: note: resolves to this declaration
  226 |     static void setDefaultConfig();
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:845:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  845 |     auto it = config_values.find(key);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:846:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  846 |     if (it != config_values.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:847:18: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  847 |         return it->second;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:853:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  853 | void FGCom_AntennaConfig::setConfigValue(const std::string& key, const std::string& value) {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:854:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  854 |     config_values[key] = value;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:854:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  854 |     config_values[key] = value;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:857:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  857 | AntennaSystem FGCom_AntennaConfig::getDefaultAntennaSystem() {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:857:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  857 | AntennaSystem FGCom_AntennaConfig::getDefaultAntennaSystem() {
      | ~~~~~~~~~~~~~                      ^
      | auto                                                         -> AntennaSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:859:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  859 |     antenna.antenna_type = getConfigValue("antenna_system.default_antenna_type", "vertical");
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:859:28: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  859 |     antenna.antenna_type = getConfigValue("antenna_system.default_antenna_type", "vertical");
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:859:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  859 |     antenna.antenna_type = getConfigValue("antenna_system.default_antenna_type", "vertical");
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:859:82: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  859 |     antenna.antenna_type = getConfigValue("antenna_system.default_antenna_type", "vertical");
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:860:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  860 |     antenna.height_meters = std::stof(getConfigValue("antenna_system.default_height", "10.0"));
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:860:29: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  860 |     antenna.height_meters = std::stof(getConfigValue("antenna_system.default_height", "10.0"));
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:860:39: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  860 |     antenna.height_meters = std::stof(getConfigValue("antenna_system.default_height", "10.0"));
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:860:54: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  860 |     antenna.height_meters = std::stof(getConfigValue("antenna_system.default_height", "10.0"));
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:860:87: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  860 |     antenna.height_meters = std::stof(getConfigValue("antenna_system.default_height", "10.0"));
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:861:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  861 |     antenna.efficiency = std::stof(getConfigValue("antenna_system.default_efficiency", "0.8"));
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:861:26: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  861 |     antenna.efficiency = std::stof(getConfigValue("antenna_system.default_efficiency", "0.8"));
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:861:36: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  861 |     antenna.efficiency = std::stof(getConfigValue("antenna_system.default_efficiency", "0.8"));
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:861:51: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  861 |     antenna.efficiency = std::stof(getConfigValue("antenna_system.default_efficiency", "0.8"));
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:861:88: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  861 |     antenna.efficiency = std::stof(getConfigValue("antenna_system.default_efficiency", "0.8"));
      |                                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:862:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  862 |     antenna.swr = std::stof(getConfigValue("antenna_system.default_swr", "1.5"));
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:862:19: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  862 |     antenna.swr = std::stof(getConfigValue("antenna_system.default_swr", "1.5"));
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:862:29: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  862 |     antenna.swr = std::stof(getConfigValue("antenna_system.default_swr", "1.5"));
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:862:44: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  862 |     antenna.swr = std::stof(getConfigValue("antenna_system.default_swr", "1.5"));
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:862:74: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  862 |     antenna.swr = std::stof(getConfigValue("antenna_system.default_swr", "1.5"));
      |                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:863:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  863 |     antenna.feedpoint_impedance = std::stof(getConfigValue("antenna_system.default_impedance", "50.0"));
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:863:35: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  863 |     antenna.feedpoint_impedance = std::stof(getConfigValue("antenna_system.default_impedance", "50.0"));
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:863:45: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  863 |     antenna.feedpoint_impedance = std::stof(getConfigValue("antenna_system.default_impedance", "50.0"));
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:863:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  863 |     antenna.feedpoint_impedance = std::stof(getConfigValue("antenna_system.default_impedance", "50.0"));
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:863:96: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  863 |     antenna.feedpoint_impedance = std::stof(getConfigValue("antenna_system.default_impedance", "50.0"));
      |                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:867:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  867 | GroundSystem FGCom_AntennaConfig::getDefaultGroundSystem() {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:867:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  867 | GroundSystem FGCom_AntennaConfig::getDefaultGroundSystem() {
      | ~~~~~~~~~~~~                      ^
      | auto                                                       -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:868:5: warning: variable 'ground_type' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  868 |     std::string ground_type = getConfigValue("antenna_system.default_ground_type", "average");
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:868:31: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  868 |     std::string ground_type = getConfigValue("antenna_system.default_ground_type", "average");
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:868:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  868 |     std::string ground_type = getConfigValue("antenna_system.default_ground_type", "average");
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:868:84: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  868 |     std::string ground_type = getConfigValue("antenna_system.default_ground_type", "average");
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:869:12: warning: 'getPredefinedGroundSystem' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  869 |     return FGCom_AntennaGroundSystem::getPredefinedGroundSystem(ground_type + "_star");
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:212:41: note: resolves to this declaration
  212 | GroundSystem FGCom_AntennaGroundSystem::getPredefinedGroundSystem(const std::string& name) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:869:77: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  869 |     return FGCom_AntennaGroundSystem::getPredefinedGroundSystem(ground_type + "_star");
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:872:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  872 | std::string FGCom_AntennaConfig::getPatternDirectory() {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:872:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  872 | std::string FGCom_AntennaConfig::getPatternDirectory() {
      | ~~~~~~~~~~~                      ^
      | auto                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:873:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  873 |     return getConfigValue("antenna_system.pattern_directory", "/usr/share/fgcom-mumble/antenna_patterns/");
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:873:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  873 |     return getConfigValue("antenna_system.pattern_directory", "/usr/share/fgcom-mumble/antenna_patterns/");
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:873:63: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  873 |     return getConfigValue("antenna_system.pattern_directory", "/usr/share/fgcom-mumble/antenna_patterns/");
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:876:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  876 | bool FGCom_AntennaConfig::is4NEC2Enabled() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:876:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  876 | bool FGCom_AntennaConfig::is4NEC2Enabled() {
      | ~~~~                      ^
      | auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:877:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  877 |     return getConfigValue("antenna_system.enable_4nec2_patterns", "true") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:877:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  877 |     return getConfigValue("antenna_system.enable_4nec2_patterns", "true") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:877:67: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  877 |     return getConfigValue("antenna_system.enable_4nec2_patterns", "true") == "true";
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:877:75: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  877 |     return getConfigValue("antenna_system.enable_4nec2_patterns", "true") == "true";
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:880:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  880 | bool FGCom_AntennaConfig::isGPUAccelerationEnabled() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:880:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  880 | bool FGCom_AntennaConfig::isGPUAccelerationEnabled() {
      | ~~~~                      ^
      | auto                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:881:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  881 |     return getConfigValue("antenna_system.enable_gpu_acceleration", "false") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:881:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  881 |     return getConfigValue("antenna_system.enable_gpu_acceleration", "false") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:881:69: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  881 |     return getConfigValue("antenna_system.enable_gpu_acceleration", "false") == "true";
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:881:78: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  881 |     return getConfigValue("antenna_system.enable_gpu_acceleration", "false") == "true";
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:884:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  884 | bool FGCom_AntennaConfig::isMUFEnabled() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:884:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  884 | bool FGCom_AntennaConfig::isMUFEnabled() {
      | ~~~~                      ^
      | auto                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:885:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  885 |     return getConfigValue("propagation.enable_muf_luf", "true") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:885:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  885 |     return getConfigValue("propagation.enable_muf_luf", "true") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:885:57: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  885 |     return getConfigValue("propagation.enable_muf_luf", "true") == "true";
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:885:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  885 |     return getConfigValue("propagation.enable_muf_luf", "true") == "true";
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:888:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  888 | bool FGCom_AntennaConfig::isSolarEffectsEnabled() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:888:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  888 | bool FGCom_AntennaConfig::isSolarEffectsEnabled() {
      | ~~~~                      ^
      | auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:889:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  889 |     return getConfigValue("propagation.enable_solar_effects", "true") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:889:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  889 |     return getConfigValue("propagation.enable_solar_effects", "true") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:889:63: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  889 |     return getConfigValue("propagation.enable_solar_effects", "true") == "true";
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:889:71: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  889 |     return getConfigValue("propagation.enable_solar_effects", "true") == "true";
      |                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:892:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  892 | bool FGCom_AntennaConfig::isSeasonalVariationsEnabled() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:892:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  892 | bool FGCom_AntennaConfig::isSeasonalVariationsEnabled() {
      | ~~~~                      ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:893:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  893 |     return getConfigValue("propagation.enable_seasonal_variations", "true") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:893:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  893 |     return getConfigValue("propagation.enable_seasonal_variations", "true") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:893:69: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  893 |     return getConfigValue("propagation.enable_seasonal_variations", "true") == "true";
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:893:77: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  893 |     return getConfigValue("propagation.enable_seasonal_variations", "true") == "true";
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:896:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  896 | bool FGCom_AntennaConfig::isPropagationCacheEnabled() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:896:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  896 | bool FGCom_AntennaConfig::isPropagationCacheEnabled() {
      | ~~~~                      ^
      | auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:897:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  897 |     return getConfigValue("propagation.cache_propagation_results", "true") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:897:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  897 |     return getConfigValue("propagation.cache_propagation_results", "true") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:897:68: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  897 |     return getConfigValue("propagation.cache_propagation_results", "true") == "true";
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:897:76: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  897 |     return getConfigValue("propagation.cache_propagation_results", "true") == "true";
      |                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:900:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  900 | bool FGCom_AntennaConfig::isAmateurRadioEnabled() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:900:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  900 | bool FGCom_AntennaConfig::isAmateurRadioEnabled() {
      | ~~~~                      ^
      | auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:901:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  901 |     return getConfigValue("amateur_radio.enabled", "true") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:901:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  901 |     return getConfigValue("amateur_radio.enabled", "true") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:901:52: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  901 |     return getConfigValue("amateur_radio.enabled", "true") == "true";
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:901:60: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  901 |     return getConfigValue("amateur_radio.enabled", "true") == "true";
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:904:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  904 | int FGCom_AntennaConfig::getITURegion() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:904:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  904 | int FGCom_AntennaConfig::getITURegion() {
      | ~~~                      ^
      | auto                                    -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:905:5: warning: variable 'region' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  905 |     std::string region = getConfigValue("amateur_radio.itu_region", "auto");
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:905:26: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  905 |     std::string region = getConfigValue("amateur_radio.itu_region", "auto");
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:905:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  905 |     std::string region = getConfigValue("amateur_radio.itu_region", "auto");
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:905:69: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  905 |     std::string region = getConfigValue("amateur_radio.itu_region", "auto");
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:906:16: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  906 |     if (region == "auto") {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:909:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  909 |     return std::stoi(region);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:29: note: default parameter was declared here
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:909:12: warning: 'stoi' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  909 |     return std::stoi(region);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:3: note: resolves to this declaration
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:909:17: warning: no header providing "std::stoi" is directly included [misc-include-cleaner]
  909 |     return std::stoi(region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:912:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  912 | bool FGCom_AntennaConfig::isStrictBandCompliance() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:912:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  912 | bool FGCom_AntennaConfig::isStrictBandCompliance() {
      | ~~~~                      ^
      | auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:913:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  913 |     return getConfigValue("amateur_radio.strict_band_compliance", "true") == "true";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:913:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  913 |     return getConfigValue("amateur_radio.strict_band_compliance", "true") == "true";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:913:67: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  913 |     return getConfigValue("amateur_radio.strict_band_compliance", "true") == "true";
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:913:75: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  913 |     return getConfigValue("amateur_radio.strict_band_compliance", "true") == "true";
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:916:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  916 | float FGCom_AntennaConfig::getDefaultPower() {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:916:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  916 | float FGCom_AntennaConfig::getDefaultPower() {
      | ~~~~~                      ^
      | auto                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:917:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  917 |     return std::stof(getConfigValue("amateur_radio.default_power", "100.0"));
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:917:12: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  917 |     return std::stof(getConfigValue("amateur_radio.default_power", "100.0"));
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:917:22: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  917 |     return std::stof(getConfigValue("amateur_radio.default_power", "100.0"));
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:917:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  917 |     return std::stof(getConfigValue("amateur_radio.default_power", "100.0"));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:917:68: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  917 |     return std::stof(getConfigValue("amateur_radio.default_power", "100.0"));
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:920:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  920 | float FGCom_AntennaConfig::getAntennaHeight() {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:920:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  920 | float FGCom_AntennaConfig::getAntennaHeight() {
      | ~~~~~                      ^
      | auto                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:921:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  921 |     return std::stof(getConfigValue("amateur_radio.antenna_height", "10.0"));
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:921:12: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  921 |     return std::stof(getConfigValue("amateur_radio.antenna_height", "10.0"));
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:921:22: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  921 |     return std::stof(getConfigValue("amateur_radio.antenna_height", "10.0"));
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:921:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  921 |     return std::stof(getConfigValue("amateur_radio.antenna_height", "10.0"));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:921:69: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  921 |     return std::stof(getConfigValue("amateur_radio.antenna_height", "10.0"));
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:924:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  924 | std::string FGCom_AntennaConfig::getNOAAAPIURL() {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:924:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  924 | std::string FGCom_AntennaConfig::getNOAAAPIURL() {
      | ~~~~~~~~~~~                      ^
      | auto                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:925:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  925 |     return getConfigValue("solar_data.noaa_api_url", "https://services.swpc.noaa.gov/json/");
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:925:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  925 |     return getConfigValue("solar_data.noaa_api_url", "https://services.swpc.noaa.gov/json/");
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:925:54: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  925 |     return getConfigValue("solar_data.noaa_api_url", "https://services.swpc.noaa.gov/json/");
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:928:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  928 | int FGCom_AntennaConfig::getUpdateInterval() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:928:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  928 | int FGCom_AntennaConfig::getUpdateInterval() {
      | ~~~                      ^
      | auto                                         -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:929:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  929 |     return std::stoi(getConfigValue("solar_data.update_interval", "900"));
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:29: note: default parameter was declared here
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:929:12: warning: 'stoi' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  929 |     return std::stoi(getConfigValue("solar_data.update_interval", "900"));
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:3: note: resolves to this declaration
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:929:22: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  929 |     return std::stoi(getConfigValue("solar_data.update_interval", "900"));
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:929:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  929 |     return std::stoi(getConfigValue("solar_data.update_interval", "900"));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:929:67: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  929 |     return std::stoi(getConfigValue("solar_data.update_interval", "900"));
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:932:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  932 | std::string FGCom_AntennaConfig::getFallbackDataPath() {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:932:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  932 | std::string FGCom_AntennaConfig::getFallbackDataPath() {
      | ~~~~~~~~~~~                      ^
      | auto                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:933:12: warning: 'getConfigValue' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  933 |     return getConfigValue("solar_data.fallback_data_path", "/usr/share/fgcom-mumble/solar_fallback.json");
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:840:34: note: resolves to this declaration
  840 | std::string FGCom_AntennaConfig::getConfigValue(const std::string& key, const std::string& default_value) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:933:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  933 |     return getConfigValue("solar_data.fallback_data_path", "/usr/share/fgcom-mumble/solar_fallback.json");
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:933:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  933 |     return getConfigValue("solar_data.fallback_data_path", "/usr/share/fgcom-mumble/solar_fallback.json");
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:936:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  936 | void FGCom_AntennaConfig::setDefaultConfig() {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:938:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  938 |     config_values["amateur_radio.enabled"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:938:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  938 |     config_values["amateur_radio.enabled"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:938:44: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  938 |     config_values["amateur_radio.enabled"] = "true";
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:939:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  939 |     config_values["amateur_radio.itu_region"] = "auto";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:939:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  939 |     config_values["amateur_radio.itu_region"] = "auto";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:939:47: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  939 |     config_values["amateur_radio.itu_region"] = "auto";
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:940:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  940 |     config_values["amateur_radio.strict_band_compliance"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:940:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  940 |     config_values["amateur_radio.strict_band_compliance"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:940:59: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  940 |     config_values["amateur_radio.strict_band_compliance"] = "true";
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:941:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  941 |     config_values["amateur_radio.default_power"] = "100";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:941:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  941 |     config_values["amateur_radio.default_power"] = "100";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:941:50: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  941 |     config_values["amateur_radio.default_power"] = "100";
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:942:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  942 |     config_values["amateur_radio.antenna_height"] = "10";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:942:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  942 |     config_values["amateur_radio.antenna_height"] = "10";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:942:51: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  942 |     config_values["amateur_radio.antenna_height"] = "10";
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:945:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  945 |     config_values["solar_data.noaa_api_url"] = "https://services.swpc.noaa.gov/json/";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:945:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  945 |     config_values["solar_data.noaa_api_url"] = "https://services.swpc.noaa.gov/json/";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:945:46: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  945 |     config_values["solar_data.noaa_api_url"] = "https://services.swpc.noaa.gov/json/";
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:946:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  946 |     config_values["solar_data.update_interval"] = "900";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:946:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  946 |     config_values["solar_data.update_interval"] = "900";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:946:49: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  946 |     config_values["solar_data.update_interval"] = "900";
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:947:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  947 |     config_values["solar_data.fallback_data_path"] = "/usr/share/fgcom-mumble/solar_fallback.json";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:947:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  947 |     config_values["solar_data.fallback_data_path"] = "/usr/share/fgcom-mumble/solar_fallback.json";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:947:52: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  947 |     config_values["solar_data.fallback_data_path"] = "/usr/share/fgcom-mumble/solar_fallback.json";
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:950:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  950 |     config_values["propagation.enable_muf_luf"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:950:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  950 |     config_values["propagation.enable_muf_luf"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:950:49: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  950 |     config_values["propagation.enable_muf_luf"] = "true";
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:951:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  951 |     config_values["propagation.enable_solar_effects"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:951:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  951 |     config_values["propagation.enable_solar_effects"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:951:55: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  951 |     config_values["propagation.enable_solar_effects"] = "true";
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:952:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  952 |     config_values["propagation.enable_seasonal_variations"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:952:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  952 |     config_values["propagation.enable_seasonal_variations"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:952:61: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  952 |     config_values["propagation.enable_seasonal_variations"] = "true";
      |                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:953:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  953 |     config_values["propagation.cache_propagation_results"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:953:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  953 |     config_values["propagation.cache_propagation_results"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:953:60: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  953 |     config_values["propagation.cache_propagation_results"] = "true";
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:956:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  956 |     config_values["antenna_system.enable_4nec2_patterns"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:956:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  956 |     config_values["antenna_system.enable_4nec2_patterns"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:956:59: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  956 |     config_values["antenna_system.enable_4nec2_patterns"] = "true";
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:957:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  957 |     config_values["antenna_system.enable_gpu_acceleration"] = "true";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:957:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  957 |     config_values["antenna_system.enable_gpu_acceleration"] = "true";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:957:61: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  957 |     config_values["antenna_system.enable_gpu_acceleration"] = "true";
      |                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:958:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  958 |     config_values["antenna_system.antenna_pattern_cache_size"] = "1000";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:958:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  958 |     config_values["antenna_system.antenna_pattern_cache_size"] = "1000";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:958:64: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  958 |     config_values["antenna_system.antenna_pattern_cache_size"] = "1000";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:959:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  959 |     config_values["antenna_system.default_ground_type"] = "average";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:959:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  959 |     config_values["antenna_system.default_ground_type"] = "average";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:959:57: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  959 |     config_values["antenna_system.default_ground_type"] = "average";
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:960:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  960 |     config_values["antenna_system.pattern_directory"] = "/usr/share/fgcom-mumble/antenna_patterns/";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:960:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  960 |     config_values["antenna_system.pattern_directory"] = "/usr/share/fgcom-mumble/antenna_patterns/";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:960:55: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  960 |     config_values["antenna_system.pattern_directory"] = "/usr/share/fgcom-mumble/antenna_patterns/";
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:961:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  961 |     config_values["antenna_system.default_antenna_type"] = "vertical";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:961:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  961 |     config_values["antenna_system.default_antenna_type"] = "vertical";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:961:58: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  961 |     config_values["antenna_system.default_antenna_type"] = "vertical";
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:962:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  962 |     config_values["antenna_system.default_height"] = "10.0";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:962:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  962 |     config_values["antenna_system.default_height"] = "10.0";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:962:52: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  962 |     config_values["antenna_system.default_height"] = "10.0";
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:963:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  963 |     config_values["antenna_system.default_efficiency"] = "0.8";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:963:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  963 |     config_values["antenna_system.default_efficiency"] = "0.8";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:963:56: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  963 |     config_values["antenna_system.default_efficiency"] = "0.8";
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:964:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  964 |     config_values["antenna_system.default_swr"] = "1.5";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:964:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  964 |     config_values["antenna_system.default_swr"] = "1.5";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:964:49: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  964 |     config_values["antenna_system.default_swr"] = "1.5";
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:965:18: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  965 |     config_values["antenna_system.default_impedance"] = "50.0";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:965:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  965 |     config_values["antenna_system.default_impedance"] = "50.0";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:965:55: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  965 |     config_values["antenna_system.default_impedance"] = "50.0";
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:970:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  970 | std::string FGCom_AntennaConfig::trimString(const std::string& str) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:970:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  970 | std::string FGCom_AntennaConfig::trimString(const std::string& str) {
      | ~~~~~~~~~~~                      ^
      | auto                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:971:5: warning: variable 'first' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  971 |     size_t first = str.find_first_not_of(' ');
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:971:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  971 |     size_t first = str.find_first_not_of(' ');
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3059:37: note: default parameter was declared here
 3059 |       find_first_not_of(_CharT __c, size_type __pos = 0) const
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:973:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  973 |         return "";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:975:5: warning: variable 'last' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  975 |     size_t last = str.find_last_not_of(' ');
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:975:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  975 |     size_t last = str.find_last_not_of(' ');
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3146:36: note: default parameter was declared here
 3146 |       find_last_not_of(_CharT __c, size_type __pos = npos) const
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:979:47: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  979 | std::vector<std::string> FGCom_AntennaConfig::splitString(const std::string& str, char delimiter) {
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:979:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  979 | std::vector<std::string> FGCom_AntennaConfig::splitString(const std::string& str, char delimiter) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                      ^
      | auto                                                                                              -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:981:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  981 |     std::stringstream ss(str);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/sstream:1060:5: note: default parameter was declared here
 1060 |                          ios_base::openmode __m = ios_base::out | ios_base::in)
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:981:23: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  981 |     std::stringstream ss(str);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:984:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  984 |     while (std::getline(ss, token, delimiter)) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:984:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'ss' and may cause performance degradation [altera-id-dependent-backward-branch]
  984 |     while (std::getline(ss, token, delimiter)) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:981:5: note: inferred assignment of ID-dependent value from ID-dependent 
  981 |     std::stringstream ss(str);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:984:12: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  984 |     while (std::getline(ss, token, delimiter)) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4094:5: note: resolves to this declaration
 4094 |     getline(basic_istream<char>& __in, basic_string<char>& __str,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:984:17: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
  984 |     while (std::getline(ss, token, delimiter)) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:985:26: warning: 'trimString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  985 |         tokens.push_back(trimString(token));
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.cpp:970:34: note: resolves to this declaration
  970 | std::string FGCom_AntennaConfig::trimString(const std::string& str) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_ANTENNA_GROUND_SYSTEM_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_GROUND_SYSTEM_H
   19 | #define FGCOM_ANTENNA_GROUND_SYSTEM_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_GROUND_SYSTEM_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include <complex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:24:1: warning: system include complex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   24 | #include <complex>
      | ^~~~~~~~~~~~~~~~~~
   25 | #include "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: warning: accessing fields in struct 'GroundSystem' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: use "__attribute__((aligned(128)))" to align struct 'GroundSystem' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:29:17: warning: member variable 'type' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     std::string type;               // "star_network", "copper_plate", "fuselage", "vehicle"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:30:11: warning: member variable 'conductivity' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     float conductivity;             // Ground conductivity in S/m
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:31:11: warning: member variable 'area_coverage' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     float area_coverage;           // Coverage area in square meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:32:10: warning: member variable 'is_saltwater' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     bool is_saltwater;             // Saltwater ground effects
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:33:11: warning: member variable 'depth' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     float depth;                   // Ground system depth in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:34:9: warning: member variable 'radial_count' has public visibility [misc-non-private-member-variables-in-classes]
   34 |     int radial_count;              // Number of radials (for star networks)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:35:11: warning: member variable 'radial_length' has public visibility [misc-non-private-member-variables-in-classes]
   35 |     float radial_length;           // Radial length in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:36:11: warning: member variable 'ground_resistance' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     float ground_resistance;       // Ground resistance in ohms
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:37:17: warning: member variable 'material' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     std::string material;          // Ground system material
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:38:17: warning: member variable 'notes' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     std::string notes;             // Additional information
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:40:5: warning: 'GroundSystem' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   40 |     GroundSystem() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:41:9: warning: 'type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   29 |     std::string type;               // "star_network", "copper_plate", "fuselage", "vehicle"
      |                     
      |                     {"average"}
   30 |     float conductivity;             // Ground conductivity in S/m
   31 |     float area_coverage;           // Coverage area in square meters
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:41:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   41 |         type = "average";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:42:9: warning: 'conductivity' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   30 |     float conductivity;             // Ground conductivity in S/m
      |                       
      |                       {0.01}
   31 |     float area_coverage;           // Coverage area in square meters
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:42:24: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         conductivity = 0.01;       // Average soil conductivity
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:43:9: warning: 'area_coverage' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   31 |     float area_coverage;           // Coverage area in square meters
      |                        
      |                        {100.0}
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
      |         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:44:9: warning: 'is_saltwater' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   32 |     bool is_saltwater;             // Saltwater ground effects
      |                      
      |                      {false}
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:45:9: warning: 'depth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   33 |     float depth;                   // Ground system depth in meters
      |                
      |                {0.1}
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
      |         ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:45:17: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   45 |         depth = 0.1;               // 10cm burial depth
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:46:9: warning: 'radial_count' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   34 |     int radial_count;              // Number of radials (for star networks)
      |                     
      |                     {16}
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:46:24: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   46 |         radial_count = 16;         // 16 radials default
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:47:9: warning: 'radial_length' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   35 |     float radial_length;           // Radial length in meters
      |                        
      |                        {10.0}
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:47:25: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   47 |         radial_length = 10.0;      // 10m radial length
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:48:9: warning: 'ground_resistance' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   36 |     float ground_resistance;       // Ground resistance in ohms
      |                            
      |                            {1.0}
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:49:9: warning: 'material' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   37 |     std::string material;          // Ground system material
      |                         
      |                         {"copper"}
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
   49 |         material = "copper";
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:49:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   49 |         material = "copper";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:50:9: warning: 'notes' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   38 |     std::string notes;             // Additional information
      |                      
      |                      {""}
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
   49 |         material = "copper";
   50 |         notes = "";
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:50:15: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |         notes = "";
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: warning: accessing fields in struct 'AntennaPattern' is inefficient due to padding; only needs 213 bytes but is using 224 bytes [altera-struct-pack-align]
   55 | struct AntennaPattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: warning: accessing fields in struct 'AntennaPattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   55 | struct AntennaPattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPattern' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:56:17: warning: member variable 'antenna_name' has public visibility [misc-non-private-member-variables-in-classes]
   56 |     std::string antenna_name;      // Antenna model name
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:57:11: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   57 |     float frequency_mhz;           // Frequency in MHz
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:58:17: warning: member variable 'polarization' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:59:24: warning: member variable 'theta_angles' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:60:24: warning: member variable 'phi_angles' has public visibility [misc-non-private-member-variables-in-classes]
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:61:24: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:62:24: warning: member variable 'phase_deg' has public visibility [misc-non-private-member-variables-in-classes]
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:63:38: warning: member variable 'e_theta' has public visibility [misc-non-private-member-variables-in-classes]
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:64:38: warning: member variable 'e_phi' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:65:10: warning: member variable 'is_loaded' has public visibility [misc-non-private-member-variables-in-classes]
   65 |     bool is_loaded;                // Whether pattern data is loaded
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:67:5: warning: 'AntennaPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   67 |     AntennaPattern() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:68:9: warning: 'antenna_name' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |     std::string antenna_name;      // Antenna model name
      |                             
      |                             {""}
   57 |     float frequency_mhz;           // Frequency in MHz
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:68:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |         antenna_name = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:69:9: warning: 'frequency_mhz' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   57 |     float frequency_mhz;           // Frequency in MHz
      |                        
      |                        {0.0}
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:70:9: warning: 'polarization' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
      |                             
      |                             {"vertical"}
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
   70 |         polarization = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:70:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |         polarization = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:71:9: warning: 'is_loaded' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   65 |     bool is_loaded;                // Whether pattern data is loaded
      |                   
      |                   {false}
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
   70 |         polarization = "vertical";
   71 |         is_loaded = false;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: warning: accessing fields in struct 'AntennaSystem' is inefficient due to padding; only needs 440 bytes but is using 448 bytes [altera-struct-pack-align]
   76 | struct AntennaSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaSystem'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: warning: accessing fields in struct 'AntennaSystem' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   76 | struct AntennaSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaSystem' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:77:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   77 |     std::string antenna_type;      // "dipole", "yagi", "vertical", "whip", "custom"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:78:11: warning: member variable 'height_meters' has public visibility [misc-non-private-member-variables-in-classes]
   78 |     float height_meters;           // Antenna height above ground
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:79:11: warning: member variable 'azimuth_deg' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     float azimuth_deg;             // Azimuth orientation
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:80:11: warning: member variable 'elevation_deg' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     float elevation_deg;           // Elevation angle
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:81:18: warning: member variable 'ground_system' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     GroundSystem ground_system;    // Ground system characteristics
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:82:20: warning: member variable 'pattern' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:83:17: warning: member variable 'pattern_file' has public visibility [misc-non-private-member-variables-in-classes]
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:84:11: warning: member variable 'efficiency' has public visibility [misc-non-private-member-variables-in-classes]
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:85:11: warning: member variable 'swr' has public visibility [misc-non-private-member-variables-in-classes]
   85 |     float swr;                     // Standing wave ratio
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:86:11: warning: member variable 'feedpoint_impedance' has public visibility [misc-non-private-member-variables-in-classes]
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:88:5: warning: 'AntennaSystem' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   88 |     AntennaSystem() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:89:9: warning: 'antenna_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   77 |     std::string antenna_type;      // "dipole", "yagi", "vertical", "whip", "custom"
      |                             
      |                             {"vertical"}
   78 |     float height_meters;           // Antenna height above ground
   79 |     float azimuth_deg;             // Azimuth orientation
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:89:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         antenna_type = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:90:9: warning: 'height_meters' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   78 |     float height_meters;           // Antenna height above ground
      |                        
      |                        {10.0}
   79 |     float azimuth_deg;             // Azimuth orientation
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:90:25: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   90 |         height_meters = 10.0;      // 10m default height
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:91:9: warning: 'azimuth_deg' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   79 |     float azimuth_deg;             // Azimuth orientation
      |                      
      |                      {0.0}
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:92:9: warning: 'elevation_deg' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   80 |     float elevation_deg;           // Elevation angle
      |                        
      |                        {0.0}
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:93:9: warning: 'efficiency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
      |                     
      |                     {0.8}
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:93:22: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   93 |         efficiency = 0.8;          // 80% efficiency
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:94:9: warning: 'swr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   85 |     float swr;                     // Standing wave ratio
      |              
      |              {1.5}
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
   94 |         swr = 1.5;                 // 1.5:1 SWR
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:94:15: warning: 1.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   94 |         swr = 1.5;                 // 1.5:1 SWR
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:95:9: warning: 'feedpoint_impedance' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
      |                              
      |                              {50.0}
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
   94 |         swr = 1.5;                 // 1.5:1 SWR
   95 |         feedpoint_impedance = 50.0; // 50 ohm impedance
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:95:31: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |         feedpoint_impedance = 50.0; // 50 ohm impedance
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:100:12: warning: enum 'GroundPerformance' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  100 | enum class GroundPerformance {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:117:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     static bool initialize();
      |            ~~~~ ^           
      |            auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:121:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     static GroundSystem createGroundSystem(const std::string& type, float conductivity, float area);
      |            ~~~~~~~~~~~~ ^                                                                          
      |            auto                                                                                     -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:122:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     static GroundSystem getPredefinedGroundSystem(const std::string& name);
      |            ~~~~~~~~~~~~ ^                                                 
      |            auto                                                            -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:123:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     static std::vector<std::string> getAvailableGroundSystems();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |            auto                                                 -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:126:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     static GroundPerformance evaluateGroundPerformance(const GroundSystem& ground);
      |            ~~~~~~~~~~~~~~~~~ ^                                                    
      |            auto                                                                    -> GroundPerformance
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:127:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  127 |     static float calculateGroundLoss(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                   
      |            auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:128:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     static float calculateGroundResistance(const GroundSystem& ground);
      |            ~~~~~ ^                                                    
      |            auto                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:129:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     static float calculateGroundConductivity(const GroundSystem& ground);
      |            ~~~~~ ^                                                      
      |            auto                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:132:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 |     static GroundSystem createStarNetwork(int radials, float length, float conductivity);
      |            ~~~~~~~~~~~~ ^                                                               
      |            auto                                                                          -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:133:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  133 |     static float calculateStarNetworkResistance(int radials, float length, float conductivity);
      |            ~~~~~ ^                                                                            
      |            auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:134:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     static float calculateOptimalRadialLength(float frequency_mhz);
      |            ~~~~~ ^                                                
      |            auto                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:137:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     static GroundSystem createCopperPlate(float area, float conductivity, bool saltwater);
      |            ~~~~~~~~~~~~ ^                                                                
      |            auto                                                                           -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:138:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 |     static float calculatePlateResistance(float area, float conductivity);
      |            ~~~~~ ^                                                       
      |            auto                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:139:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 |     static float calculatePlateCapacitance(float area, float depth);
      |            ~~~~~ ^                                                 
      |            auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:142:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     static GroundSystem createFuselageGround(const std::string& vehicle_type, float area);
      |            ~~~~~~~~~~~~ ^                                                                
      |            auto                                                                           -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:143:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     static GroundSystem createAircraftFuselage(const std::string& aircraft_type);
      |            ~~~~~~~~~~~~ ^                                                       
      |            auto                                                                  -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:144:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     static GroundSystem createMaritimeVessel(const std::string& vessel_type, float hull_area);
      |            ~~~~~~~~~~~~ ^                                                                    
      |            auto                                                                               -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:145:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |     static float calculateFuselageResistance(float area, const std::string& material);
      |            ~~~~~ ^                                                                   
      |            auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:148:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     static bool loadAntennaPattern(const std::string& pattern_file);
      |            ~~~~ ^                                                  
      |            auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:149:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     static bool load4NEC2Pattern(const std::string& filename);
      |            ~~~~ ^                                            
      |            auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:150:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  150 |     static AntennaPattern getAntennaPattern(const std::string& antenna_name, float frequency_mhz);
      |            ~~~~~~~~~~~~~~ ^                                                                      
      |            auto                                                                                   -> AntennaPattern
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:151:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     static std::vector<std::string> getAvailablePatterns();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |            auto                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:154:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |     static float getAntennaGain(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                    
      |            auto                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:155:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     static float getAntennaGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                   
      |            auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:156:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     static float calculateAntennaEfficiency(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                            
      |            auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:159:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     static float calculateDipoleGroundEffect(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                             
      |            auto                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:160:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     static float calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                              
      |            auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:161:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     static float calculateVerticalDipoleGroundEffect(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                                   
      |            auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:164:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  164 |     static float calculateYagiGroundEffect(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                           
      |            auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:165:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     static float calculateYagiHeightEffect(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                  
      |            auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:166:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     static float calculateYagiPatternDistortion(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                       
      |            auto                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:169:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  169 |     static float calculateWhipEfficiency(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                         
      |            auto                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:170:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     static float calculateWhipGroundEffect(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                         
      |            auto                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:171:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     static float calculateWhipImpedance(float length_meters, float frequency_mhz);
      |            ~~~~~ ^                                                               
      |            auto                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:174:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     static float calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz);
      |            ~~~~~ ^                                                                                                             
      |            auto                                                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:175:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     static float calculateSystemLoss(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                     
      |            auto                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:176:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     static float calculateEffectiveRadiatedPower(float tx_power_watts, const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz);
      |            ~~~~~ ^                                                                                                                                               
      |            auto                                                                                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:181:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     static bool parse4NEC2File(const std::string& filename, AntennaPattern& pattern);
      |            ~~~~ ^                                                                   
      |            auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:182:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     static float interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                        
      |            auto                                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:183:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     static float calculateGroundReflectionCoefficient(const GroundSystem& ground, float frequency_mhz, float angle_deg);
      |            ~~~~~ ^                                                                                                     
      |            auto                                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:184:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     static float calculateGroundWaveAttenuation(const GroundSystem& ground, float frequency_mhz, float distance_km);
      |            ~~~~~ ^                                                                                                 
      |            auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:195:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  195 |     static bool loadConfig(const std::string& config_file);
      |            ~~~~ ^                                         
      |            auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:196:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |     static bool saveConfig(const std::string& config_file);
      |            ~~~~ ^                                         
      |            auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |            ~~~~~~~~~~~ ^                                                                            
      |            auto                                                                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:63: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |                                                               ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:98: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:201:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     static AntennaSystem getDefaultAntennaSystem();
      |            ~~~~~~~~~~~~~ ^                        
      |            auto                                    -> AntennaSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:202:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  202 |     static GroundSystem getDefaultGroundSystem();
      |            ~~~~~~~~~~~~ ^                       
      |            auto                                  -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:203:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     static std::string getPatternDirectory();
      |            ~~~~~~~~~~~ ^                    
      |            auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:204:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     static bool is4NEC2Enabled();
      |            ~~~~ ^               
      |            auto                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:205:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 |     static bool isGPUAccelerationEnabled();
      |            ~~~~ ^                         
      |            auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:208:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     static bool isMUFEnabled();
      |            ~~~~ ^             
      |            auto                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:209:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  209 |     static bool isSolarEffectsEnabled();
      |            ~~~~ ^                      
      |            auto                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:210:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  210 |     static bool isSeasonalVariationsEnabled();
      |            ~~~~ ^                            
      |            auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:211:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  211 |     static bool isPropagationCacheEnabled();
      |            ~~~~ ^                          
      |            auto                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:214:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     static bool isAmateurRadioEnabled();
      |            ~~~~ ^                      
      |            auto                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:215:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     static int getITURegion();
      |            ~~~ ^             
      |            auto               -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:216:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     static bool isStrictBandCompliance();
      |            ~~~~ ^                       
      |            auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:217:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  217 |     static float getDefaultPower();
      |            ~~~~~ ^                
      |            auto                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:218:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  218 |     static float getAntennaHeight();
      |            ~~~~~ ^                 
      |            auto                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:221:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     static std::string getNOAAAPIURL();
      |            ~~~~~~~~~~~ ^              
      |            auto                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:222:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 |     static int getUpdateInterval();
      |            ~~~ ^                  
      |            auto                    -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:223:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  223 |     static std::string getFallbackDataPath();
      |            ~~~~~~~~~~~ ^                    
      |            auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:227:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     static std::string trimString(const std::string& str);
      |            ~~~~~~~~~~~ ^                                 
      |            auto                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:228:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     static std::vector<std::string> splitString(const std::string& str, char delimiter);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                  
      |            auto                                                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:2:1: warning: #includes are not sorted properly [llvm-include-order]
    2 | #include <cmath>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:2:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
    2 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    3 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:3:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    3 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    4 | #include <iostream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:4:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
    4 | #include <iostream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:4:1: warning: included header iostream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:7:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
    7 | std::unique_ptr<FGCom_AntennaOrientationCalculator> g_antenna_orientation_calculator = nullptr;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:7:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
    5 | 
    6 | // Global instance
    7 | std::unique_ptr<FGCom_AntennaOrientationCalculator> g_antenna_orientation_calculator = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:7:53: warning: variable 'g_antenna_orientation_calculator' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    7 | std::unique_ptr<FGCom_AntennaOrientationCalculator> g_antenna_orientation_calculator = nullptr;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:7:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:10:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   10 | const double DEG_TO_RAD = M_PI / 180.0;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:10:27: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
    5 | 
    6 | // Global instance
    7 | std::unique_ptr<FGCom_AntennaOrientationCalculator> g_antenna_orientation_calculator = nullptr;
    8 | 
    9 | // Constants
   10 | const double DEG_TO_RAD = M_PI / 180.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:11:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   11 | const double RAD_TO_DEG = 180.0 / M_PI;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:13:37: warning: use '= default' to define a trivial default constructor [hicpp-use-equals-default,modernize-use-equals-default]
   13 | FGCom_AntennaOrientationCalculator::FGCom_AntennaOrientationCalculator() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:13:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:17:37: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
   17 | FGCom_AntennaOrientationCalculator::~FGCom_AntennaOrientationCalculator() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:17:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:21:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   21 | bool FGCom_AntennaOrientationCalculator::initialize() {
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:21:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   21 | bool FGCom_AntennaOrientationCalculator::initialize() {
      | ~~~~                                     ^
      | auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:22:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   22 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:22:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
    5 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:22:26: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   22 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:30:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   30 | void FGCom_AntennaOrientationCalculator::loadAntennaCharacteristics() {
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:35:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   35 | void FGCom_AntennaOrientationCalculator::setDefaultAntennaCharacteristics() {
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:38:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   38 |     yagi_20m.antenna_type = "yagi";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:39:38: warning: 65.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   39 |     yagi_20m.beamwidth_azimuth_deg = 65.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:39:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   39 |     yagi_20m.beamwidth_azimuth_deg = 65.0f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:40:40: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   40 |     yagi_20m.beamwidth_elevation_deg = 25.0f;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:40:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   40 |     yagi_20m.beamwidth_elevation_deg = 25.0f;
      |                                        ^   ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:41:39: warning: 20.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   41 |     yagi_20m.front_to_back_ratio_db = 20.0f;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:41:39: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   41 |     yagi_20m.front_to_back_ratio_db = 20.0f;
      |                                       ^   ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:42:36: warning: 15.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |     yagi_20m.side_lobe_level_db = -15.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:42:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   42 |     yagi_20m.side_lobe_level_db = -15.0f;
      |                                    ^   ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:43:25: warning: 7.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     yagi_20m.gain_dbi = 7.0f;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:43:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   43 |     yagi_20m.gain_dbi = 7.0f;
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:45:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   45 |     yagi_20m.frequency_range_mhz = {14.0f, 14.35f};
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:788:7: note: resolves to this declaration
  788 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:45:37: warning: 14.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   45 |     yagi_20m.frequency_range_mhz = {14.0f, 14.35f};
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:45:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   45 |     yagi_20m.frequency_range_mhz = {14.0f, 14.35f};
      |                                     ^   ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:45:44: warning: 14.35f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   45 |     yagi_20m.frequency_range_mhz = {14.0f, 14.35f};
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:45:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   45 |     yagi_20m.frequency_range_mhz = {14.0f, 14.35f};
      |                                            ^    ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:46:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |     antenna_characteristics["yagi_20m"] = yagi_20m;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:46:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   46 |     antenna_characteristics["yagi_20m"] = yagi_20m;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:46:41: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |     antenna_characteristics["yagi_20m"] = yagi_20m;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: resolves to this declaration
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:50:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |     dipole.antenna_type = "dipole";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:51:36: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     dipole.beamwidth_azimuth_deg = 360.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:51:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |     dipole.beamwidth_azimuth_deg = 360.0f;
      |                                    ^    ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:52:38: warning: 80.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     dipole.beamwidth_elevation_deg = 80.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:52:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   52 |     dipole.beamwidth_elevation_deg = 80.0f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:53:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   53 |     dipole.front_to_back_ratio_db = 0.0f;
      |                                     ^  ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:54:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   54 |     dipole.side_lobe_level_db = 0.0f;
      |                                 ^  ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:55:23: warning: 2.15f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   55 |     dipole.gain_dbi = 2.15f;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:55:23: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   55 |     dipole.gain_dbi = 2.15f;
      |                       ^   ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:57:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   57 |     dipole.frequency_range_mhz = {1.8f, 30.0f};
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:788:7: note: resolves to this declaration
  788 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:57:35: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   57 |     dipole.frequency_range_mhz = {1.8f, 30.0f};
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:57:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   57 |     dipole.frequency_range_mhz = {1.8f, 30.0f};
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:57:41: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   57 |     dipole.frequency_range_mhz = {1.8f, 30.0f};
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:57:41: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   57 |     dipole.frequency_range_mhz = {1.8f, 30.0f};
      |                                         ^   ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:58:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     antenna_characteristics["dipole"] = dipole;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:58:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   58 |     antenna_characteristics["dipole"] = dipole;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:58:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     antenna_characteristics["dipole"] = dipole;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: resolves to this declaration
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:62:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |     vertical.antenna_type = "vertical";
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:63:38: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   63 |     vertical.beamwidth_azimuth_deg = 360.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:63:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   63 |     vertical.beamwidth_azimuth_deg = 360.0f;
      |                                      ^    ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:64:40: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   64 |     vertical.beamwidth_elevation_deg = 90.0f;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:64:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   64 |     vertical.beamwidth_elevation_deg = 90.0f;
      |                                        ^   ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:65:39: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   65 |     vertical.front_to_back_ratio_db = 0.0f;
      |                                       ^  ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:66:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   66 |     vertical.side_lobe_level_db = 0.0f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:67:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   67 |     vertical.gain_dbi = 0.0f;
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:69:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |     vertical.frequency_range_mhz = {1.8f, 30.0f};
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:788:7: note: resolves to this declaration
  788 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:69:37: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   69 |     vertical.frequency_range_mhz = {1.8f, 30.0f};
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:69:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   69 |     vertical.frequency_range_mhz = {1.8f, 30.0f};
      |                                     ^  ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:69:43: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   69 |     vertical.frequency_range_mhz = {1.8f, 30.0f};
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:69:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   69 |     vertical.frequency_range_mhz = {1.8f, 30.0f};
      |                                           ^   ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:70:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |     antenna_characteristics["vertical"] = vertical;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:70:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   70 |     antenna_characteristics["vertical"] = vertical;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:70:41: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |     antenna_characteristics["vertical"] = vertical;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: resolves to this declaration
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:74:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   74 |     loop.antenna_type = "loop";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:75:34: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   75 |     loop.beamwidth_azimuth_deg = 90.0f;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:75:34: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   75 |     loop.beamwidth_azimuth_deg = 90.0f;
      |                                  ^   ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:76:36: warning: 60.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   76 |     loop.beamwidth_elevation_deg = 60.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:76:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   76 |     loop.beamwidth_elevation_deg = 60.0f;
      |                                    ^   ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:77:35: warning: 15.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   77 |     loop.front_to_back_ratio_db = 15.0f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:77:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   77 |     loop.front_to_back_ratio_db = 15.0f;
      |                                   ^   ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:78:32: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   78 |     loop.side_lobe_level_db = -10.0f;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:78:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   78 |     loop.side_lobe_level_db = -10.0f;
      |                                ^   ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:79:21: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   79 |     loop.gain_dbi = 3.0f;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:79:21: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   79 |     loop.gain_dbi = 3.0f;
      |                     ^  ~
      |                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:81:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |     loop.frequency_range_mhz = {1.8f, 30.0f};
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:788:7: note: resolves to this declaration
  788 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:81:33: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   81 |     loop.frequency_range_mhz = {1.8f, 30.0f};
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:81:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   81 |     loop.frequency_range_mhz = {1.8f, 30.0f};
      |                                 ^  ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:81:39: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   81 |     loop.frequency_range_mhz = {1.8f, 30.0f};
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:81:39: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   81 |     loop.frequency_range_mhz = {1.8f, 30.0f};
      |                                       ^   ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:82:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     antenna_characteristics["loop"] = loop;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:82:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   82 |     antenna_characteristics["loop"] = loop;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:82:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     antenna_characteristics["loop"] = loop;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: resolves to this declaration
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:86:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     whip.antenna_type = "whip";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:87:34: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   87 |     whip.beamwidth_azimuth_deg = 360.0f;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:87:34: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   87 |     whip.beamwidth_azimuth_deg = 360.0f;
      |                                  ^    ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:88:36: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   88 |     whip.beamwidth_elevation_deg = 90.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:88:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   88 |     whip.beamwidth_elevation_deg = 90.0f;
      |                                    ^   ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:89:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   89 |     whip.front_to_back_ratio_db = 0.0f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:90:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   90 |     whip.side_lobe_level_db = 0.0f;
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:91:22: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   91 |     whip.gain_dbi = -3.0f;
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:91:22: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   91 |     whip.gain_dbi = -3.0f;
      |                      ^  ~
      |                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:93:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |     whip.frequency_range_mhz = {1.8f, 30.0f};
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:788:7: note: resolves to this declaration
  788 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:93:33: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   93 |     whip.frequency_range_mhz = {1.8f, 30.0f};
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:93:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   93 |     whip.frequency_range_mhz = {1.8f, 30.0f};
      |                                 ^  ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:93:39: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   93 |     whip.frequency_range_mhz = {1.8f, 30.0f};
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:93:39: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   93 |     whip.frequency_range_mhz = {1.8f, 30.0f};
      |                                       ^   ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:94:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   94 |     antenna_characteristics["whip"] = whip;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:94:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   94 |     antenna_characteristics["whip"] = whip;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:94:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   94 |     antenna_characteristics["whip"] = whip;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: resolves to this declaration
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:97:70: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   97 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateAntennaOrientation(
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:97:70: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   97 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateAntennaOrientation(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
   98 |     const fgcom_vehicle_attitude& vehicle_attitude,
   99 |     const fgcom_antenna_orientation& antenna_orientation,
  100 |     const std::string& antenna_type) {
      |                                      -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:98:11: warning: no header providing "fgcom_vehicle_attitude" is directly included [misc-include-cleaner]
    2 |     const fgcom_vehicle_attitude& vehicle_attitude,
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:99:11: warning: no header providing "fgcom_antenna_orientation" is directly included [misc-include-cleaner]
   99 |     const fgcom_antenna_orientation& antenna_orientation,
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:104:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  104 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:107:5: warning: variable 'actual_antenna_type' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  107 |     std::string actual_antenna_type = antenna_type.empty() ? antenna_orientation.antenna_type : antenna_type;
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:110:29: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  110 |     if (actual_antenna_type == "yagi") {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:111:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  111 |         result = calculateYagiOrientation(vehicle_attitude, antenna_orientation);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: resolves to this declaration
   11 | struct fgcom_antenna_orientation_result {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:112:36: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  112 |     } else if (actual_antenna_type == "dipole") {
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:113:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  113 |         result = calculateDipoleOrientation(vehicle_attitude, antenna_orientation);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: resolves to this declaration
   11 | struct fgcom_antenna_orientation_result {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:114:36: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |     } else if (actual_antenna_type == "vertical") {
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:114:51: warning: repeated branch body in conditional chain [bugprone-branch-clone]
  114 |     } else if (actual_antenna_type == "vertical") {
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:116:6: note: end of the original
  116 |     } else if (actual_antenna_type == "loop") {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:118:47: note: clone 1 starts here
  118 |     } else if (actual_antenna_type == "whip") {
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:115:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |         result = calculateVerticalOrientation(vehicle_attitude, antenna_orientation);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: resolves to this declaration
   11 | struct fgcom_antenna_orientation_result {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:116:36: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  116 |     } else if (actual_antenna_type == "loop") {
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:117:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  117 |         result = calculateLoopOrientation(vehicle_attitude, antenna_orientation);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: resolves to this declaration
   11 | struct fgcom_antenna_orientation_result {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:118:36: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  118 |     } else if (actual_antenna_type == "whip") {
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:119:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  119 |         result = calculateVerticalOrientation(vehicle_attitude, antenna_orientation); // Similar to vertical
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: resolves to this declaration
   11 | struct fgcom_antenna_orientation_result {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:124:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  124 |         result.gain_adjustment_db = 0.0f;
      |                                     ^  ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:125:41: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  125 |         result.polarization_angle_deg = 0.0f;
      |                                         ^  ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:127:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  127 |         result.orientation_quality = "unknown";
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:133:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
    5 | std::vector<fgcom_antenna_orientation_result> FGCom_AntennaOrientationCalculator::calculateMultipleAntennaOrientations(
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:133:83: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  133 | std::vector<fgcom_antenna_orientation_result> FGCom_AntennaOrientationCalculator::calculateMultipleAntennaOrientations(
      |                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:133:83: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  133 | std::vector<fgcom_antenna_orientation_result> FGCom_AntennaOrientationCalculator::calculateMultipleAntennaOrientations(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
  134 |     const fgcom_vehicle_attitude& vehicle_attitude,
  135 |     const std::vector<fgcom_antenna_orientation>& antennas) {
      |                                                             -> std::vector<fgcom_antenna_orientation_result>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:139:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  139 |     for (const auto& antenna : antennas) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:139:30: warning: 'operator!=<const fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  139 |     for (const auto& antenna : antennas) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:139:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  139 |     for (const auto& antenna : antennas) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:139:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  139 |     for (const auto& antenna : antennas) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:140:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  140 |         results.push_back(calculateAntennaOrientation(vehicle_attitude, antenna));
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:100:5: note: default parameter was declared here
  100 |     const std::string& antenna_type) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:146:70: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  146 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateYagiOrientation(
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:146:70: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  146 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateYagiOrientation(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
  147 |     const fgcom_vehicle_attitude& vehicle_attitude,
  148 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                                           -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:153:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  153 |     auto it = antenna_characteristics.find("yagi_20m");
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:153:44: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  153 |     auto it = antenna_characteristics.find("yagi_20m");
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:154:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  154 |     if (it == antenna_characteristics.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:157:46: warning: 65.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  157 |         default_yagi.beamwidth_azimuth_deg = 65.0f;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:157:46: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  157 |         default_yagi.beamwidth_azimuth_deg = 65.0f;
      |                                              ^   ~
      |                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:158:48: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  158 |         default_yagi.beamwidth_elevation_deg = 25.0f;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:158:48: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  158 |         default_yagi.beamwidth_elevation_deg = 25.0f;
      |                                                ^   ~
      |                                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:159:33: warning: 7.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  159 |         default_yagi.gain_dbi = 7.0f;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:159:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  159 |         default_yagi.gain_dbi = 7.0f;
      |                                 ^  ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:160:16: error: no viable overloaded '=' [clang-diagnostic-error]
  160 |         result = calculateYagiOrientationEffect(default_yagi, 0.0f, 0.0f);
      |         ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: candidate function (the implicit copy assignment operator) not viable: no known conversion from 'float' to 'const fgcom_antenna_orientation_result' for 1st argument
   11 | struct fgcom_antenna_orientation_result {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: candidate function (the implicit move assignment operator) not viable: no known conversion from 'float' to 'fgcom_antenna_orientation_result' for 1st argument
   11 | struct fgcom_antenna_orientation_result {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:160:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  160 |         result = calculateYagiOrientationEffect(default_yagi, 0.0f, 0.0f);
      |                                                               ^  ~
      |                                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:160:69: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  160 |         result = calculateYagiOrientationEffect(default_yagi, 0.0f, 0.0f);
      |                                                                     ^  ~
      |                                                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:163:9: warning: variable 'azimuth_offset' of type 'float' can be declared 'const' [misc-const-correctness]
  163 |         float azimuth_offset = vehicle_attitude.yaw_deg;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:164:9: warning: variable 'elevation_offset' of type 'float' can be declared 'const' [misc-const-correctness]
  164 |         float elevation_offset = vehicle_attitude.pitch_deg;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:166:16: error: no viable overloaded '=' [clang-diagnostic-error]
  166 |         result = calculateYagiOrientationEffect(it->second, azimuth_offset, elevation_offset);
      |         ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: candidate function (the implicit copy assignment operator) not viable: no known conversion from 'float' to 'const fgcom_antenna_orientation_result' for 1st argument
   11 | struct fgcom_antenna_orientation_result {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: candidate function (the implicit move assignment operator) not viable: no known conversion from 'float' to 'fgcom_antenna_orientation_result' for 1st argument
   11 | struct fgcom_antenna_orientation_result {
      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:166:51: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |         result = calculateYagiOrientationEffect(it->second, azimuth_offset, elevation_offset);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:177:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  177 |     result.orientation_quality = assessOrientationQuality(result.gain_adjustment_db, 
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:181:67: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  181 |     result.is_optimal_orientation = (result.gain_adjustment_db > -3.0f); // Within 3dB of optimal
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:181:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  181 |     result.is_optimal_orientation = (result.gain_adjustment_db > -3.0f); // Within 3dB of optimal
      |                                                                   ^  ~
      |                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:186:70: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  186 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateDipoleOrientation(
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:186:70: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateDipoleOrientation(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
  187 |     const fgcom_vehicle_attitude& vehicle_attitude,
  188 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                                           -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:203:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  203 |     result.orientation_quality = assessOrientationQuality(result.gain_adjustment_db, 
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:207:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  207 |     result.is_optimal_orientation = (result.gain_adjustment_db > -1.0f); // Dipoles are more tolerant
      |                                                                   ^  ~
      |                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:212:70: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  212 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateVerticalOrientation(
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:212:70: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  212 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateVerticalOrientation(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
  213 |     const fgcom_vehicle_attitude& vehicle_attitude,
  214 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                                           -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:226:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  226 |     result.polarization_angle_deg = 0.0f;
      |                                     ^  ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:229:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |     result.orientation_quality = assessOrientationQuality(result.gain_adjustment_db, 
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:233:67: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  233 |     result.is_optimal_orientation = (result.gain_adjustment_db > -0.5f); // Very tolerant
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:233:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  233 |     result.is_optimal_orientation = (result.gain_adjustment_db > -0.5f); // Very tolerant
      |                                                                   ^  ~
      |                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:238:70: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  238 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateLoopOrientation(
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:238:70: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  238 | fgcom_antenna_orientation_result FGCom_AntennaOrientationCalculator::calculateLoopOrientation(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
  239 |     const fgcom_vehicle_attitude& vehicle_attitude,
  240 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                                           -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:255:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  255 |     result.orientation_quality = assessOrientationQuality(result.gain_adjustment_db, 
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:259:67: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  259 |     result.is_optimal_orientation = (result.gain_adjustment_db > -2.0f);
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:259:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  259 |     result.is_optimal_orientation = (result.gain_adjustment_db > -2.0f);
      |                                                                   ^  ~
      |                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:264:63: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  264 | fgcom_antenna_orientation FGCom_AntennaOrientationCalculator::calculateOptimalOrientation(
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:264:63: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 | fgcom_antenna_orientation FGCom_AntennaOrientationCalculator::calculateOptimalOrientation(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
  265 |     const fgcom_vehicle_attitude& vehicle_attitude,
  266 |     const std::string& antenna_type,
  267 |     const std::string& target_direction) {
      |                                          -> fgcom_antenna_orientation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:266:5: warning: 2 adjacent parameters of 'calculateOptimalOrientation' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  266 |     const std::string& antenna_type,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  267 |     const std::string& target_direction) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:266:24: note: the first parameter in the range is 'antenna_type'
  266 |     const std::string& antenna_type,
      |                        ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:267:24: note: the last parameter in the range is 'target_direction'
  267 |     const std::string& target_direction) {
      |                        ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:270:38: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  270 |     optimal_orientation.antenna_type = antenna_type;
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:273:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  273 |     float target_azimuth = 0.0f;
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:274:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  274 |     if (target_direction == "north") {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:275:26: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  275 |         target_azimuth = 0.0f;
      |                          ^  ~
      |                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:276:33: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  276 |     } else if (target_direction == "east") {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:277:26: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  277 |         target_azimuth = 90.0f;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:277:26: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  277 |         target_azimuth = 90.0f;
      |                          ^   ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:278:33: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  278 |     } else if (target_direction == "south") {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:279:26: warning: 180.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  279 |         target_azimuth = 180.0f;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:279:26: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  279 |         target_azimuth = 180.0f;
      |                          ^    ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:280:33: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  280 |     } else if (target_direction == "west") {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:281:26: warning: 270.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  281 |         target_azimuth = 270.0f;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:281:26: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  281 |         target_azimuth = 270.0f;
      |                          ^    ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:285:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  285 |             target_azimuth = std::stof(target_direction);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:285:30: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  285 |             target_azimuth = std::stof(target_direction);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:285:35: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
    5 |             target_azimuth = std::stof(target_direction);
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:287:30: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  287 |             target_azimuth = 0.0f;
      |                              ^  ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:293:41: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  293 |     optimal_orientation.elevation_deg = std::max(-90.0f, std::min(90.0f, -vehicle_attitude.pitch_deg));
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:293:51: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  293 |     optimal_orientation.elevation_deg = std::max(-90.0f, std::min(90.0f, -vehicle_attitude.pitch_deg));
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:293:51: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  293 |     optimal_orientation.elevation_deg = std::max(-90.0f, std::min(90.0f, -vehicle_attitude.pitch_deg));
      |                                                   ^   ~
      |                                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:293:58: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  293 |     optimal_orientation.elevation_deg = std::max(-90.0f, std::min(90.0f, -vehicle_attitude.pitch_deg));
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:293:67: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  293 |     optimal_orientation.elevation_deg = std::max(-90.0f, std::min(90.0f, -vehicle_attitude.pitch_deg));
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:293:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  293 |     optimal_orientation.elevation_deg = std::max(-90.0f, std::min(90.0f, -vehicle_attitude.pitch_deg));
      |                                                                   ^   ~
      |                                                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:298:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  298 | bool FGCom_AntennaOrientationCalculator::addAntennaCharacteristics(
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:298:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  298 | bool FGCom_AntennaOrientationCalculator::addAntennaCharacteristics(
      | ~~~~                                     ^
      | auto
  299 |     const std::string& antenna_type,
  300 |     const fgcom_antenna_pattern_characteristics& characteristics) {
      |                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:302:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  302 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:304:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  304 |     antenna_characteristics[antenna_type] = characteristics;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:304:43: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  304 |     antenna_characteristics[antenna_type] = characteristics;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: resolves to this declaration
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:308:75: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  308 | fgcom_antenna_pattern_characteristics FGCom_AntennaOrientationCalculator::getAntennaCharacteristics(
      |                                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:308:75: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  308 | fgcom_antenna_pattern_characteristics FGCom_AntennaOrientationCalculator::getAntennaCharacteristics(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto
  309 |     const std::string& antenna_type) {
      |                                      -> fgcom_antenna_pattern_characteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:311:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  311 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:313:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  313 |     auto it = antenna_characteristics.find(antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:314:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     if (it != antenna_characteristics.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:315:18: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  315 |         return it->second;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:320:42: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  320 |     default_characteristics.antenna_type = antenna_type;
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:324:62: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  324 | std::vector<std::string> FGCom_AntennaOrientationCalculator::getAvailableAntennaTypes() {
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:324:62: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  324 | std::vector<std::string> FGCom_AntennaOrientationCalculator::getAvailableAntennaTypes() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                                     ^
      | auto                                                                                    -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:325:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  325 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:328:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  328 |     for (const auto& pair : antenna_characteristics) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:328:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |     for (const auto& pair : antenna_characteristics) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:328:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |     for (const auto& pair : antenna_characteristics) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:328:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |     for (const auto& pair : antenna_characteristics) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:335:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  335 | float FGCom_AntennaOrientationCalculator::normalizeAngle(float angle_deg) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:335:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  335 | float FGCom_AntennaOrientationCalculator::normalizeAngle(float angle_deg) {
      | ~~~~~                                     ^
      | auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:335:43: warning: method 'normalizeAngle' can be made static [readability-convert-member-functions-to-static]
  335 | float FGCom_AntennaOrientationCalculator::normalizeAngle(float angle_deg) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:336:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  336 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:336:24: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  336 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                        ^  ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:336:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  336 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                             ^                    
      |                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:336:43: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  336 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:336:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  336 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                                           ^    ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:337:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  337 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:337:25: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  337 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:337:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  337 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                         ^    ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:337:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  337 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                ^                    
      |                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:337:46: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  337 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:337:46: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  337 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                              ^    ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:341:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  341 | float FGCom_AntennaOrientationCalculator::calculateAngleDifference(float angle1_deg, float angle2_deg) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:341:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  341 | float FGCom_AntennaOrientationCalculator::calculateAngleDifference(float angle1_deg, float angle2_deg) {
      | ~~~~~                                     ^
      | auto                                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:341:43: warning: method 'calculateAngleDifference' can be made static [readability-convert-member-functions-to-static]
  341 | float FGCom_AntennaOrientationCalculator::calculateAngleDifference(float angle1_deg, float angle2_deg) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:343:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  343 |     while (diff > 180.0f) diff -= 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:343:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'diff' and may cause performance degradation [altera-id-dependent-backward-branch]
  343 |     while (diff > 180.0f) diff -= 360.0f;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:342:5: note: inferred assignment of ID-dependent value from ID-dependent 
  342 |     float diff = angle1_deg - angle2_deg;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:343:19: warning: 180.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  343 |     while (diff > 180.0f) diff -= 360.0f;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:343:19: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  343 |     while (diff > 180.0f) diff -= 360.0f;
      |                   ^    ~
      |                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:343:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  343 |     while (diff > 180.0f) diff -= 360.0f;
      |                          ^               
      |                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:343:35: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  343 |     while (diff > 180.0f) diff -= 360.0f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:343:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  343 |     while (diff > 180.0f) diff -= 360.0f;
      |                                   ^    ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:344:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  344 |     while (diff < -180.0f) diff += 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:344:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'diff' and may cause performance degradation [altera-id-dependent-backward-branch]
  344 |     while (diff < -180.0f) diff += 360.0f;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:342:5: note: inferred assignment of ID-dependent value from ID-dependent 
  342 |     float diff = angle1_deg - angle2_deg;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:344:20: warning: 180.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  344 |     while (diff < -180.0f) diff += 360.0f;
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:344:20: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  344 |     while (diff < -180.0f) diff += 360.0f;
      |                    ^    ~
      |                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:344:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  344 |     while (diff < -180.0f) diff += 360.0f;
      |                           ^               
      |                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:344:36: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  344 |     while (diff < -180.0f) diff += 360.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:344:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  344 |     while (diff < -180.0f) diff += 360.0f;
      |                                    ^    ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:345:12: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  345 |     return std::abs(diff);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:348:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  348 | bool FGCom_AntennaOrientationCalculator::isAntennaTypeSupported(const std::string& antenna_type) {
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:348:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  348 | bool FGCom_AntennaOrientationCalculator::isAntennaTypeSupported(const std::string& antenna_type) {
      | ~~~~                                     ^
      | auto                                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:349:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  349 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:351:55: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |     return antenna_characteristics.find(antenna_type) != antenna_characteristics.end();
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:354:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  354 | void FGCom_AntennaOrientationCalculator::setCustomAntennaCharacteristics(
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:356:5: warning: 3 adjacent parameters of 'setCustomAntennaCharacteristics' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  356 |     float beamwidth_az, float beamwidth_el,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  357 |     float gain_dbi, bool is_directional) {
      |     ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:356:11: note: the first parameter in the range is 'beamwidth_az'
  356 |     float beamwidth_az, float beamwidth_el,
      |           ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:357:11: note: the last parameter in the range is 'gain_dbi'
  357 |     float gain_dbi, bool is_directional) {
      |           ^~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:359:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  359 |     std::lock_guard<std::mutex> lock(calculator_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:362:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  362 |     characteristics.antenna_type = antenna_type;
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:368:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  368 |     antenna_characteristics[antenna_type] = characteristics;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:368:43: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  368 |     antenna_characteristics[antenna_type] = characteristics;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: resolves to this declaration
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:372:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  372 | void FGCom_AntennaOrientationCalculator::transformVehicleToAntennaCoordinates(
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:375:5: warning: 2 adjacent parameters of 'transformVehicleToAntennaCoordinates' of similar type ('float &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  375 |     float& effective_azimuth, float& effective_elevation) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:375:12: note: the first parameter in the range is 'effective_azimuth'
  375 |     float& effective_azimuth, float& effective_elevation) {
      |            ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:375:38: note: the last parameter in the range is 'effective_elevation'
  375 |     float& effective_azimuth, float& effective_elevation) {
      |                                      ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:384:27: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |     effective_elevation = std::max(-90.0f, std::min(90.0f, 
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:384:37: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     effective_elevation = std::max(-90.0f, std::min(90.0f, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:384:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  384 |     effective_elevation = std::max(-90.0f, std::min(90.0f, 
      |                                     ^   ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:384:44: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |     effective_elevation = std::max(-90.0f, std::min(90.0f, 
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:384:53: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     effective_elevation = std::max(-90.0f, std::min(90.0f, 
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:384:53: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  384 |     effective_elevation = std::max(-90.0f, std::min(90.0f, 
      |                                                     ^   ~
      |                                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:388:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  388 | float FGCom_AntennaOrientationCalculator::calculateGainAdjustment(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:388:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  388 | float FGCom_AntennaOrientationCalculator::calculateGainAdjustment(
      | ~~~~~                                     ^
      | auto
  389 |     const fgcom_antenna_pattern_characteristics& characteristics,
  390 |     float azimuth_offset, float elevation_offset) {
      |                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:388:43: warning: method 'calculateGainAdjustment' can be made static [readability-convert-member-functions-to-static]
  388 | float FGCom_AntennaOrientationCalculator::calculateGainAdjustment(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:390:5: warning: 2 adjacent parameters of 'calculateGainAdjustment' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  390 |     float azimuth_offset, float elevation_offset) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:390:11: note: the first parameter in the range is 'azimuth_offset'
  390 |     float azimuth_offset, float elevation_offset) {
      |           ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:390:33: note: the last parameter in the range is 'elevation_offset'
  390 |     float azimuth_offset, float elevation_offset) {
      |                                 ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:393:16: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  393 |         return 0.0f; // Omnidirectional antennas are not affected
      |                ^  ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:397:5: warning: variable 'azimuth_loss' of type 'float' can be declared 'const' [misc-const-correctness]
  397 |     float azimuth_loss = (azimuth_offset / characteristics.beamwidth_azimuth_deg) * 3.0f; // 3dB per beamwidth
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:397:85: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  397 |     float azimuth_loss = (azimuth_offset / characteristics.beamwidth_azimuth_deg) * 3.0f; // 3dB per beamwidth
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:397:85: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  397 |     float azimuth_loss = (azimuth_offset / characteristics.beamwidth_azimuth_deg) * 3.0f; // 3dB per beamwidth
      |                                                                                     ^  ~
      |                                                                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:398:5: warning: variable 'elevation_loss' of type 'float' can be declared 'const' [misc-const-correctness]
  398 |     float elevation_loss = (elevation_offset / characteristics.beamwidth_elevation_deg) * 3.0f;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:398:91: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  398 |     float elevation_loss = (elevation_offset / characteristics.beamwidth_elevation_deg) * 3.0f;
      |                                                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:398:91: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  398 |     float elevation_loss = (elevation_offset / characteristics.beamwidth_elevation_deg) * 3.0f;
      |                                                                                           ^  ~
      |                                                                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:400:14: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  400 |     return -(std::abs(azimuth_loss) + std::abs(elevation_loss));
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:400:39: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  400 |     return -(std::abs(azimuth_loss) + std::abs(elevation_loss));
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:403:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  403 | float FGCom_AntennaOrientationCalculator::calculatePolarizationAngle(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:403:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  403 | float FGCom_AntennaOrientationCalculator::calculatePolarizationAngle(
      | ~~~~~                                     ^
      | auto
  404 |     const fgcom_vehicle_attitude& vehicle_attitude,
  405 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:403:43: warning: method 'calculatePolarizationAngle' can be made static [readability-convert-member-functions-to-static]
  403 | float FGCom_AntennaOrientationCalculator::calculatePolarizationAngle(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:405:38: warning: parameter 'antenna_orientation' is unused [misc-unused-parameters]
  405 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                      ^~~~~~~~~~~~~~~~~~~
      |                                       /*antenna_orientation*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:409:40: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  409 |     return vehicle_attitude.roll_deg * 0.5f; // Rough approximation
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:409:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  409 |     return vehicle_attitude.roll_deg * 0.5f; // Rough approximation
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:412:49: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  412 | std::string FGCom_AntennaOrientationCalculator::assessOrientationQuality(
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:412:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  412 | std::string FGCom_AntennaOrientationCalculator::assessOrientationQuality(
      | ~~~~~~~~~~~                                     ^
      | auto
  413 |     float gain_adjustment_db, float azimuth_offset, float elevation_offset) {
      |                                                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:412:49: warning: method 'assessOrientationQuality' can be made static [readability-convert-member-functions-to-static]
  412 | std::string FGCom_AntennaOrientationCalculator::assessOrientationQuality(
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:413:5: warning: 3 adjacent parameters of 'assessOrientationQuality' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  413 |     float gain_adjustment_db, float azimuth_offset, float elevation_offset) {
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:413:11: note: the first parameter in the range is 'gain_adjustment_db'
  413 |     float gain_adjustment_db, float azimuth_offset, float elevation_offset) {
      |           ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:413:59: note: the last parameter in the range is 'elevation_offset'
  413 |     float gain_adjustment_db, float azimuth_offset, float elevation_offset) {
      |                                                           ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:413:37: warning: parameter 'azimuth_offset' is unused [misc-unused-parameters]
  413 |     float gain_adjustment_db, float azimuth_offset, float elevation_offset) {
      |                                     ^~~~~~~~~~~~~~
      |                                      /*azimuth_offset*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:413:59: warning: parameter 'elevation_offset' is unused [misc-unused-parameters]
  413 |     float gain_adjustment_db, float azimuth_offset, float elevation_offset) {
      |                                                           ^~~~~~~~~~~~~~~~
      |                                                            /*elevation_offset*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:415:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  415 |     if (gain_adjustment_db > -1.0f) {
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:416:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  416 |         return "excellent";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:417:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  417 |     } else if (gain_adjustment_db > -3.0f) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  418 |         return "good";
      |         ~~~~~~~~~~~~~~
  419 |     } else if (gain_adjustment_db > -6.0f) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  420 |         return "fair";
      |         ~~~~~~~~~~~~~~
  421 |     } else {
      |     ~~~~~~~~
  422 |         return "poor";
      |         ~~~~~~~~~~~~~~
  423 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:417:38: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  417 |     } else if (gain_adjustment_db > -3.0f) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:417:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:418:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  418 |         return "good";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:419:38: warning: 6.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  419 |     } else if (gain_adjustment_db > -6.0f) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:419:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:420:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  420 |         return "fair";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:422:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  422 |         return "poor";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:426:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  426 | float FGCom_AntennaOrientationCalculator::calculateYagiOrientationEffect(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:426:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  426 | float FGCom_AntennaOrientationCalculator::calculateYagiOrientationEffect(
      | ~~~~~                                     ^
      | auto
  427 |     const fgcom_antenna_pattern_characteristics& characteristics,
  428 |     float azimuth_offset, float elevation_offset) {
      |                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:433:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  433 | float FGCom_AntennaOrientationCalculator::calculateDipoleOrientationEffect(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:433:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  433 | float FGCom_AntennaOrientationCalculator::calculateDipoleOrientationEffect(
      | ~~~~~                                     ^
      | auto
  434 |     const fgcom_vehicle_attitude& vehicle_attitude,
  435 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:433:43: warning: method 'calculateDipoleOrientationEffect' can be made static [readability-convert-member-functions-to-static]
  433 | float FGCom_AntennaOrientationCalculator::calculateDipoleOrientationEffect(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:435:38: warning: parameter 'antenna_orientation' is unused [misc-unused-parameters]
  435 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                      ^~~~~~~~~~~~~~~~~~~
      |                                       /*antenna_orientation*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:438:5: warning: variable 'roll_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  438 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.1f; // 0.1dB per degree of roll
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:438:25: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  438 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.1f; // 0.1dB per degree of roll
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:438:63: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  438 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.1f; // 0.1dB per degree of roll
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:438:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  438 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.1f; // 0.1dB per degree of roll
      |                                                               ^  ~
      |                                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:439:5: warning: variable 'pitch_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  439 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.05f; // 0.05dB per degree of pitch
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:439:26: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.05f; // 0.05dB per degree of pitch
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:439:65: warning: 0.05f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  439 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.05f; // 0.05dB per degree of pitch
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:439:65: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  439 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.05f; // 0.05dB per degree of pitch
      |                                                                 ^   ~
      |                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:444:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  444 | float FGCom_AntennaOrientationCalculator::calculateVerticalOrientationEffect(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:444:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  444 | float FGCom_AntennaOrientationCalculator::calculateVerticalOrientationEffect(
      | ~~~~~                                     ^
      | auto
  445 |     const fgcom_vehicle_attitude& vehicle_attitude) {
      |                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:444:43: warning: method 'calculateVerticalOrientationEffect' can be made static [readability-convert-member-functions-to-static]
  444 | float FGCom_AntennaOrientationCalculator::calculateVerticalOrientationEffect(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:448:5: warning: variable 'roll_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  448 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.02f; // Very small effect
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:448:25: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  448 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.02f; // Very small effect
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:448:63: warning: 0.02f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  448 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.02f; // Very small effect
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:448:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  448 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.02f; // Very small effect
      |                                                               ^   ~
      |                                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:449:5: warning: variable 'pitch_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  449 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.01f; // Very small effect
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:449:26: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  449 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.01f; // Very small effect
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:449:65: warning: 0.01f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  449 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.01f; // Very small effect
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:449:65: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  449 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.01f; // Very small effect
      |                                                                 ^   ~
      |                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:454:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  454 | float FGCom_AntennaOrientationCalculator::calculateLoopOrientationEffect(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:454:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  454 | float FGCom_AntennaOrientationCalculator::calculateLoopOrientationEffect(
      | ~~~~~                                     ^
      | auto
  455 |     const fgcom_vehicle_attitude& vehicle_attitude,
  456 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:454:43: warning: method 'calculateLoopOrientationEffect' can be made static [readability-convert-member-functions-to-static]
  454 | float FGCom_AntennaOrientationCalculator::calculateLoopOrientationEffect(
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:456:38: warning: parameter 'antenna_orientation' is unused [misc-unused-parameters]
  456 |     const fgcom_antenna_orientation& antenna_orientation) {
      |                                      ^~~~~~~~~~~~~~~~~~~
      |                                       /*antenna_orientation*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:459:5: warning: variable 'roll_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  459 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.2f; // Moderate effect
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:459:25: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  459 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.2f; // Moderate effect
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:459:63: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  459 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.2f; // Moderate effect
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:459:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  459 |     float roll_effect = std::abs(vehicle_attitude.roll_deg) * 0.2f; // Moderate effect
      |                                                               ^  ~
      |                                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:460:5: warning: variable 'pitch_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  460 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.1f; // Moderate effect
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:460:26: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  460 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.1f; // Moderate effect
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:460:65: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  460 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.1f; // Moderate effect
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:460:65: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  460 |     float pitch_effect = std::abs(vehicle_attitude.pitch_deg) * 0.1f; // Moderate effect
      |                                                                 ^  ~
      |                                                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:466:6: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  466 | bool initializeAntennaOrientationCalculator() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:466:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  466 | bool initializeAntennaOrientationCalculator() {
      | ~~~~ ^
      | auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:471:38: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  471 |     g_antenna_orientation_calculator = std::make_unique<FGCom_AntennaOrientationCalculator>();
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:471:40: warning: 'make_unique<FGCom_AntennaOrientationCalculator>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  471 |     g_antenna_orientation_calculator = std::make_unique<FGCom_AntennaOrientationCalculator>();
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:471:45: warning: no header providing "std::make_unique" is directly included [misc-include-cleaner]
  471 |     g_antenna_orientation_calculator = std::make_unique<FGCom_AntennaOrientationCalculator>();
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:472:44: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  472 |     return g_antenna_orientation_calculator->initialize();
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:475:6: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  475 | void shutdownAntennaOrientationCalculator() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.cpp:476:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  476 |     g_antenna_orientation_calculator.reset();
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:505:13: note: default parameter was declared here
  505 |       reset(pointer __p = pointer()) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_ANTENNA_ORIENTATION_CALCULATOR_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_ORIENTATION_CALCULATOR_H
    2 | #define FGCOM_ANTENNA_ORIENTATION_CALCULATOR_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_ORIENTATION_CALCULATOR_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include "vehicle_dynamics.h"
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:6:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:7:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <map>
      | ^~~~~~~~~~~~~~
    8 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:8:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    9 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: warning: accessing fields in struct 'fgcom_antenna_orientation_result' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   11 | struct fgcom_antenna_orientation_result {
      |        ^
   12 |     float effective_azimuth_deg;    // Effective azimuth after vehicle attitude compensation
   13 |     float effective_elevation_deg;  // Effective elevation after vehicle attitude compensation
   14 |     float gain_adjustment_db;       // Gain adjustment due to orientation changes
   15 |     float polarization_angle_deg;   // Polarization angle change
   16 |     bool is_optimal_orientation;    // Is the antenna optimally oriented?
   17 |     std::string orientation_quality; // "excellent", "good", "fair", "poor"
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
   21 |                                         gain_adjustment_db(0.0f), polarization_angle_deg(0.0f),
   22 |                                         is_optimal_orientation(false), orientation_quality("fair") {
   23 |         timestamp = std::chrono::system_clock::now();
   24 |     }
   25 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:11:8: note: use "__attribute__((aligned(64)))" to align struct 'fgcom_antenna_orientation_result' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:12:11: warning: use default member initializer for 'effective_azimuth_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   12 |     float effective_azimuth_deg;    // Effective azimuth after vehicle attitude compensation
      |           ^                    
      |                                {0.0f}
   13 |     float effective_elevation_deg;  // Effective elevation after vehicle attitude compensation
   14 |     float gain_adjustment_db;       // Gain adjustment due to orientation changes
   15 |     float polarization_angle_deg;   // Polarization angle change
   16 |     bool is_optimal_orientation;    // Is the antenna optimally oriented?
   17 |     std::string orientation_quality; // "excellent", "good", "fair", "poor"
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:12:11: warning: member variable 'effective_azimuth_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:13:11: warning: use default member initializer for 'effective_elevation_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   13 |     float effective_elevation_deg;  // Effective elevation after vehicle attitude compensation
      |           ^                      
      |                                  {0.0f}
   14 |     float gain_adjustment_db;       // Gain adjustment due to orientation changes
   15 |     float polarization_angle_deg;   // Polarization angle change
   16 |     bool is_optimal_orientation;    // Is the antenna optimally oriented?
   17 |     std::string orientation_quality; // "excellent", "good", "fair", "poor"
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
      |                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:13:11: warning: member variable 'effective_elevation_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:14:11: warning: use default member initializer for 'gain_adjustment_db' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   14 |     float gain_adjustment_db;       // Gain adjustment due to orientation changes
      |           ^                 
      |                             {0.0f}
   15 |     float polarization_angle_deg;   // Polarization angle change
   16 |     bool is_optimal_orientation;    // Is the antenna optimally oriented?
   17 |     std::string orientation_quality; // "excellent", "good", "fair", "poor"
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
   21 |                                         gain_adjustment_db(0.0f), polarization_angle_deg(0.0f),
      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:14:11: warning: member variable 'gain_adjustment_db' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:15:11: warning: use default member initializer for 'polarization_angle_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   15 |     float polarization_angle_deg;   // Polarization angle change
      |           ^                     
      |                                 {0.0f}
   16 |     bool is_optimal_orientation;    // Is the antenna optimally oriented?
   17 |     std::string orientation_quality; // "excellent", "good", "fair", "poor"
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
   21 |                                         gain_adjustment_db(0.0f), polarization_angle_deg(0.0f),
      |                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:15:11: warning: member variable 'polarization_angle_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:16:10: warning: use default member initializer for 'is_optimal_orientation' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   16 |     bool is_optimal_orientation;    // Is the antenna optimally oriented?
      |          ^                     
      |                                {false}
   17 |     std::string orientation_quality; // "excellent", "good", "fair", "poor"
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
   21 |                                         gain_adjustment_db(0.0f), polarization_angle_deg(0.0f),
   22 |                                         is_optimal_orientation(false), orientation_quality("fair") {
      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:16:10: warning: member variable 'is_optimal_orientation' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:17:17: warning: member variable 'orientation_quality' has public visibility [misc-non-private-member-variables-in-classes]
   17 |     std::string orientation_quality; // "excellent", "good", "fair", "poor"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:18:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   18 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:20:5: warning: 'fgcom_antenna_orientation_result' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:20:64: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
      |                                                                ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:20:95: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_antenna_orientation_result() : effective_azimuth_deg(0.0f), effective_elevation_deg(0.0f),
      |                                                                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:21:60: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |                                         gain_adjustment_db(0.0f), polarization_angle_deg(0.0f),
      |                                                            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:21:90: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |                                         gain_adjustment_db(0.0f), polarization_angle_deg(0.0f),
      |                                                                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:22:72: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   22 |                                         is_optimal_orientation(false), orientation_quality("fair") {
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:23:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   23 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:23:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   23 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: warning: accessing fields in struct 'fgcom_antenna_pattern_characteristics' is inefficient due to padding; only needs 77 bytes but is using 80 bytes [altera-struct-pack-align]
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
   29 |     std::string antenna_type;       // "yagi", "dipole", "vertical", "loop", "whip"
   30 |     float beamwidth_azimuth_deg;    // 3dB beamwidth in azimuth
   31 |     float beamwidth_elevation_deg;  // 3dB beamwidth in elevation
   32 |     float front_to_back_ratio_db;   // Front-to-back ratio
   33 |     float side_lobe_level_db;       // Side lobe level
   34 |     float gain_dbi;                 // Peak gain in dBi
   35 |     bool is_directional;            // Is this a directional antenna?
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
   40 |                                              gain_dbi(0.0f), is_directional(false) {}
   41 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_antenna_pattern_characteristics'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: warning: accessing fields in struct 'fgcom_antenna_pattern_characteristics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   28 | struct fgcom_antenna_pattern_characteristics {
      |        ^
   29 |     std::string antenna_type;       // "yagi", "dipole", "vertical", "loop", "whip"
   30 |     float beamwidth_azimuth_deg;    // 3dB beamwidth in azimuth
   31 |     float beamwidth_elevation_deg;  // 3dB beamwidth in elevation
   32 |     float front_to_back_ratio_db;   // Front-to-back ratio
   33 |     float side_lobe_level_db;       // Side lobe level
   34 |     float gain_dbi;                 // Peak gain in dBi
   35 |     bool is_directional;            // Is this a directional antenna?
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
   40 |                                              gain_dbi(0.0f), is_directional(false) {}
   41 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:28:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_antenna_pattern_characteristics' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:29:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     std::string antenna_type;       // "yagi", "dipole", "vertical", "loop", "whip"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:30:11: warning: use default member initializer for 'beamwidth_azimuth_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   30 |     float beamwidth_azimuth_deg;    // 3dB beamwidth in azimuth
      |           ^                    
      |                                {0.0f}
   31 |     float beamwidth_elevation_deg;  // 3dB beamwidth in elevation
   32 |     float front_to_back_ratio_db;   // Front-to-back ratio
   33 |     float side_lobe_level_db;       // Side lobe level
   34 |     float gain_dbi;                 // Peak gain in dBi
   35 |     bool is_directional;            // Is this a directional antenna?
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
      |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:30:11: warning: member variable 'beamwidth_azimuth_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:31:11: warning: use default member initializer for 'beamwidth_elevation_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   31 |     float beamwidth_elevation_deg;  // 3dB beamwidth in elevation
      |           ^                      
      |                                  {0.0f}
   32 |     float front_to_back_ratio_db;   // Front-to-back ratio
   33 |     float side_lobe_level_db;       // Side lobe level
   34 |     float gain_dbi;                 // Peak gain in dBi
   35 |     bool is_directional;            // Is this a directional antenna?
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
      |                                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:31:11: warning: member variable 'beamwidth_elevation_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:32:11: warning: use default member initializer for 'front_to_back_ratio_db' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   32 |     float front_to_back_ratio_db;   // Front-to-back ratio
      |           ^                     
      |                                 {0.0f}
   33 |     float side_lobe_level_db;       // Side lobe level
   34 |     float gain_dbi;                 // Peak gain in dBi
   35 |     bool is_directional;            // Is this a directional antenna?
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
      |                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:32:11: warning: member variable 'front_to_back_ratio_db' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:33:11: warning: use default member initializer for 'side_lobe_level_db' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   33 |     float side_lobe_level_db;       // Side lobe level
      |           ^                 
      |                             {0.0f}
   34 |     float gain_dbi;                 // Peak gain in dBi
   35 |     bool is_directional;            // Is this a directional antenna?
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
      |                                                                            ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:33:11: warning: member variable 'side_lobe_level_db' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:34:11: warning: use default member initializer for 'gain_dbi' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   34 |     float gain_dbi;                 // Peak gain in dBi
      |           ^       
      |                   {0.0f}
   35 |     bool is_directional;            // Is this a directional antenna?
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
   40 |                                              gain_dbi(0.0f), is_directional(false) {}
      |                                              ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:34:11: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:35:10: warning: use default member initializer for 'is_directional' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   35 |     bool is_directional;            // Is this a directional antenna?
      |          ^             
      |                        {false}
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
   37 |     
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
   40 |                                              gain_dbi(0.0f), is_directional(false) {}
      |                                                              ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:35:10: warning: member variable 'is_directional' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:36:24: warning: member variable 'frequency_range_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     std::vector<float> frequency_range_mhz; // Operating frequency range
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:38:5: warning: 'fgcom_antenna_pattern_characteristics' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:38:69: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
      |                                                                     ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:38:100: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   38 |     fgcom_antenna_pattern_characteristics() : beamwidth_azimuth_deg(0.0f), beamwidth_elevation_deg(0.0f),
      |                                                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:39:69: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
      |                                                                     ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:39:95: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   39 |                                              front_to_back_ratio_db(0.0f), side_lobe_level_db(0.0f),
      |                                                                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:40:55: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   40 |                                              gain_dbi(0.0f), is_directional(false) {}
      |                                                       ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:44:7: warning: class 'FGCom_AntennaOrientationCalculator' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   44 | class FGCom_AntennaOrientationCalculator {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:55:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   55 |     float calculateGainAdjustment(const fgcom_antenna_pattern_characteristics& characteristics,
      |     ~~~~~ ^
      |     auto
   56 |                                 float azimuth_offset, float elevation_offset);
      |                                                                              
      |                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:57:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   57 |     float calculatePolarizationAngle(const fgcom_vehicle_attitude& vehicle_attitude,
      |     ~~~~~ ^
      |     auto
   58 |                                    const fgcom_antenna_orientation& antenna_orientation);
      |                                                                                         
      |                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:61:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   61 |     std::string assessOrientationQuality(float gain_adjustment_db, float azimuth_offset, float elevation_offset);
      |     ~~~~~~~~~~~ ^                                                                                               
      |     auto                                                                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:64:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   64 |     float calculateYagiOrientationEffect(const fgcom_antenna_pattern_characteristics& characteristics,
      |     ~~~~~ ^
      |     auto
   65 |                                        float azimuth_offset, float elevation_offset);
      |                                                                                     
      |                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:66:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   66 |     float calculateDipoleOrientationEffect(const fgcom_vehicle_attitude& vehicle_attitude,
      |     ~~~~~ ^
      |     auto
   67 |                                          const fgcom_antenna_orientation& antenna_orientation);
      |                                                                                               
      |                                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:68:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |     float calculateVerticalOrientationEffect(const fgcom_vehicle_attitude& vehicle_attitude);
      |     ~~~~~ ^                                                                                 
      |     auto                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:69:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     float calculateLoopOrientationEffect(const fgcom_vehicle_attitude& vehicle_attitude,
      |     ~~~~~ ^
      |     auto
   70 |                                        const fgcom_antenna_orientation& antenna_orientation);
      |                                                                                             
      |                                                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:77:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   77 |     bool initialize();
      |     ~~~~ ^           
      |     auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:81:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   81 |     fgcom_antenna_orientation_result calculateAntennaOrientation(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   82 |         const fgcom_vehicle_attitude& vehicle_attitude,
   83 |         const fgcom_antenna_orientation& antenna_orientation,
   84 |         const std::string& antenna_type = "");
      |                                              
      |                                               -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:84:9: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   84 |         const std::string& antenna_type = "");
      |         ^                               ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:84:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   84 |         const std::string& antenna_type = "");
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:87:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 |     std::vector<fgcom_antenna_orientation_result> calculateMultipleAntennaOrientations(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   88 |         const fgcom_vehicle_attitude& vehicle_attitude,
   89 |         const std::vector<fgcom_antenna_orientation>& antennas);
      |                                                                
      |                                                                 -> std::vector<fgcom_antenna_orientation_result>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:92:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   92 |     fgcom_antenna_orientation_result calculateYagiOrientation(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   93 |         const fgcom_vehicle_attitude& vehicle_attitude,
   94 |         const fgcom_antenna_orientation& antenna_orientation);
      |                                                              
      |                                                               -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:96:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   96 |     fgcom_antenna_orientation_result calculateDipoleOrientation(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   97 |         const fgcom_vehicle_attitude& vehicle_attitude,
   98 |         const fgcom_antenna_orientation& antenna_orientation);
      |                                                              
      |                                                               -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:100:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  100 |     fgcom_antenna_orientation_result calculateVerticalOrientation(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  101 |         const fgcom_vehicle_attitude& vehicle_attitude,
  102 |         const fgcom_antenna_orientation& antenna_orientation);
      |                                                              
      |                                                               -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:104:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 |     fgcom_antenna_orientation_result calculateLoopOrientation(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  105 |         const fgcom_vehicle_attitude& vehicle_attitude,
  106 |         const fgcom_antenna_orientation& antenna_orientation);
      |                                                              
      |                                                               -> fgcom_antenna_orientation_result
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:109:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 |     fgcom_antenna_orientation calculateOptimalOrientation(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  110 |         const fgcom_vehicle_attitude& vehicle_attitude,
  111 |         const std::string& antenna_type,
  112 |         const std::string& target_direction = ""); // "north", "south", "east", "west", or bearing in degrees
      |                                                  
      |                                                   -> fgcom_antenna_orientation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:112:9: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  112 |         const std::string& target_direction = ""); // "north", "south", "east", "west", or bearing in degrees
      |         ^                                   ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:112:47: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  112 |         const std::string& target_direction = ""); // "north", "south", "east", "west", or bearing in degrees
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:115:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     bool addAntennaCharacteristics(const std::string& antenna_type,
      |     ~~~~ ^
      |     auto
  116 |                                  const fgcom_antenna_pattern_characteristics& characteristics);
      |                                                                                               
      |                                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:117:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     fgcom_antenna_pattern_characteristics getAntennaCharacteristics(const std::string& antenna_type);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                         
      |     auto                                                                                             -> fgcom_antenna_pattern_characteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:118:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  118 |     std::vector<std::string> getAvailableAntennaTypes();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                         
      |     auto                                                -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:121:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     float normalizeAngle(float angle_deg);
      |     ~~~~~ ^                              
      |     auto                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:122:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     float calculateAngleDifference(float angle1_deg, float angle2_deg);
      |     ~~~~~ ^                                                           
      |     auto                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:123:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     bool isAntennaTypeSupported(const std::string& antenna_type);
      |     ~~~~ ^                                                      
      |     auto                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:133:60: warning: variable 'g_antenna_orientation_calculator' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  133 | extern std::unique_ptr<FGCom_AntennaOrientationCalculator> g_antenna_orientation_calculator;
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_orientation_calculator.h:136:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  136 | bool initializeAntennaOrientationCalculator();
      | ~~~~ ^                                       
      | auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:2:1: warning: #includes are not sorted properly [llvm-include-order]
    2 | #include <fstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:2:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
    2 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
    3 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:3:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
    3 | #include <sstream>
      | ^~~~~~~~~~~~~~~~~~
    4 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:4:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    4 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    5 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:5:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
    5 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    6 | #include <iostream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:6:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
    6 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
    7 | #include <iomanip>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:7:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
    7 | #include <iomanip>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:7:1: warning: included header iomanip is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:8:1: warning: system include climits not allowed [llvmlibc-restrict-system-libc-headers]
    8 | #include <climits>
      | ^~~~~~~~~~~~~~~~~~
    9 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:11:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   11 | std::unique_ptr<FGCom_PatternInterpolation> g_pattern_interpolation = nullptr;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:11:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
    3 | #include <sstream>
    4 | #include <algorithm>
    5 | #include <cmath>
    6 | #include <iostream>
    7 | #include <iomanip>
    8 | #include <climits>
    9 | 
   10 | // Global pattern interpolation instance
   11 | std::unique_ptr<FGCom_PatternInterpolation> g_pattern_interpolation = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:11:45: warning: variable 'g_pattern_interpolation' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
   11 | std::unique_ptr<FGCom_PatternInterpolation> g_pattern_interpolation = nullptr;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:11:45: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:14:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   14 | const std::vector<int> FGCom_PatternInterpolation::GROUND_EFFECT_ALTITUDES = {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:14:12: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
    9 | 
   10 | // Global pattern interpolation instance
   11 | std::unique_ptr<FGCom_PatternInterpolation> g_pattern_interpolation = nullptr;
   12 | 
   13 | // Critical altitude ranges for aircraft
   14 | const std::vector<int> FGCom_PatternInterpolation::GROUND_EFFECT_ALTITUDES = {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:14:52: warning: initialization of 'GROUND_EFFECT_ALTITUDES' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   14 | const std::vector<int> FGCom_PatternInterpolation::GROUND_EFFECT_ALTITUDES = {
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:678:7: note: possibly throwing constructor declared here
  678 |       vector(initializer_list<value_type> __l,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:14:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   14 | const std::vector<int> FGCom_PatternInterpolation::GROUND_EFFECT_ALTITUDES = {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:14:78: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   14 | const std::vector<int> FGCom_PatternInterpolation::GROUND_EFFECT_ALTITUDES = {
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:18:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   18 | const std::vector<int> FGCom_PatternInterpolation::LOW_ALTITUDE_ALTITUDES = {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:18:52: warning: initialization of 'LOW_ALTITUDE_ALTITUDES' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   18 | const std::vector<int> FGCom_PatternInterpolation::LOW_ALTITUDE_ALTITUDES = {
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:678:7: note: possibly throwing constructor declared here
  678 |       vector(initializer_list<value_type> __l,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:18:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   18 | const std::vector<int> FGCom_PatternInterpolation::LOW_ALTITUDE_ALTITUDES = {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:18:77: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   18 | const std::vector<int> FGCom_PatternInterpolation::LOW_ALTITUDE_ALTITUDES = {
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:22:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   22 | const std::vector<int> FGCom_PatternInterpolation::MEDIUM_ALTITUDE_ALTITUDES = {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:22:52: warning: initialization of 'MEDIUM_ALTITUDE_ALTITUDES' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   22 | const std::vector<int> FGCom_PatternInterpolation::MEDIUM_ALTITUDE_ALTITUDES = {
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:678:7: note: possibly throwing constructor declared here
  678 |       vector(initializer_list<value_type> __l,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:22:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   22 | const std::vector<int> FGCom_PatternInterpolation::MEDIUM_ALTITUDE_ALTITUDES = {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:22:80: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   22 | const std::vector<int> FGCom_PatternInterpolation::MEDIUM_ALTITUDE_ALTITUDES = {
      |                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:26:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   26 | const std::vector<int> FGCom_PatternInterpolation::HIGH_ALTITUDE_ALTITUDES = {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:26:52: warning: initialization of 'HIGH_ALTITUDE_ALTITUDES' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   26 | const std::vector<int> FGCom_PatternInterpolation::HIGH_ALTITUDE_ALTITUDES = {
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:678:7: note: possibly throwing constructor declared here
  678 |       vector(initializer_list<value_type> __l,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:26:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   26 | const std::vector<int> FGCom_PatternInterpolation::HIGH_ALTITUDE_ALTITUDES = {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:26:78: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   26 | const std::vector<int> FGCom_PatternInterpolation::HIGH_ALTITUDE_ALTITUDES = {
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:31:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   31 | const std::vector<int> FGCom_PatternInterpolation::ROLL_ANGLES = {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:31:52: warning: initialization of 'ROLL_ANGLES' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   31 | const std::vector<int> FGCom_PatternInterpolation::ROLL_ANGLES = {
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:678:7: note: possibly throwing constructor declared here
  678 |       vector(initializer_list<value_type> __l,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:31:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   31 | const std::vector<int> FGCom_PatternInterpolation::ROLL_ANGLES = {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:31:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   31 | const std::vector<int> FGCom_PatternInterpolation::ROLL_ANGLES = {
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:35:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   35 | const std::vector<int> FGCom_PatternInterpolation::PITCH_ANGLES = {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:35:52: warning: initialization of 'PITCH_ANGLES' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   35 | const std::vector<int> FGCom_PatternInterpolation::PITCH_ANGLES = {
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:678:7: note: possibly throwing constructor declared here
  678 |       vector(initializer_list<value_type> __l,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:35:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   35 | const std::vector<int> FGCom_PatternInterpolation::PITCH_ANGLES = {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:35:67: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   35 | const std::vector<int> FGCom_PatternInterpolation::PITCH_ANGLES = {
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:39:29: warning: use '= default' to define a trivial default constructor [hicpp-use-equals-default,modernize-use-equals-default]
   39 | FGCom_PatternInterpolation::FGCom_PatternInterpolation() {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:39:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:43:29: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
   43 | FGCom_PatternInterpolation::~FGCom_PatternInterpolation() {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:43:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:47:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   47 | bool FGCom_PatternInterpolation::load4NEC2Pattern(const std::string& filename, 
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:47:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   47 | bool FGCom_PatternInterpolation::load4NEC2Pattern(const std::string& filename, 
      | ~~~~                             ^
      | auto
   48 |                                                   const std::string& antenna_name,
   49 |                                                   int altitude_m, double frequency_mhz) {
      |                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:47:62: warning: no header providing "std::string" is directly included [misc-include-cleaner]
    9 | bool FGCom_PatternInterpolation::load4NEC2Pattern(const std::string& filename, 
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:53:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         std::cerr << "Failed to parse 4NEC2 file: " << filename << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:53:53: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         std::cerr << "Failed to parse 4NEC2 file: " << filename << std::endl;
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:53:65: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         std::cerr << "Failed to parse 4NEC2 file: " << filename << std::endl;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:53:68: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         std::cerr << "Failed to parse 4NEC2 file: " << filename << std::endl;
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:53:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   53 |         std::cerr << "Failed to parse 4NEC2 file: " << filename << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:58:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |         std::cerr << "Invalid pattern data in file: " << filename << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:58:55: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |         std::cerr << "Invalid pattern data in file: " << filename << std::endl;
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:58:67: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |         std::cerr << "Invalid pattern data in file: " << filename << std::endl;
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:58:70: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |         std::cerr << "Invalid pattern data in file: " << filename << std::endl;
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:58:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   58 |         std::cerr << "Invalid pattern data in file: " << filename << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:63:21: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     antenna_patterns[antenna_name][altitude_m] = pattern;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:63:35: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     antenna_patterns[antenna_name][altitude_m] = pattern;
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:63:48: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     antenna_patterns[antenna_name][altitude_m] = pattern;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: note: resolves to this declaration
   36 | struct FGCom_AltitudePattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:65:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   65 |     std::cout << "Loaded pattern for " << antenna_name 
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:65:40: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   65 |     std::cout << "Loaded pattern for " << antenna_name 
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:66:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |               << " at " << altitude_m << "m, " << frequency_mhz << "MHz" 
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:66:25: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |               << " at " << altitude_m << "m, " << frequency_mhz << "MHz" 
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:66:39: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |               << " at " << altitude_m << "m, " << frequency_mhz << "MHz" 
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:66:48: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |               << " at " << altitude_m << "m, " << frequency_mhz << "MHz" 
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:66:65: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |               << " at " << altitude_m << "m, " << frequency_mhz << "MHz" 
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:67:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |               << " (" << pattern.patterns.size() << " points)" << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:67:23: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |               << " (" << pattern.patterns.size() << " points)" << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:67:50: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |               << " (" << pattern.patterns.size() << " points)" << std::endl;
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:67:64: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |               << " (" << pattern.patterns.size() << " points)" << std::endl;
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:67:67: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |               << " (" << pattern.patterns.size() << " points)" << std::endl;
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:67:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   67 |               << " (" << pattern.patterns.size() << " points)" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:72:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   72 | bool FGCom_PatternInterpolation::load3DAttitudePattern(const std::string& filename, 
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:72:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   72 | bool FGCom_PatternInterpolation::load3DAttitudePattern(const std::string& filename, 
      | ~~~~                             ^
      | auto
   73 |                                                        const std::string& antenna_name,
   74 |                                                        int roll_deg, int pitch_deg, 
   75 |                                                        int altitude_m, double frequency_mhz) {
      |                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:84:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   84 |         std::cerr << "Failed to parse 3D attitude pattern file: " << filename << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:84:67: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   84 |         std::cerr << "Failed to parse 3D attitude pattern file: " << filename << std::endl;
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:84:79: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   84 |         std::cerr << "Failed to parse 3D attitude pattern file: " << filename << std::endl;
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:84:82: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   84 |         std::cerr << "Failed to parse 3D attitude pattern file: " << filename << std::endl;
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:84:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |         std::cerr << "Failed to parse 3D attitude pattern file: " << filename << std::endl;
      |                                                                                  ^~~~~~~~~
      |                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:89:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         std::cerr << "Invalid 3D attitude pattern data in file: " << filename << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:89:67: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         std::cerr << "Invalid 3D attitude pattern data in file: " << filename << std::endl;
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:89:79: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         std::cerr << "Invalid 3D attitude pattern data in file: " << filename << std::endl;
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:89:82: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         std::cerr << "Invalid 3D attitude pattern data in file: " << filename << std::endl;
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:89:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |         std::cerr << "Invalid 3D attitude pattern data in file: " << filename << std::endl;
      |                                                                                  ^~~~~~~~~
      |                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:94:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   94 |     pattern.patterns = alt_pattern.patterns;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/vector.tcc:211:5: note: resolves to this declaration
  211 |     operator=(const vector<_Tp, _Alloc>& __x)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:97:5: warning: variable 'attitude_key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
   97 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:97:40: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:97:42: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:97:47: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
   97 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:97:67: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:97:79: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:97:81: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:100:22: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  100 |     attitude_patterns[antenna_name][attitude_key] = pattern;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:100:36: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  100 |     attitude_patterns[antenna_name][attitude_key] = pattern;
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:100:51: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  100 |     attitude_patterns[antenna_name][attitude_key] = pattern;
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: note: resolves to this declaration
   23 | struct FGCom_AttitudePattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:102:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     std::cout << "Loaded 3D attitude pattern: " << antenna_name 
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:102:49: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     std::cout << "Loaded 3D attitude pattern: " << antenna_name 
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:28: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:40: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:56: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:69: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:83: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:97: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:111: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:128: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:138: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:141: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:103:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  103 |               << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                                           ^~~~~~~~~
      |                                                                                                                                           '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:108:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  108 | bool FGCom_PatternInterpolation::loadAltitudePatterns(const std::string& antenna_name, 
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:108:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 | bool FGCom_PatternInterpolation::loadAltitudePatterns(const std::string& antenna_name, 
      | ~~~~                             ^
      | auto
  109 |                                                       const std::string& pattern_dir) {
      |                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:108:34: warning: method 'loadAltitudePatterns' can be made static [readability-convert-member-functions-to-static]
  108 | bool FGCom_PatternInterpolation::loadAltitudePatterns(const std::string& antenna_name, 
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:112:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  112 |     std::cout << "Loading altitude patterns for " << antenna_name 
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:112:51: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  112 |     std::cout << "Loading altitude patterns for " << antenna_name 
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:113:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  113 |               << " from directory: " << pattern_dir << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:113:38: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  113 |               << " from directory: " << pattern_dir << std::endl;
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:113:53: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  113 |               << " from directory: " << pattern_dir << std::endl;
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:113:56: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  113 |               << " from directory: " << pattern_dir << std::endl;
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:113:56: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  113 |               << " from directory: " << pattern_dir << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:121:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  121 | double FGCom_PatternInterpolation::getInterpolatedGain(const std::string& antenna_name, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:121:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 | double FGCom_PatternInterpolation::getInterpolatedGain(const std::string& antenna_name, 
      | ~~~~~~                             ^
      | auto
  122 |                                                        int altitude_m, double frequency_mhz,
  123 |                                                        double theta_deg, double phi_deg) {
      |                                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:122:72: warning: 2 adjacent parameters of 'getInterpolatedGain' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  122 |                                                        int altitude_m, double frequency_mhz,
      |                                                                        ^~~~~~~~~~~~~~~~~~~~~
  123 |                                                        double theta_deg, double phi_deg) {
      |                                                        ~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:122:79: note: the first parameter in the range is 'frequency_mhz'
  122 |                                                        int altitude_m, double frequency_mhz,
      |                                                                               ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:123:63: note: the last parameter in the range is 'theta_deg'
  123 |                                                        double theta_deg, double phi_deg) {
      |                                                               ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:126:10: warning: implicit conversion 'const FGCom_AltitudePattern *' -> 'bool' [readability-implicit-bool-conversion]
  126 |     if (!pattern) {
      |         ~^      
      |                  == nullptr
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:127:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  127 |         std::cerr << "No pattern found for " << antenna_name 
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:127:46: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  127 |         std::cerr << "No pattern found for " << antenna_name 
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:29: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:43: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:52: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:69: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:78: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:81: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:128:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  128 |                   << " at " << altitude_m << "m, " << frequency_mhz << "MHz" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:129:17: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  129 |         return -999.0; // Invalid gain
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:133:5: warning: variable 'closest' of type 'std::vector<FGCom_RadiationPattern *>' can be declared 'const' [misc-const-correctness]
  133 |     std::vector<FGCom_RadiationPattern*> closest = findClosestPatterns(*pattern, theta_deg, phi_deg, 4);
      |     ^
      |                                          const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:136:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  136 |         std::cerr << "Insufficient pattern points for interpolation" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:136:70: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  136 |         std::cerr << "Insufficient pattern points for interpolation" << std::endl;
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:136:73: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  136 |         std::cerr << "Insufficient pattern points for interpolation" << std::endl;
      |                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:136:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  136 |         std::cerr << "Insufficient pattern points for interpolation" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:137:17: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  137 |         return -999.0;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:144:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  144 |     for (auto* p : closest) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:144:16: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  144 |     for (auto* p : closest) {
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:144:18: warning: 'operator!=<FGCom_RadiationPattern **, std::vector<FGCom_RadiationPattern *>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  144 |     for (auto* p : closest) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:144:18: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  144 |     for (auto* p : closest) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:144:18: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  144 |     for (auto* p : closest) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:145:9: warning: variable 'distance' of type 'double' can be declared 'const' [misc-const-correctness]
  145 |         double distance = sqrt(pow(p->theta - theta_deg, 2) + pow(p->phi - phi_deg, 2));
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:146:9: warning: variable 'weight' of type 'double' can be declared 'const' [misc-const-correctness]
  146 |         double weight = 1.0 / (distance + 0.1); // Avoid division by zero
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:146:43: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  146 |         double weight = 1.0 / (distance + 0.1); // Avoid division by zero
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:154:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  154 | double FGCom_PatternInterpolation::get3DAttitudeGain(const std::string& antenna_name, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:154:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 | double FGCom_PatternInterpolation::get3DAttitudeGain(const std::string& antenna_name, 
      | ~~~~~~                             ^
      | auto
  155 |                                                      double theta, double phi,
  156 |                                                      int roll_deg, int pitch_deg, 
  157 |                                                      int altitude_m, double frequency_mhz) {
      |                                                                                            -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:155:68: warning: 2 adjacent parameters of 'get3DAttitudeGain' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  155 |                                                      double theta, double phi,
      |                                                                    ^~~~~~~~~~~
  156 |                                                      int roll_deg, int pitch_deg, 
      |                                                      ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:155:75: note: the first parameter in the range is 'phi'
  155 |                                                      double theta, double phi,
      |                                                                           ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:156:58: note: the last parameter in the range is 'roll_deg'
  156 |                                                      int roll_deg, int pitch_deg, 
      |                                                          ^~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:156:54: note: 'double' and 'int' may be implicitly converted
  156 |                                                      int roll_deg, int pitch_deg, 
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:159:5: warning: variable 'attitude_key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  159 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:159:40: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  159 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:159:42: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  159 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:159:67: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  159 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:159:79: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  159 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:159:81: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  159 |     std::string attitude_key = "roll_" + std::to_string(roll_deg) + "_pitch_" + std::to_string(pitch_deg);
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:161:46: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  161 |     if (attitude_patterns.find(antenna_name) == attitude_patterns.end() ||
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:162:26: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  162 |         attitude_patterns[antenna_name].find(attitude_key) == attitude_patterns[antenna_name].end()) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:162:60: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  162 |         attitude_patterns[antenna_name].find(attitude_key) == attitude_patterns[antenna_name].end()) {
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:162:80: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  162 |         attitude_patterns[antenna_name].find(attitude_key) == attitude_patterns[antenna_name].end()) {
      |                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:165:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |         std::cerr << "No 3D attitude pattern found for " << antenna_name 
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:165:58: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |         std::cerr << "No 3D attitude pattern found for " << antenna_name 
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:32: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:44: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:60: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:73: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:87: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:101: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:115: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:222:7: note: resolves to this declaration
  222 |       operator<<(double __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:132: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:142: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:145: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:166:145: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  166 |                   << " (roll=" << roll_deg << "°, pitch=" << pitch_deg << "°, alt=" << altitude_m << "m, freq=" << frequency_mhz << "MHz)" << std::endl;
      |                                                                                                                                               ^~~~~~~~~
      |                                                                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:170:61: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     const FGCom_AttitudePattern& pattern = attitude_patterns[antenna_name][attitude_key];
      |                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:170:75: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     const FGCom_AttitudePattern& pattern = attitude_patterns[antenna_name][attitude_key];
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:177:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  177 |     alt_pattern.patterns = pattern.patterns;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/vector.tcc:211:5: note: resolves to this declaration
  211 |     operator=(const vector<_Tp, _Alloc>& __x)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:179:5: warning: variable 'closest' of type 'std::vector<FGCom_RadiationPattern *>' can be declared 'const' [misc-const-correctness]
  179 |     std::vector<FGCom_RadiationPattern*> closest = findClosestPatterns(alt_pattern, theta, phi, 4);
      |     ^
      |                                          const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:182:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  182 |         std::cerr << "Insufficient 3D attitude pattern points for interpolation" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:182:82: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  182 |         std::cerr << "Insufficient 3D attitude pattern points for interpolation" << std::endl;
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:182:85: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  182 |         std::cerr << "Insufficient 3D attitude pattern points for interpolation" << std::endl;
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:182:85: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  182 |         std::cerr << "Insufficient 3D attitude pattern points for interpolation" << std::endl;
      |                                                                                     ^~~~~~~~~
      |                                                                                     '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:183:17: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  183 |         return -999.0;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:190:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  190 |     for (auto* p : closest) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:190:16: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  190 |     for (auto* p : closest) {
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:190:18: warning: 'operator!=<FGCom_RadiationPattern **, std::vector<FGCom_RadiationPattern *>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     for (auto* p : closest) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:190:18: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     for (auto* p : closest) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:190:18: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     for (auto* p : closest) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:191:9: warning: variable 'distance' of type 'double' can be declared 'const' [misc-const-correctness]
  191 |         double distance = sqrt(pow(p->theta - theta, 2) + pow(p->phi - phi, 2));
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:192:9: warning: variable 'weight' of type 'double' can be declared 'const' [misc-const-correctness]
  192 |         double weight = 1.0 / (distance + 0.1); // Avoid division by zero
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:192:43: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  192 |         double weight = 1.0 / (distance + 0.1); // Avoid division by zero
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:200:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  200 | double FGCom_PatternInterpolation::getBilinearInterpolatedGain(const std::string& antenna_name, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:200:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  200 | double FGCom_PatternInterpolation::getBilinearInterpolatedGain(const std::string& antenna_name, 
      | ~~~~~~                             ^
      | auto
  201 |                                                                int altitude_m, double frequency_mhz,
  202 |                                                                double theta_deg, double phi_deg) {
      |                                                                                                  -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:204:10: warning: implicit conversion 'const FGCom_AltitudePattern *' -> 'bool' [readability-implicit-bool-conversion]
  204 |     if (!pattern || pattern->patterns.size() < 4) {
      |         ~^
      |         (        == nullptr)
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:216:5: warning: 'sort<__gnu_cxx::__normal_iterator<FGCom_RadiationPattern **, std::vector<FGCom_RadiationPattern *>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:216:47)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  216 |     std::sort(closest.begin(), closest.end(), [](const FGCom_RadiationPattern* a, const FGCom_RadiationPattern* b) {
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4882:5: note: resolves to this declaration
 4882 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:216:80: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     std::sort(closest.begin(), closest.end(), [](const FGCom_RadiationPattern* a, const FGCom_RadiationPattern* b) {
      |                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:216:113: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     std::sort(closest.begin(), closest.end(), [](const FGCom_RadiationPattern* a, const FGCom_RadiationPattern* b) {
      |                                                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:217:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  217 |         if (a->theta != b->theta) return a->theta < b->theta;
      |                                  ^                           
      |                                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:222:5: warning: variable 'x1' of type 'double' can be declared 'const' [misc-const-correctness]
  222 |     double x1 = closest[0]->theta, y1 = closest[0]->phi;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:222:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  222 |     double x1 = closest[0]->theta, y1 = closest[0]->phi;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:222:12: warning: variable name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  222 |     double x1 = closest[0]->theta, y1 = closest[0]->phi;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:222:24: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  222 |     double x1 = closest[0]->theta, y1 = closest[0]->phi;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:222:36: warning: variable name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  222 |     double x1 = closest[0]->theta, y1 = closest[0]->phi;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:222:48: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  222 |     double x1 = closest[0]->theta, y1 = closest[0]->phi;
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:223:5: warning: variable 'x2' of type 'double' can be declared 'const' [misc-const-correctness]
  223 |     double x2 = closest[3]->theta, y2 = closest[3]->phi;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:223:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  223 |     double x2 = closest[3]->theta, y2 = closest[3]->phi;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:223:12: warning: variable name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  223 |     double x2 = closest[3]->theta, y2 = closest[3]->phi;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:223:24: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |     double x2 = closest[3]->theta, y2 = closest[3]->phi;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:223:36: warning: variable name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  223 |     double x2 = closest[3]->theta, y2 = closest[3]->phi;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:223:48: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |     double x2 = closest[3]->theta, y2 = closest[3]->phi;
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:224:5: warning: variable 'q11' of type 'double' can be declared 'const' [misc-const-correctness]
  224 |     double q11 = closest[0]->gain_dbi, q12 = closest[1]->gain_dbi;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:224:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  224 |     double q11 = closest[0]->gain_dbi, q12 = closest[1]->gain_dbi;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:224:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |     double q11 = closest[0]->gain_dbi, q12 = closest[1]->gain_dbi;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:224:53: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |     double q11 = closest[0]->gain_dbi, q12 = closest[1]->gain_dbi;
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:225:5: warning: variable 'q21' of type 'double' can be declared 'const' [misc-const-correctness]
  225 |     double q21 = closest[2]->gain_dbi, q22 = closest[3]->gain_dbi;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:225:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  225 |     double q21 = closest[2]->gain_dbi, q22 = closest[3]->gain_dbi;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:225:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |     double q21 = closest[2]->gain_dbi, q22 = closest[3]->gain_dbi;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:225:53: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |     double q21 = closest[2]->gain_dbi, q22 = closest[3]->gain_dbi;
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:230:58: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  230 | const FGCom_AltitudePattern* FGCom_PatternInterpolation::getPatternAtAltitude(
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:230:58: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  230 | const FGCom_AltitudePattern* FGCom_PatternInterpolation::getPatternAtAltitude(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~                             ^
      | auto
  231 |     const std::string& antenna_name, int altitude_m, double frequency_mhz) {
      |                                                                            -> const FGCom_AltitudePattern*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:231:38: warning: 2 adjacent parameters of 'getPatternAtAltitude' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  231 |     const std::string& antenna_name, int altitude_m, double frequency_mhz) {
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:231:42: note: the first parameter in the range is 'altitude_m'
  231 |     const std::string& antenna_name, int altitude_m, double frequency_mhz) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:231:61: note: the last parameter in the range is 'frequency_mhz'
  231 |     const std::string& antenna_name, int altitude_m, double frequency_mhz) {
      |                                                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:231:54: note: 'int' and 'double' may be implicitly converted
  231 |     const std::string& antenna_name, int altitude_m, double frequency_mhz) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:235:20: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  235 |     if (antenna_it == antenna_patterns.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:243:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  243 |     for (const auto& alt_pair : antenna_it->second) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:243:31: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  243 |     for (const auto& alt_pair : antenna_it->second) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:243:31: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  243 |     for (const auto& alt_pair : antenna_it->second) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:243:31: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  243 |     for (const auto& alt_pair : antenna_it->second) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:243:43: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  243 |     for (const auto& alt_pair : antenna_it->second) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:244:9: warning: variable 'diff' of type 'int' can be declared 'const' [misc-const-correctness]
  244 |         int diff = abs(alt_pair.first - altitude_m);
      |         ^
      |             const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:255:23: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  255 |     return &antenna_it->second[closest_altitude];
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:255:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  255 |     return &antenna_it->second[closest_altitude];
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:258:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  258 | double FGCom_PatternInterpolation::getGroundEffectFactor(int altitude_m, double frequency_mhz) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:258:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 | double FGCom_PatternInterpolation::getGroundEffectFactor(int altitude_m, double frequency_mhz) {
      | ~~~~~~                             ^
      | auto                                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:258:36: warning: method 'getGroundEffectFactor' can be made static [readability-convert-member-functions-to-static]
  258 | double FGCom_PatternInterpolation::getGroundEffectFactor(int altitude_m, double frequency_mhz) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:258:58: warning: 2 adjacent parameters of 'getGroundEffectFactor' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  258 | double FGCom_PatternInterpolation::getGroundEffectFactor(int altitude_m, double frequency_mhz) {
      |                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:258:62: note: the first parameter in the range is 'altitude_m'
  258 | double FGCom_PatternInterpolation::getGroundEffectFactor(int altitude_m, double frequency_mhz) {
      |                                                              ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:258:81: note: the last parameter in the range is 'frequency_mhz'
  258 | double FGCom_PatternInterpolation::getGroundEffectFactor(int altitude_m, double frequency_mhz) {
      |                                                                                 ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:258:74: note: 'int' and 'double' may be implicitly converted
  258 | double FGCom_PatternInterpolation::getGroundEffectFactor(int altitude_m, double frequency_mhz) {
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:259:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  259 |     if (altitude_m <= 0) return 1.0; // Full ground effects on ground
      |                         ^                                            
      |                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:262:5: warning: variable 'lambda' of type 'double' can be declared 'const' [misc-const-correctness]
  262 |     double lambda = 300.0 / frequency_mhz; // Wavelength in meters
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:262:21: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  262 |     double lambda = 300.0 / frequency_mhz; // Wavelength in meters
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:263:5: warning: variable 'height_wavelengths' of type 'double' can be declared 'const' [misc-const-correctness]
  263 |     double height_wavelengths = altitude_m / lambda;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:266:30: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  266 |     if (height_wavelengths > 10.0) return 0.0;
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:266:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  266 |     if (height_wavelengths > 10.0) return 0.0;
      |                                   ^           
      |                                    {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:269:38: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  269 |     return exp(-height_wavelengths / 3.0);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:272:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  272 | double FGCom_PatternInterpolation::getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:272:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  272 | double FGCom_PatternInterpolation::getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg) {
      | ~~~~~~                             ^
      | auto                                                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:272:55: warning: 2 adjacent parameters of 'getMultipathFactor' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  272 | double FGCom_PatternInterpolation::getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:272:59: note: the first parameter in the range is 'altitude_m'
  272 | double FGCom_PatternInterpolation::getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                                           ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:272:78: note: the last parameter in the range is 'frequency_mhz'
  272 | double FGCom_PatternInterpolation::getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                                                              ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:272:71: note: 'int' and 'double' may be implicitly converted
  272 | double FGCom_PatternInterpolation::getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:273:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  273 |     if (altitude_m <= 0) return 1.0; // Maximum multipath on ground
      |                         ^                                          
      |                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:276:5: warning: variable 'lambda' of type 'double' can be declared 'const' [misc-const-correctness]
  276 |     double lambda = 300.0 / frequency_mhz;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:276:21: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  276 |     double lambda = 300.0 / frequency_mhz;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:277:5: warning: variable 'path_difference' of type 'double' can be declared 'const' [misc-const-correctness]
  277 |     double path_difference = calculatePathDifference(altitude_m, theta_deg);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:278:5: warning: variable 'phase_diff' of type 'double' can be declared 'const' [misc-const-correctness]
  278 |     double phase_diff = calculatePhaseDifference(path_difference, frequency_mhz);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:281:5: warning: variable 'wavelength_factor' of type 'double' can be declared 'const' [misc-const-correctness]
  281 |     double wavelength_factor = lambda / 10.0; // Normalize to reasonable scale
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:281:41: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  281 |     double wavelength_factor = lambda / 10.0; // Normalize to reasonable scale
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:282:5: warning: variable 'multipath_strength' of type 'double' can be declared 'const' [misc-const-correctness]
  282 |     double multipath_strength = abs(cos(phase_diff * M_PI / 180.0));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:282:33: warning: using integer absolute value function 'abs' when argument is of floating point type [clang-diagnostic-absolute-value]
  282 |     double multipath_strength = abs(cos(phase_diff * M_PI / 180.0));
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:282:33: note: use function 'std::abs' instead
  282 |     double multipath_strength = abs(cos(phase_diff * M_PI / 180.0));
      |                                 ^~~
      |                                 std::abs
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:282:37: warning: narrowing conversion from 'double' to 'int' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  282 |     double multipath_strength = abs(cos(phase_diff * M_PI / 180.0));
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:282:54: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
    3 |     double multipath_strength = abs(cos(phase_diff * M_PI / 180.0));
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:282:61: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  282 |     double multipath_strength = abs(cos(phase_diff * M_PI / 180.0));
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:285:60: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  285 |     return multipath_strength * (1.0 + wavelength_factor * 0.1);
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:289:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  289 | FGCom_PatternInterpolation::getAltitudeCharacteristics(int altitude_m, double frequency_mhz) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:289:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  288 | FGCom_PatternInterpolation::AltitudeCharacteristics 
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | auto
  289 | FGCom_PatternInterpolation::getAltitudeCharacteristics(int altitude_m, double frequency_mhz) {
      |                             ^
      |                                                                                              -> FGCom_PatternInterpolation::AltitudeCharacteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:296:22: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  296 |     if (altitude_m < 1000) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:297:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  297 |         chars.dominant_mode = "ground_wave";
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:298:29: warning: 5000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  298 |     } else if (altitude_m < 5000) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:299:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  299 |         chars.dominant_mode = "mixed";
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:301:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |         chars.dominant_mode = "sky_wave";
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:307:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  307 | bool FGCom_PatternInterpolation::isAntennaLoaded(const std::string& antenna_name) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:307:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 | bool FGCom_PatternInterpolation::isAntennaLoaded(const std::string& antenna_name) {
      | ~~~~                             ^
      | auto                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:308:48: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     return antenna_patterns.find(antenna_name) != antenna_patterns.end();
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:311:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  311 | std::vector<int> FGCom_PatternInterpolation::getAvailableAltitudes(const std::string& antenna_name) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:311:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  311 | std::vector<int> FGCom_PatternInterpolation::getAvailableAltitudes(const std::string& antenna_name) {
      | ~~~~~~~~~~~~~~~~                             ^
      | auto                                                                                                -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:315:20: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  315 |     if (antenna_it != antenna_patterns.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:316:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  316 |         for (const auto& alt_pair : antenna_it->second) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:316:35: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  316 |         for (const auto& alt_pair : antenna_it->second) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:316:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  316 |         for (const auto& alt_pair : antenna_it->second) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:316:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  316 |         for (const auto& alt_pair : antenna_it->second) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:316:47: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  316 |         for (const auto& alt_pair : antenna_it->second) {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:319:9: warning: 'sort<__gnu_cxx::__normal_iterator<int *, std::vector<int>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  319 |         std::sort(altitudes.begin(), altitudes.end());
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4851:5: note: resolves to this declaration
 4851 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:325:49: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  325 | std::vector<double> FGCom_PatternInterpolation::getAvailableFrequencies(const std::string& antenna_name) {
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:325:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  325 | std::vector<double> FGCom_PatternInterpolation::getAvailableFrequencies(const std::string& antenna_name) {
      | ~~~~~~~~~~~~~~~~~~~                             ^
      | auto                                                                                                     -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:329:20: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  329 |     if (antenna_it != antenna_patterns.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:330:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  330 |         for (const auto& alt_pair : antenna_it->second) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:330:35: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |         for (const auto& alt_pair : antenna_it->second) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:330:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |         for (const auto& alt_pair : antenna_it->second) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:330:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |         for (const auto& alt_pair : antenna_it->second) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:330:47: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |         for (const auto& alt_pair : antenna_it->second) {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:333:9: warning: 'sort<__gnu_cxx::__normal_iterator<double *, std::vector<double>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  333 |         std::sort(frequencies.begin(), frequencies.end());
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4851:5: note: resolves to this declaration
 4851 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:334:27: warning: 'unique<__gnu_cxx::__normal_iterator<double *, std::vector<double>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  334 |         frequencies.erase(std::unique(frequencies.begin(), frequencies.end()), frequencies.end());
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:939:5: note: resolves to this declaration
  939 |     unique(_ForwardIterator __first, _ForwardIterator __last)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:340:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  340 | double FGCom_PatternInterpolation::getMaximumGain(const std::string& antenna_name, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:340:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  340 | double FGCom_PatternInterpolation::getMaximumGain(const std::string& antenna_name, 
      | ~~~~~~                             ^
      | auto
  341 |                                                   int altitude_m, double frequency_mhz) {
      |                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:343:10: warning: implicit conversion 'const FGCom_AltitudePattern *' -> 'bool' [readability-implicit-bool-conversion]
  343 |     if (!pattern) return -999.0;
      |         ~^      
      |                  == nullptr
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:343:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  343 |     if (!pattern) return -999.0;
      |                  ^              
      |                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:343:27: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  343 |     if (!pattern) return -999.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:345:24: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  345 |     double max_gain = -999.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:346:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  346 |     for (const auto& p : pattern->patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:346:22: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  346 |     for (const auto& p : pattern->patterns) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:346:24: warning: 'operator!=<const FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:346:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:346:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  346 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:347:20: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  347 |         max_gain = std::max(max_gain, p.gain_dbi);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:353:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  353 | double FGCom_PatternInterpolation::getMinimumGain(const std::string& antenna_name, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:353:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  353 | double FGCom_PatternInterpolation::getMinimumGain(const std::string& antenna_name, 
      | ~~~~~~                             ^
      | auto
  354 |                                                   int altitude_m, double frequency_mhz) {
      |                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:356:10: warning: implicit conversion 'const FGCom_AltitudePattern *' -> 'bool' [readability-implicit-bool-conversion]
  356 |     if (!pattern) return -999.0;
      |         ~^      
      |                  == nullptr
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:356:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  356 |     if (!pattern) return -999.0;
      |                  ^              
      |                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:356:27: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  356 |     if (!pattern) return -999.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:358:23: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  358 |     double min_gain = 999.0;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:359:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  359 |     for (const auto& p : pattern->patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:359:22: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  359 |     for (const auto& p : pattern->patterns) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:359:24: warning: 'operator!=<const FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  359 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:359:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  359 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:359:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  359 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:360:20: warning: 'min<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  360 |         min_gain = std::min(min_gain, p.gain_dbi);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:366:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  366 | double FGCom_PatternInterpolation::getAverageGain(const std::string& antenna_name, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:366:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  366 | double FGCom_PatternInterpolation::getAverageGain(const std::string& antenna_name, 
      | ~~~~~~                             ^
      | auto
  367 |                                                   int altitude_m, double frequency_mhz) {
      |                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:369:10: warning: implicit conversion 'const FGCom_AltitudePattern *' -> 'bool' [readability-implicit-bool-conversion]
  369 |     if (!pattern || pattern->patterns.empty()) return -999.0;
      |         ~^
      |         (        == nullptr)
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:369:47: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  369 |     if (!pattern || pattern->patterns.empty()) return -999.0;
      |                                               ^              
      |                                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:369:56: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  369 |     if (!pattern || pattern->patterns.empty()) return -999.0;
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:372:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  372 |     for (const auto& p : pattern->patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:372:22: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  372 |     for (const auto& p : pattern->patterns) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:372:24: warning: 'operator!=<const FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  372 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:372:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  372 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:372:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  372 |     for (const auto& p : pattern->patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:376:25: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  376 |     return total_gain / pattern->patterns.size();
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:379:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  379 | double FGCom_PatternInterpolation::calculateGroundReflectionCoefficient(int altitude_m, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:379:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  379 | double FGCom_PatternInterpolation::calculateGroundReflectionCoefficient(int altitude_m, 
      | ~~~~~~                             ^
      | auto
  380 |                                                                         double frequency_mhz,
  381 |                                                                         double theta_deg, 
  382 |                                                                         double ground_conductivity) {
      |                                                                                                     -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:379:36: warning: method 'calculateGroundReflectionCoefficient' can be made static [readability-convert-member-functions-to-static]
  379 | double FGCom_PatternInterpolation::calculateGroundReflectionCoefficient(int altitude_m, 
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:379:73: warning: 3 adjacent parameters of 'calculateGroundReflectionCoefficient' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  379 | double FGCom_PatternInterpolation::calculateGroundReflectionCoefficient(int altitude_m, 
      |                                                                         ^~~~~~~~~~~~~~~
  380 |                                                                         double frequency_mhz,
      |                                                                         ~~~~~~~~~~~~~~~~~~~~~
  381 |                                                                         double theta_deg, 
      |                                                                         ~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:379:77: note: the first parameter in the range is 'altitude_m'
  379 | double FGCom_PatternInterpolation::calculateGroundReflectionCoefficient(int altitude_m, 
      |                                                                             ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:381:80: note: the last parameter in the range is 'theta_deg'
  381 |                                                                         double theta_deg, 
      |                                                                                ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:380:73: note: 'int' and 'double' may be implicitly converted
  380 |                                                                         double frequency_mhz,
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:385:5: warning: variable 'lambda' of type 'double' can be declared 'const' [misc-const-correctness]
  385 |     double lambda = 300.0 / frequency_mhz;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:385:21: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  385 |     double lambda = 300.0 / frequency_mhz;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:386:5: warning: variable 'grazing_angle' of type 'double' can be declared 'const' [misc-const-correctness]
  386 |     double grazing_angle = 90.0 - theta_deg;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:386:28: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  386 |     double grazing_angle = 90.0 - theta_deg;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:389:5: warning: variable 'wavelength_factor' of type 'double' can be declared 'const' [misc-const-correctness]
  389 |     double wavelength_factor = lambda / 10.0; // Normalize to reasonable scale
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:389:41: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |     double wavelength_factor = lambda / 10.0; // Normalize to reasonable scale
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:391:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  391 |     if (grazing_angle <= 0) return 0.0; // No reflection for upward angles
      |                            ^                                              
      |                             {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:394:5: warning: variable 'n' of type 'double' can be declared 'const' [misc-const-correctness]
  394 |     double n = sqrt(ground_conductivity / (2 * M_PI * frequency_mhz * 8.854e-12));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:394:12: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
  394 |     double n = sqrt(ground_conductivity / (2 * M_PI * frequency_mhz * 8.854e-12));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:394:71: warning: 8.854e-12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  394 |     double n = sqrt(ground_conductivity / (2 * M_PI * frequency_mhz * 8.854e-12));
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:395:5: warning: variable 'cos_theta' of type 'double' can be declared 'const' [misc-const-correctness]
  395 |     double cos_theta = cos(grazing_angle * M_PI / 180.0);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:395:51: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  395 |     double cos_theta = cos(grazing_angle * M_PI / 180.0);
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:398:5: warning: variable 'base_reflection' of type 'double' can be declared 'const' [misc-const-correctness]
  398 |     double base_reflection = (cos_theta - n) / (cos_theta + n);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:399:57: warning: 0.05 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  399 |     return base_reflection * (1.0 + wavelength_factor * 0.05); // Wavelength-dependent correction
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:402:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  402 | double FGCom_PatternInterpolation::calculatePathDifference(int altitude_m, double theta_deg) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:402:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  402 | double FGCom_PatternInterpolation::calculatePathDifference(int altitude_m, double theta_deg) {
      | ~~~~~~                             ^
      | auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:402:36: warning: method 'calculatePathDifference' can be made static [readability-convert-member-functions-to-static]
  402 | double FGCom_PatternInterpolation::calculatePathDifference(int altitude_m, double theta_deg) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:402:60: warning: 2 adjacent parameters of 'calculatePathDifference' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  402 | double FGCom_PatternInterpolation::calculatePathDifference(int altitude_m, double theta_deg) {
      |                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:402:64: note: the first parameter in the range is 'altitude_m'
  402 | double FGCom_PatternInterpolation::calculatePathDifference(int altitude_m, double theta_deg) {
      |                                                                ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:402:83: note: the last parameter in the range is 'theta_deg'
  402 | double FGCom_PatternInterpolation::calculatePathDifference(int altitude_m, double theta_deg) {
      |                                                                                   ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:402:76: note: 'int' and 'double' may be implicitly converted
  402 | double FGCom_PatternInterpolation::calculatePathDifference(int altitude_m, double theta_deg) {
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:404:5: warning: variable 'grazing_angle' of type 'double' can be declared 'const' [misc-const-correctness]
  404 |     double grazing_angle = 90.0 - theta_deg;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:404:28: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  404 |     double grazing_angle = 90.0 - theta_deg;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:405:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  405 |     if (grazing_angle <= 0) return 0.0;
      |                            ^           
      |                             {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:407:12: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  407 |     return 2.0 * altitude_m * sin(grazing_angle * M_PI / 180.0);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:407:58: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  407 |     return 2.0 * altitude_m * sin(grazing_angle * M_PI / 180.0);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:410:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  410 | double FGCom_PatternInterpolation::calculatePhaseDifference(double path_diff_m, double frequency_mhz) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:410:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  410 | double FGCom_PatternInterpolation::calculatePhaseDifference(double path_diff_m, double frequency_mhz) {
      | ~~~~~~                             ^
      | auto                                                                                                  -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:410:36: warning: method 'calculatePhaseDifference' can be made static [readability-convert-member-functions-to-static]
  410 | double FGCom_PatternInterpolation::calculatePhaseDifference(double path_diff_m, double frequency_mhz) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:410:61: warning: 2 adjacent parameters of 'calculatePhaseDifference' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  410 | double FGCom_PatternInterpolation::calculatePhaseDifference(double path_diff_m, double frequency_mhz) {
      |                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:410:68: note: the first parameter in the range is 'path_diff_m'
  410 | double FGCom_PatternInterpolation::calculatePhaseDifference(double path_diff_m, double frequency_mhz) {
      |                                                                    ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:410:88: note: the last parameter in the range is 'frequency_mhz'
  410 | double FGCom_PatternInterpolation::calculatePhaseDifference(double path_diff_m, double frequency_mhz) {
      |                                                                                        ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:411:5: warning: variable 'lambda' of type 'double' can be declared 'const' [misc-const-correctness]
  411 |     double lambda = 300.0 / frequency_mhz;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:411:21: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  411 |     double lambda = 300.0 / frequency_mhz;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:412:37: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  412 |     return (path_diff_m / lambda) * 360.0; // Phase in degrees
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:415:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  415 | void FGCom_PatternInterpolation::smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:415:34: warning: method 'smoothPattern' can be made static [readability-convert-member-functions-to-static]
  415 | void FGCom_PatternInterpolation::smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:417:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  417 |     if (pattern.patterns.size() < 3) return;
      |                                     ^       
      |                                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:419:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  419 |     std::vector<double> smoothed_gains(pattern.patterns.size());
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:556:29: note: default parameter was declared here
  556 |       vector(size_type __n, const allocator_type& __a = allocator_type())
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:421:10: warning: no header providing "size_t" is directly included [misc-include-cleaner]
    2 |     for (size_t i = 0; i < pattern.patterns.size(); ++i) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:426:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  426 |         for (int j = -1; j <= 1; ++j) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:427:13: warning: variable 'idx' of type 'int' can be declared 'const' [misc-const-correctness]
  427 |             int idx = i + j;
      |             ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:427:23: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  427 |             int idx = i + j;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:428:35: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  428 |             if (idx >= 0 && idx < (int)pattern.patterns.size()) {
      |                                   ^~~~~                       
      |                                   static_cast<int>(           )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:429:40: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  429 |                 sum += pattern.patterns[idx].gain_dbi;
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:434:23: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  434 |         smoothed_gains[i] = (1.0 - smoothing_factor) * pattern.patterns[i].gain_dbi + 
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:434:72: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  434 |         smoothed_gains[i] = (1.0 - smoothing_factor) * pattern.patterns[i].gain_dbi + 
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:439:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  439 |     for (size_t i = 0; i < pattern.patterns.size(); ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:440:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  440 |         pattern.patterns[i].gain_dbi = smoothed_gains[i];
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:440:54: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  440 |         pattern.patterns[i].gain_dbi = smoothed_gains[i];
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:444:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  444 | void FGCom_PatternInterpolation::filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:444:34: warning: method 'filterPattern' can be made static [readability-convert-member-functions-to-static]
  444 | void FGCom_PatternInterpolation::filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:447:9: warning: 'remove_if<__gnu_cxx::__normal_iterator<FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:448:23)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |         std::remove_if(pattern.patterns.begin(), pattern.patterns.end(),
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:870:5: note: resolves to this declaration
  870 |     remove_if(_ForwardIterator __first, _ForwardIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:448:74: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  448 |                       [min_gain_threshold](const FGCom_RadiationPattern& p) {
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      | ~~~~~~                             ^
      | auto                                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:36: warning: method 'linearInterpolate' can be made static [readability-convert-member-functions-to-static]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:61: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:72: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:83: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      |                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:94: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      |                                                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:455:105: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  455 | double FGCom_PatternInterpolation::linearInterpolate(double x1, double y1, double x2, double y2, double x) {
      |                                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:456:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  456 |     if (x2 == x1) return y1;
      |                  ^          
      |                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:460:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  460 | double FGCom_PatternInterpolation::bilinearInterpolate(double x1, double y1, double x2, double y2,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:460:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  460 | double FGCom_PatternInterpolation::bilinearInterpolate(double x1, double y1, double x2, double y2,
      | ~~~~~~                             ^
      | auto
  461 |                                                        double x, double y, double q11, double q12, 
  462 |                                                        double q21, double q22) {
      |                                                                                -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:460:36: warning: method 'bilinearInterpolate' can be made static [readability-convert-member-functions-to-static]
  460 | double FGCom_PatternInterpolation::bilinearInterpolate(double x1, double y1, double x2, double y2,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:460:63: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  460 | double FGCom_PatternInterpolation::bilinearInterpolate(double x1, double y1, double x2, double y2,
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:460:74: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  460 | double FGCom_PatternInterpolation::bilinearInterpolate(double x1, double y1, double x2, double y2,
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:460:85: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  460 | double FGCom_PatternInterpolation::bilinearInterpolate(double x1, double y1, double x2, double y2,
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:460:96: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  460 | double FGCom_PatternInterpolation::bilinearInterpolate(double x1, double y1, double x2, double y2,
      |                                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:461:63: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  461 |                                                        double x, double y, double q11, double q12, 
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:461:66: warning: 2 adjacent parameters of 'bilinearInterpolate' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  461 |                                                        double x, double y, double q11, double q12, 
      |                                                                  ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:461:73: note: the first parameter in the range is 'y'
  461 |                                                        double x, double y, double q11, double q12, 
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:461:83: note: the last parameter in the range is 'q11'
  461 |                                                        double x, double y, double q11, double q12, 
      |                                                                                   ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:461:73: warning: parameter name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  461 |                                                        double x, double y, double q11, double q12, 
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:463:5: warning: variable 'denom' of type 'double' can be declared 'const' [misc-const-correctness]
  463 |     double denom = (x2 - x1) * (y2 - y1);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:464:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  464 |     if (denom == 0) return q11;
      |                    ^           
      |                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:466:5: warning: variable 'f1' of type 'double' can be declared 'const' [misc-const-correctness]
  466 |     double f1 = ((x2 - x) * (y2 - y)) / denom;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:466:12: warning: variable name 'f1' is too short, expected at least 3 characters [readability-identifier-length]
  466 |     double f1 = ((x2 - x) * (y2 - y)) / denom;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:467:5: warning: variable 'f2' of type 'double' can be declared 'const' [misc-const-correctness]
  467 |     double f2 = ((x - x1) * (y2 - y)) / denom;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:467:12: warning: variable name 'f2' is too short, expected at least 3 characters [readability-identifier-length]
  467 |     double f2 = ((x - x1) * (y2 - y)) / denom;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:468:5: warning: variable 'f3' of type 'double' can be declared 'const' [misc-const-correctness]
  468 |     double f3 = ((x2 - x) * (y - y1)) / denom;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:468:12: warning: variable name 'f3' is too short, expected at least 3 characters [readability-identifier-length]
  468 |     double f3 = ((x2 - x) * (y - y1)) / denom;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:469:5: warning: variable 'f4' of type 'double' can be declared 'const' [misc-const-correctness]
  469 |     double f4 = ((x - x1) * (y - y1)) / denom;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:469:12: warning: variable name 'f4' is too short, expected at least 3 characters [readability-identifier-length]
  469 |     double f4 = ((x - x1) * (y - y1)) / denom;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:474:66: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  474 | std::vector<FGCom_RadiationPattern*> FGCom_PatternInterpolation::findClosestPatterns(
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:474:66: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  474 | std::vector<FGCom_RadiationPattern*> FGCom_PatternInterpolation::findClosestPatterns(
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                             ^
      | auto
  475 |     const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count) {
      |                                                                                        -> std::vector<FGCom_RadiationPattern*>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:474:66: warning: method 'findClosestPatterns' can be made static [readability-convert-member-functions-to-static]
  474 | std::vector<FGCom_RadiationPattern*> FGCom_PatternInterpolation::findClosestPatterns(
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:475:61: warning: 2 adjacent parameters of 'findClosestPatterns' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  475 |     const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count) {
      |                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:475:68: note: the first parameter in the range is 'phi_deg'
  475 |     const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count) {
      |                                                                    ^~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:475:81: note: the last parameter in the range is 'count'
  475 |     const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count) {
      |                                                                                 ^~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:475:77: note: 'double' and 'int' may be implicitly converted
  475 |     const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count) {
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:477:22: warning: no header providing "std::pair" is directly included [misc-include-cleaner]
    9 |     std::vector<std::pair<double, FGCom_RadiationPattern*>> distances;
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:479:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  479 |     for (auto& p : pattern.patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:479:10: warning: 'auto &p' can be declared as 'const auto &p' [readability-qualified-auto]
  479 |     for (auto& p : pattern.patterns) {
      |          ^
      |          const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:479:16: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  479 |     for (auto& p : pattern.patterns) {
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:479:18: warning: 'operator!=<const FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  479 |     for (auto& p : pattern.patterns) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:479:18: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  479 |     for (auto& p : pattern.patterns) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:479:18: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  479 |     for (auto& p : pattern.patterns) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:480:9: warning: variable 'distance' of type 'double' can be declared 'const' [misc-const-correctness]
  480 |         double distance = sqrt(pow(p.theta - theta_deg, 2) + pow(p.phi - phi_deg, 2));
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:481:19: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
  481 |         distances.push_back(std::make_pair(distance, const_cast<FGCom_RadiationPattern*>(&p)));
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~                                                  ~
      |                   emplace_back
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:481:29: warning: 'make_pair<double &, FGCom_RadiationPattern *>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  481 |         distances.push_back(std::make_pair(distance, const_cast<FGCom_RadiationPattern*>(&p)));
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
  922 |     make_pair(_T1&& __x, _T2&& __y)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:481:34: warning: no header providing "std::make_pair" is directly included [misc-include-cleaner]
  481 |         distances.push_back(std::make_pair(distance, const_cast<FGCom_RadiationPattern*>(&p)));
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:481:54: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  481 |         distances.push_back(std::make_pair(distance, const_cast<FGCom_RadiationPattern*>(&p)));
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:485:5: warning: 'sort<__gnu_cxx::__normal_iterator<std::pair<double, FGCom_RadiationPattern *> *, std::vector<std::pair<double, FGCom_RadiationPattern *>>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  485 |     std::sort(distances.begin(), distances.end());
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4851:5: note: resolves to this declaration
 4851 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:489:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  489 |     for (int i = 0; i < std::min(count, (int)distances.size()); ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:489:25: warning: 'min<int>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  489 |     for (int i = 0; i < std::min(count, (int)distances.size()); ++i) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:489:41: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  489 |     for (int i = 0; i < std::min(count, (int)distances.size()); ++i) {
      |                                         ^~~~~                
      |                                         static_cast<int>(    )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:490:35: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  490 |         result.push_back(distances[i].second);
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:496:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  496 | bool FGCom_PatternInterpolation::parse4NEC2File(const std::string& filename, FGCom_AltitudePattern& pattern) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:496:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  496 | bool FGCom_PatternInterpolation::parse4NEC2File(const std::string& filename, FGCom_AltitudePattern& pattern) {
      | ~~~~                             ^
      | auto                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:496:34: warning: method 'parse4NEC2File' can be made static [readability-convert-member-functions-to-static]
  496 | bool FGCom_PatternInterpolation::parse4NEC2File(const std::string& filename, FGCom_AltitudePattern& pattern) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:497:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  497 |     std::ifstream file(filename);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:499:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  499 |         std::cerr << "Cannot open 4NEC2 file: " << filename << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:499:49: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  499 |         std::cerr << "Cannot open 4NEC2 file: " << filename << std::endl;
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:499:61: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  499 |         std::cerr << "Cannot open 4NEC2 file: " << filename << std::endl;
      |                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:499:64: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  499 |         std::cerr << "Cannot open 4NEC2 file: " << filename << std::endl;
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:499:64: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  499 |         std::cerr << "Cannot open 4NEC2 file: " << filename << std::endl;
      |                                                                ^~~~~~~~~
      |                                                                '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:506:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  506 |     while (std::getline(file, line)) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:506:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
  506 |     while (std::getline(file, line)) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:497:5: note: inferred assignment of ID-dependent value from ID-dependent 
  497 |     std::ifstream file(filename);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:506:12: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  506 |     while (std::getline(file, line)) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:506:17: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
  506 |     while (std::getline(file, line)) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:508:33: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  508 |         if (line.empty() || line[0] == ';' || line[0] == '#') continue;
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:508:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  508 |         if (line.empty() || line[0] == ';' || line[0] == '#') continue;
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:508:62: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  508 |         if (line.empty() || line[0] == ';' || line[0] == '#') continue;
      |                                                              ^         
      |                                                               {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:511:13: warning: use absl::StrContains instead of find() != npos [abseil-string-find-str-contains]
    9 |         if (line.find("RADIATION PATTERN") != std::string::npos ||
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |             absl::StrContains(line, "RADIATION PATTERN")
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:511:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2695:31: note: default parameter was declared here
 2695 |       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:512:13: warning: use absl::StrContains instead of find() != npos [abseil-string-find-str-contains]
  512 |             line.find("FAR FIELD") != std::string::npos) {
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |             absl::StrContains(line, "FAR FIELD")
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:512:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2695:31: note: default parameter was declared here
 2695 |       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:519:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  519 |             std::istringstream iss(line);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/sstream:616:6: note: default parameter was declared here
  616 |                           ios_base::openmode __mode = ios_base::in)
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:520:13: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  520 |             double theta, phi, gain, phase;
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:520:20: warning: variable 'theta' is not initialized [cppcoreguidelines-init-variables]
  520 |             double theta, phi, gain, phase;
      |                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:520:27: warning: variable 'phi' is not initialized [cppcoreguidelines-init-variables]
  520 |             double theta, phi, gain, phase;
      |                           ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:520:32: warning: variable 'gain' is not initialized [cppcoreguidelines-init-variables]
  520 |             double theta, phi, gain, phase;
      |                                ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:520:38: warning: variable 'phase' is not initialized [cppcoreguidelines-init-variables]
  520 |             double theta, phi, gain, phase;
      |                                      ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:523:21: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  523 |             if (iss >> theta >> phi >> gain >> phase >> pol) {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:220:7: note: resolves to this declaration
  220 |       operator>>(double& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:523:30: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  523 |             if (iss >> theta >> phi >> gain >> phase >> pol) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:220:7: note: resolves to this declaration
  220 |       operator>>(double& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:523:37: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  523 |             if (iss >> theta >> phi >> gain >> phase >> pol) {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:220:7: note: resolves to this declaration
  220 |       operator>>(double& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:523:45: warning: 'operator>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  523 |             if (iss >> theta >> phi >> gain >> phase >> pol) {
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/istream:220:7: note: resolves to this declaration
  220 |       operator>>(double& __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:523:54: warning: 'operator>><char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  523 |             if (iss >> theta >> phi >> gain >> phase >> pol) {
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4019:5: note: resolves to this declaration
 4019 |     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:524:17: warning: variable 'p' of type 'FGCom_RadiationPattern' can be declared 'const' [misc-const-correctness]
  524 |                 FGCom_RadiationPattern p(theta, phi, gain, phase, pol);
      |                 ^
      |                                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:524:40: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  524 |                 FGCom_RadiationPattern p(theta, phi, gain, phase, pol);
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:533:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |         std::cerr << "No pattern data found in file: " << filename << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:533:56: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |         std::cerr << "No pattern data found in file: " << filename << std::endl;
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:533:68: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |         std::cerr << "No pattern data found in file: " << filename << std::endl;
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:533:71: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |         std::cerr << "No pattern data found in file: " << filename << std::endl;
      |                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:533:71: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  533 |         std::cerr << "No pattern data found in file: " << filename << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:540:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  540 | bool FGCom_PatternInterpolation::validatePattern(const FGCom_AltitudePattern& pattern) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:540:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  540 | bool FGCom_PatternInterpolation::validatePattern(const FGCom_AltitudePattern& pattern) {
      | ~~~~                             ^
      | auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:540:34: warning: method 'validatePattern' can be made static [readability-convert-member-functions-to-static]
  540 | bool FGCom_PatternInterpolation::validatePattern(const FGCom_AltitudePattern& pattern) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:541:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  541 |     if (pattern.patterns.empty()) return false;
      |                                  ^             
      |                                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:544:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  544 |     for (const auto& p : pattern.patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:544:5: warning: replace loop by 'std::all_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:544:22: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  544 |     for (const auto& p : pattern.patterns) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:544:24: warning: 'operator!=<const FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  544 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:544:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  544 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:544:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  544 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:545:27: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  545 |         if (p.gain_dbi < -100 || p.gain_dbi > 50) return false;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:545:47: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  545 |         if (p.gain_dbi < -100 || p.gain_dbi > 50) return false;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:545:50: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  545 |         if (p.gain_dbi < -100 || p.gain_dbi > 50) return false;
      |                                                  ^             
      |                                                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:546:24: warning: 180 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  546 |         if (p.theta < -180 || p.theta > 180) return false;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:546:41: warning: 180 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  546 |         if (p.theta < -180 || p.theta > 180) return false;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:546:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  546 |         if (p.theta < -180 || p.theta > 180) return false;
      |                                             ^             
      |                                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:547:34: warning: 360 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  547 |         if (p.phi < 0 || p.phi > 360) return false;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:547:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  547 |         if (p.phi < 0 || p.phi > 360) return false;
      |                                      ^             
      |                                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:554:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  554 | FGCom_PatternInterpolation::calculatePatternStats(const FGCom_AltitudePattern& pattern) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:554:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  553 | FGCom_PatternInterpolation::PatternStats 
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | auto
  554 | FGCom_PatternInterpolation::calculatePatternStats(const FGCom_AltitudePattern& pattern) {
      |                             ^
      |                                                                                         -> FGCom_PatternInterpolation::PatternStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:554:29: warning: method 'calculatePatternStats' can be made static [readability-convert-member-functions-to-static]
  554 | FGCom_PatternInterpolation::calculatePatternStats(const FGCom_AltitudePattern& pattern) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:555:5: warning: uninitialized record type: 'stats' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  555 |     PatternStats stats;
      |     ^                 
      |                       {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:558:77: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  558 |         stats.max_gain = stats.min_gain = stats.avg_gain = stats.std_dev = -999.0;
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:563:26: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  563 |     stats.total_points = pattern.patterns.size();
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:564:55: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  564 |     stats.max_gain = stats.min_gain = pattern.patterns[0].gain_dbi;
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1145:7: note: resolves to this declaration
 1145 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:567:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  567 |     for (const auto& p : pattern.patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:567:22: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  567 |     for (const auto& p : pattern.patterns) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:567:24: warning: 'operator!=<const FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  567 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:567:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  567 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:567:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  567 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:568:26: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  568 |         stats.max_gain = std::max(stats.max_gain, p.gain_dbi);
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:569:26: warning: 'min<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  569 |         stats.min_gain = std::min(stats.min_gain, p.gain_dbi);
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:573:28: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  573 |     stats.avg_gain = sum / pattern.patterns.size();
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:577:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  577 |     for (const auto& p : pattern.patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:577:22: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  577 |     for (const auto& p : pattern.patterns) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:577:24: warning: 'operator!=<const FGCom_RadiationPattern *, std::vector<FGCom_RadiationPattern>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  577 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:577:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  577 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:577:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  577 |     for (const auto& p : pattern.patterns) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:580:37: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  580 |     stats.std_dev = sqrt(variance / pattern.patterns.size());
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:586:11: warning: the outermost namespace should be the 'LIBC_NAMESPACE' macro [llvmlibc-implementation-in-namespace]
  586 | namespace FGCom_AltitudeUtils {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:587:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  587 |     FGCom_AltitudeUtils::AltitudeCategory getAltitudeCategory(int altitude_m) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                                      -> FGCom_AltitudeUtils::AltitudeCategory
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:588:27: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  588 |         if (altitude_m <= 1000) return GROUND_EFFECT;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:588:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  588 |         if (altitude_m <= 1000) return GROUND_EFFECT;
      |                                ^                     
      |                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:589:27: warning: 3000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  589 |         if (altitude_m <= 3000) return LOW_ALTITUDE;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:589:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  589 |         if (altitude_m <= 3000) return LOW_ALTITUDE;
      |                                ^                    
      |                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:590:27: warning: 8000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  590 |         if (altitude_m <= 8000) return MEDIUM_ALTITUDE;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:590:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  590 |         if (altitude_m <= 8000) return MEDIUM_ALTITUDE;
      |                                ^                       
      |                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:594:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  594 |     int getRecommendedSamplingInterval(int altitude_m) {
      |     ~~~ ^
      |     auto                                               -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:595:9: warning: variable 'cat' of type 'AltitudeCategory' can be declared 'const' [misc-const-correctness]
  595 |         AltitudeCategory cat = getAltitudeCategory(altitude_m);
      |         ^
      |                          const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:595:32: warning: 'getAltitudeCategory' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  595 |         AltitudeCategory cat = getAltitudeCategory(altitude_m);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:587:43: note: resolves to this declaration
  587 |     FGCom_AltitudeUtils::AltitudeCategory getAltitudeCategory(int altitude_m) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:597:40: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  597 |             case GROUND_EFFECT: return 50;   // Dense sampling
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:598:39: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  598 |             case LOW_ALTITUDE: return 200;   // Moderate sampling
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:599:42: warning: 500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  599 |             case MEDIUM_ALTITUDE: return 500; // Wider intervals
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:600:40: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  600 |             case HIGH_ALTITUDE: return 1000;  // Wide intervals
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:601:29: warning: 500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  601 |             default: return 500;
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:605:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  605 |     bool isCriticalTransitionZone(int altitude_m) {
      |     ~~~~ ^
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:606:49: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  606 |         return altitude_m >= 0 && altitude_m <= 1000;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:609:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  609 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz) {
      |     ~~~~~~ ^
      |     auto                                                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:609:36: warning: 2 adjacent parameters of 'getGroundEffectStrength' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  609 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz) {
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:609:40: note: the first parameter in the range is 'altitude_m'
  609 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz) {
      |                                        ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:609:59: note: the last parameter in the range is 'frequency_mhz'
  609 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz) {
      |                                                           ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:609:52: note: 'int' and 'double' may be implicitly converted
  609 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz) {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:610:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  610 |         if (altitude_m <= 0) return 1.0;
      |                             ^           
      |                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:612:9: warning: variable 'lambda' of type 'double' can be declared 'const' [misc-const-correctness]
  612 |         double lambda = 300.0 / frequency_mhz;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:612:25: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  612 |         double lambda = 300.0 / frequency_mhz;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:613:9: warning: variable 'height_wavelengths' of type 'double' can be declared 'const' [misc-const-correctness]
  613 |         double height_wavelengths = altitude_m / lambda;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:615:42: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  615 |         return exp(-height_wavelengths / 3.0);
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:618:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  618 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg) {
      |     ~~~~~~ ^
      |     auto                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:618:40: warning: 2 adjacent parameters of 'calculateMultipathNullDepth' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  618 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:618:44: note: the first parameter in the range is 'altitude_m'
  618 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                            ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:618:63: note: the last parameter in the range is 'frequency_mhz'
  618 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                                               ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:618:56: note: 'int' and 'double' may be implicitly converted
  618 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg) {
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:619:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  619 |         if (altitude_m <= 0) return 0.0; // No nulls on ground
      |                             ^                                 
      |                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:621:9: warning: variable 'path_diff' of type 'double' can be declared 'const' [misc-const-correctness]
  621 |         double path_diff = 2.0 * altitude_m * sin((90.0 - theta_deg) * M_PI / 180.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:621:28: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  621 |         double path_diff = 2.0 * altitude_m * sin((90.0 - theta_deg) * M_PI / 180.0);
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:621:52: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  621 |         double path_diff = 2.0 * altitude_m * sin((90.0 - theta_deg) * M_PI / 180.0);
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:621:79: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  621 |         double path_diff = 2.0 * altitude_m * sin((90.0 - theta_deg) * M_PI / 180.0);
      |                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:622:9: warning: variable 'lambda' of type 'double' can be declared 'const' [misc-const-correctness]
  622 |         double lambda = 300.0 / frequency_mhz;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:622:25: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  622 |         double lambda = 300.0 / frequency_mhz;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:623:9: warning: variable 'phase_diff' of type 'double' can be declared 'const' [misc-const-correctness]
  623 |         double phase_diff = (path_diff / lambda) * 360.0;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:623:52: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  623 |         double phase_diff = (path_diff / lambda) * 360.0;
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:625:16: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  625 |         return 20.0 * log10(abs(cos(phase_diff * M_PI / 180.0)) + 0.001);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:625:29: warning: using integer absolute value function 'abs' when argument is of floating point type [clang-diagnostic-absolute-value]
  625 |         return 20.0 * log10(abs(cos(phase_diff * M_PI / 180.0)) + 0.001);
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:625:29: note: use function 'std::abs' instead
  625 |         return 20.0 * log10(abs(cos(phase_diff * M_PI / 180.0)) + 0.001);
      |                             ^~~
      |                             std::abs
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:625:33: warning: narrowing conversion from 'double' to 'int' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  625 |         return 20.0 * log10(abs(cos(phase_diff * M_PI / 180.0)) + 0.001);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:625:57: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  625 |         return 20.0 * log10(abs(cos(phase_diff * M_PI / 180.0)) + 0.001);
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:625:67: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  625 |         return 20.0 * log10(abs(cos(phase_diff * M_PI / 180.0)) + 0.001);
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:627:1: warning: namespace 'FGCom_AltitudeUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  627 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:586:11: note: namespace 'FGCom_AltitudeUtils' starts here
  586 | namespace FGCom_AltitudeUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:629:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  629 | bool FGCom_PatternInterpolation::has3DAttitudePattern(const std::string& antenna_name) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:629:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  629 | bool FGCom_PatternInterpolation::has3DAttitudePattern(const std::string& antenna_name) {
      | ~~~~                             ^
      | auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:630:49: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  630 |     return attitude_patterns.find(antenna_name) != attitude_patterns.end() && 
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:631:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  631 |            !attitude_patterns[antenna_name].empty();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_PATTERN_INTERPOLATION_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PATTERN_INTERPOLATION_H
    2 | #define FGCOM_PATTERN_INTERPOLATION_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PATTERN_INTERPOLATION_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:6:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: warning: accessing fields in struct 'FGCom_RadiationPattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   10 | struct FGCom_RadiationPattern {
      |        ^
   11 |     double theta;           // Elevation angle (degrees)
   12 |     double phi;             // Azimuth angle (degrees)
   13 |     double gain_dbi;        // Gain in dBi
   14 |     double phase_deg;       // Phase in degrees
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
   16 |     
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
   19 |         : theta(t), phi(p), gain_dbi(g), phase_deg(ph), polarization(pol) {}
   20 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_RadiationPattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:11:12: warning: member variable 'theta' has public visibility [misc-non-private-member-variables-in-classes]
   11 |     double theta;           // Elevation angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:12:12: warning: member variable 'phi' has public visibility [misc-non-private-member-variables-in-classes]
   12 |     double phi;             // Azimuth angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:13:12: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
   13 |     double gain_dbi;        // Gain in dBi
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:14:12: warning: member variable 'phase_deg' has public visibility [misc-non-private-member-variables-in-classes]
   14 |     double phase_deg;       // Phase in degrees
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:15:17: warning: member variable 'polarization' has public visibility [misc-non-private-member-variables-in-classes]
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:17:5: warning: 'FGCom_RadiationPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:17:77: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:5: warning: 'FGCom_RadiationPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:28: warning: 4 adjacent parameters of 'FGCom_RadiationPattern' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:35: note: the first parameter in the range is 't'
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:65: note: the last parameter in the range is 'ph'
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                 ^~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:35: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:45: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:55: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:65: warning: parameter name 'ph' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:69: warning: pass by value and use std::move [modernize-pass-by-value]
    4 | #include <vector>
    5 | #include <map>
    6 | #include <string>
    7 | #include <memory>
    8 | 
    9 | // 4NEC2 radiation pattern data structure
   10 | struct FGCom_RadiationPattern {
   11 |     double theta;           // Elevation angle (degrees)
   12 |     double phi;             // Azimuth angle (degrees)
   13 |     double gain_dbi;        // Gain in dBi
   14 |     double phase_deg;       // Phase in degrees
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
   16 |     
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                     ^~~~~~~~~~~~~~~~~~
      |                                                                     std::string 
   19 |         : theta(t), phi(p), gain_dbi(g), phase_deg(ph), polarization(pol) {}
      |                                                                         
      |                                                                      std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: warning: accessing fields in struct 'FGCom_AttitudePattern' is inefficient due to padding; only needs 44 bytes but is using 48 bytes [altera-struct-pack-align]
   23 | struct FGCom_AttitudePattern {
      |        ^
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
   26 |     int altitude_m;          // Altitude in meters
   27 |     double frequency_mhz;   // Frequency in MHz
   28 |     std::vector<FGCom_RadiationPattern> patterns;
   29 |     
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
   32 |         : roll_deg(roll), pitch_deg(pitch), altitude_m(alt), frequency_mhz(freq) {}
   33 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FGCom_AttitudePattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: warning: accessing fields in struct 'FGCom_AttitudePattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   23 | struct FGCom_AttitudePattern {
      |        ^
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
   26 |     int altitude_m;          // Altitude in meters
   27 |     double frequency_mhz;   // Frequency in MHz
   28 |     std::vector<FGCom_RadiationPattern> patterns;
   29 |     
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
   32 |         : roll_deg(roll), pitch_deg(pitch), altitude_m(alt), frequency_mhz(freq) {}
   33 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_AttitudePattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:24:9: warning: member variable 'roll_deg' has public visibility [misc-non-private-member-variables-in-classes]
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:25:9: warning: member variable 'pitch_deg' has public visibility [misc-non-private-member-variables-in-classes]
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:26:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   26 |     int altitude_m;          // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:27:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   27 |     double frequency_mhz;   // Frequency in MHz
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:28:41: warning: member variable 'patterns' has public visibility [misc-non-private-member-variables-in-classes]
   28 |     std::vector<FGCom_RadiationPattern> patterns;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:30:5: warning: 'FGCom_AttitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:5: warning: 'FGCom_AttitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:27: warning: 4 adjacent parameters of 'FGCom_AttitudePattern' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:31: note: the first parameter in the range is 'roll'
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                               ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:64: note: the last parameter in the range is 'freq'
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                                                                ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:57: note: 'int' and 'double' may be implicitly converted
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: warning: accessing fields in struct 'FGCom_AltitudePattern' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
   36 | struct FGCom_AltitudePattern {
      |        ^
   37 |     int altitude_m;         // Altitude in meters
   38 |     double frequency_mhz;   // Frequency in MHz
   39 |     std::vector<FGCom_RadiationPattern> patterns;
   40 |     
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
   43 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FGCom_AltitudePattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: warning: accessing fields in struct 'FGCom_AltitudePattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   36 | struct FGCom_AltitudePattern {
      |        ^
   37 |     int altitude_m;         // Altitude in meters
   38 |     double frequency_mhz;   // Frequency in MHz
   39 |     std::vector<FGCom_RadiationPattern> patterns;
   40 |     
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
   43 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_AltitudePattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:37:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     int altitude_m;         // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:38:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     double frequency_mhz;   // Frequency in MHz
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:39:41: warning: member variable 'patterns' has public visibility [misc-non-private-member-variables-in-classes]
   39 |     std::vector<FGCom_RadiationPattern> patterns;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:41:5: warning: 'FGCom_AltitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:5: warning: 'FGCom_AltitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:27: warning: 2 adjacent parameters of 'FGCom_AltitudePattern' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                           ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:31: note: the first parameter in the range is 'alt'
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                               ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:43: note: the last parameter in the range is 'freq'
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:36: note: 'int' and 'double' may be implicitly converted
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:46:7: warning: class 'FGCom_PatternInterpolation' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   46 | class FGCom_PatternInterpolation {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:69:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     bool load4NEC2Pattern(const std::string& filename, const std::string& antenna_name, 
      |     ~~~~ ^
      |     auto
   70 |                          int altitude_m, double frequency_mhz);
      |                                                               
      |                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:73:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     bool load3DAttitudePattern(const std::string& filename, const std::string& antenna_name,
      |     ~~~~ ^
      |     auto
   74 |                                int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                                                                                  
      |                                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:77:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   77 |     bool loadAltitudePatterns(const std::string& antenna_name, const std::string& pattern_dir);
      |     ~~~~ ^                                                                                    
      |     auto                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:80:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     double getInterpolatedGain(const std::string& antenna_name, int altitude_m, 
      |     ~~~~~~ ^
      |     auto
   81 |                               double frequency_mhz, double theta_deg, double phi_deg);
      |                                                                                      
      |                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:84:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     double get3DAttitudeGain(const std::string& antenna_name, double theta, double phi,
      |     ~~~~~~ ^
      |     auto
   85 |                              int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                                                                                
      |                                                                                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:88:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     bool has3DAttitudePattern(const std::string& antenna_name);
      |     ~~~~ ^                                                    
      |     auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:91:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |     double getBilinearInterpolatedGain(const std::string& antenna_name, int altitude_m,
      |     ~~~~~~ ^
      |     auto
   92 |                                       double frequency_mhz, double theta_deg, double phi_deg);
      |                                                                                              
      |                                                                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:95:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   95 |     const FGCom_AltitudePattern* getPatternAtAltitude(const std::string& antenna_name, 
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   96 |                                                       int altitude_m, double frequency_mhz);
      |                                                                                            
      |                                                                                             -> const FGCom_AltitudePattern*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:99:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     double getGroundEffectFactor(int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                          
      |     auto                                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:102:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  102 |     double getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg);
      |     ~~~~~~ ^                                                                         
      |     auto                                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:105:12: warning: accessing fields in struct 'AltitudeCharacteristics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  105 |     struct AltitudeCharacteristics {
      |            ^
  106 |         double ground_effect_factor;    // 0.0 (free space) to 1.0 (full ground effects)
  107 |         double multipath_factor;        // Multipath interference strength
  108 |         double pattern_stability;       // Pattern stability (0.0 to 1.0)
  109 |         std::string dominant_mode;      // "ground_wave", "sky_wave", "mixed"
  110 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:105:12: note: use "__attribute__((aligned(64)))" to align struct 'AltitudeCharacteristics' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:105:12: warning: constructor does not initialize these fields: ground_effect_factor, multipath_factor, pattern_stability [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  105 |     struct AltitudeCharacteristics {
      |            ^
  106 |         double ground_effect_factor;    // 0.0 (free space) to 1.0 (full ground effects)
      |                                    
      |                                    {}
  107 |         double multipath_factor;        // Multipath interference strength
      |                                
      |                                {}
  108 |         double pattern_stability;       // Pattern stability (0.0 to 1.0)
      |                                 
      |                                 {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:112:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     AltitudeCharacteristics getAltitudeCharacteristics(int altitude_m, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                               
      |     auto                                                                                     -> AltitudeCharacteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:115:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     bool isAntennaLoaded(const std::string& antenna_name);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:116:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  116 |     std::vector<int> getAvailableAltitudes(const std::string& antenna_name);
      |     ~~~~~~~~~~~~~~~~ ^                                                     
      |     auto                                                                    -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:117:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     std::vector<double> getAvailableFrequencies(const std::string& antenna_name);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                         -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:120:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     double getMaximumGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:121:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     double getMinimumGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:122:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     double getAverageGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:125:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     double calculateGroundReflectionCoefficient(int altitude_m, double frequency_mhz, 
      |     ~~~~~~ ^
      |     auto
  126 |                                                double theta_deg, double ground_conductivity);
      |                                                                                             
      |                                                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:127:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  127 |     double calculatePathDifference(int altitude_m, double theta_deg);
      |     ~~~~~~ ^                                                        
      |     auto                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:128:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     double calculatePhaseDifference(double path_diff_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                 
      |     auto                                                                      -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:131:56: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  131 |     void smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor = 0.1);
      |                                                        ^                       ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:131:82: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  131 |     void smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor = 0.1);
      |                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:132:56: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  132 |     void filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold = -30.0);
      |                                                        ^                         ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:132:85: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  132 |     void filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold = -30.0);
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |     ~~~~~~ ^                                                                      
      |     auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:37: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:48: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:59: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:70: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:81: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |     ~~~~~~ ^
      |     auto
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                                                                                  
      |                                                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:39: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:50: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:61: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:72: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:138:38: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:138:48: warning: parameter name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:141:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     std::vector<FGCom_RadiationPattern*> findClosestPatterns(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  142 |         const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count = 4);
      |                                                                                               
      |                                                                                                -> std::vector<FGCom_RadiationPattern*>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:142:81: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  142 |         const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count = 4);
      |                                                                                 ^         ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:145:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |     bool parse4NEC2File(const std::string& filename, FGCom_AltitudePattern& pattern);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool validatePattern(const FGCom_AltitudePattern& pattern);
      |     ~~~~ ^                                                    
      |     auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: warning: accessing fields in struct 'PatternStats' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
  151 |     struct PatternStats {
      |            ^
  152 |         double max_gain;
  153 |         double min_gain;
  154 |         double avg_gain;
  155 |         double std_dev;
  156 |         int total_points;
  157 |     };
      |      
      |       __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'PatternStats'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: warning: accessing fields in struct 'PatternStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  151 |     struct PatternStats {
      |            ^
  152 |         double max_gain;
  153 |         double min_gain;
  154 |         double avg_gain;
  155 |         double std_dev;
  156 |         int total_points;
  157 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: note: use "__attribute__((aligned(64)))" to align struct 'PatternStats' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:159:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     PatternStats calculatePatternStats(const FGCom_AltitudePattern& pattern);
      |     ~~~~~~~~~~~~ ^                                                          
      |     auto                                                                     -> PatternStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:163:52: warning: variable 'g_pattern_interpolation' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  163 | extern std::unique_ptr<FGCom_PatternInterpolation> g_pattern_interpolation;
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:168:10: warning: enum 'AltitudeCategory' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  168 |     enum AltitudeCategory {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:175:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     AltitudeCategory getAltitudeCategory(int altitude_m);
      |     ~~~~~~~~~~~~~~~~ ^                                  
      |     auto                                                 -> AltitudeCategory
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:178:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  178 |     int getRecommendedSamplingInterval(int altitude_m);
      |     ~~~ ^                                             
      |     auto                                               -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:181:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     bool isCriticalTransitionZone(int altitude_m);
      |     ~~~~ ^                                       
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:184:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                            
      |     auto                                                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:187:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg);
      |     ~~~~~~ ^                                                                                  
      |     auto                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:188:1: warning: namespace 'FGCom_AltitudeUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  188 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:166:11: note: namespace 'FGCom_AltitudeUtils' starts here
  166 | namespace FGCom_AltitudeUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:1:1: warning: header is missing header guard [llvm-header-guard]
    1 | /* 
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: #includes are not sorted properly [llvm-include-order]
   17 | #include <cstdint>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   17 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   18 | #include <iostream> 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:18:1: warning: system include iostream not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   18 | #include <iostream> 
      | ^~~~~~~~~~~~~~~~~~~
   19 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:19:1: warning: system include cmath not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   19 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   20 | #include <regex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:20:1: warning: system include regex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   20 | #include <regex>
      | ^~~~~~~~~~~~~~~~
   21 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:34:9: warning: macro 'EARTH_RADIUS_CONST' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
   34 | #define EARTH_RADIUS_CONST 3.57  // earth radius factor constant for m/km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:1: warning: replace macro with enum [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      | ^~~~~~~
      |                          =
   36 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' defines an integral constant; prefer an enum instead [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to padding; only needs 172 bytes but is using 192 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:40:15: warning: member variable 'frequency' has public visibility [misc-non-private-member-variables-in-classes]
   40 |         std::string  frequency; // tuned frequency (real carrier frequency)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:41:15: warning: member variable 'dialedFRQ' has public visibility [misc-non-private-member-variables-in-classes]
   41 |         std::string  dialedFRQ; // dialed frequency (aka "channel"; what was supplied from the COMn_FRQ= field)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:42:8: warning: member variable 'power_btn' has public visibility [misc-non-private-member-variables-in-classes]
   42 |         bool  power_btn;     // true if switched on
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:43:8: warning: member variable 'volts' has public visibility [misc-non-private-member-variables-in-classes]
   43 |         float volts;         // how much electric power it has (>0 = on)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:44:8: warning: member variable 'serviceable' has public visibility [misc-non-private-member-variables-in-classes]
   44 |         bool  serviceable;   // false if broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:45:8: warning: member variable 'ptt' has public visibility [misc-non-private-member-variables-in-classes]
   45 |         bool  ptt;           // true if PTT is actually pushed (synced to remotes and used to determine reception)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:46:8: warning: member variable 'ptt_req' has public visibility [misc-non-private-member-variables-in-classes]
   46 |         bool  ptt_req;       // true if PTT is requested from client/udp
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:47:8: warning: member variable 'volume' has public visibility [misc-non-private-member-variables-in-classes]
   47 |         float volume;        // volume, 0.0->1.0
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:48:8: warning: member variable 'pwr' has public visibility [misc-non-private-member-variables-in-classes]
   48 |         float pwr;           // tx power in watts
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:49:8: warning: member variable 'operable' has public visibility [misc-non-private-member-variables-in-classes]
   49 |         bool  operable;      // false if switched off, not powered or broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:50:8: warning: member variable 'squelch' has public visibility [misc-non-private-member-variables-in-classes]
   50 |         float squelch;       // squelch setting (cutoff signal below this quality)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:51:8: warning: member variable 'rdfEnabled' has public visibility [misc-non-private-member-variables-in-classes]
   51 |         bool  rdfEnabled;    // if radio can receive RDF information
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:52:8: warning: member variable 'channelWidth' has public visibility [misc-non-private-member-variables-in-classes]
   52 |         float channelWidth;  // channel width in kHz
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:53:8: warning: member variable 'publish' has public visibility [misc-non-private-member-variables-in-classes]
   53 |         bool  publish;       // if set to false, radio will not be broadcast to other plugins (implies receive-only)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:56:14: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   56 |         std::string antenna_type;      // Type of antenna (vertical, yagi, loop, etc.)
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:57:14: warning: member variable 'frequency_band' has public visibility [misc-non-private-member-variables-in-classes]
   57 |         std::string frequency_band;    // Frequency band for regulatory compliance
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:58:8: warning: member variable 'power_efficiency' has public visibility [misc-non-private-member-variables-in-classes]
   58 |         float power_efficiency;        // Current power efficiency (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:59:7: warning: member variable 'power_limiting_enabled' has public visibility [misc-non-private-member-variables-in-classes]
   59 |         bool power_limiting_enabled;   // Whether automatic power limiting is enabled
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:60:8: warning: member variable 'swr' has public visibility [misc-non-private-member-variables-in-classes]
   60 |         float swr;                     // Standing Wave Ratio
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:61:8: warning: member variable 'temperature' has public visibility [misc-non-private-member-variables-in-classes]
   61 |         float temperature;             // Antenna temperature in Celsius
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:62:8: warning: member variable 'battery_level' has public visibility [misc-non-private-member-variables-in-classes]
   62 |         float battery_level;           // Battery level (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:64:2: warning: 'fgcom_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   64 |         fgcom_radio()  {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:9: warning: 'frequency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   40 |         frequency   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   65 |         frequency   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:9: warning: 'dialedFRQ' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   41 |         dialedFRQ   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |         dialedFRQ   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:67:9: warning: 'power_btn' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   42 |         power_btn   = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:9: warning: 'volts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   43 |         volts       = 12;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:23: warning: 12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   68 |         volts       = 12;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:69:9: warning: 'serviceable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   44 |         serviceable = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:70:9: warning: 'ptt' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   45 |         ptt         = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:71:9: warning: 'ptt_req' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   46 |         ptt_req     = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:72:9: warning: 'volume' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   47 |         volume      = 1.0;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:9: warning: 'pwr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   48 |         pwr         = 10;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:23: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   73 |         pwr         = 10;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:74:9: warning: 'operable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   49 |         operable    = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:9: warning: 'squelch' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   50 |         squelch     = 0.1;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:23: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   75 |         squelch     = 0.1;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:76:9: warning: 'rdfEnabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   51 |         rdfEnabled  = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:77:9: warning: 'channelWidth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   52 |         channelWidth = -1;   // let the selected radio model decide on defaults
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:78:9: warning: 'publish' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   53 |         publish     = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:9: warning: 'antenna_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |         antenna_type = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |         antenna_type = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:9: warning: 'frequency_band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   57 |         frequency_band = "amateur";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |         frequency_band = "amateur";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:9: warning: 'power_efficiency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |         power_efficiency = 0.8f;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |         power_efficiency = 0.8f;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:84:9: warning: 'power_limiting_enabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   59 |         power_limiting_enabled = true;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:9: warning: 'swr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   60 |         swr = 1.0f;
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:15: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   85 |         swr = 1.0f;
      |               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:9: warning: 'temperature' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   61 |         temperature = 25.0f;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   86 |         temperature = 25.0f;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:9: warning: 'battery_level' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   62 |         battery_level = 1.0f;
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   87 |         battery_level = 1.0f;
      |                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to padding; only needs 105 bytes but is using 304 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_amateur_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_amateur_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:93:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:94:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:95:17: warning: member variable 'grid_locator' has public visibility [misc-non-private-member-variables-in-classes]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:96:11: warning: member variable 'power_watts' has public visibility [misc-non-private-member-variables-in-classes]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:97:10: warning: member variable 'is_amateur' has public visibility [misc-non-private-member-variables-in-classes]
   97 |     bool is_amateur;            // Amateur radio flag
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:98:9: warning: member variable 'itu_region' has public visibility [misc-non-private-member-variables-in-classes]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:5: warning: 'fgcom_amateur_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:29: warning: initializer for base class 'fgcom_radio' is redundant [readability-redundant-member-init]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                     
      |                     {""}
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                     
      |                     {"USB"}
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
      |         ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |         mode = "USB";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:9: warning: 'grid_locator' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                             
      |                             {""}
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         grid_locator = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:104:9: warning: 'power_watts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |                      
      |                      {100.0}
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:105:9: warning: 'is_amateur' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   97 |     bool is_amateur;            // Amateur radio flag
      |                    
      |                    {false}
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:106:9: warning: 'itu_region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |                   
      |                   {1}
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
  106 |         itu_region = 1;  // Default to Region 1
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: warning: accessing fields in struct 'fgcom_radiowave_signal' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
  113 | struct fgcom_radiowave_signal {
      |        ^
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
  122 |     };
  123 | };
      |  
      |   __attribute__((aligned(16)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: note: use "__attribute__((aligned(16)))" to align struct 'fgcom_radiowave_signal' to 16 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:114:11: warning: member variable 'quality' has public visibility [misc-non-private-member-variables-in-classes]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:115:11: warning: member variable 'direction' has public visibility [misc-non-private-member-variables-in-classes]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:116:11: warning: member variable 'verticalAngle' has public visibility [misc-non-private-member-variables-in-classes]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:118:5: warning: 'fgcom_radiowave_signal' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  118 |     fgcom_radiowave_signal()  {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:119:9: warning: 'quality' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |                  
      |                  {-1}
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:120:9: warning: 'direction' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |                    
      |                    {-1}
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:121:9: warning: 'verticalAngle' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |                        
      |                        {-1}
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to padding; only needs 65 bytes but is using 72 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radiowave_freqConvRes'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radiowave_freqConvRes' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      | ~~~~ ^                                         
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:46: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: warning: destructor of 'FGCom_radiowaveModel' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
  148 | class FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: note: make it public and virtual
  148 | class FGCom_radiowaveModel {
      |       ^
  149 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:161:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     virtual std::string getType() = 0;  // pure-virtual: cannot be provided by the base class
      |             ~~~~~~~~~~~ ^
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:176:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) = 0;
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^
      |             auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:185:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     virtual std::string conv_chan2freq(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:194:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |     virtual std::string conv_freq2chan(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |             ~~~~~ ^
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:247:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |     virtual float getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz);
      |             ~~~~~ ^                                                                                     
      |             auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:256:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |     virtual bool isCompatible(FGCom_radiowaveModel *otherModel);
      |             ~~~~ ^                                             
      |             auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     virtual double getDistToHorizon(float h);
      |             ~~~~~~ ^                        
      |             auto                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:43: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  265 |     virtual double getDistToHorizon(float h);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |             ~~~~~~ ^                                                  
      |             auto                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:58: warning: parameter name 'hA' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:68: warning: parameter name 'hB' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:286:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  286 |     virtual double getSlantDistance(double surfacedist, double hah);
      |             ~~~~~~ ^                                               
      |             auto                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:296:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 |     virtual double degreeAboveHorizon(double surfacedist, double hah);
      |             ~~~~~~ ^                                                 
      |             auto                                                      -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:307:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     virtual double getDirection(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                               
      |             auto                                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:319:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  319 |     virtual double getSurfaceDistance(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                                     
      |             auto                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:338:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  338 |     static std::unique_ptr<FGCom_radiowaveModel> selectModel(std::string freq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |            auto                                                                -> std::unique_ptr<FGCom_radiowaveModel>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                               
      |            auto                                                         -> fgcom_radiowave_freqConvRes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:2:1: warning: #includes are not sorted properly [llvm-include-order]
    2 | #include <cmath>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:2:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
    2 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    3 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:3:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    3 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    4 | #include <iostream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:4:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
    4 | #include <iostream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:4:1: warning: included header iostream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:5:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
    5 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:5:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:6:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
    6 | #include <iomanip>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:6:1: warning: included header iomanip is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
    5 | #include <sstream>
    6 | #include <iomanip>
    7 | 
    8 | // Global instance
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:47: warning: variable 'g_vehicle_dynamics_manager' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:9:47: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:12:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   12 | const double EARTH_RADIUS_KM = 6371.0;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:13:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   13 | const double DEG_TO_RAD = M_PI / 180.0;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:13:27: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
    5 | #include <sstream>
    6 | #include <iomanip>
    7 | 
    8 | // Global instance
    9 | std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager = nullptr;
   10 | 
   11 | // Constants
   12 | const double EARTH_RADIUS_KM = 6371.0;
   13 | const double DEG_TO_RAD = M_PI / 180.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:14:14: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   14 | const double RAD_TO_DEG = 180.0 / M_PI;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:16:31: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   16 | FGCom_VehicleDynamicsManager::FGCom_VehicleDynamicsManager() 
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:17:60: warning: 300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   17 |     : auto_cleanup_enabled(true), cleanup_interval_seconds(300) {
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:18:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   18 |     last_cleanup = std::chrono::system_clock::now();
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:18:20: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   18 |     last_cleanup = std::chrono::system_clock::now();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:18:33: warning: no header providing "std::chrono::system_clock" is directly included [misc-include-cleaner]
    2 |     last_cleanup = std::chrono::system_clock::now();
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:21:31: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
   21 | FGCom_VehicleDynamicsManager::~FGCom_VehicleDynamicsManager() {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:21:31: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:25:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   25 | bool FGCom_VehicleDynamicsManager::registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:25:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   25 | bool FGCom_VehicleDynamicsManager::registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type) {
      | ~~~~                               ^
      | auto                                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:25:63: warning: no header providing "std::string" is directly included [misc-include-cleaner]
    7 | bool FGCom_VehicleDynamicsManager::registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type) {
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:26:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   26 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:26:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
    5 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:26:26: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   26 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:28:35: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   28 |     if (vehicles.find(vehicle_id) != vehicles.end()) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:33:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   33 |     dynamics.vehicle_id = vehicle_id;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:34:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   34 |     dynamics.position.vehicle_type = vehicle_type;
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:35:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   35 |     dynamics.status = "active";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:36:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   36 |     dynamics.last_update = std::chrono::system_clock::now();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:36:28: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   36 |     dynamics.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:38:13: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   38 |     vehicles[vehicle_id] = dynamics;
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:38:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   38 |     vehicles[vehicle_id] = dynamics;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: resolves to this declaration
   73 | struct fgcom_vehicle_dynamics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:42:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   42 | bool FGCom_VehicleDynamicsManager::unregisterVehicle(const std::string& vehicle_id) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:42:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 | bool FGCom_VehicleDynamicsManager::unregisterVehicle(const std::string& vehicle_id) {
      | ~~~~                               ^
      | auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:43:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   43 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:45:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   45 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:46:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:54:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   54 | bool FGCom_VehicleDynamicsManager::updateVehiclePosition(const std::string& vehicle_id, const fgcom_vehicle_position& position) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:54:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   54 | bool FGCom_VehicleDynamicsManager::updateVehiclePosition(const std::string& vehicle_id, const fgcom_vehicle_position& position) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:55:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   55 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:57:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   57 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:58:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:62:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |     it->second.position = position;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:62:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |     it->second.position = position;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: note: resolves to this declaration
   41 | struct fgcom_vehicle_position {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:63:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:63:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:63:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:66:9: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |     if (std::abs(it->second.position.latitude - position.latitude) > 0.01 ||
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:71:3: note: resolves to this declaration
   71 |   abs(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:66:20: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |     if (std::abs(it->second.position.latitude - position.latitude) > 0.01 ||
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:66:70: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   66 |     if (std::abs(it->second.position.latitude - position.latitude) > 0.01 ||
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:67:9: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |         std::abs(it->second.position.longitude - position.longitude) > 0.01) {
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:71:3: note: resolves to this declaration
   71 |   abs(double __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:67:20: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |         std::abs(it->second.position.longitude - position.longitude) > 0.01) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:67:72: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   67 |         std::abs(it->second.position.longitude - position.longitude) > 0.01) {
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:68:11: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |         it->second.attitude.magnetic_declination_deg = calculateMagneticDeclination(position.latitude, position.longitude);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:74:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   74 | bool FGCom_VehicleDynamicsManager::updateVehicleAttitude(const std::string& vehicle_id, const fgcom_vehicle_attitude& attitude) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:74:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 | bool FGCom_VehicleDynamicsManager::updateVehicleAttitude(const std::string& vehicle_id, const fgcom_vehicle_attitude& attitude) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:75:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   75 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:77:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   77 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:78:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   78 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:82:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     it->second.attitude = attitude;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:82:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     it->second.attitude = attitude;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:12:8: note: resolves to this declaration
   12 | struct fgcom_vehicle_attitude {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:83:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:83:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:83:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   86 |     for (auto& antenna : it->second.antennas) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:24: warning: 'operator!=<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:86:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     for (auto& antenna : it->second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:93:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   93 | bool FGCom_VehicleDynamicsManager::updateVehicleVelocity(const std::string& vehicle_id, const fgcom_vehicle_velocity& velocity) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:93:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 | bool FGCom_VehicleDynamicsManager::updateVehicleVelocity(const std::string& vehicle_id, const fgcom_vehicle_velocity& velocity) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:94:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   94 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:96:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   96 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:97:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:101:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |     it->second.velocity = velocity;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:101:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |     it->second.velocity = velocity;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:26:8: note: resolves to this declaration
   26 | struct fgcom_vehicle_velocity {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:102:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:102:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:102:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:106:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  106 | bool FGCom_VehicleDynamicsManager::updateVehicleDynamics(const std::string& vehicle_id, const fgcom_vehicle_dynamics& dynamics) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:106:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 | bool FGCom_VehicleDynamicsManager::updateVehicleDynamics(const std::string& vehicle_id, const fgcom_vehicle_dynamics& dynamics) {
      | ~~~~                               ^
      | auto                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:107:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  107 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:109:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  109 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:110:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  110 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:114:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |     it->second = dynamics;
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:114:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |     it->second = dynamics;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: resolves to this declaration
   73 | struct fgcom_vehicle_dynamics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:115:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:115:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:115:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:119:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  119 | bool FGCom_VehicleDynamicsManager::addAntenna(const std::string& vehicle_id, const fgcom_antenna_orientation& antenna) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:119:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 | bool FGCom_VehicleDynamicsManager::addAntenna(const std::string& vehicle_id, const fgcom_antenna_orientation& antenna) {
      | ~~~~                               ^
      | auto                                                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:120:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  120 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:122:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  122 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:123:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  123 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:39: warning: 'operator!=<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:39: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:39: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:128:43: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |     for (const auto& existing_antenna : it->second.antennas) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:129:41: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  129 |         if (existing_antenna.antenna_id == antenna.antenna_id) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:134:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |     it->second.antennas.push_back(antenna);
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:135:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:135:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:135:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      | ~~~~                               ^
      | auto                                                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:50: warning: 2 adjacent parameters of 'removeAntenna' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:69: note: the first parameter in the range is 'vehicle_id'
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                     ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:139:100: note: the last parameter in the range is 'antenna_id'
  139 | bool FGCom_VehicleDynamicsManager::removeAntenna(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                                                    ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:140:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  140 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:142:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  142 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:143:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  143 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:147:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:148:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:147:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:147:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:149:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  149 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:152:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:152:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:156:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  156 |     it->second.antennas.erase(antenna_it);
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:157:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:157:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:157:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      | ~~~~                               ^
      | auto
  162 |                                                            const fgcom_antenna_orientation& orientation) {
      |                                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:61: warning: 2 adjacent parameters of 'updateAntennaOrientation' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:80: note: the first parameter in the range is 'vehicle_id'
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                                ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:161:111: note: the last parameter in the range is 'antenna_id'
  161 | bool FGCom_VehicleDynamicsManager::updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                                                               ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:163:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  163 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:165:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  165 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:166:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:170:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:171:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:170:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:170:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:172:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:175:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  175 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:175:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  175 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:179:5: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  179 |     *antenna_it = orientation;
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:179:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  179 |     *antenna_it = orientation;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: resolves to this declaration
   57 | struct fgcom_antenna_orientation {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:180:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:180:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:180:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:181:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:181:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:181:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      | ~~~~                               ^
      | auto
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:50: warning: 2 adjacent parameters of 'rotateAntenna' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:69: note: the first parameter in the range is 'vehicle_id'
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                     ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:185:100: note: the last parameter in the range is 'antenna_id'
  185 | bool FGCom_VehicleDynamicsManager::rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                                                    ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:186:49: warning: 2 adjacent parameters of 'rotateAntenna' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:186:55: note: the first parameter in the range is 'target_azimuth'
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                       ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:186:77: note: the last parameter in the range is 'target_elevation'
  186 |                                                 float target_azimuth, float target_elevation, bool immediate) {
      |                                                                             ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:187:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  187 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:189:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  189 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:190:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:194:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:195:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:194:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:194:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:196:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  196 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:199:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:199:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:204:5: warning: if with identical then and else branches [bugprone-branch-clone]
  204 |     if (immediate) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:207:7: note: else branch starts here
  207 |     } else {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:205:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  205 |         antenna_it->azimuth_deg = normalizeAngle(target_azimuth);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:37: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:47: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^   ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:54: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:63: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:206:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  206 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^   ~
      |                                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:210:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  210 |         antenna_it->azimuth_deg = normalizeAngle(target_azimuth);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:19: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:37: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:47: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                               ^   ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:54: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:63: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:211:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  211 |         antenna_it->elevation_deg = std::max(-90.0f, std::min(90.0f, target_elevation));
      |                                                               ^   ~
      |                                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:214:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  214 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:214:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  214 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:214:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  214 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:215:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:215:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:215:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:219:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  219 | VehicleDynamicsResponse FGCom_VehicleDynamicsManager::getVehicleDynamics(const std::string& vehicle_id) {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:219:55: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 | VehicleDynamicsResponse FGCom_VehicleDynamicsManager::getVehicleDynamics(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                    -> VehicleDynamicsResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:222:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  222 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:224:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  224 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:225:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:226:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |         response.message = "Vehicle not found";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:231:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |     response.dynamics = it->second;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: resolves to this declaration
   73 | struct fgcom_vehicle_dynamics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:231:27: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |     response.dynamics = it->second;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:232:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  232 |     response.message = "Vehicle dynamics retrieved successfully";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:236:51: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  236 | VehicleListResponse FGCom_VehicleDynamicsManager::getAllVehicles() {
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:236:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  236 | VehicleListResponse FGCom_VehicleDynamicsManager::getAllVehicles() {
      | ~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                               -> VehicleListResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:239:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  239 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:242:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  242 |     response.message = "Vehicle list retrieved successfully";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  244 |     for (const auto& vehicle : vehicles) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  244 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  244 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:244:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  244 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:246:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  246 |         response.vehicle_types[vehicle.first] = vehicle.second.position.vehicle_type;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:246:47: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  246 |         response.vehicle_types[vehicle.first] = vehicle.second.position.vehicle_type;
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:247:32: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  247 |         response.vehicle_status[vehicle.first] = vehicle.second.status;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:247:48: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  247 |         response.vehicle_status[vehicle.first] = vehicle.second.status;
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:253:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
    7 | std::vector<fgcom_antenna_orientation> FGCom_VehicleDynamicsManager::getVehicleAntennas(const std::string& vehicle_id) {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:253:70: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  253 | std::vector<fgcom_antenna_orientation> FGCom_VehicleDynamicsManager::getVehicleAntennas(const std::string& vehicle_id) {
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:253:70: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  253 | std::vector<fgcom_antenna_orientation> FGCom_VehicleDynamicsManager::getVehicleAntennas(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                                   -> std::vector<fgcom_antenna_orientation>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:254:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  254 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:256:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  256 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:257:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  257 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:258:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  258 |         return std::vector<fgcom_antenna_orientation>();
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:261:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  261 |     return it->second.antennas;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:264:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  264 | fgcom_vehicle_position FGCom_VehicleDynamicsManager::getVehiclePosition(const std::string& vehicle_id) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:264:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 | fgcom_vehicle_position FGCom_VehicleDynamicsManager::getVehiclePosition(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                   -> fgcom_vehicle_position
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:265:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  265 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:267:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  267 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:268:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:269:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  269 |         return fgcom_vehicle_position(); // Return default position
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:272:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     return it->second.position;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:275:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  275 | fgcom_vehicle_attitude FGCom_VehicleDynamicsManager::getVehicleAttitude(const std::string& vehicle_id) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:275:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  275 | fgcom_vehicle_attitude FGCom_VehicleDynamicsManager::getVehicleAttitude(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                   -> fgcom_vehicle_attitude
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:276:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  276 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:278:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  278 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:279:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  279 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:280:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  280 |         return fgcom_vehicle_attitude(); // Return default attitude
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:283:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  283 |     return it->second.attitude;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:286:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  286 | fgcom_vehicle_velocity FGCom_VehicleDynamicsManager::getVehicleVelocity(const std::string& vehicle_id) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:286:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  286 | fgcom_vehicle_velocity FGCom_VehicleDynamicsManager::getVehicleVelocity(const std::string& vehicle_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                   -> fgcom_vehicle_velocity
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:287:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  287 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:289:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  289 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:290:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  290 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:291:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  291 |         return fgcom_vehicle_velocity(); // Return default velocity
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:294:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  294 |     return it->second.velocity;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:297:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  297 | AntennaRotationResponse FGCom_VehicleDynamicsManager::calculateAntennaRotation(const AntennaRotationRequest& request) {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:297:55: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  297 | AntennaRotationResponse FGCom_VehicleDynamicsManager::calculateAntennaRotation(const AntennaRotationRequest& request) {
      | ~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                                  -> AntennaRotationResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:300:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  300 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:302:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  302 |     auto it = vehicles.find(request.vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:303:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  303 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:304:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  304 |         response.message = "Vehicle not found";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:308:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:309:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:308:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:308:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:310:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  310 |                                       return antenna.antenna_id == request.antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:313:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  313 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:313:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  313 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:314:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |         response.message = "Antenna not found";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:320:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  320 |     response.current_orientation = *antenna_it;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: resolves to this declaration
   57 | struct fgcom_antenna_orientation {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:320:36: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  320 |     response.current_orientation = *antenna_it;
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:323:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  323 |         response.estimated_arrival_time_sec = 0.0f;
      |                                               ^  ~
      |                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:324:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  324 |         response.message = "Antenna rotation completed immediately";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:327:9: warning: variable 'azimuth_diff' of type 'float' can be declared 'const' [misc-const-correctness]
  327 |         float azimuth_diff = std::abs(normalizeAngle(request.target_azimuth_deg - antenna_it->azimuth_deg));
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:327:30: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  327 |         float azimuth_diff = std::abs(normalizeAngle(request.target_azimuth_deg - antenna_it->azimuth_deg));
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:327:93: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  327 |         float azimuth_diff = std::abs(normalizeAngle(request.target_azimuth_deg - antenna_it->azimuth_deg));
      |                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:328:9: warning: variable 'elevation_diff' of type 'float' can be declared 'const' [misc-const-correctness]
  328 |         float elevation_diff = std::abs(request.target_elevation_deg - antenna_it->elevation_deg);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:328:32: warning: 'abs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |         float elevation_diff = std::abs(request.target_elevation_deg - antenna_it->elevation_deg);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_abs.h:75:3: note: resolves to this declaration
   75 |   abs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:328:82: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |         float elevation_diff = std::abs(request.target_elevation_deg - antenna_it->elevation_deg);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:330:9: warning: variable 'total_rotation_deg' of type 'float' can be declared 'const' [misc-const-correctness]
  330 |         float total_rotation_deg = std::sqrt(azimuth_diff * azimuth_diff + elevation_diff * elevation_diff);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:330:36: warning: 'sqrt' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |         float total_rotation_deg = std::sqrt(azimuth_diff * azimuth_diff + elevation_diff * elevation_diff);
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/cmath:438:3: note: resolves to this declaration
  438 |   sqrt(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:331:78: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  331 |         response.estimated_arrival_time_sec = total_rotation_deg / antenna_it->rotation_speed_deg_per_sec;
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:332:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |         response.message = "Antenna rotation calculated successfully";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:56: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:56: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                                             -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:94: warning: 2 adjacent parameters of 'getVehiclesInRange' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:101: note: the first parameter in the range is 'center_lon'
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                                     ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:119: note: the last parameter in the range is 'radius_km'
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                                                       ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:338:113: note: 'double' and 'float' may be implicitly converted
  338 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesInRange(double center_lat, double center_lon, float radius_km) {
      |                                                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:341:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  341 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  343 |     for (const auto& vehicle : vehicles) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:343:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:344:9: warning: variable 'distance' of type 'float' can be declared 'const' [misc-const-correctness]
  344 |         float distance = calculateDistance(center_lat, center_lon, 
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:356:56: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  356 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesByType(const std::string& vehicle_type) {
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:356:56: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  356 | std::vector<std::string> FGCom_VehicleDynamicsManager::getVehiclesByType(const std::string& vehicle_type) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                                                      -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:359:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  359 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  361 |     for (const auto& vehicle : vehicles) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  361 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  361 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:361:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  361 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:362:50: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  362 |         if (vehicle.second.position.vehicle_type == vehicle_type) {
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      | ~~~~                               ^
      | auto
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:55: warning: 3 adjacent parameters of 'enableAutoTracking' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:370:74: note: the first parameter in the range is 'vehicle_id'
  370 | bool FGCom_VehicleDynamicsManager::enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |                                                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:371:73: note: the last parameter in the range is 'target_vehicle_id'
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                                         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:371:73: warning: parameter 'target_vehicle_id' is unused [misc-unused-parameters]
  371 |                                                      const std::string& target_vehicle_id) {
      |                                                                         ^~~~~~~~~~~~~~~~~
      |                                                                          /*target_vehicle_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:372:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  372 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:374:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  374 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:375:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  375 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:379:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:380:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  379 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:379:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  379 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:379:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  379 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:381:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  381 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:384:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:384:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:389:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  389 |     antenna_it->is_auto_tracking = true;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:390:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  390 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:390:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  390 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:390:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  390 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:391:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  391 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:391:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  391 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:391:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  391 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      | ~~~~                               ^
      | auto                                                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:56: warning: 2 adjacent parameters of 'disableAutoTracking' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:75: note: the first parameter in the range is 'vehicle_id'
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                           ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:396:106: note: the last parameter in the range is 'antenna_id'
  396 | bool FGCom_VehicleDynamicsManager::disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id) {
      |                                                                                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:397:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  397 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:399:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  399 |     auto it = vehicles.find(vehicle_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:400:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  400 |     if (it == vehicles.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:315:7: note: resolves to this declaration
  315 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:404:23: warning: 'find_if<__gnu_cxx::__normal_iterator<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>, (lambda at /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:405:35)>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  404 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3914:5: note: resolves to this declaration
 3914 |     find_if(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:404:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  404 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:404:67: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  404 |     auto antenna_it = std::find_if(it->second.antennas.begin(), it->second.antennas.end(),
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:406:65: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  406 |                                       return antenna.antenna_id == antenna_id;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:409:20: warning: 'operator==<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  409 |     if (antenna_it == it->second.antennas.end()) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1225:5: note: resolves to this declaration
 1225 |     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:409:25: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  409 |     if (antenna_it == it->second.antennas.end()) {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:413:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  413 |     antenna_it->is_auto_tracking = false;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:414:15: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1104:7: note: resolves to this declaration
 1104 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:414:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:414:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     antenna_it->timestamp = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:415:7: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     it->second.last_update = std::chrono::system_clock::now();
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:415:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     it->second.last_update = std::chrono::system_clock::now();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:415:30: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     it->second.last_update = std::chrono::system_clock::now();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:420:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  420 | bool FGCom_VehicleDynamicsManager::updateAutoTracking() {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:420:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  420 | bool FGCom_VehicleDynamicsManager::updateAutoTracking() {
      | ~~~~                               ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:421:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  421 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:425:24: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     for (auto& vehicle : vehicles) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:425:24: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     for (auto& vehicle : vehicles) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:425:24: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     for (auto& vehicle : vehicles) {
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:28: warning: 'operator!=<fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:426:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  426 |         for (auto& antenna : vehicle.second.antennas) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:430:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  430 |                 antenna.timestamp = std::chrono::system_clock::now();
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:430:37: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  430 |                 antenna.timestamp = std::chrono::system_clock::now();
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:439:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  439 | void FGCom_VehicleDynamicsManager::cleanupInactiveVehicles() {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:440:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  440 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:442:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  442 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:443:33: warning: no header providing "std::chrono::seconds" is directly included [misc-include-cleaner]
  443 |     auto timeout = std::chrono::seconds(cleanup_interval_seconds);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:445:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  445 |     auto it = vehicles.begin();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:446:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  446 |     while (it != vehicles.end()) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:446:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'it' and may cause performance degradation [altera-id-dependent-backward-branch]
  446 |     while (it != vehicles.end()) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:445:5: note: inferred assignment of ID-dependent value from ID-dependent 
  445 |     auto it = vehicles.begin();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:446:15: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  446 |     while (it != vehicles.end()) {
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:447:17: warning: 'operator-<std::chrono::system_clock, std::chrono::duration<long, std::ratio<1, 1000000000>>, std::chrono::duration<long, std::ratio<1, 1000000000>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |         if (now - it->second.last_update > timeout) {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1141:7: note: resolves to this declaration
 1141 |       operator-(const time_point<_Clock, _Dur1>& __lhs,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:447:21: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |         if (now - it->second.last_update > timeout) {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:447:42: warning: 'operator><long, std::ratio<1, 1000000000>, long, std::ratio<1>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  447 |         if (now - it->second.last_update > timeout) {
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:862:7: note: resolves to this declaration
  862 |       operator>(const duration<_Rep1, _Period1>& __lhs,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:448:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  448 |             it = vehicles.erase(it);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:256:12: note: resolves to this declaration
  256 |     struct _Rb_tree_iterator
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:450:13: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  450 |             ++it;
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:454:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  454 |     last_cleanup = now;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:457:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  457 | void FGCom_VehicleDynamicsManager::setAutoCleanup(bool enabled, int interval_seconds) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:462:6: warning: no header providing "std::map" is directly included [misc-include-cleaner]
    5 | std::map<std::string, std::string> FGCom_VehicleDynamicsManager::getSystemStatus() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:462:66: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  462 | std::map<std::string, std::string> FGCom_VehicleDynamicsManager::getSystemStatus() {
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:462:66: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  462 | std::map<std::string, std::string> FGCom_VehicleDynamicsManager::getSystemStatus() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                               ^
      | auto                                                                               -> std::map<std::string, std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:465:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  465 |     std::lock_guard<std::mutex> lock(vehicles_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:32: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4204:3: note: resolves to this declaration
 4204 |   to_string(unsigned long __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:467:37: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  467 |     status["total_vehicles"] = std::to_string(vehicles.size());
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:468:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  468 |     status["auto_cleanup_enabled"] = auto_cleanup_enabled ? "true" : "false";
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:468:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  468 |     status["auto_cleanup_enabled"] = auto_cleanup_enabled ? "true" : "false";
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:468:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  468 |     status["auto_cleanup_enabled"] = auto_cleanup_enabled ? "true" : "false";
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:40: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:42: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:469:47: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  469 |     status["cleanup_interval_seconds"] = std::to_string(cleanup_interval_seconds);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:473:5: warning: variable 'rotatable_antennas' of type 'int' can be declared 'const' [misc-const-correctness]
  473 |     int rotatable_antennas = 0;
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:476:30: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  476 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:476:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  476 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
  277 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:476:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  476 |     for (const auto& vehicle : vehicles) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
  285 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:477:35: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  477 |         if (vehicle.second.status == "active") {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:481:27: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  481 |         total_antennas += vehicle.second.antennas.size();
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:34: warning: 'operator!=<const fgcom_antenna_orientation *, std::vector<fgcom_antenna_orientation>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:34: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:483:34: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |         for (const auto& antenna : vehicle.second.antennas) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:490:33: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  490 |     status["active_vehicles"] = std::to_string(active_vehicles);
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:491:32: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     status["total_antennas"] = std::to_string(total_antennas);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:492:36: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  492 |     status["rotatable_antennas"] = std::to_string(rotatable_antennas);
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:11: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:38: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:493:40: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |     status["auto_tracking_antennas"] = std::to_string(auto_tracking_antennas);
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:498:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  498 | void FGCom_VehicleDynamicsManager::setDefaultRotationSpeed(float deg_per_sec) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:503:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  503 | void FGCom_VehicleDynamicsManager::setMagneticDeclinationSource(const std::string& source) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:507:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  507 | void FGCom_VehicleDynamicsManager::setManualMagneticDeclination(float declination_deg) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      | ~~~~~                               ^
      | auto                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:37: warning: method 'calculateMagneticDeclination' can be made static [readability-convert-member-functions-to-static]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:66: warning: 2 adjacent parameters of 'calculateMagneticDeclination' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                  ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:73: note: the first parameter in the range is 'lat'
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                         ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:85: note: the last parameter in the range is 'lon'
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                                     ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:512:85: warning: parameter 'lon' is unused [misc-unused-parameters]
  512 | float FGCom_VehicleDynamicsManager::calculateMagneticDeclination(double lat, double lon) {
      |                                                                                     ^~~
      |                                                                                      /*lon*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:516:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  516 |     return lat * 0.1f; // Very rough approximation
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:516:18: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  516 |     return lat * 0.1f; // Very rough approximation
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:516:18: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  516 |     return lat * 0.1f; // Very rough approximation
      |                  ^  ~
      |                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:519:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  519 | void FGCom_VehicleDynamicsManager::transformAttitudeToAntennaOrientation(const fgcom_vehicle_attitude& attitude,
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:524:30: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  524 |     if (antenna.antenna_type == "yagi" || antenna.antenna_type == "dipole") {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:524:64: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  524 |     if (antenna.antenna_type == "yagi" || antenna.antenna_type == "dipole") {
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:33: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:43: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                           ^   ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:50: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:59: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:527:59: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  527 |         antenna.elevation_deg = std::max(-90.0f, std::min(90.0f, 
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:533:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  533 | float FGCom_VehicleDynamicsManager::normalizeAngle(float angle_deg) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:533:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  533 | float FGCom_VehicleDynamicsManager::normalizeAngle(float angle_deg) {
      | ~~~~~                               ^
      | auto                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:533:37: warning: method 'normalizeAngle' can be made static [readability-convert-member-functions-to-static]
  533 | float FGCom_VehicleDynamicsManager::normalizeAngle(float angle_deg) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:24: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                        ^  ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                             ^                    
      |                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:43: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:534:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  534 |     while (angle_deg < 0.0f) angle_deg += 360.0f;
      |                                           ^    ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:25: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                         ^    ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                ^                    
      |                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:46: warning: 360.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:535:46: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  535 |     while (angle_deg >= 360.0f) angle_deg -= 360.0f;
      |                                              ^    ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      | ~~~~~                               ^
      | auto                                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:37: warning: method 'calculateDistance' can be made static [readability-convert-member-functions-to-static]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:55: warning: 2 adjacent parameters of 'calculateDistance' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                       ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:62: note: the first parameter in the range is 'lat1'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                              ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:75: note: the last parameter in the range is 'lon1'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:81: warning: 2 adjacent parameters of 'calculateDistance' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:88: note: the first parameter in the range is 'lat2'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:539:101: note: the last parameter in the range is 'lon2'
  539 | float FGCom_VehicleDynamicsManager::calculateDistance(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                                     ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:541:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  541 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:542:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  542 |     double dlon = (lon2 - lon1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:544:5: warning: variable 'a' of type 'double' can be declared 'const' [misc-const-correctness]
  544 |     double a = std::sin(dlat/2) * std::sin(dlat/2) +
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:544:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  544 |     double a = std::sin(dlat/2) * std::sin(dlat/2) +
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:548:5: warning: variable 'c' of type 'double' can be declared 'const' [misc-const-correctness]
  548 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:548:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  548 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:550:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  550 |     return EARTH_RADIUS_KM * c;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      | ~~~~~                               ^
      | auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:54: warning: 2 adjacent parameters of 'calculateBearing' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                      ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:61: note: the first parameter in the range is 'lat1'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                             ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:74: note: the last parameter in the range is 'lon1'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                          ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:80: warning: 2 adjacent parameters of 'calculateBearing' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:87: note: the first parameter in the range is 'lat2'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                       ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:553:100: note: the last parameter in the range is 'lon2'
  553 | float FGCom_VehicleDynamicsManager::calculateBearing(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:555:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  555 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:555:12: warning: Value stored to 'dlat' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  555 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |            ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:555:12: note: Value stored to 'dlat' during its initialization is never read
  555 |     double dlat = (lat2 - lat1) * DEG_TO_RAD;
      |            ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:556:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  556 |     double dlon = (lon2 - lon1) * DEG_TO_RAD;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:558:5: warning: variable 'y' of type 'double' can be declared 'const' [misc-const-correctness]
  558 |     double y = std::sin(dlon) * std::cos(lat2 * DEG_TO_RAD);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:558:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  558 |     double y = std::sin(dlon) * std::cos(lat2 * DEG_TO_RAD);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:559:5: warning: variable 'x' of type 'double' can be declared 'const' [misc-const-correctness]
  559 |     double x = std::cos(lat1 * DEG_TO_RAD) * std::sin(lat2 * DEG_TO_RAD) -
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:559:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  559 |     double x = std::cos(lat1 * DEG_TO_RAD) * std::sin(lat2 * DEG_TO_RAD) -
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:562:5: warning: variable 'bearing' of type 'double' can be declared 'const' [misc-const-correctness]
  562 |     double bearing = std::atan2(y, x) * RAD_TO_DEG;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:563:27: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  563 |     return normalizeAngle(bearing);
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:567:6: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  567 | bool initializeVehicleDynamicsManager() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:567:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  567 | bool initializeVehicleDynamicsManager() {
      | ~~~~ ^
      | auto                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:572:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |     g_vehicle_dynamics_manager = std::make_unique<FGCom_VehicleDynamicsManager>();
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:572:34: warning: 'make_unique<FGCom_VehicleDynamicsManager>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |     g_vehicle_dynamics_manager = std::make_unique<FGCom_VehicleDynamicsManager>();
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:572:39: warning: no header providing "std::make_unique" is directly included [misc-include-cleaner]
  572 |     g_vehicle_dynamics_manager = std::make_unique<FGCom_VehicleDynamicsManager>();
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:576:6: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  576 | void shutdownVehicleDynamicsManager() {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.cpp:577:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  577 |     g_vehicle_dynamics_manager.reset();
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:505:13: note: default parameter was declared here
  505 |       reset(pointer __p = pointer()) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_VEHICLE_DYNAMICS_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_VEHICLE_DYNAMICS_H
    2 | #define FGCOM_VEHICLE_DYNAMICS_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_VEHICLE_DYNAMICS_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:5:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:6:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <map>
      | ^~~~~~~~~~~~~~
    7 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:7:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:9:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
   10 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:12:8: warning: accessing fields in struct 'fgcom_vehicle_attitude' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   12 | struct fgcom_vehicle_attitude {
      |        ^
   13 |     float pitch_deg;        // Pitch angle in degrees (-90 to +90)
   14 |     float roll_deg;         // Roll angle in degrees (-180 to +180)
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
   22 |         timestamp = std::chrono::system_clock::now();
   23 |     }
   24 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:12:8: note: use "__attribute__((aligned(32)))" to align struct 'fgcom_vehicle_attitude' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:13:11: warning: use default member initializer for 'pitch_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   13 |     float pitch_deg;        // Pitch angle in degrees (-90 to +90)
      |           ^        
      |                    {0.0f}
   14 |     float roll_deg;         // Roll angle in degrees (-180 to +180)
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                ~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:13:11: warning: member variable 'pitch_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:14:11: warning: use default member initializer for 'roll_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   14 |     float roll_deg;         // Roll angle in degrees (-180 to +180)
      |           ^       
      |                   {0.0f}
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                 ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:14:11: warning: member variable 'roll_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:15:11: warning: use default member initializer for 'yaw_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   15 |     float yaw_deg;          // Yaw angle in degrees (0 to 360, true heading)
      |           ^      
      |                  {0.0f}
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                                 ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:15:11: warning: member variable 'yaw_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:16:11: warning: use default member initializer for 'magnetic_heading_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   16 |     float magnetic_heading_deg; // Magnetic heading in degrees (0 to 360)
      |           ^                   
      |                               {0.0f}
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:16:11: warning: member variable 'magnetic_heading_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:17:11: warning: use default member initializer for 'magnetic_declination_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   17 |     float magnetic_declination_deg; // Magnetic declination at current location
      |           ^                       
      |                                   {0.0f}
   18 |     std::chrono::system_clock::time_point timestamp;
   19 |     
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:17:11: warning: member variable 'magnetic_declination_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:18:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   18 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:5: warning: 'fgcom_vehicle_attitude' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:58: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:20:73: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     fgcom_vehicle_attitude() : pitch_deg(0.0f), roll_deg(0.0f), yaw_deg(0.0f), 
      |                                                                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:21:52: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:21:84: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |                               magnetic_heading_deg(0.0f), magnetic_declination_deg(0.0f) {
      |                                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:22:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   22 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:22:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   22 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:26:8: warning: accessing fields in struct 'fgcom_vehicle_velocity' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   26 | struct fgcom_vehicle_velocity {
      |        ^
   27 |     float speed_knots;      // Speed in knots
   28 |     float speed_kmh;        // Speed in km/h
   29 |     float speed_ms;         // Speed in m/s
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
   37 |         timestamp = std::chrono::system_clock::now();
   38 |     }
   39 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:26:8: note: use "__attribute__((aligned(32)))" to align struct 'fgcom_vehicle_velocity' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:27:11: warning: use default member initializer for 'speed_knots' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   27 |     float speed_knots;      // Speed in knots
      |           ^          
      |                      {0.0f}
   28 |     float speed_kmh;        // Speed in km/h
   29 |     float speed_ms;         // Speed in m/s
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                ~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:27:11: warning: member variable 'speed_knots' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:28:11: warning: use default member initializer for 'speed_kmh' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   28 |     float speed_kmh;        // Speed in km/h
      |           ^        
      |                    {0.0f}
   29 |     float speed_ms;         // Speed in m/s
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                   ~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:28:11: warning: member variable 'speed_kmh' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:29:11: warning: use default member initializer for 'speed_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   29 |     float speed_ms;         // Speed in m/s
      |           ^       
      |                   {0.0f}
   30 |     float course_deg;       // Course over ground in degrees (0-360)
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                                    ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:29:11: warning: member variable 'speed_ms' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:30:11: warning: use default member initializer for 'course_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   30 |     float course_deg;       // Course over ground in degrees (0-360)
      |           ^         
      |                     {0.0f}
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                               ~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:30:11: warning: member variable 'course_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:31:11: warning: use default member initializer for 'vertical_speed_fpm' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   31 |     float vertical_speed_fpm; // Vertical speed in feet per minute
      |           ^                 
      |                             {0.0f}
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:31:11: warning: member variable 'vertical_speed_fpm' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:32:11: warning: use default member initializer for 'vertical_speed_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   32 |     float vertical_speed_ms;  // Vertical speed in m/s
      |           ^                
      |                            {0.0f}
   33 |     std::chrono::system_clock::time_point timestamp;
   34 |     
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                                           ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:32:11: warning: member variable 'vertical_speed_ms' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:33:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:5: warning: 'fgcom_vehicle_velocity' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:61: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:35:77: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |     fgcom_vehicle_velocity() : speed_knots(0.0f), speed_kmh(0.0f), speed_ms(0.0f),
      |                                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:36:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:36:68: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:36:93: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   36 |                               course_deg(0.0f), vertical_speed_fpm(0.0f), vertical_speed_ms(0.0f) {
      |                                                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:37:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   37 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:37:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   37 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: warning: accessing fields in struct 'fgcom_vehicle_position' is inefficient due to padding; only needs 100 bytes but is using 104 bytes [altera-struct-pack-align]
   41 | struct fgcom_vehicle_position {
      |        ^
   42 |     double latitude;        // Latitude in decimal degrees
   43 |     double longitude;       // Longitude in decimal degrees
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
   53 |         timestamp = std::chrono::system_clock::now();
   54 |     }
   55 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_vehicle_position'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: warning: accessing fields in struct 'fgcom_vehicle_position' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   41 | struct fgcom_vehicle_position {
      |        ^
   42 |     double latitude;        // Latitude in decimal degrees
   43 |     double longitude;       // Longitude in decimal degrees
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
   53 |         timestamp = std::chrono::system_clock::now();
   54 |     }
   55 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:41:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_vehicle_position' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:42:12: warning: use default member initializer for 'latitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   42 |     double latitude;        // Latitude in decimal degrees
      |            ^       
      |                    {0.0}
   43 |     double longitude;       // Longitude in decimal degrees
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:42:12: warning: member variable 'latitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:43:12: warning: use default member initializer for 'longitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   43 |     double longitude;       // Longitude in decimal degrees
      |            ^        
      |                     {0.0}
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                               ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:43:12: warning: member variable 'longitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:44:11: warning: use default member initializer for 'altitude_ft_msl' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   44 |     float altitude_ft_msl;  // Altitude in feet MSL
      |           ^              
      |                          {0.0f}
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                                               ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:44:11: warning: member variable 'altitude_ft_msl' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:45:11: warning: use default member initializer for 'altitude_ft_agl' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   45 |     float altitude_ft_agl;  // Altitude in feet AGL
      |           ^              
      |                          {0.0f}
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                               ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:45:11: warning: member variable 'altitude_ft_agl' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:46:11: warning: use default member initializer for 'ground_elevation_ft' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   46 |     float ground_elevation_ft; // Ground elevation in feet MSL
      |           ^                  
      |                              {0.0f}
   47 |     std::string callsign;   // Vehicle callsign
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
   49 |     std::chrono::system_clock::time_point timestamp;
   50 |     
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:46:11: warning: member variable 'ground_elevation_ft' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:47:17: warning: member variable 'callsign' has public visibility [misc-non-private-member-variables-in-classes]
   47 |     std::string callsign;   // Vehicle callsign
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:48:17: warning: member variable 'vehicle_type' has public visibility [misc-non-private-member-variables-in-classes]
   48 |     std::string vehicle_type; // "aircraft", "boat", "ship", "vehicle", "ground_station"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:49:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   49 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:51:5: warning: 'fgcom_vehicle_position' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:51:79: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |     fgcom_vehicle_position() : latitude(0.0), longitude(0.0), altitude_ft_msl(0.0f),
      |                                                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:52:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:52:74: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   52 |                               altitude_ft_agl(0.0f), ground_elevation_ft(0.0f) {
      |                                                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:53:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:53:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: warning: accessing fields in struct 'fgcom_antenna_orientation' is inefficient due to padding; only needs 85 bytes but is using 88 bytes [altera-struct-pack-align]
   57 | struct fgcom_antenna_orientation {
      |        ^
   58 |     std::string antenna_id;     // Unique antenna identifier
   59 |     std::string antenna_type;   // "yagi", "dipole", "vertical", "loop", "whip"
   60 |     float azimuth_deg;          // Azimuth pointing direction (0-360)
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
   69 |         timestamp = std::chrono::system_clock::now();
   70 |     }
   71 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_antenna_orientation'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: warning: accessing fields in struct 'fgcom_antenna_orientation' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   57 | struct fgcom_antenna_orientation {
      |        ^
   58 |     std::string antenna_id;     // Unique antenna identifier
   59 |     std::string antenna_type;   // "yagi", "dipole", "vertical", "loop", "whip"
   60 |     float azimuth_deg;          // Azimuth pointing direction (0-360)
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
   69 |         timestamp = std::chrono::system_clock::now();
   70 |     }
   71 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:57:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_antenna_orientation' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:58:17: warning: member variable 'antenna_id' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string antenna_id;     // Unique antenna identifier
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:59:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     std::string antenna_type;   // "yagi", "dipole", "vertical", "loop", "whip"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:60:11: warning: use default member initializer for 'azimuth_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   60 |     float azimuth_deg;          // Azimuth pointing direction (0-360)
      |           ^          
      |                      {0.0f}
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                   ~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:60:11: warning: member variable 'azimuth_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:61:11: warning: use default member initializer for 'elevation_deg' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   61 |     float elevation_deg;        // Elevation angle (-90 to +90)
      |           ^            
      |                        {0.0f}
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                                      ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:61:11: warning: member variable 'elevation_deg' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:62:10: warning: use default member initializer for 'is_auto_tracking' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   62 |     bool is_auto_tracking;      // Is auto-tracking enabled?
      |          ^               
      |                          {false}
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:62:10: warning: member variable 'is_auto_tracking' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:63:11: warning: use default member initializer for 'rotation_speed_deg_per_sec' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   63 |     float rotation_speed_deg_per_sec; // Rotation speed for motorized antennas
      |           ^                         
      |                                     {0.0f}
   64 |     std::chrono::system_clock::time_point timestamp;
   65 |     
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
   67 |                                  is_auto_tracking(false),
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:63:11: warning: member variable 'rotation_speed_deg_per_sec' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:64:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:66:5: warning: 'fgcom_antenna_orientation' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:66:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:66:68: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   66 |     fgcom_antenna_orientation() : azimuth_deg(0.0f), elevation_deg(0.0f),
      |                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:68:61: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   68 |                                  rotation_speed_deg_per_sec(0.0f) {
      |                                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:69:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:69:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: warning: accessing fields in struct 'fgcom_vehicle_dynamics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   73 | struct fgcom_vehicle_dynamics {
      |        ^
   74 |     fgcom_vehicle_position position;
   75 |     fgcom_vehicle_attitude attitude;
   76 |     fgcom_vehicle_velocity velocity;
   77 |     std::vector<fgcom_antenna_orientation> antennas;
   78 |     std::string vehicle_id;     // Unique vehicle identifier
   79 |     std::string status;         // "active", "inactive", "maintenance"
   80 |     std::chrono::system_clock::time_point last_update;
   81 |     
   82 |     fgcom_vehicle_dynamics() : status("active") {
   83 |         last_update = std::chrono::system_clock::now();
   84 |     }
   85 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:73:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_vehicle_dynamics' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:74:28: warning: member variable 'position' has public visibility [misc-non-private-member-variables-in-classes]
   74 |     fgcom_vehicle_position position;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:75:28: warning: member variable 'attitude' has public visibility [misc-non-private-member-variables-in-classes]
   75 |     fgcom_vehicle_attitude attitude;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:76:28: warning: member variable 'velocity' has public visibility [misc-non-private-member-variables-in-classes]
   76 |     fgcom_vehicle_velocity velocity;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:77:44: warning: member variable 'antennas' has public visibility [misc-non-private-member-variables-in-classes]
   77 |     std::vector<fgcom_antenna_orientation> antennas;
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:78:17: warning: member variable 'vehicle_id' has public visibility [misc-non-private-member-variables-in-classes]
   78 |     std::string vehicle_id;     // Unique vehicle identifier
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:79:17: warning: member variable 'status' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     std::string status;         // "active", "inactive", "maintenance"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:80:43: warning: member variable 'last_update' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     std::chrono::system_clock::time_point last_update;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:82:5: warning: 'fgcom_vehicle_dynamics' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   82 |     fgcom_vehicle_dynamics() : status("active") {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:82:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   82 |     fgcom_vehicle_dynamics() : status("active") {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:83:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |         last_update = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:83:23: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |         last_update = std::chrono::system_clock::now();
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: warning: accessing fields in struct 'VehicleDynamicsRequest' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
   88 | struct VehicleDynamicsRequest {
      |        ^
   89 |     std::string vehicle_id;
   90 |     bool include_attitude = true;
   91 |     bool include_velocity = true;
   92 |     bool include_antennas = true;
   93 |     bool include_position = true;
   94 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'VehicleDynamicsRequest'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: warning: accessing fields in struct 'VehicleDynamicsRequest' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   88 | struct VehicleDynamicsRequest {
      |        ^
   89 |     std::string vehicle_id;
   90 |     bool include_attitude = true;
   91 |     bool include_velocity = true;
   92 |     bool include_antennas = true;
   93 |     bool include_position = true;
   94 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:88:8: note: use "__attribute__((aligned(64)))" to align struct 'VehicleDynamicsRequest' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: warning: accessing fields in struct 'VehicleDynamicsResponse' is inefficient due to padding; only needs 305 bytes but is using 312 bytes [altera-struct-pack-align]
   96 | struct VehicleDynamicsResponse {
      |        ^
   97 |     bool success;
   98 |     std::string message;
   99 |     fgcom_vehicle_dynamics dynamics;
  100 |     std::chrono::system_clock::time_point timestamp;
  101 |     
  102 |     VehicleDynamicsResponse() : success(false) {
  103 |         timestamp = std::chrono::system_clock::now();
  104 |     }
  105 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'VehicleDynamicsResponse'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: warning: accessing fields in struct 'VehicleDynamicsResponse' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   96 | struct VehicleDynamicsResponse {
      |        ^
   97 |     bool success;
   98 |     std::string message;
   99 |     fgcom_vehicle_dynamics dynamics;
  100 |     std::chrono::system_clock::time_point timestamp;
  101 |     
  102 |     VehicleDynamicsResponse() : success(false) {
  103 |         timestamp = std::chrono::system_clock::now();
  104 |     }
  105 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:96:8: note: use "__attribute__((aligned(128)))" to align struct 'VehicleDynamicsResponse' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:97:10: warning: use default member initializer for 'success' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   97 |     bool success;
      |          ^      
      |                 {false}
   98 |     std::string message;
   99 |     fgcom_vehicle_dynamics dynamics;
  100 |     std::chrono::system_clock::time_point timestamp;
  101 |     
  102 |     VehicleDynamicsResponse() : success(false) {
      |                                 ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:97:10: warning: member variable 'success' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:98:17: warning: member variable 'message' has public visibility [misc-non-private-member-variables-in-classes]
   98 |     std::string message;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:99:28: warning: member variable 'dynamics' has public visibility [misc-non-private-member-variables-in-classes]
   99 |     fgcom_vehicle_dynamics dynamics;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:100:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
  100 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:102:5: warning: 'VehicleDynamicsResponse' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  102 |     VehicleDynamicsResponse() : success(false) {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:103:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:103:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: warning: accessing fields in struct 'AntennaRotationRequest' is inefficient due to padding; only needs 105 bytes but is using 112 bytes [altera-struct-pack-align]
  107 | struct AntennaRotationRequest {
      |        ^
  108 |     std::string vehicle_id;
  109 |     std::string antenna_id;
  110 |     float target_azimuth_deg;
  111 |     float target_elevation_deg;
  112 |     bool immediate = false;     // If false, use rotation speed
  113 |     std::string rotation_mode = "absolute"; // "absolute" or "relative"
  114 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaRotationRequest'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: warning: accessing fields in struct 'AntennaRotationRequest' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  107 | struct AntennaRotationRequest {
      |        ^
  108 |     std::string vehicle_id;
  109 |     std::string antenna_id;
  110 |     float target_azimuth_deg;
  111 |     float target_elevation_deg;
  112 |     bool immediate = false;     // If false, use rotation speed
  113 |     std::string rotation_mode = "absolute"; // "absolute" or "relative"
  114 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:107:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaRotationRequest' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:113:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  113 |     std::string rotation_mode = "absolute"; // "absolute" or "relative"
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: warning: accessing fields in struct 'AntennaRotationResponse' is inefficient due to padding; only needs 133 bytes but is using 144 bytes [altera-struct-pack-align]
  116 | struct AntennaRotationResponse {
      |        ^
  117 |     bool success;
  118 |     std::string message;
  119 |     fgcom_antenna_orientation current_orientation;
  120 |     float estimated_arrival_time_sec;
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
  124 |         timestamp = std::chrono::system_clock::now();
  125 |     }
  126 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaRotationResponse'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: warning: accessing fields in struct 'AntennaRotationResponse' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  116 | struct AntennaRotationResponse {
      |        ^
  117 |     bool success;
  118 |     std::string message;
  119 |     fgcom_antenna_orientation current_orientation;
  120 |     float estimated_arrival_time_sec;
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
  124 |         timestamp = std::chrono::system_clock::now();
  125 |     }
  126 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:116:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaRotationResponse' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:117:10: warning: use default member initializer for 'success' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  117 |     bool success;
      |          ^      
      |                 {false}
  118 |     std::string message;
  119 |     fgcom_antenna_orientation current_orientation;
  120 |     float estimated_arrival_time_sec;
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |                                 ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:117:10: warning: member variable 'success' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:118:17: warning: member variable 'message' has public visibility [misc-non-private-member-variables-in-classes]
  118 |     std::string message;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:119:31: warning: member variable 'current_orientation' has public visibility [misc-non-private-member-variables-in-classes]
  119 |     fgcom_antenna_orientation current_orientation;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:120:11: warning: use default member initializer for 'estimated_arrival_time_sec' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  120 |     float estimated_arrival_time_sec;
      |           ^                         
      |                                     {0.0f}
  121 |     std::chrono::system_clock::time_point timestamp;
  122 |     
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:120:11: warning: member variable 'estimated_arrival_time_sec' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:121:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
  121 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:123:5: warning: 'AntennaRotationResponse' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:123:76: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  123 |     AntennaRotationResponse() : success(false), estimated_arrival_time_sec(0.0f) {
      |                                                                            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:124:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  124 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:124:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  124 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: warning: accessing fields in struct 'VehicleListResponse' is inefficient due to padding; only needs 161 bytes but is using 168 bytes [altera-struct-pack-align]
  128 | struct VehicleListResponse {
      |        ^
  129 |     bool success;
  130 |     std::string message;
  131 |     std::vector<std::string> vehicle_ids;
  132 |     std::map<std::string, std::string> vehicle_types;
  133 |     std::map<std::string, std::string> vehicle_status;
  134 |     std::chrono::system_clock::time_point timestamp;
  135 |     
  136 |     VehicleListResponse() : success(false) {
  137 |         timestamp = std::chrono::system_clock::now();
  138 |     }
  139 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'VehicleListResponse'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: warning: accessing fields in struct 'VehicleListResponse' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  128 | struct VehicleListResponse {
      |        ^
  129 |     bool success;
  130 |     std::string message;
  131 |     std::vector<std::string> vehicle_ids;
  132 |     std::map<std::string, std::string> vehicle_types;
  133 |     std::map<std::string, std::string> vehicle_status;
  134 |     std::chrono::system_clock::time_point timestamp;
  135 |     
  136 |     VehicleListResponse() : success(false) {
  137 |         timestamp = std::chrono::system_clock::now();
  138 |     }
  139 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:128:8: note: use "__attribute__((aligned(128)))" to align struct 'VehicleListResponse' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:129:10: warning: use default member initializer for 'success' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  129 |     bool success;
      |          ^      
      |                 {false}
  130 |     std::string message;
  131 |     std::vector<std::string> vehicle_ids;
  132 |     std::map<std::string, std::string> vehicle_types;
  133 |     std::map<std::string, std::string> vehicle_status;
  134 |     std::chrono::system_clock::time_point timestamp;
  135 |     
  136 |     VehicleListResponse() : success(false) {
      |                             ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:129:10: warning: member variable 'success' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:130:17: warning: member variable 'message' has public visibility [misc-non-private-member-variables-in-classes]
  130 |     std::string message;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:131:30: warning: member variable 'vehicle_ids' has public visibility [misc-non-private-member-variables-in-classes]
  131 |     std::vector<std::string> vehicle_ids;
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:132:40: warning: member variable 'vehicle_types' has public visibility [misc-non-private-member-variables-in-classes]
  132 |     std::map<std::string, std::string> vehicle_types;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:133:40: warning: member variable 'vehicle_status' has public visibility [misc-non-private-member-variables-in-classes]
  133 |     std::map<std::string, std::string> vehicle_status;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:134:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
  134 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:136:5: warning: 'VehicleListResponse' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  136 |     VehicleListResponse() : success(false) {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:137:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:137:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:142:7: warning: class 'FGCom_VehicleDynamicsManager' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  142 | class FGCom_VehicleDynamicsManager {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:142:7: warning: class 'FGCom_VehicleDynamicsManager' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:147:10: warning: use default member initializer for 'auto_cleanup_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  147 |     bool auto_cleanup_enabled;
      |          ^                   
      |                              {true}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:148:9: warning: use default member initializer for 'cleanup_interval_seconds' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  148 |     int cleanup_interval_seconds;
      |         ^                       
      |                                 {300}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:151:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     float calculateMagneticDeclination(double lat, double lon);
      |     ~~~~~ ^                                                   
      |     auto                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:158:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  158 |     float normalizeAngle(float angle_deg);
      |     ~~~~~ ^                              
      |     auto                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:159:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     float calculateDistance(double lat1, double lon1, double lat2, double lon2);
      |     ~~~~~ ^                                                                    
      |     auto                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:160:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     float calculateBearing(double lat1, double lon1, double lat2, double lon2);
      |     ~~~~~ ^                                                                   
      |     auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool registerVehicle(const std::string& vehicle_id, const std::string& vehicle_type);
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:168:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  168 |     bool unregisterVehicle(const std::string& vehicle_id);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:169:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  169 |     bool updateVehiclePosition(const std::string& vehicle_id, const fgcom_vehicle_position& position);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:170:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     bool updateVehicleAttitude(const std::string& vehicle_id, const fgcom_vehicle_attitude& attitude);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:171:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     bool updateVehicleVelocity(const std::string& vehicle_id, const fgcom_vehicle_velocity& velocity);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:172:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  172 |     bool updateVehicleDynamics(const std::string& vehicle_id, const fgcom_vehicle_dynamics& dynamics);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:175:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     bool addAntenna(const std::string& vehicle_id, const fgcom_antenna_orientation& antenna);
      |     ~~~~ ^                                                                                  
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool removeAntenna(const std::string& vehicle_id, const std::string& antenna_id);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:177:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  177 |     bool updateAntennaOrientation(const std::string& vehicle_id, const std::string& antenna_id,
      |     ~~~~ ^
      |     auto
  178 |                                  const fgcom_antenna_orientation& orientation);
      |                                                                               
      |                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:179:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  179 |     bool rotateAntenna(const std::string& vehicle_id, const std::string& antenna_id,
      |     ~~~~ ^
      |     auto
  180 |                       float target_azimuth, float target_elevation, bool immediate = false);
      |                                                                                            
      |                                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:180:69: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  180 |                       float target_azimuth, float target_elevation, bool immediate = false);
      |                                                                     ^              ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:183:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     VehicleDynamicsResponse getVehicleDynamics(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                      -> VehicleDynamicsResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:184:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     VehicleListResponse getAllVehicles();
      |     ~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                 -> VehicleListResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:185:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     std::vector<fgcom_antenna_orientation> getVehicleAntennas(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                                     -> std::vector<fgcom_antenna_orientation>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:186:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     fgcom_vehicle_position getVehiclePosition(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                     -> fgcom_vehicle_position
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:187:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     fgcom_vehicle_attitude getVehicleAttitude(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                     -> fgcom_vehicle_attitude
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:188:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 |     fgcom_vehicle_velocity getVehicleVelocity(const std::string& vehicle_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                     -> fgcom_vehicle_velocity
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:191:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     AntennaRotationResponse calculateAntennaRotation(const AntennaRotationRequest& request);
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                              
      |     auto                                                                                    -> AntennaRotationResponse
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:192:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     std::vector<std::string> getVehiclesInRange(double center_lat, double center_lon, float radius_km);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                        
      |     auto                                                                                               -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:193:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     std::vector<std::string> getVehiclesByType(const std::string& vehicle_type);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                 
      |     auto                                                                        -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:196:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |     bool enableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id,
      |     ~~~~ ^
      |     auto
  197 |                            const std::string& target_vehicle_id);
      |                                                                 
      |                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:198:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 |     bool disableAutoTracking(const std::string& vehicle_id, const std::string& antenna_id);
      |     ~~~~ ^                                                                                
      |     auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:199:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  199 |     bool updateAutoTracking();
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:203:39: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  203 |     void setAutoCleanup(bool enabled, int interval_seconds = 300);
      |                                       ^                    ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:203:62: warning: 300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  203 |     void setAutoCleanup(bool enabled, int interval_seconds = 300);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:204:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     std::map<std::string, std::string> getSystemStatus();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                                 -> std::map<std::string, std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:213:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 |     std::string getVehicleModulationMode(const std::string& vehicle_id);
      |     ~~~~~~~~~~~ ^                                                      
      |     auto                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:214:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     bool validateModulationMode(const std::string& mode);
      |     ~~~~ ^                                              
      |     auto                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:215:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     std::vector<std::string> getSupportedModulationModes();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |     auto                                                   -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:219:54: warning: variable 'g_vehicle_dynamics_manager' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  219 | extern std::unique_ptr<FGCom_VehicleDynamicsManager> g_vehicle_dynamics_manager;
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/vehicle_dynamics.h:222:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 | bool initializeVehicleDynamicsManager();
      | ~~~~ ^                                 
      | auto                                    -> bool
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/predefined_ops.h:158:23: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |         { return bool(_M_comp(*__it1, *__it2)); }
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:216:47: note: resolves to this declaration
  216 |     std::sort(closest.begin(), closest.end(), [](const FGCom_RadiationPattern* a, const FGCom_RadiationPattern* b) {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/predefined_ops.h:196:16: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  196 |         { return bool(_M_comp(*__it, __val)); }
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:216:47: note: resolves to this declaration
  216 |     std::sort(closest.begin(), closest.end(), [](const FGCom_RadiationPattern* a, const FGCom_RadiationPattern* b) {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/predefined_ops.h:240:16: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  240 |         { return bool(_M_comp(__val, *__it)); }
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:216:47: note: resolves to this declaration
  216 |     std::sort(closest.begin(), closest.end(), [](const FGCom_RadiationPattern* a, const FGCom_RadiationPattern* b) {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/predefined_ops.h:318:16: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  318 |         { return bool(_M_pred(*__it)); }
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.cpp:448:23: note: resolves to this declaration
  448 |                       [min_gain_threshold](const FGCom_RadiationPattern& p) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:388:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  388 |               *__result = *__first;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: note: resolves to this declaration
   10 | struct FGCom_RadiationPattern {
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:413:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  413 |               *__result = std::move(*__first);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: note: resolves to this declaration
   10 | struct FGCom_RadiationPattern {
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:2147:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 2147 |             *__result = _GLIBCXX_MOVE(*__first);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: note: resolves to this declaration
   10 | struct FGCom_RadiationPattern {
      |        ^
