/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:19:1: warning: #includes are not sorted properly [llvm-include-order]
   19 | #include <fstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:19:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
   20 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:20:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   20 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:20:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:21:1: warning: system include set not allowed [llvmlibc-restrict-system-libc-headers]
   21 | #include <set>
      | ^~~~~~~~~~~~~~
   22 | #include <iostream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:22:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   22 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
   23 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:23:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   23 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   24 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:24:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   24 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   25 | #include <cctype>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:25:1: warning: system include cctype not allowed [llvmlibc-restrict-system-libc-headers]
   25 | #include <cctype>
      | ^~~~~~~~~~~~~~~~~
   26 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:28:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:28:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
   26 | 
   27 | // Static member definitions
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:28:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:6: warning: no header providing "std::map" is directly included [misc-include-cleaner]
   20 | #include <sstream>
   21 | #include <set>
   22 | #include <iostream>
   23 | #include <algorithm>
   24 | #include <cmath>
   25 | #include <cctype>
   26 | 
   27 | // Static member definitions
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:15: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   26 | 
   27 | // Static member definitions
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:71: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:30:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   30 | std::vector<fgcom_itu_region> FGCom_AmateurRadio::itu_regions;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:30:51: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   30 | std::vector<fgcom_itu_region> FGCom_AmateurRadio::itu_regions;
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:31:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   31 | bool FGCom_AmateurRadio::initialized = false;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 | bool FGCom_AmateurRadio::initialize() {
      | ~~~~                     ^
      | auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:34:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   34 |     if (initialized) return true;
      |                     ^            
      |                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:42:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   42 |     region1.name = "Europe, Africa, Middle East, former USSR";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:43:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     region1.min_lat = -90.0; region1.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:43:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     region1.min_lat = -90.0; region1.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:44:24: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   44 |     region1.min_lon = -180.0; region1.max_lon = 40.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:44:49: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   44 |     region1.min_lon = -180.0; region1.max_lon = 40.0;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:50:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |     region2.name = "Americas";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:51:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     region2.min_lat = -90.0; region2.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:51:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     region2.min_lat = -90.0; region2.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:52:24: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     region2.min_lon = -180.0; region2.max_lon = -20.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:52:50: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     region2.min_lon = -180.0; region2.max_lon = -20.0;
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:58:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     region3.name = "Asia-Pacific";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:59:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     region3.min_lat = -90.0; region3.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:59:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     region3.min_lat = -90.0; region3.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:60:23: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     region3.min_lon = 40.0; region3.max_lon = 180.0;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:60:47: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     region3.min_lon = 40.0; region3.max_lon = 180.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:68:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |     band160m.band = "160m";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:69:28: warning: 1900.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   69 |     band160m.center_freq = 1900.0; // kHz
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:70:27: warning: 160.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   70 |     band160m.wavelength = 160.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:71:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   71 |     band160m.propagation = "Ground wave";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:72:29: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   72 |     band160m.max_range_km = 500.0;
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:73:33: warning: 0.3 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   73 |     band160m.day_night_factor = 0.3; // Better at night
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:75:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |     band_characteristics["160m"] = band160m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:75:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   75 |     band_characteristics["160m"] = band160m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:75:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |     band_characteristics["160m"] = band160m;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:79:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   79 |     band80m.band = "80m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:80:27: warning: 3750.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   80 |     band80m.center_freq = 3750.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:81:26: warning: 80.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   81 |     band80m.wavelength = 80.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:82:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     band80m.propagation = "Ground wave / Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:83:28: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |     band80m.max_range_km = 1000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:84:32: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   84 |     band80m.day_night_factor = 0.5; // Better at night
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:86:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     band_characteristics["80m"] = band80m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:86:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   86 |     band_characteristics["80m"] = band80m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:86:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     band_characteristics["80m"] = band80m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:90:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |     band40m.band = "40m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:91:27: warning: 7100.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   91 |     band40m.center_freq = 7100.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:92:26: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   92 |     band40m.wavelength = 40.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:93:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |     band40m.propagation = "Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:94:28: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   94 |     band40m.max_range_km = 3000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:95:32: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |     band40m.day_night_factor = 0.7; // Good day and night
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:97:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     band_characteristics["40m"] = band40m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:97:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   97 |     band_characteristics["40m"] = band40m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:97:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     band_characteristics["40m"] = band40m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:101:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |     band20m.band = "20m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:102:27: warning: 14175.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  102 |     band20m.center_freq = 14175.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:103:26: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  103 |     band20m.wavelength = 20.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:104:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  104 |     band20m.propagation = "Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:105:28: warning: 10000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  105 |     band20m.max_range_km = 10000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:106:32: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |     band20m.day_night_factor = 0.9; // Excellent day band
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:108:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  108 |     band_characteristics["20m"] = band20m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:108:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  108 |     band_characteristics["20m"] = band20m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:108:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  108 |     band_characteristics["20m"] = band20m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:112:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  112 |     band10m.band = "10m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:113:27: warning: 28500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  113 |     band10m.center_freq = 28500.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:114:26: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  114 |     band10m.wavelength = 10.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:115:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     band10m.propagation = "Line of sight / Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:116:28: warning: 2000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  116 |     band10m.max_range_km = 2000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:119:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  119 |     band_characteristics["10m"] = band10m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:119:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  119 |     band_characteristics["10m"] = band10m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:119:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  119 |     band_characteristics["10m"] = band10m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:123:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  123 |     band6m.band = "6m";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:124:26: warning: 52000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  124 |     band6m.center_freq = 52000.0; // kHz
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:125:25: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  125 |     band6m.wavelength = 6.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:126:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  126 |     band6m.propagation = "Line of sight";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:127:27: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  127 |     band6m.max_range_km = 500.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:130:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  130 |     band_characteristics["6m"] = band6m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:130:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  130 |     band_characteristics["6m"] = band6m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:130:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  130 |     band_characteristics["6m"] = band6m;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:134:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |     band4m.band = "4m";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:135:26: warning: 70000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  135 |     band4m.center_freq = 70000.0; // kHz (70 MHz)
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:136:25: warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  136 |     band4m.wavelength = 4.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:137:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |     band4m.propagation = "Line of sight";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:138:27: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |     band4m.max_range_km = 500.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:141:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |     band_characteristics["4m"] = band4m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:141:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  141 |     band_characteristics["4m"] = band4m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:141:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |     band_characteristics["4m"] = band4m;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:147:5: warning: variable 'csv_path' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  147 |     std::string csv_path = "../../configs/radio_amateur_band_segments.csv";
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:147:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  147 |     std::string csv_path = "../../configs/radio_amateur_band_segments.csv";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:151:10: warning: 'loadBandSegments' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |     if (!loadBandSegments(csv_path)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:140:17: note: resolves to this declaration
  140 |     static bool loadBandSegments(const std::string& csv_file);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:90: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:102: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:105: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:105: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                                         ^~~~~~~~~
      |                                                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:92: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:95: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:28: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:52: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:81: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:84: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:163:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  163 | bool FGCom_AmateurRadio::loadBandSegments(const std::string& csv_file) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:163:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 | bool FGCom_AmateurRadio::loadBandSegments(const std::string& csv_file) {
      | ~~~~                     ^
      | auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:167:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  167 |     std::ifstream file(csv_file);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:87: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:99: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:102: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                                      ^~~~~~~~~
      |                                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:92: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:95: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:180:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
  180 |     while (std::getline(file, line)) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:167:5: note: inferred assignment of ID-dependent value from ID-dependent 
  167 |     std::ifstream file(csv_file);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:180:12: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     while (std::getline(file, line)) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:180:17: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
  180 |     while (std::getline(file, line)) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:189:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  189 |         if (line.empty()) continue;
      |                          ^         
      |                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:200:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  200 |         for (size_t i = 0; i < line.length(); i++) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:200:14: warning: no header providing "size_t" is directly included [misc-include-cleaner]
   19 |         for (size_t i = 0; i < line.length(); i++) {
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:201:13: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
  201 |             char c = line[i];
      |             ^
      |                  const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:201:18: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  201 |             char c = line[i];
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:201:26: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  201 |             char c = line[i];
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:212:31: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  212 |                 current_field += c;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:219:30: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  219 |         if (fields.size() >= 9) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:223:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |             segment.band = fields[0];                    // Band designation (e.g., "160m", "80m")
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:223:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |             segment.band = fields[0];                    // Band designation (e.g., "160m", "80m")
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:224:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |             segment.mode = fields[1];                    // Operating mode (e.g., "CW", "SSB")
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:224:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |             segment.mode = fields[1];                    // Operating mode (e.g., "CW", "SSB")
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:34: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:39: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:50: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:226:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  226 |             segment.end_freq = std::stof(fields[3]);     // End frequency in kHz - CRITICAL: Must be numeric
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:226:32: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |             segment.end_freq = std::stof(fields[3]);     // End frequency in kHz - CRITICAL: Must be numeric
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:226:48: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |             segment.end_freq = std::stof(fields[3]);     // End frequency in kHz - CRITICAL: Must be numeric
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:29: note: default parameter was declared here
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:34: warning: 'stoi' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:3: note: resolves to this declaration
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:39: warning: no header providing "std::stoi" is directly included [misc-include-cleaner]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:50: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:228:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  228 |             segment.countries = fields[5];               // Country/region (e.g., "UK", "USA")
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:228:39: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  228 |             segment.countries = fields[5];               // Country/region (e.g., "UK", "USA")
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:228:40: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  228 |             segment.countries = fields[5];               // Country/region (e.g., "UK", "USA")
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:229:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |             segment.license_class = fields[6];          // License class (e.g., "Full", "Intermediate")
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:229:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |             segment.license_class = fields[6];          // License class (e.g., "Full", "Intermediate")
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:229:44: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  229 |             segment.license_class = fields[6];          // License class (e.g., "Full", "Intermediate")
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:35: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:52: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:231:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |             segment.notes = fields[8];                  // Additional notes/restrictions
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:231:35: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |             segment.notes = fields[8];                  // Additional notes/restrictions
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:231:36: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  231 |             segment.notes = fields[8];                  // Additional notes/restrictions
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      | ~~~                     ^
      | auto                                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:41: warning: 2 adjacent parameters of 'detectITURegion' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:48: note: the first parameter in the range is 'lat'
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                                                ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:60: note: the last parameter in the range is 'lon'
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                                                            ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  244 |     while (lon > 180.0) lon -= 360.0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:18: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                        ^             
      |                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:32: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  245 |     while (lon < -180.0) lon += 360.0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:19: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |     while (lon < -180.0) lon += 360.0;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  245 |     while (lon < -180.0) lon += 360.0;
      |                         ^             
      |                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:33: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |     while (lon < -180.0) lon += 360.0;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:248:15: warning: 60.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  248 |     if (lat > 60.0) {
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:254:17: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     if (lon >= -180.0 && lon <= -20.0) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:254:34: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     if (lon >= -180.0 && lon <= -20.0) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  257 |         return 3; // Asia-Pacific
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~
  258 |     } else {
      |     ~~~~~~~~
  259 |         return 1; // Europe, Africa, Middle East, former USSR
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:23: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:38: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:51: warning: 2 adjacent parameters of 'validateAmateurFrequency' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:70: note: the first parameter in the range is 'frequency'
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                      ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:100: note: the last parameter in the range is 'mode'
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:264:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  264 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:264:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  264 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:266:5: warning: variable 'freq_khz' of type 'float' can be declared 'const' [misc-const-correctness]
  266 |     float freq_khz = std::stof(frequency);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:266:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  266 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:266:22: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  266 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  269 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:271:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  271 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:281:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  281 | std::string FGCom_AmateurRadio::getRequiredLicenseClass(float frequency_khz, int itu_region, const std::string& mode) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:281:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  281 | std::string FGCom_AmateurRadio::getRequiredLicenseClass(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:282:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  282 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:282:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  282 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  284 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:286:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  286 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:293:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  293 |     return "Unknown";
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:296:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  296 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::getCountryAllocations(const std::string& country, int itu_region) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:296:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::getCountryAllocations(const std::string& country, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                  -> std::vector<fgcom_band_segment>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:297:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  297 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:297:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  297 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  301 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:303:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  303 |             segment.countries.find(country) != std::string::npos) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2661:39: note: default parameter was declared here
 2661 |       find(const basic_string& __str, size_type __pos = 0) const
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:311:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  311 | bool FGCom_AmateurRadio::canLicenseClassOperate(float frequency_khz, int itu_region, const std::string& mode, const std::string& license_class) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:311:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  311 | bool FGCom_AmateurRadio::canLicenseClassOperate(float frequency_khz, int itu_region, const std::string& mode, const std::string& license_class) {
      | ~~~~                     ^
      | auto                                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:312:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  312 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:312:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  312 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  314 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:316:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  316 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:319:42: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  319 |             return segment.license_class == license_class;
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:326:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  326 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(const std::string& license_class, int itu_region) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:326:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  326 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(const std::string& license_class, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                             -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:327:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  327 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:327:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  327 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  332 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:334:35: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  334 |             segment.license_class == license_class) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  339 |     for (const auto& band : unique_bands) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  339 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  339 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  339 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:340:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  339 |     for (const auto& band : unique_bands) {
  340 |         available_bands.push_back(band);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:346:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  346 | fgcom_band_segment FGCom_AmateurRadio::getBandSegment(float frequency_khz, int itu_region) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:346:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  346 | fgcom_band_segment FGCom_AmateurRadio::getBandSegment(float frequency_khz, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                       -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:349:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  349 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:349:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  349 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  351 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:362:48: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  362 | fgcom_band_characteristics FGCom_AmateurRadio::getBandCharacteristics(const std::string& band) {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:362:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  362 | fgcom_band_characteristics FGCom_AmateurRadio::getBandCharacteristics(const std::string& band) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                           -> fgcom_band_characteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:365:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  365 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:365:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  365 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:367:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  367 |     auto it = band_characteristics.find(band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:368:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  368 |     if (it != band_characteristics.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:369:18: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  369 |         return it->second;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:375:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  375 | std::string FGCom_AmateurRadio::frequencyToBand(float frequency_khz) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:375:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  375 | std::string FGCom_AmateurRadio::frequencyToBand(float frequency_khz) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:376:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  376 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:376:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  376 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:26: warning: 1800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:51: warning: 2000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                        ^              
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:26: warning: 3500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:51: warning: 4000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:26: warning: 5300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:51: warning: 5400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:26: warning: 7000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:51: warning: 7300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:26: warning: 10100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:52: warning: 10150 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:26: warning: 14000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:52: warning: 14350 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:26: warning: 18068 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:52: warning: 18168 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:26: warning: 21000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:52: warning: 21450 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:26: warning: 24890 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:52: warning: 24990 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:26: warning: 28000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:52: warning: 29700 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:26: warning: 50000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:52: warning: 54000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                          ^            
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:391:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  391 |     return "";
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:394:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  394 | bool FGCom_AmateurRadio::isAmateurFrequency(float frequency_khz, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:394:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  394 | bool FGCom_AmateurRadio::isAmateurFrequency(float frequency_khz, int itu_region) {
      | ~~~~                     ^
      | auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:395:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  395 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:395:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  397 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  397 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  397 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  397 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:408:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  408 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(int itu_region) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:408:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  408 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                           -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:411:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  411 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:411:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  411 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  414 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  420 |     for (const auto& band : unique_bands) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  420 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  420 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  420 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:421:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  420 |     for (const auto& band : unique_bands) {
  421 |         bands.push_back(band);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:427:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  427 | std::vector<std::string> FGCom_AmateurRadio::getAvailableModes(const std::string& band, int itu_region) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:427:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  427 | std::vector<std::string> FGCom_AmateurRadio::getAvailableModes(const std::string& band, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                    -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:430:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  430 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:430:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  430 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  433 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  433 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  433 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  433 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:434:62: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  434 |         if (segment.itu_region == itu_region && segment.band == band) {
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  439 |     for (const auto& mode : unique_modes) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |     for (const auto& mode : unique_modes) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |     for (const auto& mode : unique_modes) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |     for (const auto& mode : unique_modes) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:440:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  439 |     for (const auto& mode : unique_modes) {
  440 |         modes.push_back(mode);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:48: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                                            -> fgcom_frequency_validation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:74: warning: 2 adjacent parameters of 'validateFrequencyDetailed' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:93: note: the first parameter in the range is 'frequency'
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                                             ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:123: note: the last parameter in the range is 'mode'
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:450:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  450 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:450:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  450 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:452:5: warning: variable 'freq_khz' of type 'float' can be declared 'const' [misc-const-correctness]
  452 |     float freq_khz = std::stof(frequency);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:452:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  452 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:452:22: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  452 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:455:10: warning: 'checkBandCompliance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  455 |     if (!checkBandCompliance(freq_khz, mode, itu_region)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:159:17: note: resolves to this declaration
  159 |     static bool checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:456:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  456 |         result.error_message = "Frequency is outside amateur band limits";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:461:10: warning: 'enforceModeSeparation' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  461 |     if (!enforceModeSeparation(freq_khz, mode, itu_region)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:162:17: note: resolves to this declaration
  162 |     static bool enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:462:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  462 |         result.error_message = "Frequency not allocated for " + mode + " mode in this region";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:462:63: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  462 |         result.error_message = "Frequency not allocated for " + mode + " mode in this region";
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:462:70: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  462 |         result.error_message = "Frequency not allocated for " + mode + " mode in this region";
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:467:10: warning: 'checkRegionalRestrictions' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     if (!checkRegionalRestrictions(freq_khz, itu_region)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:165:17: note: resolves to this declaration
  165 |     static bool checkRegionalRestrictions(float frequency_khz, int itu_region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:468:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  468 |         result.error_message = "Frequency restricted in this ITU region";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:473:10: warning: 'validateChannelSpacing' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  473 |     if (!validateChannelSpacing(freq_khz, mode)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:189:17: note: resolves to this declaration
  189 |     static bool validateChannelSpacing(float frequency_khz, const std::string& mode);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:474:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  474 |         result.error_message = "Invalid channel spacing for " + mode + " mode";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:474:63: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  474 |         result.error_message = "Invalid channel spacing for " + mode + " mode";
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:474:70: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  474 |         result.error_message = "Invalid channel spacing for " + mode + " mode";
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:480:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  480 |     result.band = frequencyToBand(freq_khz);
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:480:19: warning: 'frequencyToBand' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  480 |     result.band = frequencyToBand(freq_khz);
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:375:33: note: resolves to this declaration
  375 | std::string FGCom_AmateurRadio::frequencyToBand(float frequency_khz) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:481:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  481 |     result.mode = mode;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:483:14: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |     if (mode == "CW") {
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:484:34: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  484 |         result.channel_spacing = 500.0; // 500Hz for CW
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:485:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  485 |     } else if (mode == "DSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:485:31: warning: repeated branch body in conditional chain [bugprone-branch-clone]
  485 |     } else if (mode == "DSB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:487:6: note: end of the original
  487 |     } else if (mode == "ISB") {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:487:31: note: clone 1 starts here
  487 |     } else if (mode == "ISB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:486:34: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  486 |         result.channel_spacing = 6000.0; // 6kHz for DSB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:487:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  487 |     } else if (mode == "ISB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:488:34: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  488 |         result.channel_spacing = 6000.0; // 6kHz for ISB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:489:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  489 |     } else if (mode == "VSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:490:34: warning: 4000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  490 |         result.channel_spacing = 4000.0; // 4kHz for VSB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:491:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     } else if (mode == "NFM") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:492:34: warning: 12500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  492 |         result.channel_spacing = 12500.0; // 12.5kHz for NFM
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:494:34: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  494 |         result.channel_spacing = 3000.0; // 3kHz for SSB/AM
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:501:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  501 | bool FGCom_AmateurRadio::checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:501:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  501 | bool FGCom_AmateurRadio::checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:502:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  502 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:502:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  502 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  505 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  505 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  505 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  505 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:507:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  507 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:518:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  518 | bool FGCom_AmateurRadio::enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:518:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  518 | bool FGCom_AmateurRadio::enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:519:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  519 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:519:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  519 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:522:5: warning: variable 'segment' of type 'fgcom_band_segment' can be declared 'const' [misc-const-correctness]
  522 |     fgcom_band_segment segment = getBandSegment(frequency_khz, itu_region);
      |     ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:522:34: warning: 'getBandSegment' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  522 |     fgcom_band_segment segment = getBandSegment(frequency_khz, itu_region);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:346:40: note: resolves to this declaration
  346 | fgcom_band_segment FGCom_AmateurRadio::getBandSegment(float frequency_khz, int itu_region) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  529 |     for (const auto& seg : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:26: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  529 |     for (const auto& seg : band_segments) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:26: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  529 |     for (const auto& seg : band_segments) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:26: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  529 |     for (const auto& seg : band_segments) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:531:22: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  531 |             seg.band == segment.band &&
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:532:22: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  532 |             seg.mode == mode &&
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:543:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  543 | bool FGCom_AmateurRadio::checkRegionalRestrictions(float frequency_khz, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:543:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  543 | bool FGCom_AmateurRadio::checkRegionalRestrictions(float frequency_khz, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:544:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  544 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:544:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  544 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  547 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  547 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  547 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  547 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:553:65: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  553 |             if (!segment.countries.empty() && segment.countries != "Europe" && 
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:554:35: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |                 segment.countries != "Americas" && segment.countries != "Asia-Pacific") {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:554:70: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |                 segment.countries != "Americas" && segment.countries != "Asia-Pacific") {
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:567:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  567 | float FGCom_AmateurRadio::getPowerLimit(float frequency_khz, int itu_region, const std::string& mode) {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:567:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  567 | float FGCom_AmateurRadio::getPowerLimit(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~                     ^
      | auto                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:568:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  568 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:568:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  568 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  570 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  570 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  570 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  570 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:572:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:579:12: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  579 |     return 400.0; // Default power limit
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:583:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  583 | fgcom_band_segment FGCom_AmateurRadio::getBandSegmentInfo(float frequency_khz, int itu_region, const std::string& mode) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:583:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  583 | fgcom_band_segment FGCom_AmateurRadio::getBandSegmentInfo(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                    -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:584:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  584 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:584:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  584 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  586 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  586 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  586 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  586 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:588:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  588 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:596:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  596 |     return fgcom_band_segment();
      |            ^~~~~~~~~~~~~~~~~~~~
      |            {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:600:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  600 | bool FGCom_AmateurRadio::validatePowerLevel(float frequency_khz, int itu_region, const std::string& mode, float power_watts) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:600:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  600 | bool FGCom_AmateurRadio::validatePowerLevel(float frequency_khz, int itu_region, const std::string& mode, float power_watts) {
      | ~~~~                     ^
      | auto                                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:601:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  601 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:601:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:603:5: warning: variable 'max_power' of type 'float' can be declared 'const' [misc-const-correctness]
  603 |     float max_power = getPowerLimit(frequency_khz, itu_region, mode);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:603:23: warning: 'getPowerLimit' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  603 |     float max_power = getPowerLimit(frequency_khz, itu_region, mode);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:567:27: note: resolves to this declaration
  567 | float FGCom_AmateurRadio::getPowerLimit(float frequency_khz, int itu_region, const std::string& mode) {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:608:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  608 | bool FGCom_AmateurRadio::validateChannelSpacing(float frequency_khz, const std::string& mode) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:608:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  608 | bool FGCom_AmateurRadio::validateChannelSpacing(float frequency_khz, const std::string& mode) {
      | ~~~~                     ^
      | auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:610:11: warning: variable 'spacing_hz' is not initialized [cppcoreguidelines-init-variables]
   19 |     float spacing_hz;
      |           ^         
      |                      = NAN
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:611:14: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  611 |     if (mode == "CW") {
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:612:22: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  612 |         spacing_hz = 500.0; // 500Hz for CW
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:613:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  613 |     } else if (mode == "DSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:613:31: warning: repeated branch body in conditional chain [bugprone-branch-clone]
  613 |     } else if (mode == "DSB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:615:6: note: end of the original
  615 |     } else if (mode == "ISB") {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:615:31: note: clone 1 starts here
  615 |     } else if (mode == "ISB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:614:22: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  614 |         spacing_hz = 6000.0; // 6kHz for DSB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:615:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  615 |     } else if (mode == "ISB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:616:22: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  616 |         spacing_hz = 6000.0; // 6kHz for ISB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:617:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  617 |     } else if (mode == "VSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:618:22: warning: 4000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  618 |         spacing_hz = 4000.0; // 4kHz for VSB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:619:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  619 |     } else if (mode == "NFM") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:620:22: warning: 12500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  620 |         spacing_hz = 12500.0; // 12.5kHz for NFM
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:622:22: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  622 |         spacing_hz = 3000.0; // 3kHz for SSB/AM
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:5: warning: variable 'spacing_khz' of type 'float' can be declared 'const' [misc-const-correctness]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:25: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:38: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:5: warning: variable 'remainder' of type 'float' can be declared 'const' [misc-const-correctness]
  627 |     float remainder = fmod(frequency_khz, spacing_khz);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:23: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  627 |     float remainder = fmod(frequency_khz, spacing_khz);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:23: warning: call to 'fmod' promotes float to double [performance-type-promotion-in-math-fn]
   19 |     float remainder = fmod(frequency_khz, spacing_khz);
      |                       ^~~~
      |                       std::fmod
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:628:25: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  628 |     return (remainder < 0.001 || remainder > (spacing_khz - 0.001)); // Allow small rounding errors
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:628:61: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  628 |     return (remainder < 0.001 || remainder > (spacing_khz - 0.001)); // Allow small rounding errors
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:632:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  632 | fgcom_grid_locator FGCom_AmateurRadio::parseGridLocator(const std::string& grid_string) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:632:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  632 | fgcom_grid_locator FGCom_AmateurRadio::parseGridLocator(const std::string& grid_string) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                    -> fgcom_grid_locator
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:634:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  634 |     result.grid = grid_string;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:636:9: warning: 'validateGridLocator' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     if (validateGridLocator(grid_string)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:215:17: note: resolves to this declaration
  215 |     static bool validateGridLocator(const std::string& grid);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:638:9: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  638 |         gridToLatLon(grid_string, result.lat, result.lon);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:211:24: note: resolves to this declaration
  211 |     static std::string gridToLatLon(const std::string& grid, double& lat, double& lon);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:649:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  649 |         return "";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:654:5: warning: 'transform<__gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, __gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, int (*)(int) noexcept>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  654 |     std::transform(grid_upper.begin(), grid_upper.end(), grid_upper.begin(), ::toupper);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4298:5: note: resolves to this declaration
 4298 |     transform(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:657:5: warning: variable 'field_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  657 |     int field_lon = grid_upper[0] - 'A';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:657:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  657 |     int field_lon = grid_upper[0] - 'A';
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:658:5: warning: variable 'field_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  658 |     int field_lat = grid_upper[1] - 'A';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:658:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  658 |     int field_lat = grid_upper[1] - 'A';
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:661:5: warning: variable 'square_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  661 |     int square_lon = grid_upper[2] - '0';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:661:32: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  661 |     int square_lon = grid_upper[2] - '0';
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:662:5: warning: variable 'square_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  662 |     int square_lat = grid_upper[3] - '0';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:662:32: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  662 |     int square_lat = grid_upper[3] - '0';
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:24: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:46: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:53: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:666:24: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  666 |     lat = (field_lat * 10.0) + (square_lat * 1.0) - 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:666:53: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  666 |     lat = (field_lat * 10.0) + (square_lat * 1.0) - 90.0;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:669:26: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  669 |     if (grid.length() >= 6) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:9: warning: variable 'subsquare_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:57: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:63: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:9: warning: variable 'subsquare_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:44: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:63: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:677:26: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  677 |     if (grid.length() >= 8) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:9: warning: variable 'extended_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:42: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:43: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:56: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:62: warning: 240.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:9: warning: variable 'extended_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:42: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:43: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:62: warning: 240.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:46: warning: 3 adjacent parameters of 'latLonToGrid' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:53: note: the first parameter in the range is 'lat'
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                                     ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:74: note: the last parameter in the range is 'precision'
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                                                          ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:70: note: 'double' and 'int' may be implicitly converted
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:689:12: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  689 |     lon += 180.0;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:690:12: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  690 |     lat += 90.0;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:693:5: warning: variable 'field_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  693 |     int field_lon = (int)(lon / 20.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:693:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  693 |     int field_lon = (int)(lon / 20.0);
      |                     ^~~~~
      |                     static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:693:33: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  693 |     int field_lon = (int)(lon / 20.0);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:694:5: warning: variable 'field_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  694 |     int field_lat = (int)(lat / 10.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:694:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  694 |     int field_lat = (int)(lat / 10.0);
      |                     ^~~~~
      |                     static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:694:33: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  694 |     int field_lat = (int)(lat / 10.0);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:5: warning: variable 'square_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:22: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                      ^~~~~
      |                      static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:47: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:55: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:698:5: warning: variable 'square_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  698 |     int square_lat = (int)((lat - field_lat * 10.0) / 1.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:698:22: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  698 |     int square_lat = (int)((lat - field_lat * 10.0) / 1.0);
      |                      ^~~~~
      |                      static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:698:47: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  698 |     int square_lat = (int)((lat - field_lat * 10.0) / 1.0);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:700:17: warning: redundant string initialization [readability-redundant-string-init]
  700 |     std::string grid = "";
      |                 ^~~~~~~~~
      |                 grid
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:700:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  700 |     std::string grid = "";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:701:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  701 |     grid += (char)('A' + field_lon);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:701:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  701 |     grid += (char)('A' + field_lon);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:702:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  702 |     grid += (char)('A' + field_lat);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:702:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  702 |     grid += (char)('A' + field_lat);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:703:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  703 |     grid += (char)('0' + square_lon);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:703:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  703 |     grid += (char)('0' + square_lon);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:704:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  704 |     grid += (char)('0' + square_lat);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:704:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  704 |     grid += (char)('0' + square_lat);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:5: warning: variable 'subsquare_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:47: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:67: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:74: warning: 12.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:5: warning: variable 'subsquare_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:47: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:74: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:710:22: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  710 |     if (precision >= 6) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:712:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  712 |         grid += (char)('A' + (int)subsquare_lon);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:712:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  712 |         grid += (char)('A' + (int)subsquare_lon);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:712:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  712 |         grid += (char)('A' + (int)subsquare_lon);
      |                              ^~~~~             
      |                              static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:713:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  713 |         grid += (char)('A' + (int)subsquare_lat);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:713:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  713 |         grid += (char)('A' + (int)subsquare_lat);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:713:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  713 |         grid += (char)('A' + (int)subsquare_lat);
      |                              ^~~~~             
      |                              static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:716:22: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  716 |     if (precision >= 8) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:718:9: warning: variable 'extended_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  718 |         double extended_lon = (subsquare_lon - (int)subsquare_lon) * 10.0;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:718:48: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  718 |         double extended_lon = (subsquare_lon - (int)subsquare_lon) * 10.0;
      |                                                ^~~~~             
      |                                                static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:718:70: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  718 |         double extended_lon = (subsquare_lon - (int)subsquare_lon) * 10.0;
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:719:9: warning: variable 'extended_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  719 |         double extended_lat = (subsquare_lat - (int)subsquare_lat) * 10.0;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:719:48: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  719 |         double extended_lat = (subsquare_lat - (int)subsquare_lat) * 10.0;
      |                                                ^~~~~             
      |                                                static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:719:70: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  719 |         double extended_lat = (subsquare_lat - (int)subsquare_lat) * 10.0;
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:720:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  720 |         grid += (char)('0' + (int)extended_lon);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:720:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  720 |         grid += (char)('0' + (int)extended_lon);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:720:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  720 |         grid += (char)('0' + (int)extended_lon);
      |                              ^~~~~            
      |                              static_cast<int>()
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:721:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  721 |         grid += (char)('0' + (int)extended_lat);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:721:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  721 |         grid += (char)('0' + (int)extended_lat);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:721:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  721 |         grid += (char)('0' + (int)extended_lat);
      |                              ^~~~~            
      |                              static_cast<int>()
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:727:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  727 | double FGCom_AmateurRadio::gridDistance(const std::string& grid1, const std::string& grid2) {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:727:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  727 | double FGCom_AmateurRadio::gridDistance(const std::string& grid1, const std::string& grid2) {
      | ~~~~~~                     ^
      | auto                                                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  728 |     double lat1, lon1, lat2, lon2;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:12: warning: variable 'lat1' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:18: warning: variable 'lon1' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                  ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:24: warning: variable 'lat2' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                        ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:30: warning: variable 'lon2' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:730:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  730 |     gridToLatLon(grid1, lat1, lon1);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:731:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  731 |     gridToLatLon(grid2, lat2, lon2);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:734:18: warning: variable name 'R' is too short, expected at least 3 characters [readability-identifier-length]
  734 |     const double R = 6371.0; // Earth's radius in km
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:735:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  735 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:735:35: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
   20 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:735:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:736:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  736 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:736:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:5: warning: variable 'a' of type 'double' can be declared 'const' [misc-const-correctness]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:62: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:89: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:738:5: warning: variable 'c' of type 'double' can be declared 'const' [misc-const-correctness]
  738 |     double c = 2 * atan2(sqrt(a), sqrt(1-a));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:738:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  738 |     double c = 2 * atan2(sqrt(a), sqrt(1-a));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:743:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  743 | double FGCom_AmateurRadio::gridBearing(const std::string& grid1, const std::string& grid2) {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:743:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  743 | double FGCom_AmateurRadio::gridBearing(const std::string& grid1, const std::string& grid2) {
      | ~~~~~~                     ^
      | auto                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  744 |     double lat1, lon1, lat2, lon2;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:12: warning: variable 'lat1' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:18: warning: variable 'lon1' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                  ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:24: warning: variable 'lat2' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                        ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:30: warning: variable 'lon2' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:746:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  746 |     gridToLatLon(grid1, lat1, lon1);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:747:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  747 |     gridToLatLon(grid2, lat2, lon2);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:750:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  750 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:750:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  750 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:751:5: warning: variable 'lat1_rad' of type 'double' can be declared 'const' [misc-const-correctness]
  751 |     double lat1_rad = lat1 * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:751:37: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  751 |     double lat1_rad = lat1 * M_PI / 180.0;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:752:5: warning: variable 'lat2_rad' of type 'double' can be declared 'const' [misc-const-correctness]
  752 |     double lat2_rad = lat2 * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:752:37: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  752 |     double lat2_rad = lat2 * M_PI / 180.0;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:754:5: warning: variable 'y' of type 'double' can be declared 'const' [misc-const-correctness]
  754 |     double y = sin(dlon) * cos(lat2_rad);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:754:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  754 |     double y = sin(dlon) * cos(lat2_rad);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:755:5: warning: variable 'x' of type 'double' can be declared 'const' [misc-const-correctness]
  755 |     double x = cos(lat1_rad) * sin(lat2_rad) - sin(lat1_rad) * cos(lat2_rad) * cos(dlon);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:755:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  755 |     double x = cos(lat1_rad) * sin(lat2_rad) - sin(lat1_rad) * cos(lat2_rad) * cos(dlon);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:757:5: warning: variable 'bearing' of type 'double' can be declared 'const' [misc-const-correctness]
  757 |     double bearing = atan2(y, x) * 180.0 / M_PI;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:757:36: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  757 |     double bearing = atan2(y, x) * 180.0 / M_PI;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:758:27: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  758 |     return fmod(bearing + 360.0, 360.0); // Normalize to 0-360
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:758:34: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  758 |     return fmod(bearing + 360.0, 360.0); // Normalize to 0-360
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:761:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  761 | bool FGCom_AmateurRadio::validateGridLocator(const std::string& grid) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:761:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  761 | bool FGCom_AmateurRadio::validateGridLocator(const std::string& grid) {
      | ~~~~                     ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:762:46: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  762 |     if (grid.length() < 4 || grid.length() > 8 || grid.length() % 2 != 0) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:13: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:47: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:64: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:13: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:47: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:64: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:777:26: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  777 |     if (grid.length() >= 6) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:17: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:52: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:68: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:69: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:784:26: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  784 |     if (grid.length() >= 8) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:17: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:18: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:35: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:52: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:68: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:69: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_AMATEUR_RADIO_H
      |         ^~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AMATEUR_RADIO_H
   19 | #define FGCOM_AMATEUR_RADIO_H
      |         ~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AMATEUR_RADIO_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: warning: accessing fields in struct 'fgcom_band_segment' is inefficient due to padding; only needs 176 bytes but is using 184 bytes [altera-struct-pack-align]
   30 | struct fgcom_band_segment {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_band_segment'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: warning: accessing fields in struct 'fgcom_band_segment' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   30 | struct fgcom_band_segment {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_band_segment' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:31:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     std::string band;           // Amateur radio band designation (e.g., "160m", "80m", "40m", "20m", "15m", "10m", "6m", "2m", "70cm")
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:32:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     std::string mode;           // Operating mode (e.g., "CW", "SSB", "Digital", "EME", "MS") - must match CSV exactly
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:33:11: warning: member variable 'start_freq' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:34:11: warning: member variable 'end_freq' has public visibility [misc-non-private-member-variables-in-classes]
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:35:9: warning: member variable 'itu_region' has public visibility [misc-non-private-member-variables-in-classes]
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:36:17: warning: member variable 'countries' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:37:17: warning: member variable 'license_class' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:38:11: warning: member variable 'power_limit' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:39:17: warning: member variable 'notes' has public visibility [misc-non-private-member-variables-in-classes]
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:41:5: warning: 'fgcom_band_segment' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   41 |     fgcom_band_segment() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:44:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   31 |     std::string band;           // Amateur radio band designation (e.g., "160m", "80m", "40m", "20m", "15m", "10m", "6m", "2m", "70cm")
      |                     
      |                     {""}
   32 |     std::string mode;           // Operating mode (e.g., "CW", "SSB", "Digital", "EME", "MS") - must match CSV exactly
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:44:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   44 |         band = "";              // Empty string indicates no band assigned
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:45:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   32 |     std::string mode;           // Operating mode (e.g., "CW", "SSB", "Digital", "EME", "MS") - must match CSV exactly
      |                     
      |                     {""}
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:45:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   45 |         mode = "";              // Empty string indicates no mode assigned
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:46:9: warning: 'start_freq' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
      |                     
      |                     {0.0}
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:47:9: warning: 'end_freq' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
      |                   
      |                   {0.0}
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:48:9: warning: 'itu_region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
      |                   
      |                   {1}
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:49:9: warning: 'countries' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
      |                          
      |                          {""}
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:49:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   49 |         countries = "";          // Empty string indicates no country assigned
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:50:9: warning: 'license_class' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
      |                              
      |                              {""}
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
   50 |         license_class = "";     // Empty string indicates no license class assigned
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:50:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |         license_class = "";     // Empty string indicates no license class assigned
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:51:9: warning: 'power_limit' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
      |                      
      |                      {400.0}
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
   50 |         license_class = "";     // Empty string indicates no license class assigned
   51 |         power_limit = 400.0;    // Default 400W power limit (common for intermediate licenses)
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:51:23: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |         power_limit = 400.0;    // Default 400W power limit (common for intermediate licenses)
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:52:9: warning: 'notes' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
      |                      
      |                      {""}
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
   50 |         license_class = "";     // Empty string indicates no license class assigned
   51 |         power_limit = 400.0;    // Default 400W power limit (common for intermediate licenses)
   52 |         notes = "";             // Empty string indicates no restrictions
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:52:15: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   52 |         notes = "";             // Empty string indicates no restrictions
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: warning: accessing fields in struct 'fgcom_band_characteristics' is inefficient due to padding; only needs 81 bytes but is using 88 bytes [altera-struct-pack-align]
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_band_characteristics'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: warning: accessing fields in struct 'fgcom_band_characteristics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_band_characteristics' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:58:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string band;           // Band name
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:59:11: warning: member variable 'center_freq' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     float center_freq;          // Center frequency in kHz
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:60:11: warning: member variable 'wavelength' has public visibility [misc-non-private-member-variables-in-classes]
   60 |     float wavelength;           // Wavelength in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:61:17: warning: member variable 'propagation' has public visibility [misc-non-private-member-variables-in-classes]
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:62:11: warning: member variable 'max_range_km' has public visibility [misc-non-private-member-variables-in-classes]
   62 |     float max_range_km;         // Typical maximum range in km
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:63:11: warning: member variable 'day_night_factor' has public visibility [misc-non-private-member-variables-in-classes]
   63 |     float day_night_factor;     // Day/night propagation factor
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:64:10: warning: member variable 'dx_capable' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     bool dx_capable;            // DX (long distance) capable
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:66:5: warning: 'fgcom_band_characteristics' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   66 |     fgcom_band_characteristics() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:67:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |     std::string band;           // Band name
      |                     
      |                     {""}
   59 |     float center_freq;          // Center frequency in kHz
   60 |     float wavelength;           // Wavelength in meters
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:67:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:68:9: warning: 'center_freq' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   59 |     float center_freq;          // Center frequency in kHz
      |                      
      |                      {0.0}
   60 |     float wavelength;           // Wavelength in meters
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:69:9: warning: 'wavelength' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   60 |     float wavelength;           // Wavelength in meters
      |                     
      |                     {0.0}
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:70:9: warning: 'propagation' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
      |                            
      |                            {""}
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:70:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |         propagation = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:71:9: warning: 'max_range_km' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   62 |     float max_range_km;         // Typical maximum range in km
      |                       
      |                       {0.0}
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
   71 |         max_range_km = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:72:9: warning: 'day_night_factor' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   63 |     float day_night_factor;     // Day/night propagation factor
      |                           
      |                           {1.0}
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
   71 |         max_range_km = 0.0;
   72 |         day_night_factor = 1.0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:73:9: warning: 'dx_capable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   64 |     bool dx_capable;            // DX (long distance) capable
      |                    
      |                    {false}
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
   71 |         max_range_km = 0.0;
   72 |         day_night_factor = 1.0;
   73 |         dx_capable = false;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: warning: accessing fields in struct 'fgcom_itu_region' is inefficient due to padding; only needs 52 bytes but is using 56 bytes [altera-struct-pack-align]
   78 | struct fgcom_itu_region {
      |        ^
   79 |     int region;                 // 1, 2, or 3
   80 |     std::string name;           // Region name
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
   86 |         name = "";
   87 |         min_lat = max_lat = min_lon = max_lon = 0.0;
   88 |     }
   89 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_itu_region'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: warning: accessing fields in struct 'fgcom_itu_region' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   78 | struct fgcom_itu_region {
      |        ^
   79 |     int region;                 // 1, 2, or 3
   80 |     std::string name;           // Region name
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
   86 |         name = "";
   87 |         min_lat = max_lat = min_lon = max_lon = 0.0;
   88 |     }
   89 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: note: use "__attribute__((aligned(64)))" to align struct 'fgcom_itu_region' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:79:9: warning: member variable 'region' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     int region;                 // 1, 2, or 3
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:80:17: warning: member variable 'name' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     std::string name;           // Region name
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:81:11: warning: member variable 'min_lat' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     float min_lat, max_lat;     // Latitude bounds
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:81:20: warning: member variable 'max_lat' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     float min_lat, max_lat;     // Latitude bounds
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:82:11: warning: member variable 'min_lon' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     float min_lon, max_lon;     // Longitude bounds
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:82:20: warning: member variable 'max_lon' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     float min_lon, max_lon;     // Longitude bounds
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:84:5: warning: 'fgcom_itu_region' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   84 |     fgcom_itu_region() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:85:9: warning: 'region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   79 |     int region;                 // 1, 2, or 3
      |               
      |               {1}
   80 |     std::string name;           // Region name
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:86:9: warning: 'name' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   80 |     std::string name;           // Region name
      |                     
      |                     {""}
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
   86 |         name = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:86:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |         name = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: warning: accessing fields in struct 'fgcom_grid_locator' is inefficient due to padding; only needs 49 bytes but is using 56 bytes [altera-struct-pack-align]
   92 | struct fgcom_grid_locator {
      |        ^
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
   94 |     double lat, lon;           // Calculated latitude/longitude
   95 |     bool valid;                // Whether the grid locator is valid
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
   99 |         lat = lon = 0.0;
  100 |         valid = false;
  101 |     }
  102 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_grid_locator'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: warning: accessing fields in struct 'fgcom_grid_locator' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   92 | struct fgcom_grid_locator {
      |        ^
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
   94 |     double lat, lon;           // Calculated latitude/longitude
   95 |     bool valid;                // Whether the grid locator is valid
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
   99 |         lat = lon = 0.0;
  100 |         valid = false;
  101 |     }
  102 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: note: use "__attribute__((aligned(64)))" to align struct 'fgcom_grid_locator' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:93:17: warning: member variable 'grid' has public visibility [misc-non-private-member-variables-in-classes]
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:94:12: warning: member variable 'lat' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     double lat, lon;           // Calculated latitude/longitude
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:94:17: warning: member variable 'lon' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     double lat, lon;           // Calculated latitude/longitude
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:95:10: warning: member variable 'valid' has public visibility [misc-non-private-member-variables-in-classes]
   95 |     bool valid;                // Whether the grid locator is valid
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:97:5: warning: 'fgcom_grid_locator' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   97 |     fgcom_grid_locator() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:98:9: warning: 'grid' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
      |                     
      |                     {""}
   94 |     double lat, lon;           // Calculated latitude/longitude
   95 |     bool valid;                // Whether the grid locator is valid
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:98:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   98 |         grid = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:100:9: warning: 'valid' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   95 |     bool valid;                // Whether the grid locator is valid
      |               
      |               {false}
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
   99 |         lat = lon = 0.0;
  100 |         valid = false;
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: warning: accessing fields in struct 'fgcom_frequency_validation' is inefficient due to padding; only needs 101 bytes but is using 112 bytes [altera-struct-pack-align]
  105 | struct fgcom_frequency_validation {
      |        ^
  106 |     bool valid;                // Whether frequency is valid
  107 |     std::string band;          // Band name if valid
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
  117 |         channel_spacing = 0.0;
  118 |     }
  119 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_frequency_validation'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: warning: accessing fields in struct 'fgcom_frequency_validation' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  105 | struct fgcom_frequency_validation {
      |        ^
  106 |     bool valid;                // Whether frequency is valid
  107 |     std::string band;          // Band name if valid
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
  117 |         channel_spacing = 0.0;
  118 |     }
  119 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_frequency_validation' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:106:10: warning: member variable 'valid' has public visibility [misc-non-private-member-variables-in-classes]
  106 |     bool valid;                // Whether frequency is valid
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:107:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
  107 |     std::string band;          // Band name if valid
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:108:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
  108 |     std::string mode;          // Mode if valid
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:109:17: warning: member variable 'error_message' has public visibility [misc-non-private-member-variables-in-classes]
  109 |     std::string error_message; // Error message if invalid
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:110:11: warning: member variable 'channel_spacing' has public visibility [misc-non-private-member-variables-in-classes]
  110 |     float channel_spacing;     // Required channel spacing in Hz
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:112:5: warning: 'fgcom_frequency_validation' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  112 |     fgcom_frequency_validation() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:113:9: warning: 'valid' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  106 |     bool valid;                // Whether frequency is valid
      |               
      |               {false}
  107 |     std::string band;          // Band name if valid
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:114:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  107 |     std::string band;          // Band name if valid
      |                     
      |                     {""}
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:114:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:115:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  108 |     std::string mode;          // Mode if valid
      |                     
      |                     {""}
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:115:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |         mode = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:116:9: warning: 'error_message' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  109 |     std::string error_message; // Error message if invalid
      |                              
      |                              {""}
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:116:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  116 |         error_message = "";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:117:9: warning: 'channel_spacing' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  110 |     float channel_spacing;     // Required channel spacing in Hz
      |                          
      |                          {0.0}
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
  117 |         channel_spacing = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:134:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     static bool initialize();
      |            ~~~~ ^           
      |            auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:140:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     static bool loadBandSegments(const std::string& csv_file);
      |            ~~~~ ^                                            
      |            auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:147:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     static int detectITURegion(double lat, double lon);
      |            ~~~ ^                                      
      |            auto                                        -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:153:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 |     static bool validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region);
      |            ~~~~ ^                                                                                              
      |            auto                                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:156:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     static fgcom_frequency_validation validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                                               
      |            auto                                                                                                                        -> fgcom_frequency_validation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:159:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     static bool checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region);
      |            ~~~~ ^                                                                                
      |            auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:162:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  162 |     static bool enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region);
      |            ~~~~ ^                                                                                  
      |            auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:165:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     static bool checkRegionalRestrictions(float frequency_khz, int itu_region);
      |            ~~~~ ^                                                             
      |            auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:168:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  168 |     static float getPowerLimit(float frequency_khz, int itu_region, const std::string& mode);
      |            ~~~~~ ^                                                                          
      |            auto                                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:171:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     static fgcom_band_segment getBandSegmentInfo(float frequency_khz, int itu_region, const std::string& mode);
      |            ~~~~~~~~~~~~~~~~~~ ^                                                                               
      |            auto                                                                                                -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:174:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     static bool validatePowerLevel(float frequency_khz, int itu_region, const std::string& mode, float power_watts);
      |            ~~~~ ^                                                                                                  
      |            auto                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:177:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  177 |     static std::string getRequiredLicenseClass(float frequency_khz, int itu_region, const std::string& mode);
      |            ~~~~~~~~~~~ ^                                                                                    
      |            auto                                                                                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:180:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  180 |     static std::vector<fgcom_band_segment> getCountryAllocations(const std::string& country, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                
      |            auto                                                                                              -> std::vector<fgcom_band_segment>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:183:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     static bool canLicenseClassOperate(float frequency_khz, int itu_region, const std::string& mode, const std::string& license_class);
      |            ~~~~ ^                                                                                                                     
      |            auto                                                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:186:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     static std::vector<std::string> getAvailableBands(const std::string& license_class, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                  
      |            auto                                                                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:189:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  189 |     static bool validateChannelSpacing(float frequency_khz, const std::string& mode);
      |            ~~~~ ^                                                                   
      |            auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:192:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     static fgcom_band_segment getBandSegment(float frequency_khz, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~ ^                                                  
      |            auto                                                                   -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:195:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  195 |     static fgcom_band_characteristics getBandCharacteristics(const std::string& band);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                              
      |            auto                                                                       -> fgcom_band_characteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:198:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 |     static std::string frequencyToBand(float frequency_khz);
      |            ~~~~~~~~~~~ ^                                   
      |            auto                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:201:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     static bool isAmateurFrequency(float frequency_khz, int itu_region);
      |            ~~~~ ^                                                      
      |            auto                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:204:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     static std::vector<std::string> getAvailableBands(int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                
      |            auto                                                       -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:207:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  207 |     static std::vector<std::string> getAvailableModes(const std::string& band, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                         
      |            auto                                                                                -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:210:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  210 |     static fgcom_grid_locator parseGridLocator(const std::string& grid_string);
      |            ~~~~~~~~~~~~~~~~~~ ^                                               
      |            auto                                                                -> fgcom_grid_locator
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:211:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  211 |     static std::string gridToLatLon(const std::string& grid, double& lat, double& lon);
      |            ~~~~~~~~~~~ ^                                                              
      |            auto                                                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:212:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  212 |     static std::string latLonToGrid(double lat, double lon, int precision = 4);
      |            ~~~~~~~~~~~ ^                                                      
      |            auto                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:212:61: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  212 |     static std::string latLonToGrid(double lat, double lon, int precision = 4);
      |                                                             ^             ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:213:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 |     static double gridDistance(const std::string& grid1, const std::string& grid2);
      |            ~~~~~~ ^                                                               
      |            auto                                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:214:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     static double gridBearing(const std::string& grid1, const std::string& grid2);
      |            ~~~~~~ ^                                                              
      |            auto                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:215:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     static bool validateGridLocator(const std::string& grid);
      |            ~~~~ ^                                           
      |            auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:2:1: warning: #includes are not sorted properly [llvm-include-order]
    2 | #include <fstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:2:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
    2 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
    3 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:3:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
    3 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:3:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:4:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
    4 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
    5 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:5:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    5 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    6 | #include <cctype>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:6:1: warning: system include cctype not allowed [llvmlibc-restrict-system-libc-headers]
    6 | #include <cctype>
      | ^~~~~~~~~~~~~~~~~
    7 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:9:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
    9 | std::unique_ptr<FGCom_FeatureToggleManager> FGCom_FeatureToggleManager::instance = nullptr;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:9:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
    3 | #include <sstream>
    4 | #include <iostream>
    5 | #include <algorithm>
    6 | #include <cctype>
    7 | 
    8 | // Singleton instances
    9 | std::unique_ptr<FGCom_FeatureToggleManager> FGCom_FeatureToggleManager::instance = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:9:73: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
    9 | std::unique_ptr<FGCom_FeatureToggleManager> FGCom_FeatureToggleManager::instance = nullptr;
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:10:6: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
    3 | #include <sstream>
    4 | #include <iostream>
    5 | #include <algorithm>
    6 | #include <cctype>
    7 | 
    8 | // Singleton instances
    9 | std::unique_ptr<FGCom_FeatureToggleManager> FGCom_FeatureToggleManager::instance = nullptr;
   10 | std::mutex FGCom_FeatureToggleManager::instance_mutex;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:10:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   10 | std::mutex FGCom_FeatureToggleManager::instance_mutex;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:13:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   13 | FGCom_FeatureToggleManager::FGCom_FeatureToggleManager() 
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:18:57: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   18 | FGCom_FeatureToggleManager& FGCom_FeatureToggleManager::getInstance() {
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:18:57: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   18 | FGCom_FeatureToggleManager& FGCom_FeatureToggleManager::getInstance() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~                             ^
      | auto                                                                  -> FGCom_FeatureToggleManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:19:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   19 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:19:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
   19 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:21:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   21 |         instance = std::unique_ptr<FGCom_FeatureToggleManager>(new FGCom_FeatureToggleManager());
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:23:12: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   23 |     return *instance;
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:451:7: note: resolves to this declaration
  451 |       operator*() const noexcept(noexcept(*std::declval<pointer>()))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:26:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   26 | void FGCom_FeatureToggleManager::destroyInstance() {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:27:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   27 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:29:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   29 |         instance.reset();
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:505:13: note: default parameter was declared here
  505 |       reset(pointer __p = pointer()) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:33:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   33 | bool FGCom_FeatureToggleManager::isFeatureEnabled(FeatureToggle feature) const {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:33:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 | bool FGCom_FeatureToggleManager::isFeatureEnabled(FeatureToggle feature) const {
      | ~~~~                             ^
      | auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:35:37: error: no matching constructor for initialization of 'std::lock_guard<std::mutex>' [clang-diagnostic-error]
   35 |         std::lock_guard<std::mutex> lock(config_mutex);
      |                                     ^    ~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:248:16: note: candidate constructor not viable: 1st argument ('const std::mutex') would lose const qualifier
  248 |       explicit lock_guard(mutex_type& __m) : _M_device(__m)
      |                ^          ~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:257:7: note: candidate constructor not viable: no known conversion from 'const std::mutex' to 'const lock_guard<mutex>' for 1st argument
  257 |       lock_guard(const lock_guard&) = delete;
      |       ^          ~~~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:251:7: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
  251 |       lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      |       ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:36:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   36 |         auto it = feature_states.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:37:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   37 |         if (it != feature_states.end()) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:38:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   38 |             return it->second.load();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:38:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   38 |             return it->second.load();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:41:25: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
    2 |     } catch (const std::exception& e) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:42:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   42 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:43:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   43 |             std::cerr << "[FeatureToggleManager] Exception in isFeatureEnabled: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:43:83: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   43 |             std::cerr << "[FeatureToggleManager] Exception in isFeatureEnabled: " << e.what() << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:43:95: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   43 |             std::cerr << "[FeatureToggleManager] Exception in isFeatureEnabled: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:43:98: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   43 |             std::cerr << "[FeatureToggleManager] Exception in isFeatureEnabled: " << e.what() << std::endl;
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:43:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   43 |             std::cerr << "[FeatureToggleManager] Exception in isFeatureEnabled: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:49:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   49 | bool FGCom_FeatureToggleManager::enableFeature(FeatureToggle feature) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:49:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   49 | bool FGCom_FeatureToggleManager::enableFeature(FeatureToggle feature) {
      | ~~~~                             ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:55:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   55 |         std::lock_guard<std::mutex> lock(config_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:56:23: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   56 |         feature_states[feature] = true;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:56:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   56 |         feature_states[feature] = true;
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:57:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   57 |         logFeatureChange(feature, true, "User requested enable");
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:61:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   61 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:62:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |             std::cerr << "[FeatureToggleManager] Exception in enableFeature: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:62:80: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |             std::cerr << "[FeatureToggleManager] Exception in enableFeature: " << e.what() << std::endl;
      |                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:62:92: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |             std::cerr << "[FeatureToggleManager] Exception in enableFeature: " << e.what() << std::endl;
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:62:95: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |             std::cerr << "[FeatureToggleManager] Exception in enableFeature: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:62:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   62 |             std::cerr << "[FeatureToggleManager] Exception in enableFeature: " << e.what() << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:68:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   68 | bool FGCom_FeatureToggleManager::disableFeature(FeatureToggle feature) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:68:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 | bool FGCom_FeatureToggleManager::disableFeature(FeatureToggle feature) {
      | ~~~~                             ^
      | auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:74:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   74 |         std::lock_guard<std::mutex> lock(config_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:75:23: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |         feature_states[feature] = false;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:75:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |         feature_states[feature] = false;
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:76:42: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   76 |         logFeatureChange(feature, false, "User requested disable");
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:80:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   80 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:81:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |             std::cerr << "[FeatureToggleManager] Exception in disableFeature: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:81:81: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |             std::cerr << "[FeatureToggleManager] Exception in disableFeature: " << e.what() << std::endl;
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:81:93: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |             std::cerr << "[FeatureToggleManager] Exception in disableFeature: " << e.what() << std::endl;
      |                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:81:96: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |             std::cerr << "[FeatureToggleManager] Exception in disableFeature: " << e.what() << std::endl;
      |                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:81:96: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   81 |             std::cerr << "[FeatureToggleManager] Exception in disableFeature: " << e.what() << std::endl;
      |                                                                                                ^~~~~~~~~
      |                                                                                                '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:87:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   87 | bool FGCom_FeatureToggleManager::toggleFeature(FeatureToggle feature) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:87:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 | bool FGCom_FeatureToggleManager::toggleFeature(FeatureToggle feature) {
      | ~~~~                             ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:89:9: warning: variable 'current_state' of type 'bool' can be declared 'const' [misc-const-correctness]
   89 |         bool current_state = isFeatureEnabled(feature);
      |         ^
      |              const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:92:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   92 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:93:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |             std::cerr << "[FeatureToggleManager] Exception in toggleFeature: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:93:80: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |             std::cerr << "[FeatureToggleManager] Exception in toggleFeature: " << e.what() << std::endl;
      |                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:93:92: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |             std::cerr << "[FeatureToggleManager] Exception in toggleFeature: " << e.what() << std::endl;
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:93:95: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |             std::cerr << "[FeatureToggleManager] Exception in toggleFeature: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:93:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   93 |             std::cerr << "[FeatureToggleManager] Exception in toggleFeature: " << e.what() << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:99:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   99 | void FGCom_FeatureToggleManager::setFeatureConfig(FeatureToggle feature, const FeatureToggleConfig& config) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:101:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  101 |         std::lock_guard<std::mutex> lock(config_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:102:24: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |         feature_configs[feature] = config;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:102:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |         feature_configs[feature] = config;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:189:8: note: resolves to this declaration
  189 | struct FeatureToggleConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:104:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  104 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:105:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  105 |             std::cerr << "[FeatureToggleManager] Exception in setFeatureConfig: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:105:83: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  105 |             std::cerr << "[FeatureToggleManager] Exception in setFeatureConfig: " << e.what() << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:105:95: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  105 |             std::cerr << "[FeatureToggleManager] Exception in setFeatureConfig: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:105:98: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  105 |             std::cerr << "[FeatureToggleManager] Exception in setFeatureConfig: " << e.what() << std::endl;
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:105:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  105 |             std::cerr << "[FeatureToggleManager] Exception in setFeatureConfig: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:110:49: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  110 | FeatureToggleConfig FGCom_FeatureToggleManager::getFeatureConfig(FeatureToggle feature) const {
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:110:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  110 | FeatureToggleConfig FGCom_FeatureToggleManager::getFeatureConfig(FeatureToggle feature) const {
      | ~~~~~~~~~~~~~~~~~~~                             ^
      | auto                                                                                          -> FeatureToggleConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:112:37: error: no matching constructor for initialization of 'std::lock_guard<std::mutex>' [clang-diagnostic-error]
  112 |         std::lock_guard<std::mutex> lock(config_mutex);
      |                                     ^    ~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:248:16: note: candidate constructor not viable: 1st argument ('const std::mutex') would lose const qualifier
  248 |       explicit lock_guard(mutex_type& __m) : _M_device(__m)
      |                ^          ~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:257:7: note: candidate constructor not viable: no known conversion from 'const std::mutex' to 'const lock_guard<mutex>' for 1st argument
  257 |       lock_guard(const lock_guard&) = delete;
      |       ^          ~~~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:251:7: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
  251 |       lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      |       ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:113:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  113 |         auto it = feature_configs.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:114:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |         if (it != feature_configs.end()) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:115:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |             return it->second;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:117:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  117 |         return FeatureToggleConfig();
      |                ^~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:119:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  119 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:120:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  120 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureConfig: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:120:83: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  120 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureConfig: " << e.what() << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:120:95: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  120 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureConfig: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:120:98: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  120 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureConfig: " << e.what() << std::endl;
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:120:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureConfig: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:122:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  122 |         return FeatureToggleConfig();
      |                ^~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:126:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  126 | void FGCom_FeatureToggleManager::initializeDefaultConfigs() {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:128:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  128 |         std::lock_guard<std::mutex> lock(config_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:131:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  131 |         for (int i = 0; i < 107; ++i) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:131:29: warning: 107 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  131 |         for (int i = 0; i < 107; ++i) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:132:13: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
  132 |             FeatureToggle feature = static_cast<FeatureToggle>(i);
      |             ^~~~~~~~~~~~~
      |             auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:132:13: warning: variable 'feature' of type 'FeatureToggle' can be declared 'const' [misc-const-correctness]
  132 |             FeatureToggle feature = static_cast<FeatureToggle>(i);
      |             ^
      |                           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:135:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |             config.description = "Feature " + std::to_string(i);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:135:45: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |             config.description = "Feature " + std::to_string(i);
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:135:47: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |             config.description = "Feature " + std::to_string(i);
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:135:52: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
    7 |             config.description = "Feature " + std::to_string(i);
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:136:64: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  136 |             config.category = static_cast<FeatureCategory>(i / 7); // Distribute across categories
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:137:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |             config.config_key = "feature_" + std::to_string(i);
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:137:44: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |             config.config_key = "feature_" + std::to_string(i);
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:137:46: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |             config.config_key = "feature_" + std::to_string(i);
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:139:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  139 |             config.performance_impact = "low";
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:140:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  140 |             config.memory_impact = "low";
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:141:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |             config.cpu_impact = "low";
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:143:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  143 |             feature_configs[feature] = config;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:143:38: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  143 |             feature_configs[feature] = config;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:189:8: note: resolves to this declaration
  189 | struct FeatureToggleConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:144:27: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  144 |             feature_states[feature] = true;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:144:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  144 |             feature_states[feature] = true;
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:147:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  147 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:148:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |             std::cerr << "[FeatureToggleManager] Exception in initializeDefaultConfigs: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:148:91: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |             std::cerr << "[FeatureToggleManager] Exception in initializeDefaultConfigs: " << e.what() << std::endl;
      |                                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:148:103: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |             std::cerr << "[FeatureToggleManager] Exception in initializeDefaultConfigs: " << e.what() << std::endl;
      |                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:148:106: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |             std::cerr << "[FeatureToggleManager] Exception in initializeDefaultConfigs: " << e.what() << std::endl;
      |                                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:148:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  148 |             std::cerr << "[FeatureToggleManager] Exception in initializeDefaultConfigs: " << e.what() << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:153:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  153 | bool FGCom_FeatureToggleManager::loadConfigFromFile(const std::string& config_file) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:153:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 | bool FGCom_FeatureToggleManager::loadConfigFromFile(const std::string& config_file) {
      | ~~~~                             ^
      | auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:153:34: warning: function 'loadConfigFromFile' has cognitive complexity of 28 (threshold 25) [readability-function-cognitive-complexity]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:156:9: note: +1, including nesting penalty of 0, nesting level increased to 1
  156 |         if (!file.is_open()) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:157:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  157 |             if (debug_mode_enabled.load()) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:166:9: note: +1, including nesting penalty of 0, nesting level increased to 1
  166 |         while (std::getline(file, line)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:167:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  167 |             if (line.empty() || line[0] == '#' || line[0] == ';') {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:167:48: note: +1
  167 |             if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:171:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  171 |             if (line[0] == '[' && line.back() == ']') {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:171:32: note: +1
  171 |             if (line[0] == '[' && line.back() == ']') {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:177:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  177 |             if (equal_pos != std::string::npos) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:182:17: note: +3, including nesting penalty of 2, nesting level increased to 3
  182 |                 if (current_section == "features") {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:185:73: note: +1
  185 |                         bool enabled = (value == "true" || value == "1" || value == "yes");
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:187:23: note: +4, including nesting penalty of 3, nesting level increased to 4
  187 |                     } catch (const std::exception& e) {
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:188:25: note: +5, including nesting penalty of 4, nesting level increased to 5
  188 |                         if (debug_mode_enabled.load()) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:197:7: note: +1, including nesting penalty of 0, nesting level increased to 1
  197 |     } catch (const std::exception& e) {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:198:9: note: +2, including nesting penalty of 1, nesting level increased to 2
  198 |         if (debug_mode_enabled.load()) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:155:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  155 |         std::ifstream file(config_file);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:157:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  157 |             if (debug_mode_enabled.load()) {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:158:27: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |                 std::cerr << "[FeatureToggleManager] Cannot open config file: " << config_file << std::endl;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:158:81: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |                 std::cerr << "[FeatureToggleManager] Cannot open config file: " << config_file << std::endl;
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:158:96: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |                 std::cerr << "[FeatureToggleManager] Cannot open config file: " << config_file << std::endl;
      |                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:158:99: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |                 std::cerr << "[FeatureToggleManager] Cannot open config file: " << config_file << std::endl;
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:158:99: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  158 |                 std::cerr << "[FeatureToggleManager] Cannot open config file: " << config_file << std::endl;
      |                                                                                                   ^~~~~~~~~
      |                                                                                                   '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:164:21: warning: redundant string initialization [readability-redundant-string-init]
  164 |         std::string current_section = "";
      |                     ^~~~~~~~~~~~~~~~~~~~
      |                     current_section
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:164:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  164 |         std::string current_section = "";
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:166:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  166 |         while (std::getline(file, line)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:166:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
  166 |         while (std::getline(file, line)) {
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:155:9: note: inferred assignment of ID-dependent value from ID-dependent 
  155 |         std::ifstream file(config_file);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:166:16: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |         while (std::getline(file, line)) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:166:21: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
  166 |         while (std::getline(file, line)) {
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:167:37: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |             if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:167:55: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |             if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:171:21: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  171 |             if (line[0] == '[' && line.back() == ']') {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:172:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |                 current_section = line.substr(1, line.length() - 2);
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:176:13: warning: variable 'equal_pos' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  176 |             size_t equal_pos = line.find('=');
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:176:13: warning: no header providing "size_t" is directly included [misc-include-cleaner]
    2 |             size_t equal_pos = line.find('=');
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:176:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  176 |             size_t equal_pos = line.find('=');
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2713:24: note: default parameter was declared here
 2713 |       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:178:17: warning: variable 'key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  178 |                 std::string key = line.substr(0, equal_pos);
      |                 ^
      |                             const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:179:17: warning: variable 'value' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  179 |                 std::string value = line.substr(equal_pos + 1);
      |                 ^
      |                             const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:179:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  179 |                 std::string value = line.substr(equal_pos + 1);
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3163:35: note: default parameter was declared here
 3163 |       substr(size_type __pos = 0, size_type __n = npos) const
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:182:37: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  182 |                 if (current_section == "features") {
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:184:25: warning: variable 'feature' of type 'FeatureToggle' can be declared 'const' [misc-const-correctness]
  184 |                         FeatureToggle feature = stringToFeatureToggle(key);
      |                         ^
      |                                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:184:49: error: use of undeclared identifier 'stringToFeatureToggle'; did you mean 'FeatureToggleUtils::stringToFeatureToggle'? [clang-diagnostic-error]
  184 |                         FeatureToggle feature = stringToFeatureToggle(key);
      |                                                 ^~~~~~~~~~~~~~~~~~~~~
      |                                                 FeatureToggleUtils::stringToFeatureToggle
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:301:19: note: 'FeatureToggleUtils::stringToFeatureToggle' declared here
  301 |     FeatureToggle stringToFeatureToggle(const std::string& str);
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:184:49: warning: 'stringToFeatureToggle' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  184 |                         FeatureToggle feature = stringToFeatureToggle(key);
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:301:19: note: resolves to this declaration
  301 |     FeatureToggle stringToFeatureToggle(const std::string& str);
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:185:25: warning: variable 'enabled' of type 'bool' can be declared 'const' [misc-const-correctness]
  185 |                         bool enabled = (value == "true" || value == "1" || value == "yes");
      |                         ^
      |                              const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:185:47: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  185 |                         bool enabled = (value == "true" || value == "1" || value == "yes");
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:185:66: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  185 |                         bool enabled = (value == "true" || value == "1" || value == "yes");
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:185:82: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  185 |                         bool enabled = (value == "true" || value == "1" || value == "yes");
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:186:39: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  186 |                         feature_states[feature] = enabled;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:186:49: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  186 |                         feature_states[feature] = enabled;
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:188:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  188 |                         if (debug_mode_enabled.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:189:39: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  189 |                             std::cerr << "[FeatureToggleManager] Invalid feature toggle: " << key << std::endl;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:189:92: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  189 |                             std::cerr << "[FeatureToggleManager] Invalid feature toggle: " << key << std::endl;
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:189:99: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  189 |                             std::cerr << "[FeatureToggleManager] Invalid feature toggle: " << key << std::endl;
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:189:102: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  189 |                             std::cerr << "[FeatureToggleManager] Invalid feature toggle: " << key << std::endl;
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:189:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  189 |                             std::cerr << "[FeatureToggleManager] Invalid feature toggle: " << key << std::endl;
      |                                                                                                      ^~~~~~~~~
      |                                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:198:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  198 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:199:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |             std::cerr << "[FeatureToggleManager] Exception in loadConfigFromFile: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:199:85: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |             std::cerr << "[FeatureToggleManager] Exception in loadConfigFromFile: " << e.what() << std::endl;
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:199:97: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |             std::cerr << "[FeatureToggleManager] Exception in loadConfigFromFile: " << e.what() << std::endl;
      |                                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:199:100: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  199 |             std::cerr << "[FeatureToggleManager] Exception in loadConfigFromFile: " << e.what() << std::endl;
      |                                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:199:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  199 |             std::cerr << "[FeatureToggleManager] Exception in loadConfigFromFile: " << e.what() << std::endl;
      |                                                                                                    ^~~~~~~~~
      |                                                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:205:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  205 | bool FGCom_FeatureToggleManager::saveConfigToFile(const std::string& config_file) const {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:205:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 | bool FGCom_FeatureToggleManager::saveConfigToFile(const std::string& config_file) const {
      | ~~~~                             ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:207:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  207 |         std::ofstream file(config_file);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:833:8: note: default parameter was declared here
  833 |                      ios_base::openmode __mode = ios_base::out)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:209:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  209 |             if (debug_mode_enabled.load()) {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:210:27: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  210 |                 std::cerr << "[FeatureToggleManager] Cannot create config file: " << config_file << std::endl;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:210:83: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  210 |                 std::cerr << "[FeatureToggleManager] Cannot create config file: " << config_file << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:210:98: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  210 |                 std::cerr << "[FeatureToggleManager] Cannot create config file: " << config_file << std::endl;
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:210:101: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  210 |                 std::cerr << "[FeatureToggleManager] Cannot create config file: " << config_file << std::endl;
      |                                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:210:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  210 |                 std::cerr << "[FeatureToggleManager] Cannot create config file: " << config_file << std::endl;
      |                                                                                                     ^~~~~~~~~
      |                                                                                                     '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:215:14: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |         file << "[features]" << std::endl;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:215:30: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |         file << "[features]" << std::endl;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:215:33: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  215 |         file << "[features]" << std::endl;
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:215:33: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  215 |         file << "[features]" << std::endl;
      |                                 ^~~~~~~~~
      |                                 '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:217:37: error: no matching constructor for initialization of 'std::lock_guard<std::mutex>' [clang-diagnostic-error]
  217 |         std::lock_guard<std::mutex> lock(config_mutex);
      |                                     ^    ~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:248:16: note: candidate constructor not viable: 1st argument ('const std::mutex') would lose const qualifier
  248 |       explicit lock_guard(mutex_type& __m) : _M_device(__m)
      |                ^          ~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:257:7: note: candidate constructor not viable: no known conversion from 'const std::mutex' to 'const lock_guard<mutex>' for 1st argument
  257 |       lock_guard(const lock_guard&) = delete;
      |       ^          ~~~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:251:7: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
  251 |       lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      |       ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:218:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  218 |         for (const auto& pair : feature_states) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:218:31: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  218 |         for (const auto& pair : feature_states) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:218:31: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  218 |         for (const auto& pair : feature_states) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:218:31: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  218 |         for (const auto& pair : feature_states) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:219:13: warning: variable 'feature_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  219 |             std::string feature_name = featureToggleToString(pair.first);
      |             ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:219:40: error: use of undeclared identifier 'featureToggleToString'; did you mean 'FeatureToggleUtils::featureToggleToString'? [clang-diagnostic-error]
  219 |             std::string feature_name = featureToggleToString(pair.first);
      |                                        ^~~~~~~~~~~~~~~~~~~~~
      |                                        FeatureToggleUtils::featureToggleToString
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:300:17: note: 'FeatureToggleUtils::featureToggleToString' declared here
  300 |     std::string featureToggleToString(FeatureToggle feature);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:219:40: warning: 'featureToggleToString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  219 |             std::string feature_name = featureToggleToString(pair.first);
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:300:17: note: resolves to this declaration
  300 |     std::string featureToggleToString(FeatureToggle feature);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:220:13: warning: variable 'enabled' of type 'bool' can be declared 'const' [misc-const-correctness]
  220 |             bool enabled = pair.second.load();
      |             ^
      |                  const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:220:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  220 |             bool enabled = pair.second.load();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:221:18: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |             file << feature_name << "=" << (enabled ? "true" : "false") << std::endl;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:221:34: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |             file << feature_name << "=" << (enabled ? "true" : "false") << std::endl;
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:221:41: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |             file << feature_name << "=" << (enabled ? "true" : "false") << std::endl;
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:221:73: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |             file << feature_name << "=" << (enabled ? "true" : "false") << std::endl;
      |                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:221:76: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |             file << feature_name << "=" << (enabled ? "true" : "false") << std::endl;
      |                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:221:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  221 |             file << feature_name << "=" << (enabled ? "true" : "false") << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:226:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  226 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:227:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             std::cerr << "[FeatureToggleManager] Exception in saveConfigToFile: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:227:83: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             std::cerr << "[FeatureToggleManager] Exception in saveConfigToFile: " << e.what() << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:227:95: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             std::cerr << "[FeatureToggleManager] Exception in saveConfigToFile: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:227:98: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             std::cerr << "[FeatureToggleManager] Exception in saveConfigToFile: " << e.what() << std::endl;
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:227:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  227 |             std::cerr << "[FeatureToggleManager] Exception in saveConfigToFile: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:233:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  233 | void FGCom_FeatureToggleManager::recordFeatureUsage(FeatureToggle feature, double performance_impact_ms) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:235:29: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  235 |         feature_usage_counts[feature]++;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:235:38: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  235 |         feature_usage_counts[feature]++;
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:236:35: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  236 |         feature_performance_impact[feature] = performance_impact_ms;
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:236:45: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  236 |         feature_performance_impact[feature] = performance_impact_ms;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:248:7: note: resolves to this declaration
  248 |       operator=(_Tp __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:238:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  238 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:239:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  239 |             std::cerr << "[FeatureToggleManager] Exception in recordFeatureUsage: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:239:85: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  239 |             std::cerr << "[FeatureToggleManager] Exception in recordFeatureUsage: " << e.what() << std::endl;
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:239:97: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  239 |             std::cerr << "[FeatureToggleManager] Exception in recordFeatureUsage: " << e.what() << std::endl;
      |                                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:239:100: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  239 |             std::cerr << "[FeatureToggleManager] Exception in recordFeatureUsage: " << e.what() << std::endl;
      |                                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:239:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  239 |             std::cerr << "[FeatureToggleManager] Exception in recordFeatureUsage: " << e.what() << std::endl;
      |                                                                                                    ^~~~~~~~~
      |                                                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:244:1: warning: no header providing "uint64_t" is directly included [misc-include-cleaner]
    2 | uint64_t FGCom_FeatureToggleManager::getFeatureUsageCount(FeatureToggle feature) const {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:244:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  244 | uint64_t FGCom_FeatureToggleManager::getFeatureUsageCount(FeatureToggle feature) const {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:244:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  244 | uint64_t FGCom_FeatureToggleManager::getFeatureUsageCount(FeatureToggle feature) const {
      | ~~~~~~~~                             ^
      | auto                                                                                   -> uint64_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:246:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  246 |         auto it = feature_usage_counts.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:247:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  247 |         if (it != feature_usage_counts.end()) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:248:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  248 |             return it->second.load();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:248:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  248 |             return it->second.load();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:252:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  252 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:253:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  253 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureUsageCount: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:253:87: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  253 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureUsageCount: " << e.what() << std::endl;
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:253:99: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  253 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureUsageCount: " << e.what() << std::endl;
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:253:102: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  253 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureUsageCount: " << e.what() << std::endl;
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:253:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  253 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureUsageCount: " << e.what() << std::endl;
      |                                                                                                      ^~~~~~~~~
      |                                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:259:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  259 | double FGCom_FeatureToggleManager::getFeaturePerformanceImpact(FeatureToggle feature) const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:259:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  259 | double FGCom_FeatureToggleManager::getFeaturePerformanceImpact(FeatureToggle feature) const {
      | ~~~~~~                             ^
      | auto                                                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:261:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  261 |         auto it = feature_performance_impact.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:262:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  262 |         if (it != feature_performance_impact.end()) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:263:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  263 |             return it->second.load();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:293:12: note: default parameter was declared here
  293 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:263:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  263 |             return it->second.load();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:267:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  267 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:268:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |             std::cerr << "[FeatureToggleManager] Exception in getFeaturePerformanceImpact: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:268:94: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |             std::cerr << "[FeatureToggleManager] Exception in getFeaturePerformanceImpact: " << e.what() << std::endl;
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:268:106: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |             std::cerr << "[FeatureToggleManager] Exception in getFeaturePerformanceImpact: " << e.what() << std::endl;
      |                                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:268:109: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |             std::cerr << "[FeatureToggleManager] Exception in getFeaturePerformanceImpact: " << e.what() << std::endl;
      |                                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:268:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  268 |             std::cerr << "[FeatureToggleManager] Exception in getFeaturePerformanceImpact: " << e.what() << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:274:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  274 | bool FGCom_FeatureToggleManager::validateConfiguration() const {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:274:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  274 | bool FGCom_FeatureToggleManager::validateConfiguration() const {
      | ~~~~                             ^
      | auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:276:37: error: no matching constructor for initialization of 'std::lock_guard<std::mutex>' [clang-diagnostic-error]
  276 |         std::lock_guard<std::mutex> lock(config_mutex);
      |                                     ^    ~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:248:16: note: candidate constructor not viable: 1st argument ('const std::mutex') would lose const qualifier
  248 |       explicit lock_guard(mutex_type& __m) : _M_device(__m)
      |                ^          ~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:257:7: note: candidate constructor not viable: no known conversion from 'const std::mutex' to 'const lock_guard<mutex>' for 1st argument
  257 |       lock_guard(const lock_guard&) = delete;
      |       ^          ~~~~~~~~~~~~~~~~~
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_mutex.h:251:7: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
  251 |       lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      |       ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:279:31: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  279 |         for (const auto& pair : feature_states) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:279:31: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  279 |         for (const auto& pair : feature_states) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:279:31: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  279 |         for (const auto& pair : feature_states) {
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:280:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  280 |             if (pair.second.load()) {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:282:17: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  282 |                 for (const auto& conflict : conflicts) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:282:43: warning: 'operator!=<FeatureToggle *, std::vector<FeatureToggle>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  282 |                 for (const auto& conflict : conflicts) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:282:43: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  282 |                 for (const auto& conflict : conflicts) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:282:43: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  282 |                 for (const auto& conflict : conflicts) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:292:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  292 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:293:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  293 |             std::cerr << "[FeatureToggleManager] Exception in validateConfiguration: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:293:88: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  293 |             std::cerr << "[FeatureToggleManager] Exception in validateConfiguration: " << e.what() << std::endl;
      |                                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:293:100: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  293 |             std::cerr << "[FeatureToggleManager] Exception in validateConfiguration: " << e.what() << std::endl;
      |                                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:293:103: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  293 |             std::cerr << "[FeatureToggleManager] Exception in validateConfiguration: " << e.what() << std::endl;
      |                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:293:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  293 |             std::cerr << "[FeatureToggleManager] Exception in validateConfiguration: " << e.what() << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:299:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
    7 | std::vector<std::string> FGCom_FeatureToggleManager::getConfigurationErrors() const {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:299:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  299 | std::vector<std::string> FGCom_FeatureToggleManager::getConfigurationErrors() const {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:299:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  299 | std::vector<std::string> FGCom_FeatureToggleManager::getConfigurationErrors() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                             ^
      | auto                                                                                -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:304:20: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
  304 |             errors.push_back("Conflicting features are enabled");
      |                    ^~~~~~~~~~
      |                    emplace_back(
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:304:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  304 |             errors.push_back("Conflicting features are enabled");
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:307:72: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  307 |         errors.push_back("Exception during configuration validation: " + std::string(e.what()));
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:307:74: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  307 |         errors.push_back("Exception during configuration validation: " + std::string(e.what()));
      |                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:313:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  313 | void FGCom_FeatureToggleManager::enableDebugMode(bool enable) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:314:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     debug_mode_enabled = enable;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:317:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  317 | bool FGCom_FeatureToggleManager::isDebugModeEnabled() const {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:317:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  317 | bool FGCom_FeatureToggleManager::isDebugModeEnabled() const {
      | ~~~~                             ^
      | auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:318:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  318 |     return debug_mode_enabled.load();
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:321:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  321 | void FGCom_FeatureToggleManager::logFeatureToggle(FeatureToggle feature, bool enabled, const std::string& reason) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:325:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  325 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:326:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  326 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureToggle: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:326:83: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  326 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureToggle: " << e.what() << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:326:95: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  326 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureToggle: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:326:98: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  326 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureToggle: " << e.what() << std::endl;
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:326:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  326 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureToggle: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:332:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  332 | void FGCom_FeatureToggleManager::initializeFeatureConfigs() {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:336:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  336 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:337:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  337 |             std::cerr << "[FeatureToggleManager] Exception in initializeFeatureConfigs: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:337:91: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  337 |             std::cerr << "[FeatureToggleManager] Exception in initializeFeatureConfigs: " << e.what() << std::endl;
      |                                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:337:103: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  337 |             std::cerr << "[FeatureToggleManager] Exception in initializeFeatureConfigs: " << e.what() << std::endl;
      |                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:337:106: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  337 |             std::cerr << "[FeatureToggleManager] Exception in initializeFeatureConfigs: " << e.what() << std::endl;
      |                                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:337:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  337 |             std::cerr << "[FeatureToggleManager] Exception in initializeFeatureConfigs: " << e.what() << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:342:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  342 | bool FGCom_FeatureToggleManager::validateFeatureToggle(FeatureToggle feature, bool enabled) const {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:342:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  342 | bool FGCom_FeatureToggleManager::validateFeatureToggle(FeatureToggle feature, bool enabled) const {
      | ~~~~                             ^
      | auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:361:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  361 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:362:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  362 |             std::cerr << "[FeatureToggleManager] Exception in validateFeatureToggle: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:362:88: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  362 |             std::cerr << "[FeatureToggleManager] Exception in validateFeatureToggle: " << e.what() << std::endl;
      |                                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:362:100: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  362 |             std::cerr << "[FeatureToggleManager] Exception in validateFeatureToggle: " << e.what() << std::endl;
      |                                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:362:103: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  362 |             std::cerr << "[FeatureToggleManager] Exception in validateFeatureToggle: " << e.what() << std::endl;
      |                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:362:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  362 |             std::cerr << "[FeatureToggleManager] Exception in validateFeatureToggle: " << e.what() << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:368:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  368 | void FGCom_FeatureToggleManager::updateDependentFeatures(FeatureToggle feature, bool enabled) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:368:72: warning: parameter 'feature' is unused [misc-unused-parameters]
  368 | void FGCom_FeatureToggleManager::updateDependentFeatures(FeatureToggle feature, bool enabled) {
      |                                                                        ^~~~~~~
      |                                                                         /*feature*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:368:86: warning: parameter 'enabled' is unused [misc-unused-parameters]
  368 | void FGCom_FeatureToggleManager::updateDependentFeatures(FeatureToggle feature, bool enabled) {
      |                                                                                      ^~~~~~~
      |                                                                                       /*enabled*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:373:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  373 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:374:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  374 |             std::cerr << "[FeatureToggleManager] Exception in updateDependentFeatures: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:374:90: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  374 |             std::cerr << "[FeatureToggleManager] Exception in updateDependentFeatures: " << e.what() << std::endl;
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:374:102: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  374 |             std::cerr << "[FeatureToggleManager] Exception in updateDependentFeatures: " << e.what() << std::endl;
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:374:105: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  374 |             std::cerr << "[FeatureToggleManager] Exception in updateDependentFeatures: " << e.what() << std::endl;
      |                                                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:374:105: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  374 |             std::cerr << "[FeatureToggleManager] Exception in updateDependentFeatures: " << e.what() << std::endl;
      |                                                                                                         ^~~~~~~~~
      |                                                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:379:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  379 | void FGCom_FeatureToggleManager::logFeatureChange(FeatureToggle feature, bool enabled, const std::string& reason) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:381:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  381 |         std::lock_guard<std::mutex> lock(history_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:382:9: warning: variable 'log_entry' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  382 |         std::string log_entry = "Feature " + featureToggleToString(feature) + 
      |         ^
      |                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:382:44: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  382 |         std::string log_entry = "Feature " + featureToggleToString(feature) + 
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:382:46: error: use of undeclared identifier 'featureToggleToString'; did you mean 'FeatureToggleUtils::featureToggleToString'? [clang-diagnostic-error]
  382 |         std::string log_entry = "Feature " + featureToggleToString(feature) + 
      |                                              ^~~~~~~~~~~~~~~~~~~~~
      |                                              FeatureToggleUtils::featureToggleToString
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:300:17: note: 'FeatureToggleUtils::featureToggleToString' declared here
  300 |     std::string featureToggleToString(FeatureToggle feature);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:382:46: warning: 'featureToggleToString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  382 |         std::string log_entry = "Feature " + featureToggleToString(feature) + 
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:300:17: note: resolves to this declaration
  300 |     std::string featureToggleToString(FeatureToggle feature);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:382:77: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  382 |         std::string log_entry = "Feature " + featureToggleToString(feature) + 
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:383:36: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  383 |                                " " + (enabled ? "enabled" : "disabled") + 
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:383:73: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  383 |                                " " + (enabled ? "enabled" : "disabled") + 
      |                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:384:38: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  384 |                                " - " + reason;
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:388:37: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |         if (toggle_history.size() > 1000) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:392:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  392 |         if (debug_mode_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:393:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  393 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureChange: " << e.what() << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:393:83: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  393 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureChange: " << e.what() << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:393:95: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  393 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureChange: " << e.what() << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:393:98: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  393 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureChange: " << e.what() << std::endl;
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:393:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  393 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureChange: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:399:11: warning: the outermost namespace should be the 'LIBC_NAMESPACE' macro [llvmlibc-implementation-in-namespace]
  399 | namespace FeatureToggleUtils {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:400:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  400 |     std::string featureToggleToString(FeatureToggle feature) {
      |     ~~~~~~~~~~~ ^
      |     auto                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:404:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  404 |                     return "threading_solar_data";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:406:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  406 |                     return "threading_propagation";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:408:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  408 |                     return "threading_api_server";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:410:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  410 |                     return "threading_gpu_compute";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:412:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  412 |                     return "threading_lightning_data";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:414:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  414 |                     return "threading_weather_data";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:416:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  416 |                     return "threading_antenna_pattern";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:418:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  418 |                     return "threading_monitoring";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:421:47: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  421 |                     return "unknown_feature_" + std::to_string(static_cast<int>(feature));
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:421:49: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  421 |                     return "unknown_feature_" + std::to_string(static_cast<int>(feature));
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:424:37: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |             return "error_feature_" + std::to_string(static_cast<int>(feature));
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:424:39: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |             return "error_feature_" + std::to_string(static_cast<int>(feature));
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:428:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  428 |     FeatureToggle stringToFeatureToggle(const std::string& str) {
      |     ~~~~~~~~~~~~~ ^
      |     auto                                                        -> FeatureToggle
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:430:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  430 |             if (str == "threading_solar_data") return FeatureToggle::THREADING_SOLAR_DATA;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:430:47: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  430 |             if (str == "threading_solar_data") return FeatureToggle::THREADING_SOLAR_DATA;
      |                                               ^                                           
      |                                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:431:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  431 |             if (str == "threading_propagation") return FeatureToggle::THREADING_PROPAGATION;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:431:48: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  431 |             if (str == "threading_propagation") return FeatureToggle::THREADING_PROPAGATION;
      |                                                ^                                            
      |                                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:432:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  432 |             if (str == "threading_api_server") return FeatureToggle::THREADING_API_SERVER;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:432:47: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  432 |             if (str == "threading_api_server") return FeatureToggle::THREADING_API_SERVER;
      |                                               ^                                           
      |                                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:433:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  433 |             if (str == "threading_gpu_compute") return FeatureToggle::THREADING_GPU_COMPUTE;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:433:48: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  433 |             if (str == "threading_gpu_compute") return FeatureToggle::THREADING_GPU_COMPUTE;
      |                                                ^                                            
      |                                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:434:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  434 |             if (str == "threading_lightning_data") return FeatureToggle::THREADING_LIGHTNING_DATA;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:434:51: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  434 |             if (str == "threading_lightning_data") return FeatureToggle::THREADING_LIGHTNING_DATA;
      |                                                   ^                                               
      |                                                    {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:435:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  435 |             if (str == "threading_weather_data") return FeatureToggle::THREADING_WEATHER_DATA;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:435:49: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  435 |             if (str == "threading_weather_data") return FeatureToggle::THREADING_WEATHER_DATA;
      |                                                 ^                                             
      |                                                  {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:436:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  436 |             if (str == "threading_antenna_pattern") return FeatureToggle::THREADING_ANTENNA_PATTERN;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:436:52: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  436 |             if (str == "threading_antenna_pattern") return FeatureToggle::THREADING_ANTENNA_PATTERN;
      |                                                    ^                                                
      |                                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:437:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  437 |             if (str == "threading_monitoring") return FeatureToggle::THREADING_MONITORING;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:437:47: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  437 |             if (str == "threading_monitoring") return FeatureToggle::THREADING_MONITORING;
      |                                               ^                                           
      |                                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:440:24: warning: no header providing "std::invalid_argument" is directly included [misc-include-cleaner]
    7 |             throw std::invalid_argument("Unknown feature toggle: " + str);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:440:68: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  440 |             throw std::invalid_argument("Unknown feature toggle: " + str);
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:442:75: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  442 |             throw std::invalid_argument("Invalid feature toggle string: " + str);
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:446:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  446 |     std::string featureCategoryToString(FeatureCategory category) {
      |     ~~~~~~~~~~~ ^
      |     auto                                                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:450:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  450 |                     return "threading";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:452:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  452 |                     return "gpu_acceleration";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:454:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  454 |                     return "solar_data";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:456:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  456 |                     return "propagation";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:458:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  458 |                     return "antenna_patterns";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:460:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  460 |                     return "audio_processing";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:462:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  462 |                     return "api_server";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:464:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  464 |                     return "lightning_data";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:466:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  466 |                     return "weather_data";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:468:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  468 |                     return "power_management";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:470:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  470 |                     return "frequency_offset";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:472:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  472 |                     return "bfo_simulation";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:474:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  474 |                     return "filter_application";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:476:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  476 |                     return "fuzzy_logic";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:478:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  478 |                     return "vehicle_dynamics";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:480:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  480 |                     return "debugging";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:482:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  482 |                     return "performance_monitoring";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:484:48: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  484 |                     return "unknown_category_" + std::to_string(static_cast<int>(category));
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:484:50: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  484 |                     return "unknown_category_" + std::to_string(static_cast<int>(category));
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:487:38: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  487 |             return "error_category_" + std::to_string(static_cast<int>(category));
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:487:40: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  487 |             return "error_category_" + std::to_string(static_cast<int>(category));
      |                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:491:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  491 |     FeatureCategory stringToFeatureCategory(const std::string& str) {
      |     ~~~~~~~~~~~~~~~ ^
      |     auto                                                            -> FeatureCategory
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:493:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |             if (str == "threading") return FeatureCategory::THREADING;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:493:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  493 |             if (str == "threading") return FeatureCategory::THREADING;
      |                                    ^                                  
      |                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:494:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  494 |             if (str == "gpu_acceleration") return FeatureCategory::GPU_ACCELERATION;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:494:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  494 |             if (str == "gpu_acceleration") return FeatureCategory::GPU_ACCELERATION;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:495:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  495 |             if (str == "solar_data") return FeatureCategory::SOLAR_DATA;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:495:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  495 |             if (str == "solar_data") return FeatureCategory::SOLAR_DATA;
      |                                     ^                                   
      |                                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:496:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  496 |             if (str == "propagation") return FeatureCategory::PROPAGATION;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:496:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  496 |             if (str == "propagation") return FeatureCategory::PROPAGATION;
      |                                      ^                                    
      |                                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:497:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  497 |             if (str == "antenna_patterns") return FeatureCategory::ANTENNA_PATTERNS;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:497:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  497 |             if (str == "antenna_patterns") return FeatureCategory::ANTENNA_PATTERNS;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:498:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  498 |             if (str == "audio_processing") return FeatureCategory::AUDIO_PROCESSING;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:498:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  498 |             if (str == "audio_processing") return FeatureCategory::AUDIO_PROCESSING;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:499:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  499 |             if (str == "api_server") return FeatureCategory::API_SERVER;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:499:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  499 |             if (str == "api_server") return FeatureCategory::API_SERVER;
      |                                     ^                                   
      |                                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:500:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  500 |             if (str == "lightning_data") return FeatureCategory::LIGHTNING_DATA;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:500:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  500 |             if (str == "lightning_data") return FeatureCategory::LIGHTNING_DATA;
      |                                         ^                                       
      |                                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:501:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  501 |             if (str == "weather_data") return FeatureCategory::WEATHER_DATA;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:501:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  501 |             if (str == "weather_data") return FeatureCategory::WEATHER_DATA;
      |                                       ^                                     
      |                                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:502:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  502 |             if (str == "power_management") return FeatureCategory::POWER_MANAGEMENT;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:502:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  502 |             if (str == "power_management") return FeatureCategory::POWER_MANAGEMENT;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:503:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  503 |             if (str == "frequency_offset") return FeatureCategory::FREQUENCY_OFFSET;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:503:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  503 |             if (str == "frequency_offset") return FeatureCategory::FREQUENCY_OFFSET;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:504:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  504 |             if (str == "bfo_simulation") return FeatureCategory::BFO_SIMULATION;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:504:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  504 |             if (str == "bfo_simulation") return FeatureCategory::BFO_SIMULATION;
      |                                         ^                                       
      |                                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:505:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  505 |             if (str == "filter_application") return FeatureCategory::FILTER_APPLICATION;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:505:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  505 |             if (str == "filter_application") return FeatureCategory::FILTER_APPLICATION;
      |                                             ^                                           
      |                                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:506:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  506 |             if (str == "fuzzy_logic") return FeatureCategory::FUZZY_LOGIC;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:506:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  506 |             if (str == "fuzzy_logic") return FeatureCategory::FUZZY_LOGIC;
      |                                      ^                                    
      |                                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:507:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  507 |             if (str == "vehicle_dynamics") return FeatureCategory::VEHICLE_DYNAMICS;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:507:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  507 |             if (str == "vehicle_dynamics") return FeatureCategory::VEHICLE_DYNAMICS;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:508:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  508 |             if (str == "debugging") return FeatureCategory::DEBUGGING;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:508:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  508 |             if (str == "debugging") return FeatureCategory::DEBUGGING;
      |                                    ^                                  
      |                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:509:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  509 |             if (str == "performance_monitoring") return FeatureCategory::PERFORMANCE_MONITORING;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:509:49: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  509 |             if (str == "performance_monitoring") return FeatureCategory::PERFORMANCE_MONITORING;
      |                                                 ^                                               
      |                                                  {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:511:70: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  511 |             throw std::invalid_argument("Unknown feature category: " + str);
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:513:77: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  513 |             throw std::invalid_argument("Invalid feature category string: " + str);
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:517:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  517 |     bool isValidImpactLevel(const std::string& impact_level) {
      |     ~~~~ ^
      |     auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:520:13: warning: 'transform<__gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, __gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, int (*)(int) noexcept>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  520 |             std::transform(lower_level.begin(), lower_level.end(), lower_level.begin(), ::tolower);
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4298:5: note: resolves to this declaration
 4298 |     transform(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:521:33: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  521 |             return (lower_level == "low" || lower_level == "medium" || lower_level == "high");
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:521:57: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  521 |             return (lower_level == "low" || lower_level == "medium" || lower_level == "high");
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:521:84: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  521 |             return (lower_level == "low" || lower_level == "medium" || lower_level == "high");
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:527:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  527 |     std::vector<std::string> getValidImpactLevels() {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:528:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  528 |         return {"low", "medium", "high"};
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:528:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  528 |         return {"low", "medium", "high"};
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:528:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  528 |         return {"low", "medium", "high"};
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:528:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  528 |         return {"low", "medium", "high"};
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:530:1: warning: namespace 'FeatureToggleUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  530 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:399:11: note: namespace 'FeatureToggleUtils' starts here
  399 | namespace FeatureToggleUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_FEATURE_TOGGLES_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_FEATURE_TOGGLES_H
    2 | #define FGCOM_FEATURE_TOGGLES_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_FEATURE_TOGGLES_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:6:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    7 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:7:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:8:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:9:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
   10 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:10:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   11 | #include <cstdint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:11:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   12 | #include <stdexcept>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:12:1: warning: system include stdexcept not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <stdexcept>
      | ^~~~~~~~~~~~~~~~~~~~
   13 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:13:1: warning: system include algorithm not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   14 | #include <cassert>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:14:1: warning: system include cassert not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <cassert>
      | ^~~~~~~~~~~~~~~~~~
   15 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:24:12: warning: enum 'FeatureCategory' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   24 | enum class FeatureCategory {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:45:12: warning: enum 'FeatureToggle' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   45 | enum class FeatureToggle {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:189:8: warning: accessing fields in struct 'FeatureToggleConfig' is inefficient due to padding; only needs 262 bytes but is using 280 bytes [altera-struct-pack-align]
  189 | struct FeatureToggleConfig {
      |        ^
  190 |     bool enabled = true;
  191 |     std::string description;
  192 |     FeatureCategory category;
  193 |     std::string config_key;
  194 |     bool requires_restart = false;
  195 |     std::map<std::string, std::string> dependencies;
  196 |     std::map<std::string, std::string> conflicts;
  197 |     std::string performance_impact; // "low", "medium", "high"
  198 |     std::string memory_impact; // "low", "medium", "high"
  199 |     std::string cpu_impact; // "low", "medium", "high"
  200 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:189:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FeatureToggleConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:189:8: warning: accessing fields in struct 'FeatureToggleConfig' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  189 | struct FeatureToggleConfig {
      |        ^
  190 |     bool enabled = true;
  191 |     std::string description;
  192 |     FeatureCategory category;
  193 |     std::string config_key;
  194 |     bool requires_restart = false;
  195 |     std::map<std::string, std::string> dependencies;
  196 |     std::map<std::string, std::string> conflicts;
  197 |     std::string performance_impact; // "low", "medium", "high"
  198 |     std::string memory_impact; // "low", "medium", "high"
  199 |     std::string cpu_impact; // "low", "medium", "high"
  200 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:189:8: note: use "__attribute__((aligned(128)))" to align struct 'FeatureToggleConfig' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:189:8: warning: constructor does not initialize these fields: category [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  189 | struct FeatureToggleConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:221:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     static FGCom_FeatureToggleManager& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                                      -> FGCom_FeatureToggleManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:225:5: warning: function 'isFeatureEnabled' should be marked [[nodiscard]] [modernize-use-nodiscard]
  225 |     bool isFeatureEnabled(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:225:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  225 |     bool isFeatureEnabled(FeatureToggle feature) const;
      |     ~~~~ ^                                            
      |     auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:226:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  226 |     bool enableFeature(FeatureToggle feature);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:227:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     bool disableFeature(FeatureToggle feature);
      |     ~~~~ ^                                    
      |     auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:228:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     bool toggleFeature(FeatureToggle feature);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:232:5: warning: function 'getFeatureConfig' should be marked [[nodiscard]] [modernize-use-nodiscard]
  232 |     FeatureToggleConfig getFeatureConfig(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:232:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     FeatureToggleConfig getFeatureConfig(FeatureToggle feature) const;
      |     ~~~~~~~~~~~~~~~~~~~ ^                                            
      |     auto                                                              -> FeatureToggleConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:243:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  243 |     bool loadConfigFromFile(const std::string& config_file);
      |     ~~~~ ^                                                 
      |     auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:244:5: warning: function 'saveConfigToFile' should be marked [[nodiscard]] [modernize-use-nodiscard]
  244 |     bool saveConfigToFile(const std::string& config_file) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:244:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  244 |     bool saveConfigToFile(const std::string& config_file) const;
      |     ~~~~ ^                                                     
      |     auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:245:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  245 |     bool loadConfigFromString(const std::string& config_string);
      |     ~~~~ ^                                                     
      |     auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:246:5: warning: function 'saveConfigToString' should be marked [[nodiscard]] [modernize-use-nodiscard]
  246 |     std::string saveConfigToString() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:246:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 |     std::string saveConfigToString() const;
      |     ~~~~~~~~~~~ ^                         
      |     auto                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:249:5: warning: function 'checkDependencies' should be marked [[nodiscard]] [modernize-use-nodiscard]
  249 |     bool checkDependencies(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:249:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  249 |     bool checkDependencies(FeatureToggle feature) const;
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:250:5: warning: function 'checkConflicts' should be marked [[nodiscard]] [modernize-use-nodiscard]
  250 |     bool checkConflicts(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:250:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  250 |     bool checkConflicts(FeatureToggle feature) const;
      |     ~~~~ ^                                          
      |     auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:251:5: warning: function 'getDependentFeatures' should be marked [[nodiscard]] [modernize-use-nodiscard]
  251 |     std::vector<FeatureToggle> getDependentFeatures(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:251:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  251 |     std::vector<FeatureToggle> getDependentFeatures(FeatureToggle feature) const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                         -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:252:5: warning: function 'getConflictingFeatures' should be marked [[nodiscard]] [modernize-use-nodiscard]
  252 |     std::vector<FeatureToggle> getConflictingFeatures(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:252:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  252 |     std::vector<FeatureToggle> getConflictingFeatures(FeatureToggle feature) const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                  
      |     auto                                                                           -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:255:52: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  255 |     void recordFeatureUsage(FeatureToggle feature, double performance_impact_ms = 0.0);
      |                                                    ^                            ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:256:5: warning: function 'getFeatureUsageCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  256 |     uint64_t getFeatureUsageCount(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:256:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |     uint64_t getFeatureUsageCount(FeatureToggle feature) const;
      |     ~~~~~~~~ ^                                                
      |     auto                                                       -> uint64_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:257:5: warning: function 'getFeaturePerformanceImpact' should be marked [[nodiscard]] [modernize-use-nodiscard]
  257 |     double getFeaturePerformanceImpact(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:257:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  257 |     double getFeaturePerformanceImpact(FeatureToggle feature) const;
      |     ~~~~~~ ^                                                       
      |     auto                                                            -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:258:5: warning: function 'getAllFeatureUsageCounts' should be marked [[nodiscard]] [modernize-use-nodiscard]
  258 |     std::map<FeatureToggle, uint64_t> getAllFeatureUsageCounts() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:258:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 |     std::map<FeatureToggle, uint64_t> getAllFeatureUsageCounts() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                               
      |     auto                                                               -> std::map<FeatureToggle, uint64_t>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:259:5: warning: function 'getAllFeaturePerformanceImpacts' should be marked [[nodiscard]] [modernize-use-nodiscard]
  259 |     std::map<FeatureToggle, double> getAllFeaturePerformanceImpacts() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:259:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  259 |     std::map<FeatureToggle, double> getAllFeaturePerformanceImpacts() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                      
      |     auto                                                                    -> std::map<FeatureToggle, double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:262:5: warning: function 'getEnabledFeatures' should be marked [[nodiscard]] [modernize-use-nodiscard]
  262 |     std::vector<FeatureToggle> getEnabledFeatures() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:262:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  262 |     std::vector<FeatureToggle> getEnabledFeatures() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                         
      |     auto                                                  -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:263:5: warning: function 'getDisabledFeatures' should be marked [[nodiscard]] [modernize-use-nodiscard]
  263 |     std::vector<FeatureToggle> getDisabledFeatures() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:263:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  263 |     std::vector<FeatureToggle> getDisabledFeatures() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |     auto                                                   -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:264:5: warning: function 'getFeaturesByCategory' should be marked [[nodiscard]] [modernize-use-nodiscard]
  264 |     std::vector<FeatureToggle> getFeaturesByCategory(FeatureCategory category) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:264:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 |     std::vector<FeatureToggle> getFeaturesByCategory(FeatureCategory category) const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                    
      |     auto                                                                             -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:265:5: warning: function 'getFeaturesByImpact' should be marked [[nodiscard]] [modernize-use-nodiscard]
  265 |     std::vector<FeatureToggle> getFeaturesByImpact(const std::string& impact_level) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:265:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     std::vector<FeatureToggle> getFeaturesByImpact(const std::string& impact_level) const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                         
      |     auto                                                                                  -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:268:5: warning: function 'validateConfiguration' should be marked [[nodiscard]] [modernize-use-nodiscard]
  268 |     bool validateConfiguration() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:268:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  268 |     bool validateConfiguration() const;
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:269:5: warning: function 'getConfigurationErrors' should be marked [[nodiscard]] [modernize-use-nodiscard]
  269 |     std::vector<std::string> getConfigurationErrors() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:269:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  269 |     std::vector<std::string> getConfigurationErrors() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                             
      |     auto                                                    -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:270:5: warning: function 'getConfigurationWarnings' should be marked [[nodiscard]] [modernize-use-nodiscard]
  270 |     std::vector<std::string> getConfigurationWarnings() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:270:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  270 |     std::vector<std::string> getConfigurationWarnings() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                               
      |     auto                                                      -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:274:5: warning: function 'canToggleFeature' should be marked [[nodiscard]] [modernize-use-nodiscard]
  274 |     bool canToggleFeature(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:274:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  274 |     bool canToggleFeature(FeatureToggle feature) const;
      |     ~~~~ ^                                            
      |     auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:275:5: warning: function 'requiresRestart' should be marked [[nodiscard]] [modernize-use-nodiscard]
  275 |     bool requiresRestart(FeatureToggle feature) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:275:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  275 |     bool requiresRestart(FeatureToggle feature) const;
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:276:5: warning: function 'getFeaturesRequiringRestart' should be marked [[nodiscard]] [modernize-use-nodiscard]
  276 |     std::vector<FeatureToggle> getFeaturesRequiringRestart() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:276:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     std::vector<FeatureToggle> getFeaturesRequiringRestart() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                  
      |     auto                                                           -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:280:5: warning: function 'isDebugModeEnabled' should be marked [[nodiscard]] [modernize-use-nodiscard]
  280 |     bool isDebugModeEnabled() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:280:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  280 |     bool isDebugModeEnabled() const;
      |     ~~~~ ^                         
      |     auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:281:64: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  281 |     void logFeatureToggle(FeatureToggle feature, bool enabled, const std::string& reason = "");
      |                                                                ^                         ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:281:92: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  281 |     void logFeatureToggle(FeatureToggle feature, bool enabled, const std::string& reason = "");
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:282:5: warning: function 'getFeatureToggleHistory' should be marked [[nodiscard]] [modernize-use-nodiscard]
  282 |     std::vector<std::string> getFeatureToggleHistory() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:282:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  282 |     std::vector<std::string> getFeatureToggleHistory() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                              
      |     auto                                                     -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:287:5: warning: function 'validateFeatureToggle' should be marked [[nodiscard]] [modernize-use-nodiscard]
  287 |     bool validateFeatureToggle(FeatureToggle feature, bool enabled) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:287:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  287 |     bool validateFeatureToggle(FeatureToggle feature, bool enabled) const;
      |     ~~~~ ^                                                               
      |     auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:300:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  300 |     std::string featureToggleToString(FeatureToggle feature);
      |     ~~~~~~~~~~~ ^                                           
      |     auto                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:301:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  301 |     FeatureToggle stringToFeatureToggle(const std::string& str);
      |     ~~~~~~~~~~~~~ ^                                            
      |     auto                                                        -> FeatureToggle
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:304:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  304 |     std::string featureCategoryToString(FeatureCategory category);
      |     ~~~~~~~~~~~ ^                                                
      |     auto                                                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:305:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  305 |     FeatureCategory stringToFeatureCategory(const std::string& str);
      |     ~~~~~~~~~~~~~~~ ^                                              
      |     auto                                                            -> FeatureCategory
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:308:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  308 |     bool isValidImpactLevel(const std::string& impact_level);
      |     ~~~~ ^                                                  
      |     auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:309:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  309 |     std::vector<std::string> getValidImpactLevels();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |     auto                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:312:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  312 |     std::vector<FeatureToggle> analyzeFeatureDependencies(FeatureToggle feature);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                         -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:313:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  313 |     std::vector<FeatureToggle> analyzeFeatureConflicts(FeatureToggle feature);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                             
      |     auto                                                                      -> std::vector<FeatureToggle>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:316:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  316 |     double estimateFeaturePerformanceImpact(FeatureToggle feature);
      |     ~~~~~~ ^                                                      
      |     auto                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:317:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  317 |     std::string estimateFeatureResourceUsage(FeatureToggle feature);
      |     ~~~~~~~~~~~ ^                                                  
      |     auto                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:320:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  320 |     bool validateFeatureConfig(const FeatureToggleConfig& config);
      |     ~~~~ ^                                                       
      |     auto                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:321:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 |     std::vector<std::string> getFeatureConfigErrors(const FeatureToggleConfig& config);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                        
      |     auto                                                                               -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:322:1: warning: namespace 'FeatureToggleUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  322 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:298:11: note: namespace 'FeatureToggleUtils' starts here
  298 | namespace FeatureToggleUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:325:9: warning: function-like macro 'FGCOM_FEATURE_ENABLED' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
  325 | #define FGCOM_FEATURE_ENABLED(feature) \
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:328:9: warning: function-like macro 'FGCOM_FEATURE_DISABLED' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
  328 | #define FGCOM_FEATURE_DISABLED(feature) \
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:331:9: warning: function-like macro 'FGCOM_FEATURE_USAGE' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
  331 | #define FGCOM_FEATURE_USAGE(feature, performance_impact) \
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:335:9: warning: function-like macro 'FGCOM_IF_FEATURE_ENABLED' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
  335 | #define FGCOM_IF_FEATURE_ENABLED(feature, code) \
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.h:340:9: warning: function-like macro 'FGCOM_IF_FEATURE_DISABLED' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
  340 | #define FGCOM_IF_FEATURE_DISABLED(feature, code) \
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:2:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    2 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    3 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:3:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
    3 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    4 | #include <fstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:4:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
    4 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
    5 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:5:1: warning: #includes are not sorted properly [llvm-include-order]
    5 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:5:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:5:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:6:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
    6 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
    7 | #include <iomanip>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:7:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
    7 | #include <iomanip>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:7:1: warning: included header iomanip is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:10:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   10 | std::unique_ptr<FGCom_PowerManager> FGCom_PowerManager::instance = nullptr;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:10:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
    5 | #include <sstream>
    6 | #include <iostream>
    7 | #include <iomanip>
    8 | 
    9 | // Singleton instance
   10 | std::unique_ptr<FGCom_PowerManager> FGCom_PowerManager::instance = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:10:57: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   10 | std::unique_ptr<FGCom_PowerManager> FGCom_PowerManager::instance = nullptr;
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:11:6: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
    5 | #include <sstream>
    6 | #include <iostream>
    7 | #include <iomanip>
    8 | 
    9 | // Singleton instance
   10 | std::unique_ptr<FGCom_PowerManager> FGCom_PowerManager::instance = nullptr;
   11 | std::mutex FGCom_PowerManager::instance_mutex;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:11:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   11 | std::mutex FGCom_PowerManager::instance_mutex;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:14:21: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   14 | FGCom_PowerManager::FGCom_PowerManager() 
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:18:19: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   18 |     , current_swr(1.0f)
      |                   ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:19:27: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   19 |     , current_temperature(25.0f)
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:19:27: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:20:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   20 |     , current_antenna_type("vertical")
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:21:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   21 |     , current_frequency_band("amateur")
      |       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:24:42: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   24 |     current_power_levels.current_power = 100;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:25:45: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   25 |     current_power_levels.power_efficiency = 0.8f;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:25:45: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   25 |     current_power_levels.power_efficiency = 0.8f;
      |                                             ^  ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:27:43: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   27 |     current_power_levels.max_safe_power = 1000.0f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:27:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   27 |     current_power_levels.max_safe_power = 1000.0f;
      |                                           ^     ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:28:45: warning: 1500.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   28 |     current_power_levels.regulatory_limit = 1500.0f;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:28:45: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   28 |     current_power_levels.regulatory_limit = 1500.0f;
      |                                             ^     ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:30:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   30 |     current_power_levels.battery_level = 1.0f;
      |                                          ^  ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:31:46: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   31 |     current_power_levels.power_consumption = 100.0f;
      |                                              ^    ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:32:44: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   32 |     current_power_levels.last_power_change = std::chrono::system_clock::now();
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:32:46: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   32 |     current_power_levels.last_power_change = std::chrono::system_clock::now();
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:32:59: warning: no header providing "std::chrono::system_clock" is directly included [misc-include-cleaner]
    3 |     current_power_levels.last_power_change = std::chrono::system_clock::now();
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:36:32: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   36 |     stats.average_efficiency = 0.8f;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:36:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   36 |     stats.average_efficiency = 0.8f;
      |                                ^  ~
      |                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:37:29: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   37 |     stats.peak_power_used = 100.0f;
      |                             ^    ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:38:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   38 |     stats.total_energy_consumed = 0.0f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:39:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   39 |     stats.last_reset = std::chrono::system_clock::now();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:39:24: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   39 |     stats.last_reset = std::chrono::system_clock::now();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:40:45: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   40 |     stats.efficiency_vs_power_correlation = 0.0f;
      |                                             ^  ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:51:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   51 | FGCom_PowerManager& FGCom_PowerManager::getInstance() {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:51:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   51 | FGCom_PowerManager& FGCom_PowerManager::getInstance() {
      | ~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                  -> FGCom_PowerManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:52:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   52 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:52:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
   52 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:54:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   54 |         instance = std::unique_ptr<FGCom_PowerManager>(new FGCom_PowerManager());
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:56:12: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   56 |     return *instance;
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:451:7: note: resolves to this declaration
  451 |       operator*() const noexcept(noexcept(*std::declval<pointer>()))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:59:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   59 | void FGCom_PowerManager::destroyInstance() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:60:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   60 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:61:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   61 |     instance.reset();
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:505:13: note: default parameter was declared here
  505 |       reset(pointer __p = pointer()) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:65:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   65 | bool FGCom_PowerManager::setPowerLevel(int power_watts) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:65:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   65 | bool FGCom_PowerManager::setPowerLevel(int power_watts) {
      | ~~~~                     ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:66:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   66 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:87:5: warning: variable 'old_power' of type 'int' can be declared 'const' [misc-const-correctness]
   87 |     int old_power = current_power_levels.current_power;
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:91:44: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   91 |     current_power_levels.last_power_change = std::chrono::system_clock::now();
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:91:46: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   91 |     current_power_levels.last_power_change = std::chrono::system_clock::now();
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:98:29: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   98 |     stats.peak_power_used = std::max(stats.peak_power_used, static_cast<float>(actual_power));
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:99:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   99 |     stats.power_level_usage[actual_power]++;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:108:30: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  108 |         power_change_callback(old_power, actual_power);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:587:7: note: resolves to this declaration
  587 |       operator()(_ArgTypes... __args) const
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:114:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  114 | int FGCom_PowerManager::getCurrentPower() const {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:114:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 | int FGCom_PowerManager::getCurrentPower() const {
      | ~~~                     ^
      | auto                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:115:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  115 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:119:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
    8 | std::vector<int> FGCom_PowerManager::getAvailablePowerLevels() const {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:119:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  119 | std::vector<int> FGCom_PowerManager::getAvailablePowerLevels() const {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:119:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 | std::vector<int> FGCom_PowerManager::getAvailablePowerLevels() const {
      | ~~~~~~~~~~~~~~~~                     ^
      | auto                                                                 -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:120:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  120 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:124:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  124 | bool FGCom_PowerManager::isPowerLevelAvailable(int power_watts) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:124:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 | bool FGCom_PowerManager::isPowerLevelAvailable(int power_watts) const {
      | ~~~~                     ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:125:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  125 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:126:12: warning: 'find<__gnu_cxx::__normal_iterator<const int *, std::vector<int>>, int>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  126 |     return std::find(current_power_levels.available_powers.begin(), 
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3889:5: note: resolves to this declaration
 3889 |     find(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:128:35: warning: 'operator!=<const int *, std::vector<int>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |                      power_watts) != current_power_levels.available_powers.end();
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:132:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  132 | float FGCom_PowerManager::calculatePowerEfficiency(int power_watts, const std::string& antenna_type) const {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:132:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 | float FGCom_PowerManager::calculatePowerEfficiency(int power_watts, const std::string& antenna_type) const {
      | ~~~~~                     ^
      | auto                                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:133:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  133 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:135:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  135 |     auto it = antenna_efficiency_data.find(antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:136:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  136 |     if (it == antenna_efficiency_data.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:396:7: note: resolves to this declaration
  396 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:16: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:25: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:39: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:53: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                                     ^    ~
      |                                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:63: warning: 2000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                                               ^     ~
      |                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:141:55: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |     const AntennaPowerEfficiency& efficiency_data = it->second;
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:143:23: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  143 |     if (efficiency_it != efficiency_data.efficiency_at_power.end()) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:144:29: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  144 |         return efficiency_it->second;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:148:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  148 |     int lower_power = 0, upper_power = 0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:149:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  149 |     float lower_efficiency = 0.0f, upper_efficiency = 0.0f;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:149:30: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  149 |     float lower_efficiency = 0.0f, upper_efficiency = 0.0f;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:149:55: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  149 |     float lower_efficiency = 0.0f, upper_efficiency = 0.0f;
      |                                                       ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:151:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  151 |     for (const auto& pair : efficiency_data.efficiency_at_power) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:151:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |     for (const auto& pair : efficiency_data.efficiency_at_power) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:151:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |     for (const auto& pair : efficiency_data.efficiency_at_power) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:151:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |     for (const auto& pair : efficiency_data.efficiency_at_power) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:167:5: warning: variable 'ratio' of type 'float' can be declared 'const' [misc-const-correctness]
  167 |     float ratio = static_cast<float>(power_watts - lower_power) / (upper_power - lower_power);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:167:67: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  167 |     float ratio = static_cast<float>(power_watts - lower_power) / (upper_power - lower_power);
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:171:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  171 | float FGCom_PowerManager::getCurrentPowerEfficiency() const {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:171:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 | float FGCom_PowerManager::getCurrentPowerEfficiency() const {
      | ~~~~~                     ^
      | auto                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:172:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  172 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:176:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  176 | int FGCom_PowerManager::getOptimalPowerLevel(const std::string& antenna_type) const {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:176:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 | int FGCom_PowerManager::getOptimalPowerLevel(const std::string& antenna_type) const {
      | ~~~                     ^
      | auto                                                                                -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:177:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  177 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:179:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  179 |     auto it = antenna_efficiency_data.find(antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:180:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     if (it == antenna_efficiency_data.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:396:7: note: resolves to this declaration
  396 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:181:16: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  181 |         return 100; // Default optimal power
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:184:55: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  184 |     const AntennaPowerEfficiency& efficiency_data = it->second;
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:188:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  188 | bool FGCom_PowerManager::optimizePowerForEfficiency() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:188:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 | bool FGCom_PowerManager::optimizePowerForEfficiency() {
      | ~~~~                     ^
      | auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:193:5: warning: variable 'optimal_power' of type 'int' can be declared 'const' [misc-const-correctness]
  193 |     int optimal_power = getOptimalPowerLevel(current_antenna_type);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:198:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  198 | bool FGCom_PowerManager::enablePowerLimiting(bool enable) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:198:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 | bool FGCom_PowerManager::enablePowerLimiting(bool enable) {
      | ~~~~                     ^
      | auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:199:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  199 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:205:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  205 | bool FGCom_PowerManager::isPowerLimitingActive() const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:205:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 | bool FGCom_PowerManager::isPowerLimitingActive() const {
      | ~~~~                     ^
      | auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:206:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  206 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:210:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  210 | bool FGCom_PowerManager::checkPowerLimits(int power_watts) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:210:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  210 | bool FGCom_PowerManager::checkPowerLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:211:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  211 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:235:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  235 |     auto it = antenna_efficiency_data.find(current_antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:236:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  236 |     if (it != antenna_efficiency_data.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:237:59: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  237 |         const AntennaPowerEfficiency& efficiency_data = it->second;
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:238:13: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  238 |         if (power_watts > efficiency_data.thermal_limit) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:246:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  246 | bool FGCom_PowerManager::applyPowerLimits(int requested_power, int& actual_power) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:246:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 | bool FGCom_PowerManager::applyPowerLimits(int requested_power, int& actual_power) const {
      | ~~~~                     ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:247:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  247 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:253:9: warning: variable 'regulatory_limit' of type 'float' can be declared 'const' [misc-const-correctness]
  253 |         float regulatory_limit = getRegulatoryPowerLimit(current_frequency_band);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:254:13: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  254 |         if (actual_power > regulatory_limit) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:261:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  261 |     auto it = antenna_efficiency_data.find(current_antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:262:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  262 |     if (it != antenna_efficiency_data.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:263:30: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  263 |         efficiency_data = &it->second;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:267:45: warning: implicit conversion 'const AntennaPowerEfficiency *' -> 'bool' [readability-implicit-bool-conversion]
  267 |     if (config.enable_thermal_protection && efficiency_data) {
      |                                             ^              
      |                                             (               != nullptr)
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:268:13: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  268 |         if (actual_power > efficiency_data->thermal_limit) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:274:41: warning: implicit conversion 'const AntennaPowerEfficiency *' -> 'bool' [readability-implicit-bool-conversion]
  274 |     if (config.enable_swr_protection && efficiency_data && current_swr > efficiency_data->swr_limit) {
      |                                         ^
      |                                         (               != nullptr)
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:275:41: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  275 |         actual_power = static_cast<int>(actual_power * (efficiency_data->swr_limit / current_swr));
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:280:9: warning: variable 'max_battery_power' of type 'int' can be declared 'const' [misc-const-correctness]
  280 |         int max_battery_power = getMaxPowerForBattery();
      |         ^
      |             const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:290:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  290 | bool FGCom_PowerManager::checkRegulatoryCompliance(int power_watts, const std::string& frequency_band) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:290:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  290 | bool FGCom_PowerManager::checkRegulatoryCompliance(int power_watts, const std::string& frequency_band) const {
      | ~~~~                     ^
      | auto                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:291:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  291 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:293:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  293 |     auto it = regulatory_limits.find(frequency_band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:294:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  294 |     if (it == regulatory_limits.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:396:7: note: resolves to this declaration
  396 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:298:45: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  298 |     const RegulatoryPowerLimits& limits = it->second;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:299:12: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  299 |     return power_watts <= limits.max_power_watts;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:302:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  302 | float FGCom_PowerManager::getRegulatoryPowerLimit(const std::string& frequency_band) const {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:302:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  302 | float FGCom_PowerManager::getRegulatoryPowerLimit(const std::string& frequency_band) const {
      | ~~~~~                     ^
      | auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:303:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  303 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:305:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  305 |     auto it = regulatory_limits.find(frequency_band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:306:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  306 |     if (it == regulatory_limits.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:396:7: note: resolves to this declaration
  396 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:307:16: warning: 1500.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  307 |         return 1500.0f; // Default limit
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:307:16: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  307 |         return 1500.0f; // Default limit
      |                ^     ~
      |                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:310:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  310 |     return it->second.max_power_watts;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:313:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  313 | bool FGCom_PowerManager::isRegulatoryCompliant(int power_watts, const std::string& frequency_band) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:313:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  313 | bool FGCom_PowerManager::isRegulatoryCompliant(int power_watts, const std::string& frequency_band) const {
      | ~~~~                     ^
      | auto                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:318:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  318 | bool FGCom_PowerManager::enableThermalProtection(bool enable) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:318:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  318 | bool FGCom_PowerManager::enableThermalProtection(bool enable) {
      | ~~~~                     ^
      | auto                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:319:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  319 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:324:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  324 | bool FGCom_PowerManager::isThermalProtectionActive() const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:324:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  324 | bool FGCom_PowerManager::isThermalProtectionActive() const {
      | ~~~~                     ^
      | auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:325:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  325 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:329:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  329 | void FGCom_PowerManager::updateTemperature(float temperature_celsius) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:330:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  330 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:334:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  334 |     if (temperature_celsius > config.thermal_shutdown_threshold * 100.0f) {
      |                                                                   ^    ~
      |                                                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:337:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  337 |         logSafetyEvent("Thermal shutdown triggered");
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:341:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  341 | bool FGCom_PowerManager::checkThermalLimits(int power_watts) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:341:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  341 | bool FGCom_PowerManager::checkThermalLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:342:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  342 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:5: warning: variable 'estimated_temperature' of type 'float' can be declared 'const' [misc-const-correctness]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:58: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:72: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                                        ^    ~
      |                                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:82: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:82: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                                                  ^  ~
      |                                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:346:72: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  346 |     return estimated_temperature < config.thermal_shutdown_threshold * 100.0f;
      |                                                                        ^    ~
      |                                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:350:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  350 | bool FGCom_PowerManager::enableSWRProtection(bool enable) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:350:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  350 | bool FGCom_PowerManager::enableSWRProtection(bool enable) {
      | ~~~~                     ^
      | auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:351:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  351 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:356:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  356 | bool FGCom_PowerManager::isSWRProtectionActive() const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:356:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  356 | bool FGCom_PowerManager::isSWRProtectionActive() const {
      | ~~~~                     ^
      | auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:357:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  357 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:361:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  361 | void FGCom_PowerManager::updateSWR(float swr_ratio) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:362:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  362 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:369:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  369 |         logSafetyEvent("SWR shutdown triggered");
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:373:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  373 | bool FGCom_PowerManager::checkSWRLimits(int power_watts) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:373:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  373 | bool FGCom_PowerManager::checkSWRLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:375:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  375 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:377:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  377 |     auto it = antenna_efficiency_data.find(current_antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:378:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  378 |     if (it == antenna_efficiency_data.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:396:7: note: resolves to this declaration
  396 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:382:55: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  382 |     const AntennaPowerEfficiency& efficiency_data = it->second;
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:387:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  387 | void FGCom_PowerManager::updateBatteryLevel(float battery_level) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:388:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  388 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:389:42: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  389 |     current_power_levels.battery_level = std::max(0.0f, std::min(1.0f, battery_level));
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:389:51: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  389 |     current_power_levels.battery_level = std::max(0.0f, std::min(1.0f, battery_level));
      |                                                   ^  ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:389:57: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  389 |     current_power_levels.battery_level = std::max(0.0f, std::min(1.0f, battery_level));
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:389:66: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  389 |     current_power_levels.battery_level = std::max(0.0f, std::min(1.0f, battery_level));
      |                                                                  ^  ~
      |                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:392:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  392 | float FGCom_PowerManager::getBatteryLevel() const {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:392:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  392 | float FGCom_PowerManager::getBatteryLevel() const {
      | ~~~~~                     ^
      | auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:393:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  393 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:397:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  397 | bool FGCom_PowerManager::isBatteryLow() const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:397:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  397 | bool FGCom_PowerManager::isBatteryLow() const {
      | ~~~~                     ^
      | auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:398:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  398 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:402:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  402 | int FGCom_PowerManager::getMaxPowerForBattery() const {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:402:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  402 | int FGCom_PowerManager::getMaxPowerForBattery() const {
      | ~~~                     ^
      | auto                                                  -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:403:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  403 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:408:28: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  408 |         max_power_ratio *= 0.5f; // Reduce power when battery is low
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:408:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  408 |         max_power_ratio *= 0.5f; // Reduce power when battery is low
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:411:29: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  411 |     return static_cast<int>(1000.0f * max_power_ratio);
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:411:29: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  411 |     return static_cast<int>(1000.0f * max_power_ratio);
      |                             ^     ~
      |                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:415:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  415 | void FGCom_PowerManager::setCurrentAntenna(const std::string& antenna_type) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:416:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  416 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:417:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  417 |     current_antenna_type = antenna_type;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:421:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  421 | std::string FGCom_PowerManager::getCurrentAntenna() const {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:421:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  421 | std::string FGCom_PowerManager::getCurrentAntenna() const {
      | ~~~~~~~~~~~                     ^
      | auto                                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:422:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  422 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:426:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  426 | bool FGCom_PowerManager::loadAntennaEfficiencyData(const std::string& antenna_type, const AntennaPowerEfficiency& data) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:426:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  426 | bool FGCom_PowerManager::loadAntennaEfficiencyData(const std::string& antenna_type, const AntennaPowerEfficiency& data) {
      | ~~~~                     ^
      | auto                                                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:427:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  427 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:428:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  428 |     antenna_efficiency_data[antenna_type] = data;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:428:43: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  428 |     antenna_efficiency_data[antenna_type] = data;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: resolves to this declaration
   27 | struct AntennaPowerEfficiency {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:432:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  432 | AntennaPowerEfficiency FGCom_PowerManager::getAntennaEfficiencyData(const std::string& antenna_type) const {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:432:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  432 | AntennaPowerEfficiency FGCom_PowerManager::getAntennaEfficiencyData(const std::string& antenna_type) const {
      | ~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                       -> AntennaPowerEfficiency
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:433:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  433 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:435:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  435 |     auto it = antenna_efficiency_data.find(antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:436:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  436 |     if (it == antenna_efficiency_data.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:396:7: note: resolves to this declaration
  396 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:437:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  437 |         return AntennaPowerEfficiency(); // Return default
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:440:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  440 |     return it->second;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:444:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  444 | void FGCom_PowerManager::setCurrentFrequencyBand(const std::string& frequency_band) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:445:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  445 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:446:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  446 |     current_frequency_band = frequency_band;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:449:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  449 | std::string FGCom_PowerManager::getCurrentFrequencyBand() const {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:449:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  449 | std::string FGCom_PowerManager::getCurrentFrequencyBand() const {
      | ~~~~~~~~~~~                     ^
      | auto                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:450:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  450 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:454:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  454 | bool FGCom_PowerManager::loadRegulatoryLimits(const std::string& frequency_band, const RegulatoryPowerLimits& limits) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:454:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  454 | bool FGCom_PowerManager::loadRegulatoryLimits(const std::string& frequency_band, const RegulatoryPowerLimits& limits) {
      | ~~~~                     ^
      | auto                                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:455:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  455 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:456:22: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  456 |     regulatory_limits[frequency_band] = limits;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:456:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  456 |     regulatory_limits[frequency_band] = limits;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: resolves to this declaration
   38 | struct RegulatoryPowerLimits {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:460:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  460 | RegulatoryPowerLimits FGCom_PowerManager::getRegulatoryLimits(const std::string& frequency_band) const {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:460:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  460 | RegulatoryPowerLimits FGCom_PowerManager::getRegulatoryLimits(const std::string& frequency_band) const {
      | ~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                   -> RegulatoryPowerLimits
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:461:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  461 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:463:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  463 |     auto it = regulatory_limits.find(frequency_band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:464:12: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  464 |     if (it == regulatory_limits.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:396:7: note: resolves to this declaration
  396 |       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:465:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  465 |         return RegulatoryPowerLimits(); // Return default
      |                ^~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:468:14: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  468 |     return it->second;
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:362:7: note: resolves to this declaration
  362 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:472:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  472 | void FGCom_PowerManager::setConfig(const PowerManagementConfig& new_config) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:473:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  473 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:474:12: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  474 |     config = new_config;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:50:8: note: resolves to this declaration
   50 | struct PowerManagementConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:477:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  477 | PowerManagementConfig FGCom_PowerManager::getConfig() const {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:477:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  477 | PowerManagementConfig FGCom_PowerManager::getConfig() const {
      | ~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                        -> PowerManagementConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:478:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  478 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:482:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  482 | bool FGCom_PowerManager::loadConfigFromFile(const std::string& config_file) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:482:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  482 | bool FGCom_PowerManager::loadConfigFromFile(const std::string& config_file) {
      | ~~~~                     ^
      | auto                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:483:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  483 |     std::ifstream file(config_file);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:489:17: warning: redundant string initialization [readability-redundant-string-init]
  489 |     std::string current_section = "";
      |                 ^~~~~~~~~~~~~~~~~~~~
      |                 current_section
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:489:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  489 |     std::string current_section = "";
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:491:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  491 |     while (std::getline(file, line)) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:491:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
  491 |     while (std::getline(file, line)) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:483:5: note: inferred assignment of ID-dependent value from ID-dependent 
  483 |     std::ifstream file(config_file);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:491:12: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     while (std::getline(file, line)) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:491:17: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
    8 |     while (std::getline(file, line)) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:493:33: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |         if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:493:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  493 |         if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:497:17: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  497 |         if (line[0] == '[' && line.back() == ']') {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:498:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  498 |             current_section = line.substr(1, line.length() - 2);
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:502:9: warning: variable 'equal_pos' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  502 |         size_t equal_pos = line.find('=');
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:502:9: warning: no header providing "size_t" is directly included [misc-include-cleaner]
    4 |         size_t equal_pos = line.find('=');
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:502:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  502 |         size_t equal_pos = line.find('=');
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2713:24: note: default parameter was declared here
 2713 |       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:504:13: warning: variable 'key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  504 |             std::string key = line.substr(0, equal_pos);
      |             ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:505:13: warning: variable 'value' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  505 |             std::string value = line.substr(equal_pos + 1);
      |             ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:505:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  505 |             std::string value = line.substr(equal_pos + 1);
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3163:35: note: default parameter was declared here
 3163 |       substr(size_type __pos = 0, size_type __n = npos) const
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:508:33: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  508 |             if (current_section == "power_management") {
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:509:25: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  509 |                 if (key == "enable_automatic_power_limiting") {
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:510:69: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  510 |                     config.enable_automatic_power_limiting = (value == "true");
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:511:32: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  511 |                 } else if (key == "enable_efficiency_optimization") {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:512:68: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  512 |                     config.enable_efficiency_optimization = (value == "true");
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:513:32: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  513 |                 } else if (key == "default_efficiency_threshold") {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:514:59: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  514 |                     config.default_efficiency_threshold = std::stof(value);
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:514:59: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  514 |                     config.default_efficiency_threshold = std::stof(value);
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:514:64: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
  514 |                     config.default_efficiency_threshold = std::stof(value);
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:524:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  524 | bool FGCom_PowerManager::saveConfigToFile(const std::string& config_file) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:524:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  524 | bool FGCom_PowerManager::saveConfigToFile(const std::string& config_file) const {
      | ~~~~                     ^
      | auto                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:525:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  525 |     std::ofstream file(config_file);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:833:8: note: default parameter was declared here
  833 |                      ios_base::openmode __mode = ios_base::out)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:530:10: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  530 |     file << "[power_management]" << std::endl;
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:530:34: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  530 |     file << "[power_management]" << std::endl;
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:530:37: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  530 |     file << "[power_management]" << std::endl;
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:530:37: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  530 |     file << "[power_management]" << std::endl;
      |                                     ^~~~~~~~~
      |                                     '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:531:10: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  531 |     file << "enable_automatic_power_limiting=" << (config.enable_automatic_power_limiting ? "true" : "false") << std::endl;
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:531:48: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  531 |     file << "enable_automatic_power_limiting=" << (config.enable_automatic_power_limiting ? "true" : "false") << std::endl;
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:531:111: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  531 |     file << "enable_automatic_power_limiting=" << (config.enable_automatic_power_limiting ? "true" : "false") << std::endl;
      |                                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:531:114: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  531 |     file << "enable_automatic_power_limiting=" << (config.enable_automatic_power_limiting ? "true" : "false") << std::endl;
      |                                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:531:114: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  531 |     file << "enable_automatic_power_limiting=" << (config.enable_automatic_power_limiting ? "true" : "false") << std::endl;
      |                                                                                                                  ^~~~~~~~~
      |                                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:532:10: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  532 |     file << "enable_efficiency_optimization=" << (config.enable_efficiency_optimization ? "true" : "false") << std::endl;
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:532:47: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  532 |     file << "enable_efficiency_optimization=" << (config.enable_efficiency_optimization ? "true" : "false") << std::endl;
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:532:109: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  532 |     file << "enable_efficiency_optimization=" << (config.enable_efficiency_optimization ? "true" : "false") << std::endl;
      |                                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:532:112: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  532 |     file << "enable_efficiency_optimization=" << (config.enable_efficiency_optimization ? "true" : "false") << std::endl;
      |                                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:532:112: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  532 |     file << "enable_efficiency_optimization=" << (config.enable_efficiency_optimization ? "true" : "false") << std::endl;
      |                                                                                                                ^~~~~~~~~
      |                                                                                                                '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:533:10: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |     file << "default_efficiency_threshold=" << config.default_efficiency_threshold << std::endl;
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:533:45: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |     file << "default_efficiency_threshold=" << config.default_efficiency_threshold << std::endl;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:226:7: note: resolves to this declaration
  226 |       operator<<(float __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:533:84: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |     file << "default_efficiency_threshold=" << config.default_efficiency_threshold << std::endl;
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:533:87: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  533 |     file << "default_efficiency_threshold=" << config.default_efficiency_threshold << std::endl;
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:533:87: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  533 |     file << "default_efficiency_threshold=" << config.default_efficiency_threshold << std::endl;
      |                                                                                       ^~~~~~~~~
      |                                                                                       '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:534:10: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  534 |     file << "thermal_shutdown_threshold=" << config.thermal_shutdown_threshold << std::endl;
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:534:43: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  534 |     file << "thermal_shutdown_threshold=" << config.thermal_shutdown_threshold << std::endl;
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:226:7: note: resolves to this declaration
  226 |       operator<<(float __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:534:80: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  534 |     file << "thermal_shutdown_threshold=" << config.thermal_shutdown_threshold << std::endl;
      |                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:534:83: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  534 |     file << "thermal_shutdown_threshold=" << config.thermal_shutdown_threshold << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:534:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  534 |     file << "thermal_shutdown_threshold=" << config.thermal_shutdown_threshold << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:535:10: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  535 |     file << "swr_shutdown_threshold=" << config.swr_shutdown_threshold << std::endl;
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:535:39: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  535 |     file << "swr_shutdown_threshold=" << config.swr_shutdown_threshold << std::endl;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:226:7: note: resolves to this declaration
  226 |       operator<<(float __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:535:72: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  535 |     file << "swr_shutdown_threshold=" << config.swr_shutdown_threshold << std::endl;
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:535:75: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  535 |     file << "swr_shutdown_threshold=" << config.swr_shutdown_threshold << std::endl;
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:535:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  535 |     file << "swr_shutdown_threshold=" << config.swr_shutdown_threshold << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:536:10: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  536 |     file << "battery_low_threshold=" << config.battery_low_threshold << std::endl;
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:536:38: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  536 |     file << "battery_low_threshold=" << config.battery_low_threshold << std::endl;
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:226:7: note: resolves to this declaration
  226 |       operator<<(float __f)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:536:70: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  536 |     file << "battery_low_threshold=" << config.battery_low_threshold << std::endl;
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:536:73: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  536 |     file << "battery_low_threshold=" << config.battery_low_threshold << std::endl;
      |                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:536:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  536 |     file << "battery_low_threshold=" << config.battery_low_threshold << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:542:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  542 | PowerManagementStats FGCom_PowerManager::getStats() const {
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:542:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  542 | PowerManagementStats FGCom_PowerManager::getStats() const {
      | ~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                      -> PowerManagementStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:543:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  543 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:547:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  547 | void FGCom_PowerManager::resetStats() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:548:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  548 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:549:11: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  549 |     stats = PowerManagementStats();
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: note: resolves to this declaration
   67 | struct PowerManagementStats {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:550:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  550 |     stats.last_reset = std::chrono::system_clock::now();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:550:24: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  550 |     stats.last_reset = std::chrono::system_clock::now();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:553:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  553 | void FGCom_PowerManager::updateStats() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:554:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  554 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:558:64: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  558 |         stats.average_efficiency = (stats.average_efficiency * (stats.total_power_changes - 1) + 
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:559:77: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  559 |                                    current_power_levels.power_efficiency) / stats.total_power_changes;
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:563:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  563 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:564:21: warning: 'duration_cast<std::chrono::duration<long>, long, std::ratio<1, 1000000000>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  564 |     auto duration = std::chrono::duration_cast<std::chrono::seconds>(now - stats.last_reset);
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:273:7: note: resolves to this declaration
  273 |       duration_cast(const duration<_Rep, _Period>& __d)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:564:34: warning: no header providing "std::chrono::duration_cast" is directly included [misc-include-cleaner]
  564 |     auto duration = std::chrono::duration_cast<std::chrono::seconds>(now - stats.last_reset);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:564:61: warning: no header providing "std::chrono::seconds" is directly included [misc-include-cleaner]
  564 |     auto duration = std::chrono::duration_cast<std::chrono::seconds>(now - stats.last_reset);
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:564:74: warning: 'operator-<std::chrono::system_clock, std::chrono::duration<long, std::ratio<1, 1000000000>>, std::chrono::duration<long, std::ratio<1, 1000000000>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  564 |     auto duration = std::chrono::duration_cast<std::chrono::seconds>(now - stats.last_reset);
      |                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1141:7: note: resolves to this declaration
 1141 |       operator-(const time_point<_Clock, _Dur1>& __lhs,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:565:77: warning: narrowing conversion from 'rep' (aka 'long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  565 |     stats.total_energy_consumed += current_power_levels.power_consumption * duration.count() / 3600.0f; // kWh
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:565:96: warning: 3600.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  565 |     stats.total_energy_consumed += current_power_levels.power_consumption * duration.count() / 3600.0f; // kWh
      |                                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:565:96: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  565 |     stats.total_energy_consumed += current_power_levels.power_consumption * duration.count() / 3600.0f; // kWh
      |                                                                                                ^     ~
      |                                                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:568:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  568 | bool FGCom_PowerManager::isPowerAnalyticsEnabled() const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:568:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  568 | bool FGCom_PowerManager::isPowerAnalyticsEnabled() const {
      | ~~~~                     ^
      | auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:569:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  569 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:574:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  574 | bool FGCom_PowerManager::canChangePower() const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:574:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  574 | bool FGCom_PowerManager::canChangePower() const {
      | ~~~~                     ^
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:575:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  575 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:577:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  577 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:578:21: warning: 'duration_cast<std::chrono::duration<long, std::ratio<1, 1000>>, long, std::ratio<1, 1000000000>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  578 |     auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(now - current_power_levels.last_power_change);
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:273:7: note: resolves to this declaration
  273 |       duration_cast(const duration<_Rep, _Period>& __d)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:578:61: warning: no header providing "std::chrono::milliseconds" is directly included [misc-include-cleaner]
  578 |     auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(now - current_power_levels.last_power_change);
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:578:79: warning: 'operator-<std::chrono::system_clock, std::chrono::duration<long, std::ratio<1, 1000000000>>, std::chrono::duration<long, std::ratio<1, 1000000000>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  578 |     auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(now - current_power_levels.last_power_change);
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1141:7: note: resolves to this declaration
 1141 |       operator-(const time_point<_Clock, _Dur1>& __lhs,
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:583:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  583 | void FGCom_PowerManager::setPowerChangeDelay(int delay_ms) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:584:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  584 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:588:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  588 | int FGCom_PowerManager::getPowerChangeDelay() const {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:588:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  588 | int FGCom_PowerManager::getPowerChangeDelay() const {
      | ~~~                     ^
      | auto                                                -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:589:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  589 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:594:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  594 | bool FGCom_PowerManager::isSafeToTransmit(int power_watts) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:594:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  594 | bool FGCom_PowerManager::isSafeToTransmit(int power_watts) const {
      | ~~~~                     ^
      | auto                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:598:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  598 | bool FGCom_PowerManager::checkAllSafetyLimits(int power_watts) const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:598:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  598 | bool FGCom_PowerManager::checkAllSafetyLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:605:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  605 | void FGCom_PowerManager::emergencyPowerDown() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:606:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  606 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:608:44: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  608 |     current_power_levels.last_power_change = std::chrono::system_clock::now();
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:608:46: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  608 |     current_power_levels.last_power_change = std::chrono::system_clock::now();
      |                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:609:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  609 |     logSafetyEvent("Emergency power down");
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:612:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  612 | bool FGCom_PowerManager::isEmergencyPowerDown() const {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:612:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  612 | bool FGCom_PowerManager::isEmergencyPowerDown() const {
      | ~~~~                     ^
      | auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:613:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  613 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:618:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  618 | int FGCom_PowerManager::calculateOptimalPowerForRange(double distance_km, const std::string& antenna_type) const {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:618:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  618 | int FGCom_PowerManager::calculateOptimalPowerForRange(double distance_km, const std::string& antenna_type) const {
      | ~~~                     ^
      | auto                                                                                                             -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:620:5: warning: variable 'base_power' of type 'float' can be declared 'const' [misc-const-correctness]
  620 |     float base_power = 100.0f;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:620:24: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  620 |     float base_power = 100.0f;
      |                        ^    ~
      |                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:621:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
  621 |     float distance_factor = static_cast<float>(distance_km / 100.0); // 100km reference
      |     ^~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:621:5: warning: variable 'distance_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  621 |     float distance_factor = static_cast<float>(distance_km / 100.0); // 100km reference
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:625:5: warning: variable 'efficiency' of type 'float' can be declared 'const' [misc-const-correctness]
  625 |     float efficiency = calculatePowerEfficiency(optimal_power, antenna_type);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:627:42: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  627 |         optimal_power = static_cast<int>(optimal_power * efficiency);
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:632:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  632 |     auto it = std::lower_bound(available_powers.begin(), available_powers.end(), optimal_power);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:632:15: warning: 'lower_bound<__gnu_cxx::__normal_iterator<int *, std::vector<int>>, int>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  632 |     auto it = std::lower_bound(available_powers.begin(), available_powers.end(), optimal_power);
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:1498:5: note: resolves to this declaration
 1498 |     lower_bound(_ForwardIterator __first, _ForwardIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:633:12: warning: 'operator!=<int *, std::vector<int>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  633 |     if (it != available_powers.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:634:25: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  634 |         optimal_power = *it;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:642:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  642 | int FGCom_PowerManager::calculateOptimalPowerForSignalQuality(float target_quality, double distance_km, const std::string& antenna_type) const {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:642:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  642 | int FGCom_PowerManager::calculateOptimalPowerForSignalQuality(float target_quality, double distance_km, const std::string& antenna_type) const {
      | ~~~                     ^
      | auto                                                                                                                                           -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:644:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
  644 |     float required_power = static_cast<float>(distance_km * distance_km / (1000.0 * (1.0 - target_quality)));
      |     ^~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:644:76: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  644 |     float required_power = static_cast<float>(distance_km * distance_km / (1000.0 * (1.0 - target_quality)));
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:647:5: warning: variable 'efficiency' of type 'float' can be declared 'const' [misc-const-correctness]
  647 |     float efficiency = calculatePowerEfficiency(static_cast<int>(required_power), antenna_type);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:653:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  653 | float FGCom_PowerManager::calculatePowerConsumption(int power_watts, const std::string& antenna_type) const {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:653:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  653 | float FGCom_PowerManager::calculatePowerConsumption(int power_watts, const std::string& antenna_type) const {
      | ~~~~~                     ^
      | auto                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:655:5: warning: variable 'efficiency' of type 'float' can be declared 'const' [misc-const-correctness]
  655 |     float efficiency = calculatePowerEfficiency(power_watts, antenna_type);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:656:12: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  656 |     return power_watts / efficiency;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:660:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  660 | float FGCom_PowerManager::getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:660:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  660 | float FGCom_PowerManager::getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const {
      | ~~~~~                     ^
      | auto                                                                                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:660:106: warning: 3 adjacent parameters of 'getEffectiveRadiatedPower' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  660 | float FGCom_PowerManager::getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const {
      |                                                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:660:112: note: the first parameter in the range is 'azimuth_deg'
  660 | float FGCom_PowerManager::getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const {
      |                                                                                                                ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:660:152: note: the last parameter in the range is 'frequency_mhz'
  660 | float FGCom_PowerManager::getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const {
      |                                                                                                                                                        ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:666:5: warning: variable 'efficiency' of type 'float' can be declared 'const' [misc-const-correctness]
  666 |     float efficiency = calculatePowerEfficiency(tx_power_watts, antenna_type);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:667:12: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  667 |     return tx_power_watts * efficiency;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:670:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  670 | float FGCom_PowerManager::getPowerEfficiencyAtFrequency(int power_watts, const std::string& antenna_type, float frequency_mhz) const {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:670:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  670 | float FGCom_PowerManager::getPowerEfficiencyAtFrequency(int power_watts, const std::string& antenna_type, float frequency_mhz) const {
      | ~~~~~                     ^
      | auto                                                                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:672:5: warning: variable 'base_efficiency' of type 'float' can be declared 'const' [misc-const-correctness]
  672 |     float base_efficiency = calculatePowerEfficiency(power_watts, antenna_type);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:675:30: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  675 |     float frequency_factor = 1.0f;
      |                              ^  ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:676:25: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  676 |     if (frequency_mhz < 10.0f) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:676:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  676 |     if (frequency_mhz < 10.0f) {
      |                         ^   ~
      |                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:677:28: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  677 |         frequency_factor = 0.8f; // Lower efficiency at low frequencies
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:677:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  677 |         frequency_factor = 0.8f; // Lower efficiency at low frequencies
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:678:32: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |     } else if (frequency_mhz > 30.0f) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:678:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  678 |     } else if (frequency_mhz > 30.0f) {
      |                                ^   ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:679:28: warning: 0.9f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         frequency_factor = 0.9f; // Slightly lower efficiency at high frequencies
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:679:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  679 |         frequency_factor = 0.9f; // Slightly lower efficiency at high frequencies
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:686:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  686 | void FGCom_PowerManager::setPowerChangeCallback(std::function<void(int, int)> callback) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:686:54: warning: no header providing "std::function" is directly included [misc-include-cleaner]
    5 | void FGCom_PowerManager::setPowerChangeCallback(std::function<void(int, int)> callback) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:687:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  687 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:688:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  688 |     power_change_callback = callback;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:469:7: note: resolves to this declaration
  469 |       operator=(const function& __x)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:688:29: warning: parameter 'callback' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    8 |     power_change_callback = callback;
      |                             ^       
      |                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:691:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  691 | void FGCom_PowerManager::setEfficiencyChangeCallback(std::function<void(float)> callback) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:692:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  692 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:693:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  693 |     efficiency_change_callback = callback;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:469:7: note: resolves to this declaration
  469 |       operator=(const function& __x)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:693:34: warning: parameter 'callback' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
  693 |     efficiency_change_callback = callback;
      |                                  ^       
      |                                  std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:696:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  696 | void FGCom_PowerManager::setSafetyEventCallback(std::function<void(const std::string&)> callback) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:697:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  697 |     std::lock_guard<std::mutex> lock(power_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:698:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  698 |     safety_event_callback = callback;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:469:7: note: resolves to this declaration
  469 |       operator=(const function& __x)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:698:29: warning: parameter 'callback' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
  698 |     safety_event_callback = callback;
      |                             ^       
      |                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:702:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  702 | void FGCom_PowerManager::initializeDefaultAntennaData() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:705:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  705 |     vertical_data.antenna_type = "vertical";
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:706:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  706 |     vertical_data.efficiency_at_power = {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:349:7: note: resolves to this declaration
  349 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:10: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:14: warning: 0.85f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:14: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |              ^   ~
      |                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:23: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:28: warning: 0.80f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                            ^   ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:37: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:42: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                          ^   ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:51: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:56: warning: 0.70f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:56: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                                        ^   ~
      |                                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:10: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:15: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:15: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |               ^   ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:24: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:29: warning: 0.60f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:29: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                             ^   ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:44: warning: 0.55f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                                            ^   ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:710:41: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  710 |     vertical_data.max_efficient_power = 100.0f;
      |                                         ^    ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:711:42: warning: 0.7f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  711 |     vertical_data.efficiency_threshold = 0.7f;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:711:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  711 |     vertical_data.efficiency_threshold = 0.7f;
      |                                          ^  ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:713:35: warning: 800.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  713 |     vertical_data.thermal_limit = 800.0f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:713:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  713 |     vertical_data.thermal_limit = 800.0f;
      |                                   ^    ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:714:31: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  714 |     vertical_data.swr_limit = 2.0f;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:714:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  714 |     vertical_data.swr_limit = 2.0f;
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:715:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  715 |     antenna_efficiency_data["vertical"] = vertical_data;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:715:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  715 |     antenna_efficiency_data["vertical"] = vertical_data;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:715:41: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  715 |     antenna_efficiency_data["vertical"] = vertical_data;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: resolves to this declaration
   27 | struct AntennaPowerEfficiency {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:719:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  719 |     yagi_data.antenna_type = "yagi";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:720:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  720 |     yagi_data.efficiency_at_power = {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:349:7: note: resolves to this declaration
  349 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:10: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:14: warning: 0.90f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:14: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |              ^   ~
      |                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:23: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:28: warning: 0.85f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                            ^   ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:37: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:42: warning: 0.80f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                          ^   ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:51: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:56: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:56: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                                        ^   ~
      |                                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:10: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:15: warning: 0.70f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:15: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |               ^   ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:24: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:29: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:29: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                             ^   ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:44: warning: 0.60f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                                            ^   ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:724:37: warning: 200.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  724 |     yagi_data.max_efficient_power = 200.0f;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:724:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  724 |     yagi_data.max_efficient_power = 200.0f;
      |                                     ^    ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:725:38: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  725 |     yagi_data.efficiency_threshold = 0.75f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:725:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  725 |     yagi_data.efficiency_threshold = 0.75f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:727:31: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  727 |     yagi_data.thermal_limit = 1000.0f;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:727:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  727 |     yagi_data.thermal_limit = 1000.0f;
      |                               ^     ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:728:27: warning: 1.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  728 |     yagi_data.swr_limit = 1.5f;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:728:27: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  728 |     yagi_data.swr_limit = 1.5f;
      |                           ^  ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:729:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  729 |     antenna_efficiency_data["yagi"] = yagi_data;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:729:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  729 |     antenna_efficiency_data["yagi"] = yagi_data;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:729:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  729 |     antenna_efficiency_data["yagi"] = yagi_data;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: resolves to this declaration
   27 | struct AntennaPowerEfficiency {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:733:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  733 |     loop_data.antenna_type = "loop";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:734:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  734 |     loop_data.efficiency_at_power = {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:349:7: note: resolves to this declaration
  349 |       operator=(initializer_list<value_type> __l)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:10: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:14: warning: 0.80f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:14: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |              ^   ~
      |                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:23: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:28: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                            ^   ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:37: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:42: warning: 0.70f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                          ^   ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:51: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:56: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:56: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                                        ^   ~
      |                                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:10: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:15: warning: 0.60f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:15: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |               ^   ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:24: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:29: warning: 0.55f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:29: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                             ^   ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:44: warning: 0.50f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                                            ^   ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:738:37: warning: 150.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  738 |     loop_data.max_efficient_power = 150.0f;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:738:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  738 |     loop_data.max_efficient_power = 150.0f;
      |                                     ^    ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:739:38: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  739 |     loop_data.efficiency_threshold = 0.65f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:739:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  739 |     loop_data.efficiency_threshold = 0.65f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:741:31: warning: 600.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  741 |     loop_data.thermal_limit = 600.0f;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:741:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  741 |     loop_data.thermal_limit = 600.0f;
      |                               ^    ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:742:27: warning: 2.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  742 |     loop_data.swr_limit = 2.5f;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:742:27: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  742 |     loop_data.swr_limit = 2.5f;
      |                           ^  ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:743:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  743 |     antenna_efficiency_data["loop"] = loop_data;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:743:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  743 |     antenna_efficiency_data["loop"] = loop_data;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:743:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  743 |     antenna_efficiency_data["loop"] = loop_data;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: resolves to this declaration
   27 | struct AntennaPowerEfficiency {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:746:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  746 | void FGCom_PowerManager::initializeDefaultRegulatoryLimits() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:749:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  749 |     amateur_limits.band_name = "amateur";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:750:35: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  750 |     amateur_limits.min_freq_mhz = 1.8f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:750:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  750 |     amateur_limits.min_freq_mhz = 1.8f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:751:35: warning: 54.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  751 |     amateur_limits.max_freq_mhz = 54.0f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:751:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  751 |     amateur_limits.max_freq_mhz = 54.0f;
      |                                   ^   ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:752:38: warning: 1500.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  752 |     amateur_limits.max_power_watts = 1500.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:752:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  752 |     amateur_limits.max_power_watts = 1500.0f;
      |                                      ^     ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:753:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  753 |     amateur_limits.regulatory_body = "FCC";
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:754:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  754 |     amateur_limits.license_type = "Amateur";
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:756:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  756 |     amateur_limits.power_density_limit = 100.0f;
      |                                          ^    ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:757:22: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  757 |     regulatory_limits["amateur"] = amateur_limits;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:757:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  757 |     regulatory_limits["amateur"] = amateur_limits;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:757:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  757 |     regulatory_limits["amateur"] = amateur_limits;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: resolves to this declaration
   38 | struct RegulatoryPowerLimits {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:761:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  761 |     commercial_limits.band_name = "commercial";
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:762:38: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  762 |     commercial_limits.min_freq_mhz = 2.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:762:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  762 |     commercial_limits.min_freq_mhz = 2.0f;
      |                                      ^  ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:763:38: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  763 |     commercial_limits.max_freq_mhz = 30.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:763:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  763 |     commercial_limits.max_freq_mhz = 30.0f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:764:41: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  764 |     commercial_limits.max_power_watts = 1000.0f;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:764:41: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  764 |     commercial_limits.max_power_watts = 1000.0f;
      |                                         ^     ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:765:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  765 |     commercial_limits.regulatory_body = "FCC";
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:766:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  766 |     commercial_limits.license_type = "Commercial";
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:768:45: warning: 50.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  768 |     commercial_limits.power_density_limit = 50.0f;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:768:45: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  768 |     commercial_limits.power_density_limit = 50.0f;
      |                                             ^   ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:769:22: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  769 |     regulatory_limits["commercial"] = commercial_limits;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:769:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  769 |     regulatory_limits["commercial"] = commercial_limits;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:769:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  769 |     regulatory_limits["commercial"] = commercial_limits;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: resolves to this declaration
   38 | struct RegulatoryPowerLimits {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:773:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  773 |     military_limits.band_name = "military";
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:774:36: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  774 |     military_limits.min_freq_mhz = 2.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:774:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  774 |     military_limits.min_freq_mhz = 2.0f;
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:775:36: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  775 |     military_limits.max_freq_mhz = 30.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:775:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  775 |     military_limits.max_freq_mhz = 30.0f;
      |                                    ^   ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:776:39: warning: 2000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  776 |     military_limits.max_power_watts = 2000.0f;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:776:39: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  776 |     military_limits.max_power_watts = 2000.0f;
      |                                       ^     ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:777:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  777 |     military_limits.regulatory_body = "ITU";
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:778:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |     military_limits.license_type = "Military";
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:780:43: warning: 200.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  780 |     military_limits.power_density_limit = 200.0f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:780:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  780 |     military_limits.power_density_limit = 200.0f;
      |                                           ^    ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:781:22: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  781 |     regulatory_limits["military"] = military_limits;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:781:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  781 |     regulatory_limits["military"] = military_limits;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:781:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  781 |     regulatory_limits["military"] = military_limits;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: resolves to this declaration
   38 | struct RegulatoryPowerLimits {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:784:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  784 | void FGCom_PowerManager::updatePowerEfficiency() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:789:35: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  789 |         efficiency_change_callback(current_power_levels.power_efficiency);
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:587:7: note: resolves to this declaration
  587 |       operator()(_ArgTypes... __args) const
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:793:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  793 | void FGCom_PowerManager::checkSafetyLimits() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:799:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  799 | void FGCom_PowerManager::logPowerChange(int old_power, int new_power) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:799:26: warning: method 'logPowerChange' can be made const [readability-make-member-function-const]
  799 | void FGCom_PowerManager::logPowerChange(int old_power, int new_power) {
      |                          ^
      |                                                                       const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:59: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:72: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:83: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:96: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:103: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:106: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:805:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  805 | void FGCom_PowerManager::logSafetyEvent(const std::string& event) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:806:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  806 |     std::cout << "[PowerManager] Safety event: " << event << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:806:50: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  806 |     std::cout << "[PowerManager] Safety event: " << event << std::endl;
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:806:59: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  806 |     std::cout << "[PowerManager] Safety event: " << event << std::endl;
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:806:62: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  806 |     std::cout << "[PowerManager] Safety event: " << event << std::endl;
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:806:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  806 |     std::cout << "[PowerManager] Safety event: " << event << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:809:30: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  809 |         safety_event_callback(event);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:587:7: note: resolves to this declaration
  587 |       operator()(_ArgTypes... __args) const
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:814:11: warning: the outermost namespace should be the 'LIBC_NAMESPACE' macro [llvmlibc-implementation-in-namespace]
  814 | namespace PowerManagementUtils {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:815:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  815 |     float wattsToDBm(float watts) {
      |     ~~~~~ ^
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:16: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:16: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                ^   ~
      |                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:24: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                        ^~~~~
      |                        std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:38: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                                      ^     ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:819:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  819 |     float dbmToWatts(float dbm) {
      |     ~~~~~ ^
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:16: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                ^~~
      |                std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:20: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:20: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                    ^   ~
      |                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:33: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                 ^   ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:42: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                          ^     ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:823:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  823 |     float wattsToDBW(float watts) {
      |     ~~~~~ ^
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  824 |         return 10.0f * log10(watts);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:16: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:16: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  824 |         return 10.0f * log10(watts);
      |                ^   ~
      |                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:24: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  824 |         return 10.0f * log10(watts);
      |                        ^~~~~
      |                        std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:827:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  827 |     float dbwToWatts(float dbw) {
      |     ~~~~~ ^
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:16: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                ^~~
      |                std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:20: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:20: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                    ^   ~
      |                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:33: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                                 ^   ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:831:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  831 |     float calculatePowerDensity(float power_watts, float distance_meters) {
      |     ~~~~~ ^
      |     auto                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:831:33: warning: 2 adjacent parameters of 'calculatePowerDensity' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  831 |     float calculatePowerDensity(float power_watts, float distance_meters) {
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:831:39: note: the first parameter in the range is 'power_watts'
  831 |     float calculatePowerDensity(float power_watts, float distance_meters) {
      |                                       ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:831:58: note: the last parameter in the range is 'distance_meters'
  831 |     float calculatePowerDensity(float power_watts, float distance_meters) {
      |                                                          ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:9: warning: variable 'area' of type 'float' can be declared 'const' [misc-const-correctness]
  833 |         float area = 4.0f * M_PI * distance_meters * distance_meters;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:22: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  833 |         float area = 4.0f * M_PI * distance_meters * distance_meters;
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:22: warning: 4.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:22: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  833 |         float area = 4.0f * M_PI * distance_meters * distance_meters;
      |                      ^  ~
      |                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:29: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
    5 |         float area = 4.0f * M_PI * distance_meters * distance_meters;
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:837:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  837 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2) {
      |     ~~~~ ^
      |     auto                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:837:52: warning: 2 adjacent parameters of 'checkPowerDensityLimit' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  837 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2) {
      |                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:837:58: note: the first parameter in the range is 'distance_meters'
  837 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2) {
      |                                                          ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:837:81: note: the last parameter in the range is 'limit_w_per_m2'
  837 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2) {
      |                                                                                 ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:838:9: warning: variable 'power_density' of type 'float' can be declared 'const' [misc-const-correctness]
  838 |         float power_density = calculatePowerDensity(power_watts, distance_meters);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:838:31: warning: 'calculatePowerDensity' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  838 |         float power_density = calculatePowerDensity(power_watts, distance_meters);
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:831:11: note: resolves to this declaration
  831 |     float calculatePowerDensity(float power_watts, float distance_meters) {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:842:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  842 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |     ~~~~~ ^
      |     auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:842:24: warning: 2 adjacent parameters of 'calculateERP' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  842 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:842:30: note: the first parameter in the range is 'tx_power_watts'
  842 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |                              ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:842:52: note: the last parameter in the range is 'antenna_gain_db'
  842 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |                                                    ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:843:9: warning: variable 'net_gain_db' of type 'float' can be declared 'const' [misc-const-correctness]
  843 |         float net_gain_db = antenna_gain_db - system_loss_db;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:33: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                 ^~~
      |                                 std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:37: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                     ^   ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:58: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:58: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                                          ^   ~
      |                                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:847:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  847 |     float calculateEIRP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |     ~~~~~ ^
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:848:16: warning: 'calculateERP' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  848 |         return calculateERP(tx_power_watts, antenna_gain_db, system_loss_db);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:842:11: note: resolves to this declaration
  842 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:851:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  851 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius) {
      |     ~~~~~ ^
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:851:38: warning: 3 adjacent parameters of 'calculateAntennaEfficiency' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  851 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius) {
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:851:44: note: the first parameter in the range is 'power_watts'
  851 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius) {
      |                                            ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:851:74: note: the last parameter in the range is 'temperature_celsius'
  851 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius) {
      |                                                                          ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:9: warning: variable 'swr_efficiency' of type 'float' can be declared 'const' [misc-const-correctness]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                ^  ~
      |                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:54: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                                      ^  ~
      |                                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:62: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:62: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                                              ^  ~
      |                                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:9: warning: variable 'temp_efficiency' of type 'float' can be declared 'const' [misc-const-correctness]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                 ^  ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:63: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                               ^   ~
      |                                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:72: warning: 0.001f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:72: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                                        ^    ~
      |                                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:856:16: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  856 |         return std::max(0.1f, swr_efficiency * temp_efficiency);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:856:25: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  856 |         return std::max(0.1f, swr_efficiency * temp_efficiency);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:856:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  856 |         return std::max(0.1f, swr_efficiency * temp_efficiency);
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:859:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  859 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db) {
      |     ~~~~~ ^
      |     auto                                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:859:37: warning: 3 adjacent parameters of 'calculateSystemEfficiency' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  859 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db) {
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:859:43: note: the first parameter in the range is 'tx_power_watts'
  859 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db) {
      |                                           ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:859:91: note: the last parameter in the range is 'feedline_loss_db'
  859 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db) {
      |                                                                                           ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:861:9: warning: variable 'total_loss_db' of type 'float' can be declared 'const' [misc-const-correctness]
  861 |         float total_loss_db = feedline_loss_db + connector_loss_db;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:9: warning: variable 'loss_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:29: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:29: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                             ^~~
      |                             std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:33: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                 ^   ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:57: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:57: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                                         ^   ~
      |                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:866:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  866 |     bool isAmateurRadioFrequency(float frequency_mhz) {
      |     ~~~~ ^
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:34: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:34: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                  ^  ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:59: warning: 54.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:59: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:870:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  870 |     bool isCommercialFrequency(float frequency_mhz) {
      |     ~~~~ ^
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:34: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:34: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^  ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:59: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:59: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:874:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  874 |     bool isMilitaryFrequency(float frequency_mhz) {
      |     ~~~~ ^
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:34: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:34: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^  ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:59: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:59: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:878:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  878 |     std::string getRegulatoryBody(float frequency_mhz) {
      |     ~~~~~~~~~~~ ^
      |     auto                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:879:13: warning: 'isAmateurRadioFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  879 |         if (isAmateurRadioFrequency(frequency_mhz)) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:866:10: note: resolves to this declaration
  866 |     bool isAmateurRadioFrequency(float frequency_mhz) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:879:53: warning: repeated branch body in conditional chain [bugprone-branch-clone]
  879 |         if (isAmateurRadioFrequency(frequency_mhz)) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:881:10: note: end of the original
  881 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:881:58: note: clone 1 starts here
  881 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:880:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  880 |             return "FCC";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:881:11: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  881 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  882 |             return "FCC";
      |             ~~~~~~~~~~~~~
  883 |         } else if (isMilitaryFrequency(frequency_mhz)) {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  884 |             return "ITU";
      |             ~~~~~~~~~~~~~
  885 |         }
      |         ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:881:20: warning: 'isCommercialFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  881 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:870:10: note: resolves to this declaration
  870 |     bool isCommercialFrequency(float frequency_mhz) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:882:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  882 |             return "FCC";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:883:20: warning: 'isMilitaryFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  883 |         } else if (isMilitaryFrequency(frequency_mhz)) {
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:874:10: note: resolves to this declaration
  874 |     bool isMilitaryFrequency(float frequency_mhz) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:884:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  884 |             return "ITU";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:886:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  886 |         return "Unknown";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:889:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  889 |     std::string getLicenseType(float frequency_mhz) {
      |     ~~~~~~~~~~~ ^
      |     auto                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:890:13: warning: 'isAmateurRadioFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  890 |         if (isAmateurRadioFrequency(frequency_mhz)) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:866:10: note: resolves to this declaration
  866 |     bool isAmateurRadioFrequency(float frequency_mhz) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:891:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  891 |             return "Amateur";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:892:11: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  892 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  893 |             return "Commercial";
      |             ~~~~~~~~~~~~~~~~~~~~
  894 |         } else if (isMilitaryFrequency(frequency_mhz)) {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  895 |             return "Military";
      |             ~~~~~~~~~~~~~~~~~~
  896 |         }
      |         ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:892:20: warning: 'isCommercialFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  892 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:870:10: note: resolves to this declaration
  870 |     bool isCommercialFrequency(float frequency_mhz) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:893:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  893 |             return "Commercial";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:894:20: warning: 'isMilitaryFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  894 |         } else if (isMilitaryFrequency(frequency_mhz)) {
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:874:10: note: resolves to this declaration
  874 |     bool isMilitaryFrequency(float frequency_mhz) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:895:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  895 |             return "Military";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:897:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  897 |         return "Unknown";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:899:1: warning: namespace 'PowerManagementUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  899 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:814:11: note: namespace 'PowerManagementUtils' starts here
  814 | namespace PowerManagementUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_POWER_MANAGEMENT_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_POWER_MANAGEMENT_H
    2 | #define FGCOM_POWER_MANAGEMENT_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_POWER_MANAGEMENT_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:5:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:6:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <map>
      | ^~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:10:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   11 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:13:8: warning: accessing fields in struct 'PowerLevels' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   13 | struct PowerLevels {
      |        ^
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
   15 |     int current_power;
   16 |     float power_efficiency;         // Antenna efficiency at current power
   17 |     bool power_limiting;            // Automatic power limiting for safety
   18 |     float max_safe_power;           // Maximum safe power for current antenna
   19 |     float regulatory_limit;         // Regulatory power limit for current band
   20 |     bool efficiency_optimization;   // Enable power efficiency optimization
   21 |     float battery_level;            // Current battery level (0.0-1.0)
   22 |     float power_consumption;        // Current power consumption in watts
   23 |     std::chrono::system_clock::time_point last_power_change;
   24 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:13:8: note: use "__attribute__((aligned(64)))" to align struct 'PowerLevels' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:13:8: warning: constructor does not initialize these fields: current_power, power_efficiency, power_limiting, max_safe_power, regulatory_limit, efficiency_optimization, battery_level, power_consumption [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   13 | struct PowerLevels {
      |        ^
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
   15 |     int current_power;
      |                      
      |                      {}
   16 |     float power_efficiency;         // Antenna efficiency at current power
      |                           
      |                           {}
   17 |     bool power_limiting;            // Automatic power limiting for safety
      |                        
      |                        {}
   18 |     float max_safe_power;           // Maximum safe power for current antenna
      |                         
      |                         {}
   19 |     float regulatory_limit;         // Regulatory power limit for current band
      |                           
      |                           {}
   20 |     bool efficiency_optimization;   // Enable power efficiency optimization
      |                                 
      |                                 {}
   21 |     float battery_level;            // Current battery level (0.0-1.0)
      |                        
      |                        {}
   22 |     float power_consumption;        // Current power consumption in watts
      |                            
      |                            {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: warning: accessing fields in struct 'AntennaPowerEfficiency' is inefficient due to padding; only needs 97 bytes but is using 104 bytes [altera-struct-pack-align]
   27 | struct AntennaPowerEfficiency {
      |        ^
   28 |     std::string antenna_type;
   29 |     std::map<int, float> efficiency_at_power;  // Power level -> efficiency (0.0-1.0)
   30 |     float max_efficient_power;                 // Power level with best efficiency
   31 |     float efficiency_threshold;                // Minimum efficiency threshold
   32 |     bool has_power_limiting;                   // Whether this antenna has power limiting
   33 |     float thermal_limit;                       // Thermal power limit in watts
   34 |     float swr_limit;                          // SWR limit for power limiting
   35 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPowerEfficiency'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: warning: accessing fields in struct 'AntennaPowerEfficiency' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   27 | struct AntennaPowerEfficiency {
      |        ^
   28 |     std::string antenna_type;
   29 |     std::map<int, float> efficiency_at_power;  // Power level -> efficiency (0.0-1.0)
   30 |     float max_efficient_power;                 // Power level with best efficiency
   31 |     float efficiency_threshold;                // Minimum efficiency threshold
   32 |     bool has_power_limiting;                   // Whether this antenna has power limiting
   33 |     float thermal_limit;                       // Thermal power limit in watts
   34 |     float swr_limit;                          // SWR limit for power limiting
   35 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPowerEfficiency' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: warning: constructor does not initialize these fields: max_efficient_power, efficiency_threshold, has_power_limiting, thermal_limit, swr_limit [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   27 | struct AntennaPowerEfficiency {
      |        ^
   28 |     std::string antenna_type;
   29 |     std::map<int, float> efficiency_at_power;  // Power level -> efficiency (0.0-1.0)
   30 |     float max_efficient_power;                 // Power level with best efficiency
      |                              
      |                              {}
   31 |     float efficiency_threshold;                // Minimum efficiency threshold
      |                               
      |                               {}
   32 |     bool has_power_limiting;                   // Whether this antenna has power limiting
      |                            
      |                            {}
   33 |     float thermal_limit;                       // Thermal power limit in watts
      |                        
      |                        {}
   34 |     float swr_limit;                          // SWR limit for power limiting
      |                    
      |                    {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: warning: accessing fields in struct 'RegulatoryPowerLimits' is inefficient due to padding; only needs 113 bytes but is using 120 bytes [altera-struct-pack-align]
   38 | struct RegulatoryPowerLimits {
      |        ^
   39 |     std::string band_name;
   40 |     float min_freq_mhz;
   41 |     float max_freq_mhz;
   42 |     float max_power_watts;
   43 |     std::string regulatory_body;  // FCC, ITU, etc.
   44 |     std::string license_type;     // Amateur, Commercial, Military, etc.
   45 |     bool requires_license;
   46 |     float power_density_limit;    // Power density limit in W/m²
   47 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'RegulatoryPowerLimits'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: warning: accessing fields in struct 'RegulatoryPowerLimits' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   38 | struct RegulatoryPowerLimits {
      |        ^
   39 |     std::string band_name;
   40 |     float min_freq_mhz;
   41 |     float max_freq_mhz;
   42 |     float max_power_watts;
   43 |     std::string regulatory_body;  // FCC, ITU, etc.
   44 |     std::string license_type;     // Amateur, Commercial, Military, etc.
   45 |     bool requires_license;
   46 |     float power_density_limit;    // Power density limit in W/m²
   47 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: use "__attribute__((aligned(128)))" to align struct 'RegulatoryPowerLimits' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: warning: constructor does not initialize these fields: min_freq_mhz, max_freq_mhz, max_power_watts, requires_license, power_density_limit [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   38 | struct RegulatoryPowerLimits {
      |        ^
   39 |     std::string band_name;
   40 |     float min_freq_mhz;
      |                       
      |                       {}
   41 |     float max_freq_mhz;
      |                       
      |                       {}
   42 |     float max_power_watts;
      |                          
      |                          {}
   43 |     std::string regulatory_body;  // FCC, ITU, etc.
   44 |     std::string license_type;     // Amateur, Commercial, Military, etc.
   45 |     bool requires_license;
      |                          
      |                          {}
   46 |     float power_density_limit;    // Power density limit in W/m²
      |                              
      |                              {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:50:8: warning: accessing fields in struct 'PowerManagementConfig' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   50 | struct PowerManagementConfig {
      |        ^
   51 |     bool enable_automatic_power_limiting = true;
   52 |     bool enable_efficiency_optimization = true;
   53 |     bool enable_regulatory_compliance = true;
   54 |     bool enable_thermal_protection = true;
   55 |     bool enable_swr_protection = true;
   56 |     bool enable_battery_management = true;
   57 |     float default_efficiency_threshold = 0.7f;
   58 |     float thermal_shutdown_threshold = 0.9f;
   59 |     float swr_shutdown_threshold = 3.0f;
   60 |     float battery_low_threshold = 0.2f;
   61 |     int power_change_delay_ms = 100;  // Delay between power changes
   62 |     bool log_power_changes = true;
   63 |     bool enable_power_analytics = true;
   64 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:50:8: note: use "__attribute__((aligned(32)))" to align struct 'PowerManagementConfig' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:57:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   57 |     float default_efficiency_threshold = 0.7f;
      |                                          ^  ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:58:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   58 |     float thermal_shutdown_threshold = 0.9f;
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:59:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   59 |     float swr_shutdown_threshold = 3.0f;
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:60:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   60 |     float battery_low_threshold = 0.2f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: warning: accessing fields in struct 'PowerManagementStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   67 | struct PowerManagementStats {
      |        ^
   68 |     int total_power_changes;
   69 |     float average_efficiency;
   70 |     float peak_power_used;
   71 |     float total_energy_consumed;
   72 |     std::chrono::system_clock::time_point last_reset;
   73 |     std::map<int, int> power_level_usage;  // Power level -> usage count
   74 |     float efficiency_vs_power_correlation;
   75 |     int thermal_shutdowns;
   76 |     int swr_shutdowns;
   77 |     int regulatory_violations;
   78 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: note: use "__attribute__((aligned(128)))" to align struct 'PowerManagementStats' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: warning: constructor does not initialize these fields: total_power_changes, average_efficiency, peak_power_used, total_energy_consumed, efficiency_vs_power_correlation, thermal_shutdowns, swr_shutdowns, regulatory_violations [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   67 | struct PowerManagementStats {
      |        ^
   68 |     int total_power_changes;
      |                            
      |                            {}
   69 |     float average_efficiency;
      |                             
      |                             {}
   70 |     float peak_power_used;
      |                          
      |                          {}
   71 |     float total_energy_consumed;
      |                                
      |                                {}
   72 |     std::chrono::system_clock::time_point last_reset;
   73 |     std::map<int, int> power_level_usage;  // Power level -> usage count
   74 |     float efficiency_vs_power_correlation;
      |                                          
      |                                          {}
   75 |     int thermal_shutdowns;
      |                          
      |                          {}
   76 |     int swr_shutdowns;
      |                      
      |                      {}
   77 |     int regulatory_violations;
      |                              
      |                              {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:94:10: warning: use default member initializer for 'power_limiting_active' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   94 |     bool power_limiting_active;
      |          ^                    
      |                               {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:95:10: warning: use default member initializer for 'thermal_protection_active' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   95 |     bool thermal_protection_active;
      |          ^                        
      |                                   {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:96:10: warning: use default member initializer for 'swr_protection_active' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   96 |     bool swr_protection_active;
      |          ^                    
      |                               {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:97:11: warning: use default member initializer for 'current_swr' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   97 |     float current_swr;
      |           ^          
      |                      {1.0f}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:98:11: warning: use default member initializer for 'current_temperature' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   98 |     float current_temperature;
      |           ^                  
      |                              {25.0f}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:107:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 |     static FGCom_PowerManager& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                              -> FGCom_PowerManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:111:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  111 |     bool setPowerLevel(int power_watts);
      |     ~~~~ ^                             
      |     auto                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:112:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     int getCurrentPower() const;
      |     ~~~ ^                      
      |     auto                        -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:113:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     std::vector<int> getAvailablePowerLevels() const;
      |     ~~~~~~~~~~~~~~~~ ^                              
      |     auto                                             -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:114:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     bool isPowerLevelAvailable(int power_watts) const;
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:117:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     float calculatePowerEfficiency(int power_watts, const std::string& antenna_type) const;
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:118:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  118 |     float getCurrentPowerEfficiency() const;
      |     ~~~~~ ^                                
      |     auto                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:119:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 |     int getOptimalPowerLevel(const std::string& antenna_type) const;
      |     ~~~ ^                                                          
      |     auto                                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:120:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     bool optimizePowerForEfficiency();
      |     ~~~~ ^                           
      |     auto                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:123:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     bool enablePowerLimiting(bool enable);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:124:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |     bool isPowerLimitingActive() const;
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:125:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     bool checkPowerLimits(int power_watts) const;
      |     ~~~~ ^                                      
      |     auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:126:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     bool applyPowerLimits(int requested_power, int& actual_power) const;
      |     ~~~~ ^                                                             
      |     auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:129:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     bool checkRegulatoryCompliance(int power_watts, const std::string& frequency_band) const;
      |     ~~~~ ^                                                                                  
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:130:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  130 |     float getRegulatoryPowerLimit(const std::string& frequency_band) const;
      |     ~~~~~ ^                                                               
      |     auto                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:131:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     bool isRegulatoryCompliant(int power_watts, const std::string& frequency_band) const;
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:134:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     bool enableThermalProtection(bool enable);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:135:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  135 |     bool isThermalProtectionActive() const;
      |     ~~~~ ^                                
      |     auto                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:137:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     bool checkThermalLimits(int power_watts) const;
      |     ~~~~ ^                                        
      |     auto                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:140:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     bool enableSWRProtection(bool enable);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:141:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     bool isSWRProtectionActive() const;
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:143:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     bool checkSWRLimits(int power_watts) const;
      |     ~~~~ ^                                    
      |     auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:147:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     float getBatteryLevel() const;
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool isBatteryLow() const;
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:149:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     int getMaxPowerForBattery() const;
      |     ~~~ ^                            
      |     auto                              -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:153:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 |     std::string getCurrentAntenna() const;
      |     ~~~~~~~~~~~ ^                        
      |     auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:154:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |     bool loadAntennaEfficiencyData(const std::string& antenna_type, const AntennaPowerEfficiency& data);
      |     ~~~~ ^                                                                                             
      |     auto                                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:155:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     AntennaPowerEfficiency getAntennaEfficiencyData(const std::string& antenna_type) const;
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                              
      |     auto                                                                                   -> AntennaPowerEfficiency
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:159:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     std::string getCurrentFrequencyBand() const;
      |     ~~~~~~~~~~~ ^                              
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:160:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     bool loadRegulatoryLimits(const std::string& frequency_band, const RegulatoryPowerLimits& limits);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:161:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     RegulatoryPowerLimits getRegulatoryLimits(const std::string& frequency_band) const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                                                           
      |     auto                                                                               -> RegulatoryPowerLimits
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:165:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     PowerManagementConfig getConfig() const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                    -> PowerManagementConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:166:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     bool loadConfigFromFile(const std::string& config_file);
      |     ~~~~ ^                                                 
      |     auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool saveConfigToFile(const std::string& config_file) const;
      |     ~~~~ ^                                                     
      |     auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:170:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     PowerManagementStats getStats() const;
      |     ~~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                  -> PowerManagementStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:173:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     bool isPowerAnalyticsEnabled() const;
      |     ~~~~ ^                              
      |     auto                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool canChangePower() const;
      |     ~~~~ ^                     
      |     auto                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:178:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  178 |     int getPowerChangeDelay() const;
      |     ~~~ ^                          
      |     auto                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:181:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     bool isSafeToTransmit(int power_watts) const;
      |     ~~~~ ^                                      
      |     auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:182:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     bool checkAllSafetyLimits(int power_watts) const;
      |     ~~~~ ^                                          
      |     auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:184:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     bool isEmergencyPowerDown() const;
      |     ~~~~ ^                           
      |     auto                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:187:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     int calculateOptimalPowerForRange(double distance_km, const std::string& antenna_type) const;
      |     ~~~ ^                                                                                       
      |     auto                                                                                         -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:188:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 |     int calculateOptimalPowerForSignalQuality(float target_quality, double distance_km, const std::string& antenna_type) const;
      |     ~~~ ^                                                                                                                     
      |     auto                                                                                                                       -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:189:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  189 |     float calculatePowerConsumption(int power_watts, const std::string& antenna_type) const;
      |     ~~~~~ ^                                                                                
      |     auto                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:192:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     float getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const;
      |     ~~~~~ ^                                                                                                                                                
      |     auto                                                                                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:193:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     float getPowerEfficiencyAtFrequency(int power_watts, const std::string& antenna_type, float frequency_mhz) const;
      |     ~~~~~ ^                                                                                                         
      |     auto                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:218:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  218 |     float wattsToDBm(float watts);
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:219:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     float dbmToWatts(float dbm);
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:220:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     float wattsToDBW(float watts);
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:221:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     float dbwToWatts(float dbw);
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:224:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  224 |     float calculatePowerDensity(float power_watts, float distance_meters);
      |     ~~~~~ ^                                                              
      |     auto                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:225:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  225 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2);
      |     ~~~~ ^                                                                                     
      |     auto                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:228:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db);
      |     ~~~~~ ^                                                                              
      |     auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:229:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     float calculateEIRP(float tx_power_watts, float antenna_gain_db, float system_loss_db);
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:232:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:233:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db);
      |     ~~~~~ ^                                                                                                                         
      |     auto                                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:236:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  236 |     bool isAmateurRadioFrequency(float frequency_mhz);
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:237:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  237 |     bool isCommercialFrequency(float frequency_mhz);
      |     ~~~~ ^                                         
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:238:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  238 |     bool isMilitaryFrequency(float frequency_mhz);
      |     ~~~~ ^                                       
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:239:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  239 |     std::string getRegulatoryBody(float frequency_mhz);
      |     ~~~~~~~~~~~ ^                                     
      |     auto                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:240:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  240 |     std::string getLicenseType(float frequency_mhz);
      |     ~~~~~~~~~~~ ^                                  
      |     auto                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:241:1: warning: namespace 'PowerManagementUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  241 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:216:11: note: namespace 'PowerManagementUtils' starts here
  216 | namespace PowerManagementUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:2:1: warning: #includes are not sorted properly [llvm-include-order]
    2 | #include <fstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:2:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
    2 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
    3 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:3:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
    3 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:3:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:4:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
    4 | #include <iostream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:4:1: warning: included header iostream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:5:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    5 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    6 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:8:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
    8 | const std::string FGCom_RadioConfig::ECHO_TEST_FREQUENCY = "echo_test_frequency";
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:8:12: warning: no header providing "std::string" is directly included [misc-include-cleaner]
    6 | 
    7 | // Configuration key constants
    8 | const std::string FGCom_RadioConfig::ECHO_TEST_FREQUENCY = "echo_test_frequency";
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:8:38: warning: initialization of 'ECHO_TEST_FREQUENCY' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
    8 | const std::string FGCom_RadioConfig::ECHO_TEST_FREQUENCY = "echo_test_frequency";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: possibly throwing constructor declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:8:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
    8 | const std::string FGCom_RadioConfig::ECHO_TEST_FREQUENCY = "echo_test_frequency";
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:8:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    8 | const std::string FGCom_RadioConfig::ECHO_TEST_FREQUENCY = "echo_test_frequency";
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:9:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
    9 | const std::string FGCom_RadioConfig::MAX_FIELD_LENGTH = "max_field_length";
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:9:38: warning: initialization of 'MAX_FIELD_LENGTH' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
    9 | const std::string FGCom_RadioConfig::MAX_FIELD_LENGTH = "max_field_length";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: possibly throwing constructor declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:9:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
    9 | const std::string FGCom_RadioConfig::MAX_FIELD_LENGTH = "max_field_length";
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:9:57: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
    9 | const std::string FGCom_RadioConfig::MAX_FIELD_LENGTH = "max_field_length";
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:10:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   10 | const std::string FGCom_RadioConfig::DEFAULT_SAMPLE_RATE = "default_sample_rate";
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:10:38: warning: initialization of 'DEFAULT_SAMPLE_RATE' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   10 | const std::string FGCom_RadioConfig::DEFAULT_SAMPLE_RATE = "default_sample_rate";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: possibly throwing constructor declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:10:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   10 | const std::string FGCom_RadioConfig::DEFAULT_SAMPLE_RATE = "default_sample_rate";
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:10:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   10 | const std::string FGCom_RadioConfig::DEFAULT_SAMPLE_RATE = "default_sample_rate";
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:11:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   11 | const std::string FGCom_RadioConfig::UDP_SERVER_PORT = "udp_server_port";
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:11:38: warning: initialization of 'UDP_SERVER_PORT' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   11 | const std::string FGCom_RadioConfig::UDP_SERVER_PORT = "udp_server_port";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: possibly throwing constructor declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:11:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   11 | const std::string FGCom_RadioConfig::UDP_SERVER_PORT = "udp_server_port";
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:11:56: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   11 | const std::string FGCom_RadioConfig::UDP_SERVER_PORT = "udp_server_port";
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:12:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   12 | const std::string FGCom_RadioConfig::NOTIFICATION_INTERVAL = "notification_interval";
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:12:38: warning: initialization of 'NOTIFICATION_INTERVAL' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
   12 | const std::string FGCom_RadioConfig::NOTIFICATION_INTERVAL = "notification_interval";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:7: note: possibly throwing constructor declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:12:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   12 | const std::string FGCom_RadioConfig::NOTIFICATION_INTERVAL = "notification_interval";
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:12:62: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   12 | const std::string FGCom_RadioConfig::NOTIFICATION_INTERVAL = "notification_interval";
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:15:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   15 | std::map<std::string, std::string> FGCom_RadioConfig::config_values_;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:15:6: warning: no header providing "std::map" is directly included [misc-include-cleaner]
    3 | #include <sstream>
    4 | #include <iostream>
    5 | #include <algorithm>
    6 | 
    7 | // Configuration key constants
    8 | const std::string FGCom_RadioConfig::ECHO_TEST_FREQUENCY = "echo_test_frequency";
    9 | const std::string FGCom_RadioConfig::MAX_FIELD_LENGTH = "max_field_length";
   10 | const std::string FGCom_RadioConfig::DEFAULT_SAMPLE_RATE = "default_sample_rate";
   11 | const std::string FGCom_RadioConfig::UDP_SERVER_PORT = "udp_server_port";
   12 | const std::string FGCom_RadioConfig::NOTIFICATION_INTERVAL = "notification_interval";
   13 | 
   14 | // Static member initialization
   15 | std::map<std::string, std::string> FGCom_RadioConfig::config_values_;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:15:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   15 | std::map<std::string, std::string> FGCom_RadioConfig::config_values_;
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:16:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   16 | bool FGCom_RadioConfig::initialized_ = false;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:18:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   18 | bool FGCom_RadioConfig::initialize(const std::string& config_file) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:18:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   18 | bool FGCom_RadioConfig::initialize(const std::string& config_file) {
      | ~~~~                    ^
      | auto                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:20:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   20 |     config_values_[ECHO_TEST_FREQUENCY] = "910.0";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:20:41: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   20 |     config_values_[ECHO_TEST_FREQUENCY] = "910.0";
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:21:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   21 |     config_values_[MAX_FIELD_LENGTH] = "256";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:21:38: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   21 |     config_values_[MAX_FIELD_LENGTH] = "256";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:22:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   22 |     config_values_[DEFAULT_SAMPLE_RATE] = "48000";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:22:41: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   22 |     config_values_[DEFAULT_SAMPLE_RATE] = "48000";
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:23:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   23 |     config_values_[UDP_SERVER_PORT] = "16661";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:23:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   23 |     config_values_[UDP_SERVER_PORT] = "16661";
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:24:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   24 |     config_values_[NOTIFICATION_INTERVAL] = "100";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:24:43: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   24 |     config_values_[NOTIFICATION_INTERVAL] = "100";
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:28:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   28 |         std::ifstream file(config_file);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:31:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   31 |             while (std::getline(file, line)) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:31:20: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
   31 |             while (std::getline(file, line)) {
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:28:9: note: inferred assignment of ID-dependent value from ID-dependent 
   28 |         std::ifstream file(config_file);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:31:20: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   31 |             while (std::getline(file, line)) {
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:31:25: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
   31 |             while (std::getline(file, line)) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:33:41: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   33 |                 if (line.empty() || line[0] == '#') continue;
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:33:52: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   33 |                 if (line.empty() || line[0] == '#') continue;
      |                                                    ^         
      |                                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:35:17: warning: variable 'pos' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
   35 |                 size_t pos = line.find('=');
      |                 ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:35:17: warning: no header providing "size_t" is directly included [misc-include-cleaner]
    2 |                 size_t pos = line.find('=');
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:35:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   35 |                 size_t pos = line.find('=');
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2713:24: note: default parameter was declared here
 2713 |       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:38:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   38 |                     std::string value = line.substr(pos + 1);
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3163:35: note: default parameter was declared here
 3163 |       substr(size_type __pos = 0, size_type __n = npos) const
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:41:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   41 |                     key.erase(0, key.find_first_not_of(" \t"));
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3040:44: note: default parameter was declared here
 3040 |       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:42:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   42 |                     key.erase(key.find_last_not_of(" \t") + 1);
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2069:34: note: default parameter was declared here
 2069 |       erase(size_type __pos = 0, size_type __n = npos)
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:42:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   42 |                     key.erase(key.find_last_not_of(" \t") + 1);
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3127:43: note: default parameter was declared here
 3127 |       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:43:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   43 |                     value.erase(0, value.find_first_not_of(" \t"));
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3040:44: note: default parameter was declared here
 3040 |       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:44:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   44 |                     value.erase(value.find_last_not_of(" \t") + 1);
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2069:34: note: default parameter was declared here
 2069 |       erase(size_type __pos = 0, size_type __n = npos)
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:44:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   44 |                     value.erase(value.find_last_not_of(" \t") + 1);
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3127:43: note: default parameter was declared here
 3127 |       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:46:35: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |                     config_values_[key] = value;
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:46:41: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |                     config_values_[key] = value;
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      | ~~~~~~~~~~~                    ^
      | auto                                                                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:42: warning: 2 adjacent parameters of 'getString' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:61: note: the first parameter in the range is 'key'
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                                             ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:85: note: the last parameter in the range is 'default_value'
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                                                                     ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:58:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   58 |     if (!initialized_) initialize();
      |                       ^             
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:58:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   58 |     if (!initialized_) initialize();
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:18:36: note: default parameter was declared here
   18 | bool FGCom_RadioConfig::initialize(const std::string& config_file) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:58:24: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     if (!initialized_) initialize();
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:18:25: note: resolves to this declaration
   18 | bool FGCom_RadioConfig::initialize(const std::string& config_file) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:59:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   59 |     auto it = config_values_.find(key);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:60:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   60 |     return (it != config_values_.end()) ? it->second : default_value;
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:60:45: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   60 |     return (it != config_values_.end()) ? it->second : default_value;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:63:24: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   63 | int FGCom_RadioConfig::getInt(const std::string& key, int default_value) {
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:63:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   63 | int FGCom_RadioConfig::getInt(const std::string& key, int default_value) {
      | ~~~                    ^
      | auto                                                                     -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:64:5: warning: variable 'value' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
   64 |     std::string value = getString(key);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:64:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   64 |     std::string value = getString(key);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:66: note: default parameter was declared here
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:64:25: warning: 'getString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   64 |     std::string value = getString(key);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:32: note: resolves to this declaration
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:65:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   65 |     if (value.empty()) return default_value;
      |                       ^                     
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:68:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   68 |         return std::stoi(value);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:29: note: default parameter was declared here
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:68:16: warning: 'stoi' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |         return std::stoi(value);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:3: note: resolves to this declaration
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:68:21: warning: no header providing "std::stoi" is directly included [misc-include-cleaner]
   68 |         return std::stoi(value);
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:69:25: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
    2 |     } catch (const std::exception&) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:74:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   74 | float FGCom_RadioConfig::getFloat(const std::string& key, float default_value) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:74:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 | float FGCom_RadioConfig::getFloat(const std::string& key, float default_value) {
      | ~~~~~                    ^
      | auto                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:75:5: warning: variable 'value' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
   75 |     std::string value = getString(key);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:75:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   75 |     std::string value = getString(key);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:66: note: default parameter was declared here
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:75:25: warning: 'getString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |     std::string value = getString(key);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:32: note: resolves to this declaration
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:76:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   76 |     if (value.empty()) return default_value;
      |                       ^                     
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:79:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   79 |         return std::stof(value);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:79:16: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   79 |         return std::stof(value);
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:79:21: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
   79 |         return std::stof(value);
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:85:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   85 | bool FGCom_RadioConfig::getBool(const std::string& key, bool default_value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:85:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 | bool FGCom_RadioConfig::getBool(const std::string& key, bool default_value) {
      | ~~~~                    ^
      | auto                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:86:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   86 |     std::string value = getString(key);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:66: note: default parameter was declared here
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:86:25: warning: 'getString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     std::string value = getString(key);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:32: note: resolves to this declaration
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:87:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   87 |     if (value.empty()) return default_value;
      |                       ^                     
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:89:5: warning: 'transform<__gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, __gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, int (*)(int) noexcept>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |     std::transform(value.begin(), value.end(), value.begin(), ::tolower);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4298:5: note: resolves to this declaration
 4298 |     transform(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:89:65: warning: no header providing "tolower" is directly included [misc-include-cleaner]
    2 |     std::transform(value.begin(), value.end(), value.begin(), ::tolower);
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:90:19: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |     return (value == "true" || value == "1" || value == "yes");
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:90:38: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |     return (value == "true" || value == "1" || value == "yes");
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:90:54: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |     return (value == "true" || value == "1" || value == "yes");
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:93:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   93 | void FGCom_RadioConfig::setString(const std::string& key, const std::string& value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:94:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   94 |     if (!initialized_) initialize();
      |                       ^             
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:94:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   94 |     if (!initialized_) initialize();
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:18:36: note: default parameter was declared here
   18 | bool FGCom_RadioConfig::initialize(const std::string& config_file) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:94:24: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   94 |     if (!initialized_) initialize();
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:18:25: note: resolves to this declaration
   18 | bool FGCom_RadioConfig::initialize(const std::string& config_file) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:95:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   95 |     config_values_[key] = value;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:95:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   95 |     config_values_[key] = value;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:98:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   98 | void FGCom_RadioConfig::setInt(const std::string& key, int value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:99:5: warning: 'setString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   99 |     setString(key, std::to_string(value));
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:93:25: note: resolves to this declaration
   93 | void FGCom_RadioConfig::setString(const std::string& key, const std::string& value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:99:20: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   99 |     setString(key, std::to_string(value));
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:99:25: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
   99 |     setString(key, std::to_string(value));
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:102:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  102 | void FGCom_RadioConfig::setFloat(const std::string& key, float value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:103:5: warning: 'setString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     setString(key, std::to_string(value));
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:93:25: note: resolves to this declaration
   93 | void FGCom_RadioConfig::setString(const std::string& key, const std::string& value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:103:20: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     setString(key, std::to_string(value));
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4241:3: note: resolves to this declaration
 4241 |   to_string(float __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:103:25: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  103 |     setString(key, std::to_string(value));
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:106:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  106 | void FGCom_RadioConfig::setBool(const std::string& key, bool value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:107:5: warning: 'setString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  107 |     setString(key, value ? "true" : "false");
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:93:25: note: resolves to this declaration
   93 | void FGCom_RadioConfig::setString(const std::string& key, const std::string& value) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:107:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  107 |     setString(key, value ? "true" : "false");
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:110:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  110 | bool FGCom_RadioConfig::isValidFrequency(float frequency) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:110:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  110 | bool FGCom_RadioConfig::isValidFrequency(float frequency) {
      | ~~~~                    ^
      | auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:111:24: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  111 |     return frequency > 0.0f && frequency <= 1000000.0f; // 0 Hz to 1 GHz
      |                        ^  ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:111:45: warning: 1000000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  111 |     return frequency > 0.0f && frequency <= 1000000.0f; // 0 Hz to 1 GHz
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:111:45: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  111 |     return frequency > 0.0f && frequency <= 1000000.0f; // 0 Hz to 1 GHz
      |                                             ^        ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:114:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  114 | bool FGCom_RadioConfig::isValidPort(int port) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:114:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 | bool FGCom_RadioConfig::isValidPort(int port) {
      | ~~~~                    ^
      | auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:115:32: warning: 65535 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  115 |     return port > 0 && port <= 65535;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:118:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  118 | bool FGCom_RadioConfig::isValidFieldLength(int length) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:118:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  118 | bool FGCom_RadioConfig::isValidFieldLength(int length) {
      | ~~~~                    ^
      | auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:119:36: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  119 |     return length > 0 && length <= 1024; // Reasonable field length limit
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_RADIO_CONFIG_H
      |         ^~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_CONFIG_H
    2 | #define FGCOM_RADIO_CONFIG_H
      |         ~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_CONFIG_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:26:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   26 |     static bool initialize(const std::string& config_file = "");
      |            ~~~~ ^                                              
      |            auto                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:26:28: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   26 |     static bool initialize(const std::string& config_file = "");
      |                            ^                              ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:26:61: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   26 |     static bool initialize(const std::string& config_file = "");
      |                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:29:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   29 |     static std::string getString(const std::string& key, const std::string& default_value = "");
      |            ~~~~~~~~~~~ ^                                                                       
      |            auto                                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:29:58: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   29 |     static std::string getString(const std::string& key, const std::string& default_value = "");
      |                                                          ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:29:93: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   29 |     static std::string getString(const std::string& key, const std::string& default_value = "");
      |                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:30:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   30 |     static int getInt(const std::string& key, int default_value = 0);
      |            ~~~ ^                                                    
      |            auto                                                      -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:30:47: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   30 |     static int getInt(const std::string& key, int default_value = 0);
      |                                               ^                 ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:31:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   31 |     static float getFloat(const std::string& key, float default_value = 0.0f);
      |            ~~~~~ ^                                                           
      |            auto                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:31:51: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   31 |     static float getFloat(const std::string& key, float default_value = 0.0f);
      |                                                   ^                   ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:31:73: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   31 |     static float getFloat(const std::string& key, float default_value = 0.0f);
      |                                                                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:32:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   32 |     static bool getBool(const std::string& key, bool default_value = false);
      |            ~~~~ ^                                                          
      |            auto                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:32:49: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   32 |     static bool getBool(const std::string& key, bool default_value = false);
      |                                                 ^                  ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:41:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   41 |     static bool isValidFrequency(float frequency);
      |            ~~~~ ^                                
      |            auto                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:42:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 |     static bool isValidPort(int port);
      |            ~~~~ ^                    
      |            auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:43:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   43 |     static bool isValidFieldLength(int length);
      |            ~~~~ ^                             
      |            auto                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:1:1: warning: header is missing header guard [llvm-header-guard]
    1 | /* 
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: #includes are not sorted properly [llvm-include-order]
   17 | #include <cstdint>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   17 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   18 | #include <iostream> 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:18:1: warning: system include iostream not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   18 | #include <iostream> 
      | ^~~~~~~~~~~~~~~~~~~
   19 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:19:1: warning: system include cmath not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   19 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   20 | #include <regex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:20:1: warning: system include regex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   20 | #include <regex>
      | ^~~~~~~~~~~~~~~~
   21 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:34:9: warning: macro 'EARTH_RADIUS_CONST' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
   34 | #define EARTH_RADIUS_CONST 3.57  // earth radius factor constant for m/km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:1: warning: replace macro with enum [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      | ^~~~~~~
      |                          =
   36 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' defines an integral constant; prefer an enum instead [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to padding; only needs 172 bytes but is using 192 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:40:15: warning: member variable 'frequency' has public visibility [misc-non-private-member-variables-in-classes]
   40 |         std::string  frequency; // tuned frequency (real carrier frequency)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:41:15: warning: member variable 'dialedFRQ' has public visibility [misc-non-private-member-variables-in-classes]
   41 |         std::string  dialedFRQ; // dialed frequency (aka "channel"; what was supplied from the COMn_FRQ= field)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:42:8: warning: member variable 'power_btn' has public visibility [misc-non-private-member-variables-in-classes]
   42 |         bool  power_btn;     // true if switched on
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:43:8: warning: member variable 'volts' has public visibility [misc-non-private-member-variables-in-classes]
   43 |         float volts;         // how much electric power it has (>0 = on)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:44:8: warning: member variable 'serviceable' has public visibility [misc-non-private-member-variables-in-classes]
   44 |         bool  serviceable;   // false if broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:45:8: warning: member variable 'ptt' has public visibility [misc-non-private-member-variables-in-classes]
   45 |         bool  ptt;           // true if PTT is actually pushed (synced to remotes and used to determine reception)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:46:8: warning: member variable 'ptt_req' has public visibility [misc-non-private-member-variables-in-classes]
   46 |         bool  ptt_req;       // true if PTT is requested from client/udp
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:47:8: warning: member variable 'volume' has public visibility [misc-non-private-member-variables-in-classes]
   47 |         float volume;        // volume, 0.0->1.0
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:48:8: warning: member variable 'pwr' has public visibility [misc-non-private-member-variables-in-classes]
   48 |         float pwr;           // tx power in watts
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:49:8: warning: member variable 'operable' has public visibility [misc-non-private-member-variables-in-classes]
   49 |         bool  operable;      // false if switched off, not powered or broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:50:8: warning: member variable 'squelch' has public visibility [misc-non-private-member-variables-in-classes]
   50 |         float squelch;       // squelch setting (cutoff signal below this quality)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:51:8: warning: member variable 'rdfEnabled' has public visibility [misc-non-private-member-variables-in-classes]
   51 |         bool  rdfEnabled;    // if radio can receive RDF information
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:52:8: warning: member variable 'channelWidth' has public visibility [misc-non-private-member-variables-in-classes]
   52 |         float channelWidth;  // channel width in kHz
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:53:8: warning: member variable 'publish' has public visibility [misc-non-private-member-variables-in-classes]
   53 |         bool  publish;       // if set to false, radio will not be broadcast to other plugins (implies receive-only)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:56:14: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   56 |         std::string antenna_type;      // Type of antenna (vertical, yagi, loop, etc.)
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:57:14: warning: member variable 'frequency_band' has public visibility [misc-non-private-member-variables-in-classes]
   57 |         std::string frequency_band;    // Frequency band for regulatory compliance
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:58:8: warning: member variable 'power_efficiency' has public visibility [misc-non-private-member-variables-in-classes]
   58 |         float power_efficiency;        // Current power efficiency (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:59:7: warning: member variable 'power_limiting_enabled' has public visibility [misc-non-private-member-variables-in-classes]
   59 |         bool power_limiting_enabled;   // Whether automatic power limiting is enabled
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:60:8: warning: member variable 'swr' has public visibility [misc-non-private-member-variables-in-classes]
   60 |         float swr;                     // Standing Wave Ratio
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:61:8: warning: member variable 'temperature' has public visibility [misc-non-private-member-variables-in-classes]
   61 |         float temperature;             // Antenna temperature in Celsius
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:62:8: warning: member variable 'battery_level' has public visibility [misc-non-private-member-variables-in-classes]
   62 |         float battery_level;           // Battery level (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:64:2: warning: 'fgcom_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   64 |         fgcom_radio()  {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:9: warning: 'frequency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   40 |         frequency   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   65 |         frequency   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:9: warning: 'dialedFRQ' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   41 |         dialedFRQ   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |         dialedFRQ   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:67:9: warning: 'power_btn' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   42 |         power_btn   = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:9: warning: 'volts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   43 |         volts       = 12;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:23: warning: 12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   68 |         volts       = 12;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:69:9: warning: 'serviceable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   44 |         serviceable = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:70:9: warning: 'ptt' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   45 |         ptt         = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:71:9: warning: 'ptt_req' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   46 |         ptt_req     = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:72:9: warning: 'volume' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   47 |         volume      = 1.0;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:9: warning: 'pwr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   48 |         pwr         = 10;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:23: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   73 |         pwr         = 10;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:74:9: warning: 'operable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   49 |         operable    = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:9: warning: 'squelch' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   50 |         squelch     = 0.1;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:23: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   75 |         squelch     = 0.1;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:76:9: warning: 'rdfEnabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   51 |         rdfEnabled  = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:77:9: warning: 'channelWidth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   52 |         channelWidth = -1;   // let the selected radio model decide on defaults
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:78:9: warning: 'publish' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   53 |         publish     = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:9: warning: 'antenna_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |         antenna_type = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |         antenna_type = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:9: warning: 'frequency_band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   57 |         frequency_band = "amateur";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |         frequency_band = "amateur";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:9: warning: 'power_efficiency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |         power_efficiency = 0.8f;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |         power_efficiency = 0.8f;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:84:9: warning: 'power_limiting_enabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   59 |         power_limiting_enabled = true;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:9: warning: 'swr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   60 |         swr = 1.0f;
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:15: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   85 |         swr = 1.0f;
      |               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:9: warning: 'temperature' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   61 |         temperature = 25.0f;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   86 |         temperature = 25.0f;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:9: warning: 'battery_level' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   62 |         battery_level = 1.0f;
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   87 |         battery_level = 1.0f;
      |                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to padding; only needs 105 bytes but is using 304 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_amateur_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_amateur_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:93:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:94:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:95:17: warning: member variable 'grid_locator' has public visibility [misc-non-private-member-variables-in-classes]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:96:11: warning: member variable 'power_watts' has public visibility [misc-non-private-member-variables-in-classes]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:97:10: warning: member variable 'is_amateur' has public visibility [misc-non-private-member-variables-in-classes]
   97 |     bool is_amateur;            // Amateur radio flag
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:98:9: warning: member variable 'itu_region' has public visibility [misc-non-private-member-variables-in-classes]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:5: warning: 'fgcom_amateur_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:29: warning: initializer for base class 'fgcom_radio' is redundant [readability-redundant-member-init]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                     
      |                     {""}
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                     
      |                     {"USB"}
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
      |         ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |         mode = "USB";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:9: warning: 'grid_locator' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                             
      |                             {""}
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         grid_locator = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:104:9: warning: 'power_watts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |                      
      |                      {100.0}
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:105:9: warning: 'is_amateur' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   97 |     bool is_amateur;            // Amateur radio flag
      |                    
      |                    {false}
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:106:9: warning: 'itu_region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |                   
      |                   {1}
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
  106 |         itu_region = 1;  // Default to Region 1
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: warning: accessing fields in struct 'fgcom_radiowave_signal' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
  113 | struct fgcom_radiowave_signal {
      |        ^
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
  122 |     };
  123 | };
      |  
      |   __attribute__((aligned(16)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: note: use "__attribute__((aligned(16)))" to align struct 'fgcom_radiowave_signal' to 16 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:114:11: warning: member variable 'quality' has public visibility [misc-non-private-member-variables-in-classes]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:115:11: warning: member variable 'direction' has public visibility [misc-non-private-member-variables-in-classes]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:116:11: warning: member variable 'verticalAngle' has public visibility [misc-non-private-member-variables-in-classes]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:118:5: warning: 'fgcom_radiowave_signal' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  118 |     fgcom_radiowave_signal()  {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:119:9: warning: 'quality' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |                  
      |                  {-1}
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:120:9: warning: 'direction' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |                    
      |                    {-1}
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:121:9: warning: 'verticalAngle' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |                        
      |                        {-1}
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to padding; only needs 65 bytes but is using 72 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radiowave_freqConvRes'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radiowave_freqConvRes' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      | ~~~~ ^                                         
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:46: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: warning: destructor of 'FGCom_radiowaveModel' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
  148 | class FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: note: make it public and virtual
  148 | class FGCom_radiowaveModel {
      |       ^
  149 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:161:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     virtual std::string getType() = 0;  // pure-virtual: cannot be provided by the base class
      |             ~~~~~~~~~~~ ^
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:176:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) = 0;
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^
      |             auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:185:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     virtual std::string conv_chan2freq(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:194:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |     virtual std::string conv_freq2chan(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |             ~~~~~ ^
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:247:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |     virtual float getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz);
      |             ~~~~~ ^                                                                                     
      |             auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:256:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |     virtual bool isCompatible(FGCom_radiowaveModel *otherModel);
      |             ~~~~ ^                                             
      |             auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     virtual double getDistToHorizon(float h);
      |             ~~~~~~ ^                        
      |             auto                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:43: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  265 |     virtual double getDistToHorizon(float h);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |             ~~~~~~ ^                                                  
      |             auto                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:58: warning: parameter name 'hA' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:68: warning: parameter name 'hB' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:286:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  286 |     virtual double getSlantDistance(double surfacedist, double hah);
      |             ~~~~~~ ^                                               
      |             auto                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:296:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 |     virtual double degreeAboveHorizon(double surfacedist, double hah);
      |             ~~~~~~ ^                                                 
      |             auto                                                      -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:307:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     virtual double getDirection(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                               
      |             auto                                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:319:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  319 |     virtual double getSurfaceDistance(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                                     
      |             auto                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:338:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  338 |     static std::unique_ptr<FGCom_radiowaveModel> selectModel(std::string freq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |            auto                                                                -> std::unique_ptr<FGCom_radiowaveModel>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                               
      |            auto                                                         -> fgcom_radiowave_freqConvRes
