/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 | bool FGCom_AmateurRadio::initialize() {
      | ~~~~                     ^
      | auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:34:21: warning: statement should be inside braces [readability-braces-around-statements]
   34 |     if (initialized) return true;
      |                     ^            
      |                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:43:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     region1.min_lat = -90.0; region1.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:43:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     region1.min_lat = -90.0; region1.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:44:24: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   44 |     region1.min_lon = -180.0; region1.max_lon = 40.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:44:49: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   44 |     region1.min_lon = -180.0; region1.max_lon = 40.0;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:51:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     region2.min_lat = -90.0; region2.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:51:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     region2.min_lat = -90.0; region2.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:52:24: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     region2.min_lon = -180.0; region2.max_lon = -20.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:52:50: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     region2.min_lon = -180.0; region2.max_lon = -20.0;
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:59:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     region3.min_lat = -90.0; region3.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:59:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     region3.min_lat = -90.0; region3.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:60:23: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     region3.min_lon = 40.0; region3.max_lon = 180.0;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:60:47: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     region3.min_lon = 40.0; region3.max_lon = 180.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:69:28: warning: 1900.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   69 |     band160m.center_freq = 1900.0; // kHz
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:70:27: warning: 160.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   70 |     band160m.wavelength = 160.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:72:29: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   72 |     band160m.max_range_km = 500.0;
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:73:33: warning: 0.3 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   73 |     band160m.day_night_factor = 0.3; // Better at night
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:80:27: warning: 3750.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   80 |     band80m.center_freq = 3750.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:81:26: warning: 80.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   81 |     band80m.wavelength = 80.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:83:28: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |     band80m.max_range_km = 1000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:84:32: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   84 |     band80m.day_night_factor = 0.5; // Better at night
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:91:27: warning: 7100.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   91 |     band40m.center_freq = 7100.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:92:26: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   92 |     band40m.wavelength = 40.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:94:28: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   94 |     band40m.max_range_km = 3000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:95:32: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |     band40m.day_night_factor = 0.7; // Good day and night
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:102:27: warning: 14175.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  102 |     band20m.center_freq = 14175.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:103:26: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  103 |     band20m.wavelength = 20.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:105:28: warning: 10000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  105 |     band20m.max_range_km = 10000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:106:32: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |     band20m.day_night_factor = 0.9; // Excellent day band
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:113:27: warning: 28500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  113 |     band10m.center_freq = 28500.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:114:26: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  114 |     band10m.wavelength = 10.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:116:28: warning: 2000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  116 |     band10m.max_range_km = 2000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:124:26: warning: 52000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  124 |     band6m.center_freq = 52000.0; // kHz
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:125:25: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  125 |     band6m.wavelength = 6.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:127:27: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  127 |     band6m.max_range_km = 500.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:135:26: warning: 70000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  135 |     band4m.center_freq = 70000.0; // kHz (70 MHz)
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:136:25: warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  136 |     band4m.wavelength = 4.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:138:27: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |     band4m.max_range_km = 500.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:105: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                                         ^~~~~~~~~
      |                                                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:163:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 | bool FGCom_AmateurRadio::loadBandSegments(const std::string& csv_file) {
      | ~~~~                     ^
      | auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                                      ^~~~~~~~~
      |                                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:189:26: warning: statement should be inside braces [readability-braces-around-statements]
  189 |         if (line.empty()) continue;
      |                          ^         
      |                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:201:18: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  201 |             char c = line[i];
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:219:30: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  219 |         if (fields.size() >= 9) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:228:40: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  228 |             segment.countries = fields[5];               // Country/region (e.g., "UK", "USA")
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:229:44: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  229 |             segment.license_class = fields[6];          // License class (e.g., "Full", "Intermediate")
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:52: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:231:36: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  231 |             segment.notes = fields[8];                  // Additional notes/restrictions
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      | ~~~                     ^
      | auto                                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:18: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:24: warning: statement should be inside braces [readability-braces-around-statements]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                        ^             
      |                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:32: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:19: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |     while (lon < -180.0) lon += 360.0;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:25: warning: statement should be inside braces [readability-braces-around-statements]
  245 |     while (lon < -180.0) lon += 360.0;
      |                         ^             
      |                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:33: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |     while (lon < -180.0) lon += 360.0;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:248:15: warning: 60.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  248 |     if (lat > 60.0) {
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:254:17: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     if (lon >= -180.0 && lon <= -20.0) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:254:34: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     if (lon >= -180.0 && lon <= -20.0) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:7: warning: do not use 'else' after 'return' [readability-else-after-return]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  257 |         return 3; // Asia-Pacific
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~
  258 |     } else {
      |     ~~~~~~~~
  259 |         return 1; // Europe, Africa, Middle East, former USSR
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:23: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:38: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:264:22: warning: statement should be inside braces [readability-braces-around-statements]
  264 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
  269 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:281:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  281 | std::string FGCom_AmateurRadio::getRequiredLicenseClass(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:282:22: warning: statement should be inside braces [readability-braces-around-statements]
  282 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:296:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::getCountryAllocations(const std::string& country, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                  -> std::vector<fgcom_band_segment>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:297:22: warning: statement should be inside braces [readability-braces-around-statements]
  297 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:311:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  311 | bool FGCom_AmateurRadio::canLicenseClassOperate(float frequency_khz, int itu_region, const std::string& mode, const std::string& license_class) {
      | ~~~~                     ^
      | auto                                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:312:22: warning: statement should be inside braces [readability-braces-around-statements]
  312 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:326:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  326 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(const std::string& license_class, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                             -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:327:22: warning: statement should be inside braces [readability-braces-around-statements]
  327 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:340:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  339 |     for (const auto& band : unique_bands) {
  340 |         available_bands.push_back(band);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:346:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  346 | fgcom_band_segment FGCom_AmateurRadio::getBandSegment(float frequency_khz, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                       -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:349:22: warning: statement should be inside braces [readability-braces-around-statements]
  349 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:362:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  362 | fgcom_band_characteristics FGCom_AmateurRadio::getBandCharacteristics(const std::string& band) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                           -> fgcom_band_characteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:365:22: warning: statement should be inside braces [readability-braces-around-statements]
  365 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:367:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  367 |     auto it = band_characteristics.find(band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:375:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  375 | std::string FGCom_AmateurRadio::frequencyToBand(float frequency_khz) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:376:22: warning: statement should be inside braces [readability-braces-around-statements]
  376 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:26: warning: 1800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:51: warning: 2000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:56: warning: statement should be inside braces [readability-braces-around-statements]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                        ^              
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:26: warning: 3500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:51: warning: 4000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:56: warning: statement should be inside braces [readability-braces-around-statements]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:26: warning: 5300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:51: warning: 5400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:56: warning: statement should be inside braces [readability-braces-around-statements]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:26: warning: 7000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:51: warning: 7300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:56: warning: statement should be inside braces [readability-braces-around-statements]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:26: warning: 10100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:52: warning: 10150 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:58: warning: statement should be inside braces [readability-braces-around-statements]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:26: warning: 14000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:52: warning: 14350 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:58: warning: statement should be inside braces [readability-braces-around-statements]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:26: warning: 18068 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:52: warning: 18168 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:58: warning: statement should be inside braces [readability-braces-around-statements]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:26: warning: 21000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:52: warning: 21450 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:58: warning: statement should be inside braces [readability-braces-around-statements]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:26: warning: 24890 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:52: warning: 24990 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:58: warning: statement should be inside braces [readability-braces-around-statements]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:26: warning: 28000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:52: warning: 29700 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:58: warning: statement should be inside braces [readability-braces-around-statements]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:26: warning: 50000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:52: warning: 54000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:58: warning: statement should be inside braces [readability-braces-around-statements]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                          ^            
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:394:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  394 | bool FGCom_AmateurRadio::isAmateurFrequency(float frequency_khz, int itu_region) {
      | ~~~~                     ^
      | auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:395:22: warning: statement should be inside braces [readability-braces-around-statements]
  395 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
  397 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:408:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  408 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                           -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:411:22: warning: statement should be inside braces [readability-braces-around-statements]
  411 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:421:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  420 |     for (const auto& band : unique_bands) {
  421 |         bands.push_back(band);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:427:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  427 | std::vector<std::string> FGCom_AmateurRadio::getAvailableModes(const std::string& band, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                    -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:430:22: warning: statement should be inside braces [readability-braces-around-statements]
  430 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:440:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  439 |     for (const auto& mode : unique_modes) {
  440 |         modes.push_back(mode);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                                            -> fgcom_frequency_validation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:450:22: warning: statement should be inside braces [readability-braces-around-statements]
  450 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:484:34: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  484 |         result.channel_spacing = 500.0; // 500Hz for CW
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:486:34: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  486 |         result.channel_spacing = 6000.0; // 6kHz for DSB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:488:34: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  488 |         result.channel_spacing = 6000.0; // 6kHz for ISB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:490:34: warning: 4000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  490 |         result.channel_spacing = 4000.0; // 4kHz for VSB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:492:34: warning: 12500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  492 |         result.channel_spacing = 12500.0; // 12.5kHz for NFM
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:494:34: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  494 |         result.channel_spacing = 3000.0; // 3kHz for SSB/AM
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:501:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  501 | bool FGCom_AmateurRadio::checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:502:22: warning: statement should be inside braces [readability-braces-around-statements]
  502 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
  505 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:518:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  518 | bool FGCom_AmateurRadio::enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:519:22: warning: statement should be inside braces [readability-braces-around-statements]
  519 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
  529 |     for (const auto& seg : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:543:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  543 | bool FGCom_AmateurRadio::checkRegionalRestrictions(float frequency_khz, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:544:22: warning: statement should be inside braces [readability-braces-around-statements]
  544 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
  547 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:567:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  567 | float FGCom_AmateurRadio::getPowerLimit(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~                     ^
      | auto                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:568:22: warning: statement should be inside braces [readability-braces-around-statements]
  568 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:579:12: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  579 |     return 400.0; // Default power limit
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:583:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  583 | fgcom_band_segment FGCom_AmateurRadio::getBandSegmentInfo(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                    -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:584:22: warning: statement should be inside braces [readability-braces-around-statements]
  584 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:596:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  596 |     return fgcom_band_segment();
      |            ^~~~~~~~~~~~~~~~~~~~
      |            {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:600:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  600 | bool FGCom_AmateurRadio::validatePowerLevel(float frequency_khz, int itu_region, const std::string& mode, float power_watts) {
      | ~~~~                     ^
      | auto                                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:601:22: warning: statement should be inside braces [readability-braces-around-statements]
  601 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:608:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  608 | bool FGCom_AmateurRadio::validateChannelSpacing(float frequency_khz, const std::string& mode) {
      | ~~~~                     ^
      | auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:610:11: warning: variable 'spacing_hz' is not initialized [cppcoreguidelines-init-variables]
   19 |     float spacing_hz;
      |           ^         
      |                      = NAN
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:612:22: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  612 |         spacing_hz = 500.0; // 500Hz for CW
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:614:22: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  614 |         spacing_hz = 6000.0; // 6kHz for DSB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:616:22: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  616 |         spacing_hz = 6000.0; // 6kHz for ISB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:618:22: warning: 4000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  618 |         spacing_hz = 4000.0; // 4kHz for VSB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:620:22: warning: 12500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  620 |         spacing_hz = 12500.0; // 12.5kHz for NFM
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:622:22: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  622 |         spacing_hz = 3000.0; // 3kHz for SSB/AM
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:25: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:38: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:23: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
  627 |     float remainder = fmod(frequency_khz, spacing_khz);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:23: warning: call to 'fmod' promotes float to double [performance-type-promotion-in-math-fn]
   19 |     float remainder = fmod(frequency_khz, spacing_khz);
      |                       ^~~~
      |                       std::fmod
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:628:25: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  628 |     return (remainder < 0.001 || remainder > (spacing_khz - 0.001)); // Allow small rounding errors
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:628:61: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  628 |     return (remainder < 0.001 || remainder > (spacing_khz - 0.001)); // Allow small rounding errors
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:632:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  632 | fgcom_grid_locator FGCom_AmateurRadio::parseGridLocator(const std::string& grid_string) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                    -> fgcom_grid_locator
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:24: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:46: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:53: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:666:24: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  666 |     lat = (field_lat * 10.0) + (square_lat * 1.0) - 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:666:53: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  666 |     lat = (field_lat * 10.0) + (square_lat * 1.0) - 90.0;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:669:26: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  669 |     if (grid.length() >= 6) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:57: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:63: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:44: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:63: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:677:26: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  677 |     if (grid.length() >= 8) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:43: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:56: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:62: warning: 240.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:43: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:62: warning: 240.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:689:12: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  689 |     lon += 180.0;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:690:12: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  690 |     lat += 90.0;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:693:33: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  693 |     int field_lon = (int)(lon / 20.0);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:694:33: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  694 |     int field_lat = (int)(lat / 10.0);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:47: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:55: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:698:47: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  698 |     int square_lat = (int)((lat - field_lat * 10.0) / 1.0);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:700:17: warning: redundant string initialization [readability-redundant-string-init]
  700 |     std::string grid = "";
      |                 ^~~~~~~~~
      |                 grid
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:47: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:67: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:74: warning: 12.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:47: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:74: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:710:22: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  710 |     if (precision >= 6) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:716:22: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  716 |     if (precision >= 8) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:718:70: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  718 |         double extended_lon = (subsquare_lon - (int)subsquare_lon) * 10.0;
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:719:70: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  719 |         double extended_lat = (subsquare_lat - (int)subsquare_lat) * 10.0;
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:727:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  727 | double FGCom_AmateurRadio::gridDistance(const std::string& grid1, const std::string& grid2) {
      | ~~~~~~                     ^
      | auto                                                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  728 |     double lat1, lon1, lat2, lon2;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:12: warning: variable 'lat1' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:18: warning: variable 'lon1' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                  ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:24: warning: variable 'lat2' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                        ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:30: warning: variable 'lon2' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:734:18: warning: variable name 'R' is too short, expected at least 3 characters [readability-identifier-length]
  734 |     const double R = 6371.0; // Earth's radius in km
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:735:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:736:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:62: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:89: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:738:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  738 |     double c = 2 * atan2(sqrt(a), sqrt(1-a));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:743:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  743 | double FGCom_AmateurRadio::gridBearing(const std::string& grid1, const std::string& grid2) {
      | ~~~~~~                     ^
      | auto                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  744 |     double lat1, lon1, lat2, lon2;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:12: warning: variable 'lat1' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:18: warning: variable 'lon1' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                  ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:24: warning: variable 'lat2' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                        ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:30: warning: variable 'lon2' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:750:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  750 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:751:37: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  751 |     double lat1_rad = lat1 * M_PI / 180.0;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:752:37: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  752 |     double lat2_rad = lat2 * M_PI / 180.0;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:754:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  754 |     double y = sin(dlon) * cos(lat2_rad);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:755:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  755 |     double x = cos(lat1_rad) * sin(lat2_rad) - sin(lat1_rad) * cos(lat2_rad) * cos(dlon);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:757:36: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  757 |     double bearing = atan2(y, x) * 180.0 / M_PI;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:758:27: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  758 |     return fmod(bearing + 360.0, 360.0); // Normalize to 0-360
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:758:34: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  758 |     return fmod(bearing + 360.0, 360.0); // Normalize to 0-360
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:761:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  761 | bool FGCom_AmateurRadio::validateGridLocator(const std::string& grid) {
      | ~~~~                     ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:762:46: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  762 |     if (grid.length() < 4 || grid.length() > 8 || grid.length() % 2 != 0) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:777:26: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  777 |     if (grid.length() >= 6) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:52: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:69: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:784:26: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  784 |     if (grid.length() >= 8) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:18: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:35: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:52: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:69: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:18:57: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   18 | FGCom_FeatureToggleManager& FGCom_FeatureToggleManager::getInstance() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~                             ^
      | auto                                                                  -> FGCom_FeatureToggleManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:33:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 | bool FGCom_FeatureToggleManager::isFeatureEnabled(FeatureToggle feature) const {
      | ~~~~                             ^
      | auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:36:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   36 |         auto it = feature_states.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:43:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   43 |             std::cerr << "[FeatureToggleManager] Exception in isFeatureEnabled: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:49:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   49 | bool FGCom_FeatureToggleManager::enableFeature(FeatureToggle feature) {
      | ~~~~                             ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:62:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   62 |             std::cerr << "[FeatureToggleManager] Exception in enableFeature: " << e.what() << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:68:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 | bool FGCom_FeatureToggleManager::disableFeature(FeatureToggle feature) {
      | ~~~~                             ^
      | auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:81:96: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   81 |             std::cerr << "[FeatureToggleManager] Exception in disableFeature: " << e.what() << std::endl;
      |                                                                                                ^~~~~~~~~
      |                                                                                                '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:87:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 | bool FGCom_FeatureToggleManager::toggleFeature(FeatureToggle feature) {
      | ~~~~                             ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:93:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   93 |             std::cerr << "[FeatureToggleManager] Exception in toggleFeature: " << e.what() << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:105:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  105 |             std::cerr << "[FeatureToggleManager] Exception in setFeatureConfig: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:110:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  110 | FeatureToggleConfig FGCom_FeatureToggleManager::getFeatureConfig(FeatureToggle feature) const {
      | ~~~~~~~~~~~~~~~~~~~                             ^
      | auto                                                                                          -> FeatureToggleConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:113:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  113 |         auto it = feature_configs.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:117:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  117 |         return FeatureToggleConfig();
      |                ^~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:120:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureConfig: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:122:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  122 |         return FeatureToggleConfig();
      |                ^~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:131:29: warning: 107 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  131 |         for (int i = 0; i < 107; ++i) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:132:13: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  132 |             FeatureToggle feature = static_cast<FeatureToggle>(i);
      |             ^~~~~~~~~~~~~
      |             auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:136:64: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  136 |             config.category = static_cast<FeatureCategory>(i / 7); // Distribute across categories
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:148:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  148 |             std::cerr << "[FeatureToggleManager] Exception in initializeDefaultConfigs: " << e.what() << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:153:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 | bool FGCom_FeatureToggleManager::loadConfigFromFile(const std::string& config_file) {
      | ~~~~                             ^
      | auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:153:34: warning: function 'loadConfigFromFile' has cognitive complexity of 28 (threshold 25) [readability-function-cognitive-complexity]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:156:9: note: +1, including nesting penalty of 0, nesting level increased to 1
  156 |         if (!file.is_open()) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:157:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  157 |             if (debug_mode_enabled.load()) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:166:9: note: +1, including nesting penalty of 0, nesting level increased to 1
  166 |         while (std::getline(file, line)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:167:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  167 |             if (line.empty() || line[0] == '#' || line[0] == ';') {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:167:48: note: +1
  167 |             if (line.empty() || line[0] == '#' || line[0] == ';') {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:171:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  171 |             if (line[0] == '[' && line.back() == ']') {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:171:32: note: +1
  171 |             if (line[0] == '[' && line.back() == ']') {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:177:13: note: +2, including nesting penalty of 1, nesting level increased to 2
  177 |             if (equal_pos != std::string::npos) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:182:17: note: +3, including nesting penalty of 2, nesting level increased to 3
  182 |                 if (current_section == "features") {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:185:73: note: +1
  185 |                         bool enabled = (value == "true" || value == "1" || value == "yes");
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:187:23: note: +4, including nesting penalty of 3, nesting level increased to 4
  187 |                     } catch (const std::exception& e) {
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:188:25: note: +5, including nesting penalty of 4, nesting level increased to 5
  188 |                         if (debug_mode_enabled.load()) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:197:7: note: +1, including nesting penalty of 0, nesting level increased to 1
  197 |     } catch (const std::exception& e) {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:198:9: note: +2, including nesting penalty of 1, nesting level increased to 2
  198 |         if (debug_mode_enabled.load()) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:158:99: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  158 |                 std::cerr << "[FeatureToggleManager] Cannot open config file: " << config_file << std::endl;
      |                                                                                                   ^~~~~~~~~
      |                                                                                                   '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:164:21: warning: redundant string initialization [readability-redundant-string-init]
  164 |         std::string current_section = "";
      |                     ^~~~~~~~~~~~~~~~~~~~
      |                     current_section
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:189:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  189 |                             std::cerr << "[FeatureToggleManager] Invalid feature toggle: " << key << std::endl;
      |                                                                                                      ^~~~~~~~~
      |                                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:199:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  199 |             std::cerr << "[FeatureToggleManager] Exception in loadConfigFromFile: " << e.what() << std::endl;
      |                                                                                                    ^~~~~~~~~
      |                                                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:205:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 | bool FGCom_FeatureToggleManager::saveConfigToFile(const std::string& config_file) const {
      | ~~~~                             ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:210:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  210 |                 std::cerr << "[FeatureToggleManager] Cannot create config file: " << config_file << std::endl;
      |                                                                                                     ^~~~~~~~~
      |                                                                                                     '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:227:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  227 |             std::cerr << "[FeatureToggleManager] Exception in saveConfigToFile: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:239:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  239 |             std::cerr << "[FeatureToggleManager] Exception in recordFeatureUsage: " << e.what() << std::endl;
      |                                                                                                    ^~~~~~~~~
      |                                                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:244:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  244 | uint64_t FGCom_FeatureToggleManager::getFeatureUsageCount(FeatureToggle feature) const {
      | ~~~~~~~~                             ^
      | auto                                                                                   -> uint64_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:246:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  246 |         auto it = feature_usage_counts.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:253:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  253 |             std::cerr << "[FeatureToggleManager] Exception in getFeatureUsageCount: " << e.what() << std::endl;
      |                                                                                                      ^~~~~~~~~
      |                                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:259:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  259 | double FGCom_FeatureToggleManager::getFeaturePerformanceImpact(FeatureToggle feature) const {
      | ~~~~~~                             ^
      | auto                                                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:261:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  261 |         auto it = feature_performance_impact.find(feature);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:268:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  268 |             std::cerr << "[FeatureToggleManager] Exception in getFeaturePerformanceImpact: " << e.what() << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:274:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  274 | bool FGCom_FeatureToggleManager::validateConfiguration() const {
      | ~~~~                             ^
      | auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:293:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  293 |             std::cerr << "[FeatureToggleManager] Exception in validateConfiguration: " << e.what() << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:299:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  299 | std::vector<std::string> FGCom_FeatureToggleManager::getConfigurationErrors() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                             ^
      | auto                                                                                -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:304:20: warning: use emplace_back instead of push_back [modernize-use-emplace]
  304 |             errors.push_back("Conflicting features are enabled");
      |                    ^~~~~~~~~~
      |                    emplace_back(
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:317:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  317 | bool FGCom_FeatureToggleManager::isDebugModeEnabled() const {
      | ~~~~                             ^
      | auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:326:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  326 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureToggle: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:337:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  337 |             std::cerr << "[FeatureToggleManager] Exception in initializeFeatureConfigs: " << e.what() << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:342:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  342 | bool FGCom_FeatureToggleManager::validateFeatureToggle(FeatureToggle feature, bool enabled) const {
      | ~~~~                             ^
      | auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:362:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  362 |             std::cerr << "[FeatureToggleManager] Exception in validateFeatureToggle: " << e.what() << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:374:105: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  374 |             std::cerr << "[FeatureToggleManager] Exception in updateDependentFeatures: " << e.what() << std::endl;
      |                                                                                                         ^~~~~~~~~
      |                                                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:388:37: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |         if (toggle_history.size() > 1000) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:393:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  393 |             std::cerr << "[FeatureToggleManager] Exception in logFeatureChange: " << e.what() << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:400:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  400 |     std::string featureToggleToString(FeatureToggle feature) {
      |     ~~~~~~~~~~~ ^
      |     auto                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:428:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  428 |     FeatureToggle stringToFeatureToggle(const std::string& str) {
      |     ~~~~~~~~~~~~~ ^
      |     auto                                                        -> FeatureToggle
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:430:47: warning: statement should be inside braces [readability-braces-around-statements]
  430 |             if (str == "threading_solar_data") return FeatureToggle::THREADING_SOLAR_DATA;
      |                                               ^                                           
      |                                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:431:48: warning: statement should be inside braces [readability-braces-around-statements]
  431 |             if (str == "threading_propagation") return FeatureToggle::THREADING_PROPAGATION;
      |                                                ^                                            
      |                                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:432:47: warning: statement should be inside braces [readability-braces-around-statements]
  432 |             if (str == "threading_api_server") return FeatureToggle::THREADING_API_SERVER;
      |                                               ^                                           
      |                                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:433:48: warning: statement should be inside braces [readability-braces-around-statements]
  433 |             if (str == "threading_gpu_compute") return FeatureToggle::THREADING_GPU_COMPUTE;
      |                                                ^                                            
      |                                                 {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:434:51: warning: statement should be inside braces [readability-braces-around-statements]
  434 |             if (str == "threading_lightning_data") return FeatureToggle::THREADING_LIGHTNING_DATA;
      |                                                   ^                                               
      |                                                    {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:435:49: warning: statement should be inside braces [readability-braces-around-statements]
  435 |             if (str == "threading_weather_data") return FeatureToggle::THREADING_WEATHER_DATA;
      |                                                 ^                                             
      |                                                  {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:436:52: warning: statement should be inside braces [readability-braces-around-statements]
  436 |             if (str == "threading_antenna_pattern") return FeatureToggle::THREADING_ANTENNA_PATTERN;
      |                                                    ^                                                
      |                                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:437:47: warning: statement should be inside braces [readability-braces-around-statements]
  437 |             if (str == "threading_monitoring") return FeatureToggle::THREADING_MONITORING;
      |                                               ^                                           
      |                                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:446:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  446 |     std::string featureCategoryToString(FeatureCategory category) {
      |     ~~~~~~~~~~~ ^
      |     auto                                                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:491:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  491 |     FeatureCategory stringToFeatureCategory(const std::string& str) {
      |     ~~~~~~~~~~~~~~~ ^
      |     auto                                                            -> FeatureCategory
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:493:36: warning: statement should be inside braces [readability-braces-around-statements]
  493 |             if (str == "threading") return FeatureCategory::THREADING;
      |                                    ^                                  
      |                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:494:43: warning: statement should be inside braces [readability-braces-around-statements]
  494 |             if (str == "gpu_acceleration") return FeatureCategory::GPU_ACCELERATION;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:495:37: warning: statement should be inside braces [readability-braces-around-statements]
  495 |             if (str == "solar_data") return FeatureCategory::SOLAR_DATA;
      |                                     ^                                   
      |                                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:496:38: warning: statement should be inside braces [readability-braces-around-statements]
  496 |             if (str == "propagation") return FeatureCategory::PROPAGATION;
      |                                      ^                                    
      |                                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:497:43: warning: statement should be inside braces [readability-braces-around-statements]
  497 |             if (str == "antenna_patterns") return FeatureCategory::ANTENNA_PATTERNS;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:498:43: warning: statement should be inside braces [readability-braces-around-statements]
  498 |             if (str == "audio_processing") return FeatureCategory::AUDIO_PROCESSING;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:499:37: warning: statement should be inside braces [readability-braces-around-statements]
  499 |             if (str == "api_server") return FeatureCategory::API_SERVER;
      |                                     ^                                   
      |                                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:500:41: warning: statement should be inside braces [readability-braces-around-statements]
  500 |             if (str == "lightning_data") return FeatureCategory::LIGHTNING_DATA;
      |                                         ^                                       
      |                                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:501:39: warning: statement should be inside braces [readability-braces-around-statements]
  501 |             if (str == "weather_data") return FeatureCategory::WEATHER_DATA;
      |                                       ^                                     
      |                                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:502:43: warning: statement should be inside braces [readability-braces-around-statements]
  502 |             if (str == "power_management") return FeatureCategory::POWER_MANAGEMENT;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:503:43: warning: statement should be inside braces [readability-braces-around-statements]
  503 |             if (str == "frequency_offset") return FeatureCategory::FREQUENCY_OFFSET;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:504:41: warning: statement should be inside braces [readability-braces-around-statements]
  504 |             if (str == "bfo_simulation") return FeatureCategory::BFO_SIMULATION;
      |                                         ^                                       
      |                                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:505:45: warning: statement should be inside braces [readability-braces-around-statements]
  505 |             if (str == "filter_application") return FeatureCategory::FILTER_APPLICATION;
      |                                             ^                                           
      |                                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:506:38: warning: statement should be inside braces [readability-braces-around-statements]
  506 |             if (str == "fuzzy_logic") return FeatureCategory::FUZZY_LOGIC;
      |                                      ^                                    
      |                                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:507:43: warning: statement should be inside braces [readability-braces-around-statements]
  507 |             if (str == "vehicle_dynamics") return FeatureCategory::VEHICLE_DYNAMICS;
      |                                           ^                                         
      |                                            {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:508:36: warning: statement should be inside braces [readability-braces-around-statements]
  508 |             if (str == "debugging") return FeatureCategory::DEBUGGING;
      |                                    ^                                  
      |                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:509:49: warning: statement should be inside braces [readability-braces-around-statements]
  509 |             if (str == "performance_monitoring") return FeatureCategory::PERFORMANCE_MONITORING;
      |                                                 ^                                               
      |                                                  {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:517:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  517 |     bool isValidImpactLevel(const std::string& impact_level) {
      |     ~~~~ ^
      |     auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/feature_toggles.cpp:527:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  527 |     std::vector<std::string> getValidImpactLevels() {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:18:19: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   18 |     , current_swr(1.0f)
      |                   ^  ~
      |                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:19:27: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   19 |     , current_temperature(25.0f)
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:19:27: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   19 |     , current_temperature(25.0f)
      |                           ^   ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:24:42: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   24 |     current_power_levels.current_power = 100;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:25:45: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   25 |     current_power_levels.power_efficiency = 0.8f;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:25:45: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   25 |     current_power_levels.power_efficiency = 0.8f;
      |                                             ^  ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:27:43: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   27 |     current_power_levels.max_safe_power = 1000.0f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:27:43: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   27 |     current_power_levels.max_safe_power = 1000.0f;
      |                                           ^     ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:28:45: warning: 1500.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   28 |     current_power_levels.regulatory_limit = 1500.0f;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:28:45: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   28 |     current_power_levels.regulatory_limit = 1500.0f;
      |                                             ^     ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:30:42: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   30 |     current_power_levels.battery_level = 1.0f;
      |                                          ^  ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:31:46: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   31 |     current_power_levels.power_consumption = 100.0f;
      |                                              ^    ~
      |                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:36:32: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   36 |     stats.average_efficiency = 0.8f;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:36:32: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   36 |     stats.average_efficiency = 0.8f;
      |                                ^  ~
      |                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:37:29: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   37 |     stats.peak_power_used = 100.0f;
      |                             ^    ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:38:35: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   38 |     stats.total_energy_consumed = 0.0f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:40:45: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
   40 |     stats.efficiency_vs_power_correlation = 0.0f;
      |                                             ^  ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:51:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   51 | FGCom_PowerManager& FGCom_PowerManager::getInstance() {
      | ~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                  -> FGCom_PowerManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:65:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   65 | bool FGCom_PowerManager::setPowerLevel(int power_watts) {
      | ~~~~                     ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:114:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 | int FGCom_PowerManager::getCurrentPower() const {
      | ~~~                     ^
      | auto                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:119:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 | std::vector<int> FGCom_PowerManager::getAvailablePowerLevels() const {
      | ~~~~~~~~~~~~~~~~                     ^
      | auto                                                                 -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:124:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 | bool FGCom_PowerManager::isPowerLevelAvailable(int power_watts) const {
      | ~~~~                     ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:132:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 | float FGCom_PowerManager::calculatePowerEfficiency(int power_watts, const std::string& antenna_type) const {
      | ~~~~~                     ^
      | auto                                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:135:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  135 |     auto it = antenna_efficiency_data.find(antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:25: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:25: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:31: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:39: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:53: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                                     ^    ~
      |                                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:63: warning: 2000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:138:63: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  138 |         return std::max(0.5f, 1.0f - (power_watts - 100.0f) / 2000.0f);
      |                                                               ^     ~
      |                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:148:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  148 |     int lower_power = 0, upper_power = 0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:149:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  149 |     float lower_efficiency = 0.0f, upper_efficiency = 0.0f;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:149:30: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  149 |     float lower_efficiency = 0.0f, upper_efficiency = 0.0f;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:149:55: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  149 |     float lower_efficiency = 0.0f, upper_efficiency = 0.0f;
      |                                                       ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:167:67: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  167 |     float ratio = static_cast<float>(power_watts - lower_power) / (upper_power - lower_power);
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:171:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 | float FGCom_PowerManager::getCurrentPowerEfficiency() const {
      | ~~~~~                     ^
      | auto                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:176:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 | int FGCom_PowerManager::getOptimalPowerLevel(const std::string& antenna_type) const {
      | ~~~                     ^
      | auto                                                                                -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:179:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  179 |     auto it = antenna_efficiency_data.find(antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:181:16: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  181 |         return 100; // Default optimal power
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:188:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 | bool FGCom_PowerManager::optimizePowerForEfficiency() {
      | ~~~~                     ^
      | auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:198:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 | bool FGCom_PowerManager::enablePowerLimiting(bool enable) {
      | ~~~~                     ^
      | auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:205:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 | bool FGCom_PowerManager::isPowerLimitingActive() const {
      | ~~~~                     ^
      | auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:210:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  210 | bool FGCom_PowerManager::checkPowerLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:235:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  235 |     auto it = antenna_efficiency_data.find(current_antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:238:13: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  238 |         if (power_watts > efficiency_data.thermal_limit) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:246:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 | bool FGCom_PowerManager::applyPowerLimits(int requested_power, int& actual_power) const {
      | ~~~~                     ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:254:13: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  254 |         if (actual_power > regulatory_limit) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:261:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  261 |     auto it = antenna_efficiency_data.find(current_antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:267:45: warning: implicit conversion 'const AntennaPowerEfficiency *' -> 'bool' [readability-implicit-bool-conversion]
  267 |     if (config.enable_thermal_protection && efficiency_data) {
      |                                             ^              
      |                                             (               != nullptr)
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:268:13: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  268 |         if (actual_power > efficiency_data->thermal_limit) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:274:41: warning: implicit conversion 'const AntennaPowerEfficiency *' -> 'bool' [readability-implicit-bool-conversion]
  274 |     if (config.enable_swr_protection && efficiency_data && current_swr > efficiency_data->swr_limit) {
      |                                         ^
      |                                         (               != nullptr)
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:275:41: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  275 |         actual_power = static_cast<int>(actual_power * (efficiency_data->swr_limit / current_swr));
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:290:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  290 | bool FGCom_PowerManager::checkRegulatoryCompliance(int power_watts, const std::string& frequency_band) const {
      | ~~~~                     ^
      | auto                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:293:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  293 |     auto it = regulatory_limits.find(frequency_band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:299:12: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  299 |     return power_watts <= limits.max_power_watts;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:302:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  302 | float FGCom_PowerManager::getRegulatoryPowerLimit(const std::string& frequency_band) const {
      | ~~~~~                     ^
      | auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:305:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  305 |     auto it = regulatory_limits.find(frequency_band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:307:16: warning: 1500.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  307 |         return 1500.0f; // Default limit
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:307:16: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  307 |         return 1500.0f; // Default limit
      |                ^     ~
      |                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:313:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  313 | bool FGCom_PowerManager::isRegulatoryCompliant(int power_watts, const std::string& frequency_band) const {
      | ~~~~                     ^
      | auto                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:318:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  318 | bool FGCom_PowerManager::enableThermalProtection(bool enable) {
      | ~~~~                     ^
      | auto                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:324:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  324 | bool FGCom_PowerManager::isThermalProtectionActive() const {
      | ~~~~                     ^
      | auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:334:67: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  334 |     if (temperature_celsius > config.thermal_shutdown_threshold * 100.0f) {
      |                                                                   ^    ~
      |                                                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:341:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  341 | bool FGCom_PowerManager::checkThermalLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:58: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:72: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                                        ^    ~
      |                                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:82: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:345:82: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  345 |     float estimated_temperature = current_temperature + (power_watts - 100.0f) * 0.1f;
      |                                                                                  ^  ~
      |                                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:346:72: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  346 |     return estimated_temperature < config.thermal_shutdown_threshold * 100.0f;
      |                                                                        ^    ~
      |                                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:350:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  350 | bool FGCom_PowerManager::enableSWRProtection(bool enable) {
      | ~~~~                     ^
      | auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:356:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  356 | bool FGCom_PowerManager::isSWRProtectionActive() const {
      | ~~~~                     ^
      | auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:373:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  373 | bool FGCom_PowerManager::checkSWRLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:377:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  377 |     auto it = antenna_efficiency_data.find(current_antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:389:51: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  389 |     current_power_levels.battery_level = std::max(0.0f, std::min(1.0f, battery_level));
      |                                                   ^  ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:389:66: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  389 |     current_power_levels.battery_level = std::max(0.0f, std::min(1.0f, battery_level));
      |                                                                  ^  ~
      |                                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:392:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  392 | float FGCom_PowerManager::getBatteryLevel() const {
      | ~~~~~                     ^
      | auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:397:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  397 | bool FGCom_PowerManager::isBatteryLow() const {
      | ~~~~                     ^
      | auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:402:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  402 | int FGCom_PowerManager::getMaxPowerForBattery() const {
      | ~~~                     ^
      | auto                                                  -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:408:28: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  408 |         max_power_ratio *= 0.5f; // Reduce power when battery is low
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:408:28: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  408 |         max_power_ratio *= 0.5f; // Reduce power when battery is low
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:411:29: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  411 |     return static_cast<int>(1000.0f * max_power_ratio);
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:411:29: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  411 |     return static_cast<int>(1000.0f * max_power_ratio);
      |                             ^     ~
      |                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:421:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  421 | std::string FGCom_PowerManager::getCurrentAntenna() const {
      | ~~~~~~~~~~~                     ^
      | auto                                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:426:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  426 | bool FGCom_PowerManager::loadAntennaEfficiencyData(const std::string& antenna_type, const AntennaPowerEfficiency& data) {
      | ~~~~                     ^
      | auto                                                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:432:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  432 | AntennaPowerEfficiency FGCom_PowerManager::getAntennaEfficiencyData(const std::string& antenna_type) const {
      | ~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                       -> AntennaPowerEfficiency
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:435:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  435 |     auto it = antenna_efficiency_data.find(antenna_type);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:437:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  437 |         return AntennaPowerEfficiency(); // Return default
      |                ^~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:449:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  449 | std::string FGCom_PowerManager::getCurrentFrequencyBand() const {
      | ~~~~~~~~~~~                     ^
      | auto                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:454:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  454 | bool FGCom_PowerManager::loadRegulatoryLimits(const std::string& frequency_band, const RegulatoryPowerLimits& limits) {
      | ~~~~                     ^
      | auto                                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:460:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  460 | RegulatoryPowerLimits FGCom_PowerManager::getRegulatoryLimits(const std::string& frequency_band) const {
      | ~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                   -> RegulatoryPowerLimits
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:463:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  463 |     auto it = regulatory_limits.find(frequency_band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:465:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  465 |         return RegulatoryPowerLimits(); // Return default
      |                ^~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:477:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  477 | PowerManagementConfig FGCom_PowerManager::getConfig() const {
      | ~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                        -> PowerManagementConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:482:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  482 | bool FGCom_PowerManager::loadConfigFromFile(const std::string& config_file) {
      | ~~~~                     ^
      | auto                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:489:17: warning: redundant string initialization [readability-redundant-string-init]
  489 |     std::string current_section = "";
      |                 ^~~~~~~~~~~~~~~~~~~~
      |                 current_section
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:524:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  524 | bool FGCom_PowerManager::saveConfigToFile(const std::string& config_file) const {
      | ~~~~                     ^
      | auto                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:530:37: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  530 |     file << "[power_management]" << std::endl;
      |                                     ^~~~~~~~~
      |                                     '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:531:114: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  531 |     file << "enable_automatic_power_limiting=" << (config.enable_automatic_power_limiting ? "true" : "false") << std::endl;
      |                                                                                                                  ^~~~~~~~~
      |                                                                                                                  '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:532:112: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  532 |     file << "enable_efficiency_optimization=" << (config.enable_efficiency_optimization ? "true" : "false") << std::endl;
      |                                                                                                                ^~~~~~~~~
      |                                                                                                                '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:533:87: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  533 |     file << "default_efficiency_threshold=" << config.default_efficiency_threshold << std::endl;
      |                                                                                       ^~~~~~~~~
      |                                                                                       '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:534:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  534 |     file << "thermal_shutdown_threshold=" << config.thermal_shutdown_threshold << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:535:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  535 |     file << "swr_shutdown_threshold=" << config.swr_shutdown_threshold << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:536:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  536 |     file << "battery_low_threshold=" << config.battery_low_threshold << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:542:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  542 | PowerManagementStats FGCom_PowerManager::getStats() const {
      | ~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                      -> PowerManagementStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:558:64: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  558 |         stats.average_efficiency = (stats.average_efficiency * (stats.total_power_changes - 1) + 
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:559:77: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  559 |                                    current_power_levels.power_efficiency) / stats.total_power_changes;
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:565:77: warning: narrowing conversion from 'rep' (aka 'long') to 'float' [cppcoreguidelines-narrowing-conversions]
  565 |     stats.total_energy_consumed += current_power_levels.power_consumption * duration.count() / 3600.0f; // kWh
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:565:96: warning: 3600.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  565 |     stats.total_energy_consumed += current_power_levels.power_consumption * duration.count() / 3600.0f; // kWh
      |                                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:565:96: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  565 |     stats.total_energy_consumed += current_power_levels.power_consumption * duration.count() / 3600.0f; // kWh
      |                                                                                                ^     ~
      |                                                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:568:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  568 | bool FGCom_PowerManager::isPowerAnalyticsEnabled() const {
      | ~~~~                     ^
      | auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:574:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  574 | bool FGCom_PowerManager::canChangePower() const {
      | ~~~~                     ^
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:588:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  588 | int FGCom_PowerManager::getPowerChangeDelay() const {
      | ~~~                     ^
      | auto                                                -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:594:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  594 | bool FGCom_PowerManager::isSafeToTransmit(int power_watts) const {
      | ~~~~                     ^
      | auto                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:598:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  598 | bool FGCom_PowerManager::checkAllSafetyLimits(int power_watts) const {
      | ~~~~                     ^
      | auto                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:612:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  612 | bool FGCom_PowerManager::isEmergencyPowerDown() const {
      | ~~~~                     ^
      | auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:618:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  618 | int FGCom_PowerManager::calculateOptimalPowerForRange(double distance_km, const std::string& antenna_type) const {
      | ~~~                     ^
      | auto                                                                                                             -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:620:24: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  620 |     float base_power = 100.0f;
      |                        ^    ~
      |                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:621:5: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  621 |     float distance_factor = static_cast<float>(distance_km / 100.0); // 100km reference
      |     ^~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:627:42: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  627 |         optimal_power = static_cast<int>(optimal_power * efficiency);
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:632:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  632 |     auto it = std::lower_bound(available_powers.begin(), available_powers.end(), optimal_power);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:642:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  642 | int FGCom_PowerManager::calculateOptimalPowerForSignalQuality(float target_quality, double distance_km, const std::string& antenna_type) const {
      | ~~~                     ^
      | auto                                                                                                                                           -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:644:5: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  644 |     float required_power = static_cast<float>(distance_km * distance_km / (1000.0 * (1.0 - target_quality)));
      |     ^~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:644:76: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  644 |     float required_power = static_cast<float>(distance_km * distance_km / (1000.0 * (1.0 - target_quality)));
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:653:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  653 | float FGCom_PowerManager::calculatePowerConsumption(int power_watts, const std::string& antenna_type) const {
      | ~~~~~                     ^
      | auto                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:656:12: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  656 |     return power_watts / efficiency;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:660:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  660 | float FGCom_PowerManager::getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const {
      | ~~~~~                     ^
      | auto                                                                                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:667:12: warning: narrowing conversion from 'int' to 'float' [cppcoreguidelines-narrowing-conversions]
  667 |     return tx_power_watts * efficiency;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:670:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  670 | float FGCom_PowerManager::getPowerEfficiencyAtFrequency(int power_watts, const std::string& antenna_type, float frequency_mhz) const {
      | ~~~~~                     ^
      | auto                                                                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:675:30: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  675 |     float frequency_factor = 1.0f;
      |                              ^  ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:676:25: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  676 |     if (frequency_mhz < 10.0f) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:676:25: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  676 |     if (frequency_mhz < 10.0f) {
      |                         ^   ~
      |                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:677:28: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  677 |         frequency_factor = 0.8f; // Lower efficiency at low frequencies
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:677:28: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  677 |         frequency_factor = 0.8f; // Lower efficiency at low frequencies
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:678:32: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |     } else if (frequency_mhz > 30.0f) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:678:32: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  678 |     } else if (frequency_mhz > 30.0f) {
      |                                ^   ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:679:28: warning: 0.9f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         frequency_factor = 0.9f; // Slightly lower efficiency at high frequencies
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:679:28: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  679 |         frequency_factor = 0.9f; // Slightly lower efficiency at high frequencies
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:688:29: warning: parameter 'callback' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    8 |     power_change_callback = callback;
      |                             ^       
      |                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:693:34: warning: parameter 'callback' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
  693 |     efficiency_change_callback = callback;
      |                                  ^       
      |                                  std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:698:29: warning: parameter 'callback' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
  698 |     safety_event_callback = callback;
      |                             ^       
      |                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:10: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:14: warning: 0.85f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:14: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |              ^   ~
      |                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:23: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:28: warning: 0.80f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:28: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                            ^   ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:37: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:42: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:42: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                          ^   ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:51: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:56: warning: 0.70f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:707:56: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  707 |         {50, 0.85f}, {100, 0.80f}, {200, 0.75f}, {400, 0.70f}, 
      |                                                        ^   ~
      |                                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:10: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:15: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:15: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |               ^   ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:24: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:29: warning: 0.60f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:29: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                             ^   ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:44: warning: 0.55f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:708:44: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  708 |         {600, 0.65f}, {800, 0.60f}, {1000, 0.55f}
      |                                            ^   ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:710:41: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  710 |     vertical_data.max_efficient_power = 100.0f;
      |                                         ^    ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:711:42: warning: 0.7f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  711 |     vertical_data.efficiency_threshold = 0.7f;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:711:42: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  711 |     vertical_data.efficiency_threshold = 0.7f;
      |                                          ^  ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:713:35: warning: 800.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  713 |     vertical_data.thermal_limit = 800.0f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:713:35: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  713 |     vertical_data.thermal_limit = 800.0f;
      |                                   ^    ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:714:31: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  714 |     vertical_data.swr_limit = 2.0f;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:714:31: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  714 |     vertical_data.swr_limit = 2.0f;
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:10: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:14: warning: 0.90f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:14: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |              ^   ~
      |                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:23: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:28: warning: 0.85f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:28: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                            ^   ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:37: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:42: warning: 0.80f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:42: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                          ^   ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:51: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:56: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:721:56: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  721 |         {50, 0.90f}, {100, 0.85f}, {200, 0.80f}, {400, 0.75f}, 
      |                                                        ^   ~
      |                                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:10: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:15: warning: 0.70f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:15: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |               ^   ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:24: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:29: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:29: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                             ^   ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:44: warning: 0.60f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:722:44: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  722 |         {600, 0.70f}, {800, 0.65f}, {1000, 0.60f}
      |                                            ^   ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:724:37: warning: 200.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  724 |     yagi_data.max_efficient_power = 200.0f;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:724:37: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  724 |     yagi_data.max_efficient_power = 200.0f;
      |                                     ^    ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:725:38: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  725 |     yagi_data.efficiency_threshold = 0.75f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:725:38: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  725 |     yagi_data.efficiency_threshold = 0.75f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:727:31: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  727 |     yagi_data.thermal_limit = 1000.0f;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:727:31: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  727 |     yagi_data.thermal_limit = 1000.0f;
      |                               ^     ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:728:27: warning: 1.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  728 |     yagi_data.swr_limit = 1.5f;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:728:27: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  728 |     yagi_data.swr_limit = 1.5f;
      |                           ^  ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:10: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:14: warning: 0.80f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:14: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |              ^   ~
      |                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:23: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:28: warning: 0.75f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:28: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                            ^   ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:37: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:42: warning: 0.70f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:42: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                          ^   ~
      |                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:51: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:56: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:735:56: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  735 |         {50, 0.80f}, {100, 0.75f}, {200, 0.70f}, {400, 0.65f}, 
      |                                                        ^   ~
      |                                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:10: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:15: warning: 0.60f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:15: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |               ^   ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:24: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:29: warning: 0.55f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:29: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                             ^   ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:44: warning: 0.50f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:736:44: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  736 |         {600, 0.60f}, {800, 0.55f}, {1000, 0.50f}
      |                                            ^   ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:738:37: warning: 150.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  738 |     loop_data.max_efficient_power = 150.0f;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:738:37: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  738 |     loop_data.max_efficient_power = 150.0f;
      |                                     ^    ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:739:38: warning: 0.65f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  739 |     loop_data.efficiency_threshold = 0.65f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:739:38: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  739 |     loop_data.efficiency_threshold = 0.65f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:741:31: warning: 600.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  741 |     loop_data.thermal_limit = 600.0f;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:741:31: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  741 |     loop_data.thermal_limit = 600.0f;
      |                               ^    ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:742:27: warning: 2.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  742 |     loop_data.swr_limit = 2.5f;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:742:27: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  742 |     loop_data.swr_limit = 2.5f;
      |                           ^  ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:750:35: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  750 |     amateur_limits.min_freq_mhz = 1.8f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:750:35: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  750 |     amateur_limits.min_freq_mhz = 1.8f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:751:35: warning: 54.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  751 |     amateur_limits.max_freq_mhz = 54.0f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:751:35: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  751 |     amateur_limits.max_freq_mhz = 54.0f;
      |                                   ^   ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:752:38: warning: 1500.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  752 |     amateur_limits.max_power_watts = 1500.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:752:38: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  752 |     amateur_limits.max_power_watts = 1500.0f;
      |                                      ^     ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:756:42: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  756 |     amateur_limits.power_density_limit = 100.0f;
      |                                          ^    ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:762:38: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  762 |     commercial_limits.min_freq_mhz = 2.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:762:38: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  762 |     commercial_limits.min_freq_mhz = 2.0f;
      |                                      ^  ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:763:38: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  763 |     commercial_limits.max_freq_mhz = 30.0f;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:763:38: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  763 |     commercial_limits.max_freq_mhz = 30.0f;
      |                                      ^   ~
      |                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:764:41: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  764 |     commercial_limits.max_power_watts = 1000.0f;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:764:41: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  764 |     commercial_limits.max_power_watts = 1000.0f;
      |                                         ^     ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:768:45: warning: 50.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  768 |     commercial_limits.power_density_limit = 50.0f;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:768:45: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  768 |     commercial_limits.power_density_limit = 50.0f;
      |                                             ^   ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:774:36: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  774 |     military_limits.min_freq_mhz = 2.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:774:36: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  774 |     military_limits.min_freq_mhz = 2.0f;
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:775:36: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  775 |     military_limits.max_freq_mhz = 30.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:775:36: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  775 |     military_limits.max_freq_mhz = 30.0f;
      |                                    ^   ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:776:39: warning: 2000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  776 |     military_limits.max_power_watts = 2000.0f;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:776:39: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  776 |     military_limits.max_power_watts = 2000.0f;
      |                                       ^     ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:780:43: warning: 200.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  780 |     military_limits.power_density_limit = 200.0f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:780:43: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  780 |     military_limits.power_density_limit = 200.0f;
      |                                           ^    ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:799:26: warning: method 'logPowerChange' can be made const [readability-make-member-function-const]
  799 | void FGCom_PowerManager::logPowerChange(int old_power, int new_power) {
      |                          ^
      |                                                                       const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:801:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  801 |         std::cout << "[PowerManager] Power changed from " << old_power << "W to " << new_power << "W" << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:806:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  806 |     std::cout << "[PowerManager] Safety event: " << event << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:815:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  815 |     float wattsToDBm(float watts) {
      |     ~~~~~ ^
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:16: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:16: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:16: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                ^   ~
      |                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:24: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                        ^~~~~
      |                        std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:38: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:816:38: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  816 |         return 10.0f * log10(watts * 1000.0f);
      |                                      ^     ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:819:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  819 |     float dbmToWatts(float dbm) {
      |     ~~~~~ ^
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:16: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:16: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                ^~~
      |                std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:20: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:20: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                    ^   ~
      |                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:33: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:33: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                 ^   ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:42: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:820:42: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  820 |         return pow(10.0f, dbm / 10.0f) / 1000.0f;
      |                                          ^     ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:823:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  823 |     float wattsToDBW(float watts) {
      |     ~~~~~ ^
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:16: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  824 |         return 10.0f * log10(watts);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:16: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:16: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  824 |         return 10.0f * log10(watts);
      |                ^   ~
      |                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:824:24: warning: call to 'log10' promotes float to double [performance-type-promotion-in-math-fn]
  824 |         return 10.0f * log10(watts);
      |                        ^~~~~
      |                        std::log10
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:827:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  827 |     float dbwToWatts(float dbw) {
      |     ~~~~~ ^
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:16: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:16: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                ^~~
      |                std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:20: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:20: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                    ^   ~
      |                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:33: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:828:33: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  828 |         return pow(10.0f, dbw / 10.0f);
      |                                 ^   ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:831:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  831 |     float calculatePowerDensity(float power_watts, float distance_meters) {
      |     ~~~~~ ^
      |     auto                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:22: warning: 4.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  833 |         float area = 4.0f * M_PI * distance_meters * distance_meters;
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:22: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:833:22: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  833 |         float area = 4.0f * M_PI * distance_meters * distance_meters;
      |                      ^  ~
      |                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:837:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  837 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2) {
      |     ~~~~ ^
      |     auto                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:842:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  842 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |     ~~~~~ ^
      |     auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:16: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:33: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                 ^~~
      |                                 std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:37: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:37: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                     ^   ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:58: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:844:58: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  844 |         return tx_power_watts * pow(10.0f, net_gain_db / 10.0f);
      |                                                          ^   ~
      |                                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:847:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  847 |     float calculateEIRP(float tx_power_watts, float antenna_gain_db, float system_loss_db) {
      |     ~~~~~ ^
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:851:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  851 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius) {
      |     ~~~~~ ^
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:32: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                ^  ~
      |                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:40: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:54: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                                      ^  ~
      |                                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:62: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:854:62: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  854 |         float swr_efficiency = 1.0f / (1.0f + (swr - 1.0f) * 0.1f);
      |                                                              ^  ~
      |                                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:33: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                 ^  ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:63: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:63: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                               ^   ~
      |                                                                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:72: warning: 0.001f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:855:72: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  855 |         float temp_efficiency = 1.0f - (temperature_celsius - 25.0f) * 0.001f;
      |                                                                        ^    ~
      |                                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:856:25: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  856 |         return std::max(0.1f, swr_efficiency * temp_efficiency);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:856:25: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  856 |         return std::max(0.1f, swr_efficiency * temp_efficiency);
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:859:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  859 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db) {
      |     ~~~~~ ^
      |     auto                                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:29: warning: narrowing conversion from 'double' to 'float' [cppcoreguidelines-narrowing-conversions]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:29: warning: call to 'pow' promotes float to double [performance-type-promotion-in-math-fn]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                             ^~~
      |                             std::pow
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:33: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:33: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                 ^   ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:57: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:862:57: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  862 |         float loss_factor = pow(10.0f, -total_loss_db / 10.0f);
      |                                                         ^   ~
      |                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:866:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  866 |     bool isAmateurRadioFrequency(float frequency_mhz) {
      |     ~~~~ ^
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:34: warning: 1.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:34: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                  ^  ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:59: warning: 54.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:867:59: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  867 |         return (frequency_mhz >= 1.8f && frequency_mhz <= 54.0f);
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:870:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  870 |     bool isCommercialFrequency(float frequency_mhz) {
      |     ~~~~ ^
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:34: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:34: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^  ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:59: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:871:59: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  871 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:874:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  874 |     bool isMilitaryFrequency(float frequency_mhz) {
      |     ~~~~ ^
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:34: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:34: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                  ^  ~
      |                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:59: warning: 30.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:875:59: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  875 |         return (frequency_mhz >= 2.0f && frequency_mhz <= 30.0f);
      |                                                           ^   ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:878:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  878 |     std::string getRegulatoryBody(float frequency_mhz) {
      |     ~~~~~~~~~~~ ^
      |     auto                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:881:11: warning: do not use 'else' after 'return' [readability-else-after-return]
  881 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  882 |             return "FCC";
      |             ~~~~~~~~~~~~~
  883 |         } else if (isMilitaryFrequency(frequency_mhz)) {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  884 |             return "ITU";
      |             ~~~~~~~~~~~~~
  885 |         }
      |         ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:889:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  889 |     std::string getLicenseType(float frequency_mhz) {
      |     ~~~~~~~~~~~ ^
      |     auto                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.cpp:892:11: warning: do not use 'else' after 'return' [readability-else-after-return]
  892 |         } else if (isCommercialFrequency(frequency_mhz)) {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  893 |             return "Commercial";
      |             ~~~~~~~~~~~~~~~~~~~~
  894 |         } else if (isMilitaryFrequency(frequency_mhz)) {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  895 |             return "Military";
      |             ~~~~~~~~~~~~~~~~~~
  896 |         }
      |         ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:18:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   18 | bool FGCom_RadioConfig::initialize(const std::string& config_file) {
      | ~~~~                    ^
      | auto                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:33:52: warning: statement should be inside braces [readability-braces-around-statements]
   33 |                 if (line.empty() || line[0] == '#') continue;
      |                                                    ^         
      |                                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:57:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   57 | std::string FGCom_RadioConfig::getString(const std::string& key, const std::string& default_value) {
      | ~~~~~~~~~~~                    ^
      | auto                                                                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:58:23: warning: statement should be inside braces [readability-braces-around-statements]
   58 |     if (!initialized_) initialize();
      |                       ^             
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:59:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
   59 |     auto it = config_values_.find(key);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:63:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   63 | int FGCom_RadioConfig::getInt(const std::string& key, int default_value) {
      | ~~~                    ^
      | auto                                                                     -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:65:23: warning: statement should be inside braces [readability-braces-around-statements]
   65 |     if (value.empty()) return default_value;
      |                       ^                     
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:74:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 | float FGCom_RadioConfig::getFloat(const std::string& key, float default_value) {
      | ~~~~~                    ^
      | auto                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:76:23: warning: statement should be inside braces [readability-braces-around-statements]
   76 |     if (value.empty()) return default_value;
      |                       ^                     
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:85:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 | bool FGCom_RadioConfig::getBool(const std::string& key, bool default_value) {
      | ~~~~                    ^
      | auto                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:87:23: warning: statement should be inside braces [readability-braces-around-statements]
   87 |     if (value.empty()) return default_value;
      |                       ^                     
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:94:23: warning: statement should be inside braces [readability-braces-around-statements]
   94 |     if (!initialized_) initialize();
      |                       ^             
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:110:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  110 | bool FGCom_RadioConfig::isValidFrequency(float frequency) {
      | ~~~~                    ^
      | auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:111:24: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  111 |     return frequency > 0.0f && frequency <= 1000000.0f; // 0 Hz to 1 GHz
      |                        ^  ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:111:45: warning: 1000000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  111 |     return frequency > 0.0f && frequency <= 1000000.0f; // 0 Hz to 1 GHz
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:111:45: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  111 |     return frequency > 0.0f && frequency <= 1000000.0f; // 0 Hz to 1 GHz
      |                                             ^        ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:114:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 | bool FGCom_RadioConfig::isValidPort(int port) {
      | ~~~~                    ^
      | auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:115:32: warning: 65535 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  115 |     return port > 0 && port <= 65535;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:118:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  118 | bool FGCom_RadioConfig::isValidFieldLength(int length) {
      | ~~~~                    ^
      | auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.cpp:119:36: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  119 |     return length > 0 && length <= 1024; // Reasonable field length limit
      |                                    ^
