/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_ADVANCED_MODULATION_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ADVANCED_MODULATION_H
    2 | #define FGCOM_ADVANCED_MODULATION_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ADVANCED_MODULATION_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:5:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:6:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <map>
      | ^~~~~~~~~~~~~~
    7 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:18:12: warning: enum 'AdvancedModulationMode' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   18 | enum class AdvancedModulationMode {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:26:8: warning: accessing fields in struct 'DSBConfig' is inefficient due to padding; only needs 49 bytes but is using 56 bytes [altera-struct-pack-align]
   26 | struct DSBConfig {
      |        ^
   27 |     double bandwidth_hz = 6000.0;        // 6 kHz bandwidth
   28 |     bool carrier_suppressed = true;      // No carrier transmitted
   29 |     double sideband_power_ratio = 1.0; // Equal power in both sidebands
   30 |     std::string application = "AMATEUR"; // Primary application
   31 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:26:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'DSBConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:26:8: warning: accessing fields in struct 'DSBConfig' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   26 | struct DSBConfig {
      |        ^
   27 |     double bandwidth_hz = 6000.0;        // 6 kHz bandwidth
   28 |     bool carrier_suppressed = true;      // No carrier transmitted
   29 |     double sideband_power_ratio = 1.0; // Equal power in both sidebands
   30 |     std::string application = "AMATEUR"; // Primary application
   31 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:26:8: note: use "__attribute__((aligned(64)))" to align struct 'DSBConfig' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:27:27: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   27 |     double bandwidth_hz = 6000.0;        // 6 kHz bandwidth
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:30:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   30 |     std::string application = "AMATEUR"; // Primary application
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:34:8: warning: accessing fields in struct 'ISBConfig' is inefficient due to padding; only needs 81 bytes but is using 88 bytes [altera-struct-pack-align]
   34 | struct ISBConfig {
      |        ^
   35 |     double upper_bandwidth_hz = 3000.0; // Upper sideband bandwidth
   36 |     double lower_bandwidth_hz = 3000.0; // Lower sideband bandwidth
   37 |     bool independent_control = true;     // Independent sideband control
   38 |     std::string upper_application = "VOICE"; // Upper sideband use
   39 |     std::string lower_application = "DATA"; // Lower sideband use
   40 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:34:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ISBConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:34:8: warning: accessing fields in struct 'ISBConfig' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   34 | struct ISBConfig {
      |        ^
   35 |     double upper_bandwidth_hz = 3000.0; // Upper sideband bandwidth
   36 |     double lower_bandwidth_hz = 3000.0; // Lower sideband bandwidth
   37 |     bool independent_control = true;     // Independent sideband control
   38 |     std::string upper_application = "VOICE"; // Upper sideband use
   39 |     std::string lower_application = "DATA"; // Lower sideband use
   40 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:34:8: note: use "__attribute__((aligned(128)))" to align struct 'ISBConfig' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:35:33: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   35 |     double upper_bandwidth_hz = 3000.0; // Upper sideband bandwidth
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:36:33: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   36 |     double lower_bandwidth_hz = 3000.0; // Lower sideband bandwidth
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:38:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   38 |     std::string upper_application = "VOICE"; // Upper sideband use
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:39:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   39 |     std::string lower_application = "DATA"; // Lower sideband use
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:43:8: warning: accessing fields in struct 'VSBConfig' is inefficient due to padding; only needs 49 bytes but is using 56 bytes [altera-struct-pack-align]
   43 | struct VSBConfig {
      |        ^
   44 |     double bandwidth_hz = 4000.0;        // 4 kHz bandwidth (compromise)
   45 |     double vestigial_bandwidth_hz = 1000.0; // Vestigial sideband width
   46 |     bool carrier_present = true;         // Carrier typically present
   47 |     std::string application = "BROADCAST"; // Primary application
   48 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:43:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'VSBConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:43:8: warning: accessing fields in struct 'VSBConfig' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   43 | struct VSBConfig {
      |        ^
   44 |     double bandwidth_hz = 4000.0;        // 4 kHz bandwidth (compromise)
   45 |     double vestigial_bandwidth_hz = 1000.0; // Vestigial sideband width
   46 |     bool carrier_present = true;         // Carrier typically present
   47 |     std::string application = "BROADCAST"; // Primary application
   48 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:43:8: note: use "__attribute__((aligned(64)))" to align struct 'VSBConfig' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:44:27: warning: 4000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   44 |     double bandwidth_hz = 4000.0;        // 4 kHz bandwidth (compromise)
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:45:37: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   45 |     double vestigial_bandwidth_hz = 1000.0; // Vestigial sideband width
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:47:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   47 |     std::string application = "BROADCAST"; // Primary application
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:51:8: warning: accessing fields in struct 'NFMConfig' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   51 | struct NFMConfig {
      |        ^
   52 |     double bandwidth_hz = 12500.0;       // 12.5 kHz bandwidth
   53 |     double deviation_hz = 2500.0;        // 2.5 kHz deviation
   54 |     bool preemphasis = true;            // Preemphasis enabled
   55 |     std::string application = "MARITIME"; // Primary application
   56 |     bool squelch_required = true;        // Squelch required for operation
   57 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:51:8: note: use "__attribute__((aligned(64)))" to align struct 'NFMConfig' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:52:27: warning: 12500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     double bandwidth_hz = 12500.0;       // 12.5 kHz bandwidth
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:53:27: warning: 2500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   53 |     double deviation_hz = 2500.0;        // 2.5 kHz deviation
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:55:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   55 |     std::string application = "MARITIME"; // Primary application
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:70:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   70 |     static bool initialize();
      |            ~~~~ ^           
      |            auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:73:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     static bool isDSBFrequency(double frequency_khz);
      |            ~~~~ ^                                   
      |            auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:74:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 |     static DSBConfig getDSBConfig(const std::string& application);
      |            ~~~~~~~~~ ^                                           
      |            auto                                                   -> DSBConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:75:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   75 |     static double calculateDSBBandwidth(double frequency_khz);
      |            ~~~~~~ ^                                          
      |            auto                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:76:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   76 |     static double calculateDSBPowerEfficiency(double frequency_khz);
      |            ~~~~~~ ^                                                
      |            auto                                                     -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:79:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   79 |     static bool isISBFrequency(double frequency_khz);
      |            ~~~~ ^                                   
      |            auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:80:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     static ISBConfig getISBConfig(const std::string& application);
      |            ~~~~~~~~~ ^                                           
      |            auto                                                   -> ISBConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:81:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   81 |     static double calculateISBBandwidth(double frequency_khz);
      |            ~~~~~~ ^                                          
      |            auto                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:82:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |     static bool validateISBConfiguration(const ISBConfig& config);
      |            ~~~~ ^                                                
      |            auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:85:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     static bool isVSBFrequency(double frequency_khz);
      |            ~~~~ ^                                   
      |            auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:86:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   86 |     static VSBConfig getVSBConfig(const std::string& application);
      |            ~~~~~~~~~ ^                                           
      |            auto                                                   -> VSBConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:87:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 |     static double calculateVSBBandwidth(double frequency_khz);
      |            ~~~~~~ ^                                          
      |            auto                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:88:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     static double calculateVSBVestigialWidth(double frequency_khz);
      |            ~~~~~~ ^                                               
      |            auto                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:91:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |     static bool isNFMFrequency(double frequency_khz);
      |            ~~~~ ^                                   
      |            auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:92:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   92 |     static NFMConfig getNFMConfig(const std::string& application);
      |            ~~~~~~~~~ ^                                           
      |            auto                                                   -> NFMConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:93:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     static double calculateNFMBandwidth(double frequency_khz);
      |            ~~~~~~ ^                                          
      |            auto                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:94:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     static double calculateNFMDeviation(double frequency_khz);
      |            ~~~~~~ ^                                          
      |            auto                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:97:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   97 |     static std::string getModulationType(double frequency_khz);
      |            ~~~~~~~~~~~ ^                                      
      |            auto                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:98:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   98 |     static double calculateChannelSpacing(const std::string& mode);
      |            ~~~~~~ ^                                               
      |            auto                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:99:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     static bool validateModulationMode(const std::string& mode);
      |            ~~~~ ^                                              
      |            auto                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:100:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  100 |     static std::vector<std::string> getSupportedModes();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |            auto                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:103:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |     static double calculateModulationIndex(const std::string& mode, double frequency_khz);
      |            ~~~~~~ ^                                                                      
      |            auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:104:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 |     static double calculateSidebandSuppression(const std::string& mode);
      |            ~~~~~~ ^                                                    
      |            auto                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:105:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |     static double calculateCarrierSuppression(const std::string& mode);
      |            ~~~~~~ ^                                                   
      |            auto                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:108:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 |     static bool isAdvancedModulationBand(double frequency_khz);
      |            ~~~~ ^                                             
      |            auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:109:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 |     static std::string getBandForFrequency(double frequency_khz);
      |            ~~~~~~~~~~~ ^                                        
      |            auto                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:112:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     static double calculatePowerEfficiency(const std::string& mode, double frequency_khz);
      |            ~~~~~~ ^                                                                      
      |            auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:113:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     static double calculateBandwidthEfficiency(const std::string& mode);
      |            ~~~~~~ ^                                                    
      |            auto                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:122:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     static double processDSBSignal(double input_signal, const DSBConfig& config);
      |            ~~~~~~ ^                                                             
      |            auto                                                                  -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:123:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     static double calculateDSBNoiseFloor(double frequency_khz);
      |            ~~~~~~ ^                                           
      |            auto                                                -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:124:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |     static double calculateDSBSignalToNoiseRatio(double signal_power, double noise_power);
      |            ~~~~~~ ^                                                                      
      |            auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:125:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     static bool validateDSBParameters(const DSBConfig& config);
      |            ~~~~ ^                                             
      |            auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:131:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     static double processISBUpperSignal(double input_signal, const ISBConfig& config);
      |            ~~~~~~ ^                                                                  
      |            auto                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:132:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 |     static double processISBLowerSignal(double input_signal, const ISBConfig& config);
      |            ~~~~~~ ^                                                                  
      |            auto                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:133:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  133 |     static double calculateISBInterference(const ISBConfig& config);
      |            ~~~~~~ ^                                                
      |            auto                                                     -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:134:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     static bool validateISBParameters(const ISBConfig& config);
      |            ~~~~ ^                                             
      |            auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:140:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     static double processVSBSignal(double input_signal, const VSBConfig& config);
      |            ~~~~~~ ^                                                             
      |            auto                                                                  -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:141:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     static double calculateVSBVestigialSuppression(const VSBConfig& config);
      |            ~~~~~~ ^                                                        
      |            auto                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:142:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     static double calculateVSBChannelCapacity(const VSBConfig& config);
      |            ~~~~~~ ^                                                   
      |            auto                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:143:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     static bool validateVSBParameters(const VSBConfig& config);
      |            ~~~~ ^                                             
      |            auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:149:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     static double processNFMSignal(double input_signal, const NFMConfig& config);
      |            ~~~~~~ ^                                                             
      |            auto                                                                  -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:150:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  150 |     static double calculateNFMSignalToNoiseRatio(double signal_power, double noise_power);
      |            ~~~~~~ ^                                                                      
      |            auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:151:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     static double calculateNFMSquelchThreshold(const NFMConfig& config);
      |            ~~~~~~ ^                                                    
      |            auto                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/advanced_modulation.h:152:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  152 |     static bool validateNFMParameters(const NFMConfig& config);
      |            ~~~~ ^                                             
      |            auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:19:1: warning: #includes are not sorted properly [llvm-include-order]
   19 | #include <fstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:19:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
   20 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:20:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   20 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:20:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:21:1: warning: system include set not allowed [llvmlibc-restrict-system-libc-headers]
   21 | #include <set>
      | ^~~~~~~~~~~~~~
   22 | #include <iostream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:22:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   22 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
   23 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:23:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   23 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   24 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:24:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   24 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   25 | #include <cctype>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:25:1: warning: system include cctype not allowed [llvmlibc-restrict-system-libc-headers]
   25 | #include <cctype>
      | ^~~~~~~~~~~~~~~~~
   26 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:28:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:28:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
   26 | 
   27 | // Static member definitions
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:28:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:6: warning: no header providing "std::map" is directly included [misc-include-cleaner]
   20 | #include <sstream>
   21 | #include <set>
   22 | #include <iostream>
   23 | #include <algorithm>
   24 | #include <cmath>
   25 | #include <cctype>
   26 | 
   27 | // Static member definitions
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:15: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   26 | 
   27 | // Static member definitions
   28 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::band_segments;
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:29:71: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   29 | std::map<std::string, fgcom_band_characteristics> FGCom_AmateurRadio::band_characteristics;
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:30:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   30 | std::vector<fgcom_itu_region> FGCom_AmateurRadio::itu_regions;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:30:51: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   30 | std::vector<fgcom_itu_region> FGCom_AmateurRadio::itu_regions;
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:31:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   31 | bool FGCom_AmateurRadio::initialized = false;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 | bool FGCom_AmateurRadio::initialize() {
      | ~~~~                     ^
      | auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:34:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   34 |     if (initialized) return true;
      |                     ^            
      |                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:42:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   42 |     region1.name = "Europe, Africa, Middle East, former USSR";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:43:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     region1.min_lat = -90.0; region1.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:43:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     region1.min_lat = -90.0; region1.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:44:24: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   44 |     region1.min_lon = -180.0; region1.max_lon = 40.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:44:49: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   44 |     region1.min_lon = -180.0; region1.max_lon = 40.0;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:50:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |     region2.name = "Americas";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:51:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     region2.min_lat = -90.0; region2.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:51:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     region2.min_lat = -90.0; region2.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:52:24: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     region2.min_lon = -180.0; region2.max_lon = -20.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:52:50: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     region2.min_lon = -180.0; region2.max_lon = -20.0;
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:58:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   58 |     region3.name = "Asia-Pacific";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:59:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     region3.min_lat = -90.0; region3.max_lat = 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:59:48: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     region3.min_lat = -90.0; region3.max_lat = 90.0;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:60:23: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     region3.min_lon = 40.0; region3.max_lon = 180.0;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:60:47: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     region3.min_lon = 40.0; region3.max_lon = 180.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:68:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |     band160m.band = "160m";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:69:28: warning: 1900.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   69 |     band160m.center_freq = 1900.0; // kHz
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:70:27: warning: 160.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   70 |     band160m.wavelength = 160.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:71:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   71 |     band160m.propagation = "Ground wave";
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:72:29: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   72 |     band160m.max_range_km = 500.0;
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:73:33: warning: 0.3 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   73 |     band160m.day_night_factor = 0.3; // Better at night
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:75:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |     band_characteristics["160m"] = band160m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:75:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   75 |     band_characteristics["160m"] = band160m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:75:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |     band_characteristics["160m"] = band160m;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:79:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   79 |     band80m.band = "80m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:80:27: warning: 3750.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   80 |     band80m.center_freq = 3750.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:81:26: warning: 80.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   81 |     band80m.wavelength = 80.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:82:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     band80m.propagation = "Ground wave / Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:83:28: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |     band80m.max_range_km = 1000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:84:32: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   84 |     band80m.day_night_factor = 0.5; // Better at night
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:86:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     band_characteristics["80m"] = band80m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:86:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   86 |     band_characteristics["80m"] = band80m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:86:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |     band_characteristics["80m"] = band80m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:90:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |     band40m.band = "40m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:91:27: warning: 7100.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   91 |     band40m.center_freq = 7100.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:92:26: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   92 |     band40m.wavelength = 40.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:93:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |     band40m.propagation = "Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:94:28: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   94 |     band40m.max_range_km = 3000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:95:32: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |     band40m.day_night_factor = 0.7; // Good day and night
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:97:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     band_characteristics["40m"] = band40m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:97:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   97 |     band_characteristics["40m"] = band40m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:97:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   97 |     band_characteristics["40m"] = band40m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:101:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |     band20m.band = "20m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:102:27: warning: 14175.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  102 |     band20m.center_freq = 14175.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:103:26: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  103 |     band20m.wavelength = 20.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:104:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  104 |     band20m.propagation = "Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:105:28: warning: 10000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  105 |     band20m.max_range_km = 10000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:106:32: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |     band20m.day_night_factor = 0.9; // Excellent day band
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:108:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  108 |     band_characteristics["20m"] = band20m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:108:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  108 |     band_characteristics["20m"] = band20m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:108:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  108 |     band_characteristics["20m"] = band20m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:112:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  112 |     band10m.band = "10m";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:113:27: warning: 28500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  113 |     band10m.center_freq = 28500.0; // kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:114:26: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  114 |     band10m.wavelength = 10.0;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:115:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |     band10m.propagation = "Line of sight / Sky wave";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:116:28: warning: 2000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  116 |     band10m.max_range_km = 2000.0;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:119:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  119 |     band_characteristics["10m"] = band10m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:119:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  119 |     band_characteristics["10m"] = band10m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:119:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  119 |     band_characteristics["10m"] = band10m;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:123:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  123 |     band6m.band = "6m";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:124:26: warning: 52000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  124 |     band6m.center_freq = 52000.0; // kHz
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:125:25: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  125 |     band6m.wavelength = 6.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:126:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  126 |     band6m.propagation = "Line of sight";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:127:27: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  127 |     band6m.max_range_km = 500.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:130:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  130 |     band_characteristics["6m"] = band6m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:130:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  130 |     band_characteristics["6m"] = band6m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:130:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  130 |     band_characteristics["6m"] = band6m;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:134:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |     band4m.band = "4m";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:135:26: warning: 70000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  135 |     band4m.center_freq = 70000.0; // kHz (70 MHz)
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:136:25: warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  136 |     band4m.wavelength = 4.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:137:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |     band4m.propagation = "Line of sight";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:138:27: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |     band4m.max_range_km = 500.0;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:141:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |     band_characteristics["4m"] = band4m;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:524:7: note: resolves to this declaration
  524 |       operator[](key_type&& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:141:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  141 |     band_characteristics["4m"] = band4m;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:141:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |     band_characteristics["4m"] = band4m;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: resolves to this declaration
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:147:5: warning: variable 'csv_path' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  147 |     std::string csv_path = "../../configs/radio_amateur_band_segments.csv";
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:147:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  147 |     std::string csv_path = "../../configs/radio_amateur_band_segments.csv";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:151:10: warning: 'loadBandSegments' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |     if (!loadBandSegments(csv_path)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:140:17: note: resolves to this declaration
  140 |     static bool loadBandSegments(const std::string& csv_file);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:90: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:102: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:105: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:152:105: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  152 |         std::cerr << "CRITICAL ERROR: Failed to load amateur radio band segments from: " << csv_path << std::endl;
      |                                                                                                         ^~~~~~~~~
      |                                                                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:92: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:95: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:153:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  153 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:28: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:52: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:81: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:84: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:157:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  157 |     std::cout << "Loaded " << band_segments.size() << " band segments from CSV" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:163:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  163 | bool FGCom_AmateurRadio::loadBandSegments(const std::string& csv_file) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:163:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 | bool FGCom_AmateurRadio::loadBandSegments(const std::string& csv_file) {
      | ~~~~                     ^
      | auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:167:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  167 |     std::ifstream file(csv_file);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/fstream:570:8: note: default parameter was declared here
  570 |                      ios_base::openmode __mode = ios_base::in)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:87: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:99: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:102: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:169:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  169 |         std::cerr << "CRITICAL ERROR: Cannot open amateur radio band segments file: " << csv_file << std::endl;
      |                                                                                                      ^~~~~~~~~
      |                                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:19: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:92: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:95: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:170:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  170 |         std::cerr << "Amateur radio frequency validation will not work without this data!" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:180:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'file' and may cause performance degradation [altera-id-dependent-backward-branch]
  180 |     while (std::getline(file, line)) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:167:5: note: inferred assignment of ID-dependent value from ID-dependent 
  167 |     std::ifstream file(csv_file);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:180:12: warning: 'getline<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     while (std::getline(file, line)) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4072:5: note: resolves to this declaration
 4072 |     getline(basic_istream<_CharT, _Traits>& __is,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:180:17: warning: no header providing "std::getline" is directly included [misc-include-cleaner]
  180 |     while (std::getline(file, line)) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:189:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  189 |         if (line.empty()) continue;
      |                          ^         
      |                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:200:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  200 |         for (size_t i = 0; i < line.length(); i++) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:200:14: warning: no header providing "size_t" is directly included [misc-include-cleaner]
   19 |         for (size_t i = 0; i < line.length(); i++) {
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:201:13: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
  201 |             char c = line[i];
      |             ^
      |                  const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:201:18: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  201 |             char c = line[i];
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:201:26: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  201 |             char c = line[i];
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:212:31: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  212 |                 current_field += c;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:219:30: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  219 |         if (fields.size() >= 9) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:223:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |             segment.band = fields[0];                    // Band designation (e.g., "160m", "80m")
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:223:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |             segment.band = fields[0];                    // Band designation (e.g., "160m", "80m")
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:224:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |             segment.mode = fields[1];                    // Operating mode (e.g., "CW", "SSB")
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:224:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |             segment.mode = fields[1];                    // Operating mode (e.g., "CW", "SSB")
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:34: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:39: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:225:50: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |             segment.start_freq = std::stof(fields[2]);   // Start frequency in kHz - CRITICAL: Must be numeric
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:226:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  226 |             segment.end_freq = std::stof(fields[3]);     // End frequency in kHz - CRITICAL: Must be numeric
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:226:32: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |             segment.end_freq = std::stof(fields[3]);     // End frequency in kHz - CRITICAL: Must be numeric
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:226:48: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |             segment.end_freq = std::stof(fields[3]);     // End frequency in kHz - CRITICAL: Must be numeric
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:29: note: default parameter was declared here
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:34: warning: 'stoi' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:3: note: resolves to this declaration
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:39: warning: no header providing "std::stoi" is directly included [misc-include-cleaner]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:227:50: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  227 |             segment.itu_region = std::stoi(fields[4]);   // ITU Region (1,2,3) - CRITICAL: Must be 1, 2, or 3
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:228:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  228 |             segment.countries = fields[5];               // Country/region (e.g., "UK", "USA")
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:228:39: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  228 |             segment.countries = fields[5];               // Country/region (e.g., "UK", "USA")
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:228:40: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  228 |             segment.countries = fields[5];               // Country/region (e.g., "UK", "USA")
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:229:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |             segment.license_class = fields[6];          // License class (e.g., "Full", "Intermediate")
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:229:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |             segment.license_class = fields[6];          // License class (e.g., "Full", "Intermediate")
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:229:44: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  229 |             segment.license_class = fields[6];          // License class (e.g., "Full", "Intermediate")
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:35: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:230:52: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  230 |             segment.power_limit = std::stof(fields[7]); // Power limit in Watts - CRITICAL: Must be positive
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:231:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |             segment.notes = fields[8];                  // Additional notes/restrictions
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:231:35: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |             segment.notes = fields[8];                  // Additional notes/restrictions
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:231:36: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  231 |             segment.notes = fields[8];                  // Additional notes/restrictions
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:25: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      | ~~~                     ^
      | auto                                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:41: warning: 2 adjacent parameters of 'detectITURegion' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:48: note: the first parameter in the range is 'lat'
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                                                ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:242:60: note: the last parameter in the range is 'lon'
  242 | int FGCom_AmateurRadio::detectITURegion(double lat, double lon) {
      |                                                            ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  244 |     while (lon > 180.0) lon -= 360.0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:18: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                        ^             
      |                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:244:32: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     while (lon > 180.0) lon -= 360.0;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  245 |     while (lon < -180.0) lon += 360.0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:19: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |     while (lon < -180.0) lon += 360.0;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  245 |     while (lon < -180.0) lon += 360.0;
      |                         ^             
      |                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:245:33: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |     while (lon < -180.0) lon += 360.0;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:248:15: warning: 60.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  248 |     if (lat > 60.0) {
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:254:17: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     if (lon >= -180.0 && lon <= -20.0) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:254:34: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     if (lon >= -180.0 && lon <= -20.0) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  257 |         return 3; // Asia-Pacific
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~
  258 |     } else {
      |     ~~~~~~~~
  259 |         return 1; // Europe, Africa, Middle East, former USSR
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  260 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:23: warning: 40.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:256:38: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  256 |     } else if (lon >= 40.0 && lon <= 180.0) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:51: warning: 2 adjacent parameters of 'validateAmateurFrequency' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:70: note: the first parameter in the range is 'frequency'
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                      ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:263:100: note: the last parameter in the range is 'mode'
  263 | bool FGCom_AmateurRadio::validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:264:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  264 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:264:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  264 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:266:5: warning: variable 'freq_khz' of type 'float' can be declared 'const' [misc-const-correctness]
  266 |     float freq_khz = std::stof(frequency);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:266:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  266 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:266:22: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  266 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  269 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:269:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:271:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  271 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:281:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  281 | std::string FGCom_AmateurRadio::getRequiredLicenseClass(float frequency_khz, int itu_region, const std::string& mode) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:281:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  281 | std::string FGCom_AmateurRadio::getRequiredLicenseClass(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:282:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  282 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:282:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  282 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  284 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:284:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:286:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  286 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:293:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  293 |     return "Unknown";
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:296:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  296 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::getCountryAllocations(const std::string& country, int itu_region) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:296:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 | std::vector<fgcom_band_segment> FGCom_AmateurRadio::getCountryAllocations(const std::string& country, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                  -> std::vector<fgcom_band_segment>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:297:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  297 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:297:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  297 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  301 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:301:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:303:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  303 |             segment.countries.find(country) != std::string::npos) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:2661:39: note: default parameter was declared here
 2661 |       find(const basic_string& __str, size_type __pos = 0) const
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:311:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  311 | bool FGCom_AmateurRadio::canLicenseClassOperate(float frequency_khz, int itu_region, const std::string& mode, const std::string& license_class) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:311:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  311 | bool FGCom_AmateurRadio::canLicenseClassOperate(float frequency_khz, int itu_region, const std::string& mode, const std::string& license_class) {
      | ~~~~                     ^
      | auto                                                                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:312:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  312 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:312:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  312 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  314 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:314:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:316:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  316 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:319:42: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  319 |             return segment.license_class == license_class;
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:326:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  326 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(const std::string& license_class, int itu_region) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:326:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  326 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(const std::string& license_class, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                             -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:327:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  327 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:327:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  327 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  332 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:332:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  332 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:334:35: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  334 |             segment.license_class == license_class) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  339 |     for (const auto& band : unique_bands) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  339 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  339 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:339:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  339 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:340:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  339 |     for (const auto& band : unique_bands) {
  340 |         available_bands.push_back(band);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:346:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  346 | fgcom_band_segment FGCom_AmateurRadio::getBandSegment(float frequency_khz, int itu_region) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:346:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  346 | fgcom_band_segment FGCom_AmateurRadio::getBandSegment(float frequency_khz, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                       -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:349:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  349 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:349:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  349 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  351 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:351:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  351 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:362:48: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  362 | fgcom_band_characteristics FGCom_AmateurRadio::getBandCharacteristics(const std::string& band) {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:362:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  362 | fgcom_band_characteristics FGCom_AmateurRadio::getBandCharacteristics(const std::string& band) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                           -> fgcom_band_characteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:365:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  365 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:365:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  365 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:367:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  367 |     auto it = band_characteristics.find(band);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:368:12: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  368 |     if (it != band_characteristics.end()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:369:18: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  369 |         return it->second;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:375:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  375 | std::string FGCom_AmateurRadio::frequencyToBand(float frequency_khz) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:375:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  375 | std::string FGCom_AmateurRadio::frequencyToBand(float frequency_khz) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:376:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  376 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:376:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  376 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:26: warning: 1800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:51: warning: 2000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                        ^              
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:379:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  379 |     if (frequency_khz >= 1800 && frequency_khz <= 2000) return "160m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:26: warning: 3500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:51: warning: 4000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:380:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  380 |     if (frequency_khz >= 3500 && frequency_khz <= 4000) return "80m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:26: warning: 5300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:51: warning: 5400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:381:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  381 |     if (frequency_khz >= 5300 && frequency_khz <= 5400) return "60m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:26: warning: 7000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:51: warning: 7300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                        ^             
      |                                                         {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:382:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  382 |     if (frequency_khz >= 7000 && frequency_khz <= 7300) return "40m";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:26: warning: 10100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:52: warning: 10150 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:383:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  383 |     if (frequency_khz >= 10100 && frequency_khz <= 10150) return "30m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:26: warning: 14000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:52: warning: 14350 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:384:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  384 |     if (frequency_khz >= 14000 && frequency_khz <= 14350) return "20m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:26: warning: 18068 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:52: warning: 18168 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:385:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  385 |     if (frequency_khz >= 18068 && frequency_khz <= 18168) return "17m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:26: warning: 21000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:52: warning: 21450 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:386:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  386 |     if (frequency_khz >= 21000 && frequency_khz <= 21450) return "15m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:26: warning: 24890 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:52: warning: 24990 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:387:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  387 |     if (frequency_khz >= 24890 && frequency_khz <= 24990) return "12m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:26: warning: 28000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:52: warning: 29700 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                          ^             
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:388:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  388 |     if (frequency_khz >= 28000 && frequency_khz <= 29700) return "10m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:26: warning: 50000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:52: warning: 54000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                          ^            
      |                                                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:389:66: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  389 |     if (frequency_khz >= 50000 && frequency_khz <= 54000) return "6m";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:391:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  391 |     return "";
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:394:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  394 | bool FGCom_AmateurRadio::isAmateurFrequency(float frequency_khz, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:394:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  394 | bool FGCom_AmateurRadio::isAmateurFrequency(float frequency_khz, int itu_region) {
      | ~~~~                     ^
      | auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:395:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  395 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:395:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  395 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  397 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  397 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  397 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:397:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  397 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:408:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  408 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(int itu_region) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:408:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  408 | std::vector<std::string> FGCom_AmateurRadio::getAvailableBands(int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                           -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:411:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  411 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:411:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  411 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  414 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:414:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  414 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  420 |     for (const auto& band : unique_bands) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  420 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  420 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:420:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  420 |     for (const auto& band : unique_bands) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:421:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  420 |     for (const auto& band : unique_bands) {
  421 |         bands.push_back(band);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:427:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  427 | std::vector<std::string> FGCom_AmateurRadio::getAvailableModes(const std::string& band, int itu_region) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:427:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  427 | std::vector<std::string> FGCom_AmateurRadio::getAvailableModes(const std::string& band, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                    -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:430:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  430 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:430:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  430 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  433 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  433 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  433 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:433:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  433 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:434:62: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  434 |         if (segment.itu_region == itu_region && segment.band == band) {
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  439 |     for (const auto& mode : unique_modes) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |     for (const auto& mode : unique_modes) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |     for (const auto& mode : unique_modes) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:439:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |     for (const auto& mode : unique_modes) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:440:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  439 |     for (const auto& mode : unique_modes) {
  440 |         modes.push_back(mode);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:48: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                                            -> fgcom_frequency_validation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:74: warning: 2 adjacent parameters of 'validateFrequencyDetailed' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:93: note: the first parameter in the range is 'frequency'
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                                             ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:447:123: note: the last parameter in the range is 'mode'
  447 | fgcom_frequency_validation FGCom_AmateurRadio::validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region) {
      |                                                                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:450:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  450 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:450:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  450 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:452:5: warning: variable 'freq_khz' of type 'float' can be declared 'const' [misc-const-correctness]
  452 |     float freq_khz = std::stof(frequency);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:452:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  452 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:452:22: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  452 |     float freq_khz = std::stof(frequency);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:455:10: warning: 'checkBandCompliance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  455 |     if (!checkBandCompliance(freq_khz, mode, itu_region)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:159:17: note: resolves to this declaration
  159 |     static bool checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:456:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  456 |         result.error_message = "Frequency is outside amateur band limits";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:461:10: warning: 'enforceModeSeparation' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  461 |     if (!enforceModeSeparation(freq_khz, mode, itu_region)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:162:17: note: resolves to this declaration
  162 |     static bool enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:462:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  462 |         result.error_message = "Frequency not allocated for " + mode + " mode in this region";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:462:63: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  462 |         result.error_message = "Frequency not allocated for " + mode + " mode in this region";
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:462:70: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  462 |         result.error_message = "Frequency not allocated for " + mode + " mode in this region";
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:467:10: warning: 'checkRegionalRestrictions' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  467 |     if (!checkRegionalRestrictions(freq_khz, itu_region)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:165:17: note: resolves to this declaration
  165 |     static bool checkRegionalRestrictions(float frequency_khz, int itu_region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:468:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  468 |         result.error_message = "Frequency restricted in this ITU region";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:473:10: warning: 'validateChannelSpacing' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  473 |     if (!validateChannelSpacing(freq_khz, mode)) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:189:17: note: resolves to this declaration
  189 |     static bool validateChannelSpacing(float frequency_khz, const std::string& mode);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:474:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  474 |         result.error_message = "Invalid channel spacing for " + mode + " mode";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:474:63: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  474 |         result.error_message = "Invalid channel spacing for " + mode + " mode";
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:474:70: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  474 |         result.error_message = "Invalid channel spacing for " + mode + " mode";
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:480:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  480 |     result.band = frequencyToBand(freq_khz);
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:480:19: warning: 'frequencyToBand' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  480 |     result.band = frequencyToBand(freq_khz);
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:375:33: note: resolves to this declaration
  375 | std::string FGCom_AmateurRadio::frequencyToBand(float frequency_khz) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:481:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  481 |     result.mode = mode;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:483:14: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  483 |     if (mode == "CW") {
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:484:34: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  484 |         result.channel_spacing = 500.0; // 500Hz for CW
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:485:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  485 |     } else if (mode == "DSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:485:31: warning: repeated branch body in conditional chain [bugprone-branch-clone]
  485 |     } else if (mode == "DSB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:487:6: note: end of the original
  487 |     } else if (mode == "ISB") {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:487:31: note: clone 1 starts here
  487 |     } else if (mode == "ISB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:486:34: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  486 |         result.channel_spacing = 6000.0; // 6kHz for DSB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:487:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  487 |     } else if (mode == "ISB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:488:34: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  488 |         result.channel_spacing = 6000.0; // 6kHz for ISB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:489:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  489 |     } else if (mode == "VSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:490:34: warning: 4000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  490 |         result.channel_spacing = 4000.0; // 4kHz for VSB
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:491:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  491 |     } else if (mode == "NFM") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:492:34: warning: 12500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  492 |         result.channel_spacing = 12500.0; // 12.5kHz for NFM
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:494:34: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  494 |         result.channel_spacing = 3000.0; // 3kHz for SSB/AM
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:501:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  501 | bool FGCom_AmateurRadio::checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:501:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  501 | bool FGCom_AmateurRadio::checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:502:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  502 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:502:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  502 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  505 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  505 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  505 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:505:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  505 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:507:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  507 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:518:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  518 | bool FGCom_AmateurRadio::enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:518:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  518 | bool FGCom_AmateurRadio::enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:519:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  519 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:519:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  519 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:522:5: warning: variable 'segment' of type 'fgcom_band_segment' can be declared 'const' [misc-const-correctness]
  522 |     fgcom_band_segment segment = getBandSegment(frequency_khz, itu_region);
      |     ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:522:34: warning: 'getBandSegment' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  522 |     fgcom_band_segment segment = getBandSegment(frequency_khz, itu_region);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:346:40: note: resolves to this declaration
  346 | fgcom_band_segment FGCom_AmateurRadio::getBandSegment(float frequency_khz, int itu_region) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  529 |     for (const auto& seg : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:26: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  529 |     for (const auto& seg : band_segments) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:26: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  529 |     for (const auto& seg : band_segments) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:529:26: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  529 |     for (const auto& seg : band_segments) {
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:531:22: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  531 |             seg.band == segment.band &&
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:532:22: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  532 |             seg.mode == mode &&
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:543:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  543 | bool FGCom_AmateurRadio::checkRegionalRestrictions(float frequency_khz, int itu_region) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:543:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  543 | bool FGCom_AmateurRadio::checkRegionalRestrictions(float frequency_khz, int itu_region) {
      | ~~~~                     ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:544:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  544 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:544:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  544 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  547 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:5: warning: replace loop by 'std::any_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  547 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  547 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:547:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  547 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:553:65: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  553 |             if (!segment.countries.empty() && segment.countries != "Europe" && 
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:554:35: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |                 segment.countries != "Americas" && segment.countries != "Asia-Pacific") {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:554:70: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |                 segment.countries != "Americas" && segment.countries != "Asia-Pacific") {
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:567:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  567 | float FGCom_AmateurRadio::getPowerLimit(float frequency_khz, int itu_region, const std::string& mode) {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:567:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  567 | float FGCom_AmateurRadio::getPowerLimit(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~                     ^
      | auto                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:568:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  568 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:568:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  568 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  570 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  570 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  570 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:570:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  570 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:572:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:579:12: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  579 |     return 400.0; // Default power limit
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:583:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  583 | fgcom_band_segment FGCom_AmateurRadio::getBandSegmentInfo(float frequency_khz, int itu_region, const std::string& mode) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:583:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  583 | fgcom_band_segment FGCom_AmateurRadio::getBandSegmentInfo(float frequency_khz, int itu_region, const std::string& mode) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                                                    -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:584:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  584 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:584:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  584 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  586 |     for (const auto& segment : band_segments) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:30: warning: 'operator!=<fgcom_band_segment *, std::vector<fgcom_band_segment>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  586 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:30: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  586 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:586:30: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  586 |     for (const auto& segment : band_segments) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:588:26: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  588 |             segment.mode == mode &&
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:596:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  596 |     return fgcom_band_segment();
      |            ^~~~~~~~~~~~~~~~~~~~
      |            {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:600:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  600 | bool FGCom_AmateurRadio::validatePowerLevel(float frequency_khz, int itu_region, const std::string& mode, float power_watts) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:600:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  600 | bool FGCom_AmateurRadio::validatePowerLevel(float frequency_khz, int itu_region, const std::string& mode, float power_watts) {
      | ~~~~                     ^
      | auto                                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:601:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  601 |     if (!initialized) initialize();
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:601:23: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     if (!initialized) initialize();
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:33:26: note: resolves to this declaration
   33 | bool FGCom_AmateurRadio::initialize() {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:603:5: warning: variable 'max_power' of type 'float' can be declared 'const' [misc-const-correctness]
  603 |     float max_power = getPowerLimit(frequency_khz, itu_region, mode);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:603:23: warning: 'getPowerLimit' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  603 |     float max_power = getPowerLimit(frequency_khz, itu_region, mode);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:567:27: note: resolves to this declaration
  567 | float FGCom_AmateurRadio::getPowerLimit(float frequency_khz, int itu_region, const std::string& mode) {
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:608:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  608 | bool FGCom_AmateurRadio::validateChannelSpacing(float frequency_khz, const std::string& mode) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:608:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  608 | bool FGCom_AmateurRadio::validateChannelSpacing(float frequency_khz, const std::string& mode) {
      | ~~~~                     ^
      | auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:610:11: warning: variable 'spacing_hz' is not initialized [cppcoreguidelines-init-variables]
   19 |     float spacing_hz;
      |           ^         
      |                      = NAN
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:611:14: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  611 |     if (mode == "CW") {
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:612:22: warning: 500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  612 |         spacing_hz = 500.0; // 500Hz for CW
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:613:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  613 |     } else if (mode == "DSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:613:31: warning: repeated branch body in conditional chain [bugprone-branch-clone]
  613 |     } else if (mode == "DSB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:615:6: note: end of the original
  615 |     } else if (mode == "ISB") {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:615:31: note: clone 1 starts here
  615 |     } else if (mode == "ISB") {
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:614:22: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  614 |         spacing_hz = 6000.0; // 6kHz for DSB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:615:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  615 |     } else if (mode == "ISB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:616:22: warning: 6000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  616 |         spacing_hz = 6000.0; // 6kHz for ISB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:617:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  617 |     } else if (mode == "VSB") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:618:22: warning: 4000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  618 |         spacing_hz = 4000.0; // 4kHz for VSB
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:619:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  619 |     } else if (mode == "NFM") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:620:22: warning: 12500.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  620 |         spacing_hz = 12500.0; // 12.5kHz for NFM
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:622:22: warning: 3000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  622 |         spacing_hz = 3000.0; // 3kHz for SSB/AM
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:5: warning: variable 'spacing_khz' of type 'float' can be declared 'const' [misc-const-correctness]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:25: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:624:38: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  624 |     float spacing_khz = spacing_hz / 1000.0;
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:5: warning: variable 'remainder' of type 'float' can be declared 'const' [misc-const-correctness]
  627 |     float remainder = fmod(frequency_khz, spacing_khz);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:23: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  627 |     float remainder = fmod(frequency_khz, spacing_khz);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:627:23: warning: call to 'fmod' promotes float to double [performance-type-promotion-in-math-fn]
   19 |     float remainder = fmod(frequency_khz, spacing_khz);
      |                       ^~~~
      |                       std::fmod
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:628:25: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  628 |     return (remainder < 0.001 || remainder > (spacing_khz - 0.001)); // Allow small rounding errors
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:628:61: warning: 0.001 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  628 |     return (remainder < 0.001 || remainder > (spacing_khz - 0.001)); // Allow small rounding errors
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:632:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  632 | fgcom_grid_locator FGCom_AmateurRadio::parseGridLocator(const std::string& grid_string) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:632:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  632 | fgcom_grid_locator FGCom_AmateurRadio::parseGridLocator(const std::string& grid_string) {
      | ~~~~~~~~~~~~~~~~~~                     ^
      | auto                                                                                    -> fgcom_grid_locator
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:634:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  634 |     result.grid = grid_string;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:636:9: warning: 'validateGridLocator' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     if (validateGridLocator(grid_string)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:215:17: note: resolves to this declaration
  215 |     static bool validateGridLocator(const std::string& grid);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:638:9: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  638 |         gridToLatLon(grid_string, result.lat, result.lon);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:211:24: note: resolves to this declaration
  211 |     static std::string gridToLatLon(const std::string& grid, double& lat, double& lon);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:649:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  649 |         return "";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:654:5: warning: 'transform<__gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, __gnu_cxx::__normal_iterator<char *, std::basic_string<char>>, int (*)(int) noexcept>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  654 |     std::transform(grid_upper.begin(), grid_upper.end(), grid_upper.begin(), ::toupper);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:4298:5: note: resolves to this declaration
 4298 |     transform(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:657:5: warning: variable 'field_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  657 |     int field_lon = grid_upper[0] - 'A';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:657:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  657 |     int field_lon = grid_upper[0] - 'A';
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:658:5: warning: variable 'field_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  658 |     int field_lat = grid_upper[1] - 'A';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:658:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  658 |     int field_lat = grid_upper[1] - 'A';
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:661:5: warning: variable 'square_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  661 |     int square_lon = grid_upper[2] - '0';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:661:32: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  661 |     int square_lon = grid_upper[2] - '0';
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:662:5: warning: variable 'square_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  662 |     int square_lat = grid_upper[3] - '0';
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:662:32: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  662 |     int square_lat = grid_upper[3] - '0';
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:24: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:46: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:665:53: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  665 |     lon = (field_lon * 20.0) + (square_lon * 2.0) - 180.0;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:666:24: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  666 |     lat = (field_lat * 10.0) + (square_lat * 1.0) - 90.0;
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:666:53: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  666 |     lat = (field_lat * 10.0) + (square_lat * 1.0) - 90.0;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:669:26: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  669 |     if (grid.length() >= 6) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:9: warning: variable 'subsquare_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:57: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:670:63: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  670 |         double subsquare_lon = (grid_upper[4] - 'A') * (2.0 / 24.0);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:9: warning: variable 'subsquare_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:44: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:671:63: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  671 |         double subsquare_lat = (grid_upper[5] - 'A') * (1.0 / 24.0);
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:677:26: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  677 |     if (grid.length() >= 8) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:9: warning: variable 'extended_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:42: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:43: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:56: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:678:62: warning: 240.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  678 |         double extended_lon = (grid_upper[6] - '0') * (2.0 / 240.0);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:9: warning: variable 'extended_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:42: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1254:7: note: resolves to this declaration
 1254 |       operator[](size_type __pos)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:43: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:679:62: warning: 240.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  679 |         double extended_lat = (grid_upper[7] - '0') * (1.0 / 240.0);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      | ~~~~~~~~~~~                     ^
      | auto                                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:46: warning: 3 adjacent parameters of 'latLonToGrid' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:53: note: the first parameter in the range is 'lat'
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                                     ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:74: note: the last parameter in the range is 'precision'
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                                                          ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:687:70: note: 'double' and 'int' may be implicitly converted
  687 | std::string FGCom_AmateurRadio::latLonToGrid(double lat, double lon, int precision) {
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:689:12: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  689 |     lon += 180.0;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:690:12: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  690 |     lat += 90.0;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:693:5: warning: variable 'field_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  693 |     int field_lon = (int)(lon / 20.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:693:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  693 |     int field_lon = (int)(lon / 20.0);
      |                     ^~~~~
      |                     static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:693:33: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  693 |     int field_lon = (int)(lon / 20.0);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:694:5: warning: variable 'field_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  694 |     int field_lat = (int)(lat / 10.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:694:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  694 |     int field_lat = (int)(lat / 10.0);
      |                     ^~~~~
      |                     static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:694:33: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  694 |     int field_lat = (int)(lat / 10.0);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:5: warning: variable 'square_lon' of type 'int' can be declared 'const' [misc-const-correctness]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:22: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                      ^~~~~
      |                      static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:47: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:697:55: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  697 |     int square_lon = (int)((lon - field_lon * 20.0) / 2.0);
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:698:5: warning: variable 'square_lat' of type 'int' can be declared 'const' [misc-const-correctness]
  698 |     int square_lat = (int)((lat - field_lat * 10.0) / 1.0);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:698:22: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  698 |     int square_lat = (int)((lat - field_lat * 10.0) / 1.0);
      |                      ^~~~~
      |                      static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:698:47: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  698 |     int square_lat = (int)((lat - field_lat * 10.0) / 1.0);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:700:17: warning: redundant string initialization [readability-redundant-string-init]
  700 |     std::string grid = "";
      |                 ^~~~~~~~~
      |                 grid
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:700:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  700 |     std::string grid = "";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:701:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  701 |     grid += (char)('A' + field_lon);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:701:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  701 |     grid += (char)('A' + field_lon);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:702:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  702 |     grid += (char)('A' + field_lat);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:702:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  702 |     grid += (char)('A' + field_lat);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:703:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  703 |     grid += (char)('0' + square_lon);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:703:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  703 |     grid += (char)('0' + square_lon);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:704:10: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  704 |     grid += (char)('0' + square_lat);
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:704:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  704 |     grid += (char)('0' + square_lat);
      |             ^~~~~~
      |             static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:5: warning: variable 'subsquare_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:47: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:67: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:707:74: warning: 12.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  707 |     double subsquare_lon = (lon - field_lon * 20.0 - square_lon * 2.0) * 12.0;
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:5: warning: variable 'subsquare_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:47: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:708:74: warning: 24.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  708 |     double subsquare_lat = (lat - field_lat * 10.0 - square_lat * 1.0) * 24.0;
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:710:22: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  710 |     if (precision >= 6) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:712:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  712 |         grid += (char)('A' + (int)subsquare_lon);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:712:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  712 |         grid += (char)('A' + (int)subsquare_lon);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:712:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  712 |         grid += (char)('A' + (int)subsquare_lon);
      |                              ^~~~~             
      |                              static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:713:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  713 |         grid += (char)('A' + (int)subsquare_lat);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:713:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  713 |         grid += (char)('A' + (int)subsquare_lat);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:713:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  713 |         grid += (char)('A' + (int)subsquare_lat);
      |                              ^~~~~             
      |                              static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:716:22: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  716 |     if (precision >= 8) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:718:9: warning: variable 'extended_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  718 |         double extended_lon = (subsquare_lon - (int)subsquare_lon) * 10.0;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:718:48: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  718 |         double extended_lon = (subsquare_lon - (int)subsquare_lon) * 10.0;
      |                                                ^~~~~             
      |                                                static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:718:70: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  718 |         double extended_lon = (subsquare_lon - (int)subsquare_lon) * 10.0;
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:719:9: warning: variable 'extended_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  719 |         double extended_lat = (subsquare_lat - (int)subsquare_lat) * 10.0;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:719:48: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  719 |         double extended_lat = (subsquare_lat - (int)subsquare_lat) * 10.0;
      |                                                ^~~~~             
      |                                                static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:719:70: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  719 |         double extended_lat = (subsquare_lat - (int)subsquare_lat) * 10.0;
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:720:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  720 |         grid += (char)('0' + (int)extended_lon);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:720:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  720 |         grid += (char)('0' + (int)extended_lon);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:720:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  720 |         grid += (char)('0' + (int)extended_lon);
      |                              ^~~~~            
      |                              static_cast<int>()
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:721:14: warning: 'operator+=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  721 |         grid += (char)('0' + (int)extended_lat);
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1386:7: note: resolves to this declaration
 1386 |       operator+=(_CharT __c)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:721:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  721 |         grid += (char)('0' + (int)extended_lat);
      |                 ^~~~~~
      |                 static_cast<char>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:721:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  721 |         grid += (char)('0' + (int)extended_lat);
      |                              ^~~~~            
      |                              static_cast<int>()
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:727:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  727 | double FGCom_AmateurRadio::gridDistance(const std::string& grid1, const std::string& grid2) {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:727:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  727 | double FGCom_AmateurRadio::gridDistance(const std::string& grid1, const std::string& grid2) {
      | ~~~~~~                     ^
      | auto                                                                                        -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  728 |     double lat1, lon1, lat2, lon2;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:12: warning: variable 'lat1' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:18: warning: variable 'lon1' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                  ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:24: warning: variable 'lat2' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                        ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:728:30: warning: variable 'lon2' is not initialized [cppcoreguidelines-init-variables]
  728 |     double lat1, lon1, lat2, lon2;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:730:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  730 |     gridToLatLon(grid1, lat1, lon1);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:731:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  731 |     gridToLatLon(grid2, lat2, lon2);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:734:18: warning: variable name 'R' is too short, expected at least 3 characters [readability-identifier-length]
  734 |     const double R = 6371.0; // Earth's radius in km
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:735:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  735 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:735:35: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
   20 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:735:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  735 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:736:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  736 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:736:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  736 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:5: warning: variable 'a' of type 'double' can be declared 'const' [misc-const-correctness]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:62: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:737:89: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  737 |     double a = sin(dlat/2) * sin(dlat/2) + cos(lat1 * M_PI / 180.0) * cos(lat2 * M_PI / 180.0) * sin(dlon/2) * sin(dlon/2);
      |                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:738:5: warning: variable 'c' of type 'double' can be declared 'const' [misc-const-correctness]
  738 |     double c = 2 * atan2(sqrt(a), sqrt(1-a));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:738:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  738 |     double c = 2 * atan2(sqrt(a), sqrt(1-a));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:743:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  743 | double FGCom_AmateurRadio::gridBearing(const std::string& grid1, const std::string& grid2) {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:743:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  743 | double FGCom_AmateurRadio::gridBearing(const std::string& grid1, const std::string& grid2) {
      | ~~~~~~                     ^
      | auto                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  744 |     double lat1, lon1, lat2, lon2;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:12: warning: variable 'lat1' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |            ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:18: warning: variable 'lon1' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                  ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:24: warning: variable 'lat2' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                        ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:744:30: warning: variable 'lon2' is not initialized [cppcoreguidelines-init-variables]
  744 |     double lat1, lon1, lat2, lon2;
      |                              ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:746:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  746 |     gridToLatLon(grid1, lat1, lon1);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:747:5: warning: 'gridToLatLon' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  747 |     gridToLatLon(grid2, lat2, lon2);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:646:33: note: resolves to this declaration
  646 | std::string FGCom_AmateurRadio::gridToLatLon(const std::string& grid, double& lat, double& lon) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:750:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  750 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:750:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  750 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:751:5: warning: variable 'lat1_rad' of type 'double' can be declared 'const' [misc-const-correctness]
  751 |     double lat1_rad = lat1 * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:751:37: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  751 |     double lat1_rad = lat1 * M_PI / 180.0;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:752:5: warning: variable 'lat2_rad' of type 'double' can be declared 'const' [misc-const-correctness]
  752 |     double lat2_rad = lat2 * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:752:37: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  752 |     double lat2_rad = lat2 * M_PI / 180.0;
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:754:5: warning: variable 'y' of type 'double' can be declared 'const' [misc-const-correctness]
  754 |     double y = sin(dlon) * cos(lat2_rad);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:754:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  754 |     double y = sin(dlon) * cos(lat2_rad);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:755:5: warning: variable 'x' of type 'double' can be declared 'const' [misc-const-correctness]
  755 |     double x = cos(lat1_rad) * sin(lat2_rad) - sin(lat1_rad) * cos(lat2_rad) * cos(dlon);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:755:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  755 |     double x = cos(lat1_rad) * sin(lat2_rad) - sin(lat1_rad) * cos(lat2_rad) * cos(dlon);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:757:5: warning: variable 'bearing' of type 'double' can be declared 'const' [misc-const-correctness]
  757 |     double bearing = atan2(y, x) * 180.0 / M_PI;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:757:36: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  757 |     double bearing = atan2(y, x) * 180.0 / M_PI;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:758:27: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  758 |     return fmod(bearing + 360.0, 360.0); // Normalize to 0-360
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:758:34: warning: 360.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  758 |     return fmod(bearing + 360.0, 360.0); // Normalize to 0-360
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:761:26: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  761 | bool FGCom_AmateurRadio::validateGridLocator(const std::string& grid) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:761:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  761 | bool FGCom_AmateurRadio::validateGridLocator(const std::string& grid) {
      | ~~~~                     ^
      | auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:762:46: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  762 |     if (grid.length() < 4 || grid.length() > 8 || grid.length() % 2 != 0) {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:13: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:47: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:767:64: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  767 |     if (grid[0] < 'A' || grid[0] > 'R' || grid[1] < 'A' || grid[1] > 'R') {
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:13: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:30: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:47: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:772:64: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  772 |     if (grid[2] < '0' || grid[2] > '9' || grid[3] < '0' || grid[3] > '9') {
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:777:26: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  777 |     if (grid.length() >= 6) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:17: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:52: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:68: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:778:69: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  778 |         if (grid[4] < 'A' || grid[4] > 'X' || grid[5] < 'A' || grid[5] > 'X') {
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:784:26: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  784 |     if (grid.length() >= 8) {
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:17: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:18: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:34: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:35: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:52: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:68: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:1236:7: note: resolves to this declaration
 1236 |       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.cpp:785:69: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  785 |         if (grid[6] < '0' || grid[6] > '9' || grid[7] < '0' || grid[7] > '9') {
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_AMATEUR_RADIO_H
      |         ^~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AMATEUR_RADIO_H
   19 | #define FGCOM_AMATEUR_RADIO_H
      |         ~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AMATEUR_RADIO_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: warning: accessing fields in struct 'fgcom_band_segment' is inefficient due to padding; only needs 176 bytes but is using 184 bytes [altera-struct-pack-align]
   30 | struct fgcom_band_segment {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_band_segment'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: warning: accessing fields in struct 'fgcom_band_segment' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   30 | struct fgcom_band_segment {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:30:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_band_segment' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:31:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     std::string band;           // Amateur radio band designation (e.g., "160m", "80m", "40m", "20m", "15m", "10m", "6m", "2m", "70cm")
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:32:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     std::string mode;           // Operating mode (e.g., "CW", "SSB", "Digital", "EME", "MS") - must match CSV exactly
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:33:11: warning: member variable 'start_freq' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:34:11: warning: member variable 'end_freq' has public visibility [misc-non-private-member-variables-in-classes]
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:35:9: warning: member variable 'itu_region' has public visibility [misc-non-private-member-variables-in-classes]
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:36:17: warning: member variable 'countries' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:37:17: warning: member variable 'license_class' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:38:11: warning: member variable 'power_limit' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:39:17: warning: member variable 'notes' has public visibility [misc-non-private-member-variables-in-classes]
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:41:5: warning: 'fgcom_band_segment' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   41 |     fgcom_band_segment() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:44:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   31 |     std::string band;           // Amateur radio band designation (e.g., "160m", "80m", "40m", "20m", "15m", "10m", "6m", "2m", "70cm")
      |                     
      |                     {""}
   32 |     std::string mode;           // Operating mode (e.g., "CW", "SSB", "Digital", "EME", "MS") - must match CSV exactly
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:44:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   44 |         band = "";              // Empty string indicates no band assigned
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:45:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   32 |     std::string mode;           // Operating mode (e.g., "CW", "SSB", "Digital", "EME", "MS") - must match CSV exactly
      |                     
      |                     {""}
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:45:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   45 |         mode = "";              // Empty string indicates no mode assigned
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:46:9: warning: 'start_freq' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   33 |     float start_freq;           // Start frequency in kHz (e.g., 1810.0 for 160m CW) - CRITICAL: Must be < end_freq
      |                     
      |                     {0.0}
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:47:9: warning: 'end_freq' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   34 |     float end_freq;             // End frequency in kHz (e.g., 1838.0 for 160m CW) - CRITICAL: Must be > start_freq
      |                   
      |                   {0.0}
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:48:9: warning: 'itu_region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   35 |     int itu_region;             // ITU Region (1=Europe/Africa, 2=Americas, 3=Asia-Pacific) - CRITICAL: Must be 1, 2, or 3
      |                   
      |                   {1}
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:49:9: warning: 'countries' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   36 |     std::string countries;      // Countries/regions for this allocation (e.g., "UK", "USA", "Germany") - used for country-specific validation
      |                          
      |                          {""}
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:49:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   49 |         countries = "";          // Empty string indicates no country assigned
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:50:9: warning: 'license_class' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   37 |     std::string license_class;  // License class required (e.g., "Full", "Intermediate", "Foundation", "Extra", "Advanced", "General") - determines access rights
      |                              
      |                              {""}
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
   50 |         license_class = "";     // Empty string indicates no license class assigned
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:50:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |         license_class = "";     // Empty string indicates no license class assigned
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:51:9: warning: 'power_limit' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   38 |     float power_limit;          // Power limit in Watts (e.g., 1000.0, 400.0, 1500.0) - CRITICAL: Must be positive, used for power validation
      |                      
      |                      {400.0}
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
   50 |         license_class = "";     // Empty string indicates no license class assigned
   51 |         power_limit = 400.0;    // Default 400W power limit (common for intermediate licenses)
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:51:23: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |         power_limit = 400.0;    // Default 400W power limit (common for intermediate licenses)
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:52:9: warning: 'notes' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   39 |     std::string notes;          // Additional notes/restrictions (e.g., "CW only below 1840 kHz", "Limited to 5 channels") - provides context for restrictions
      |                      
      |                      {""}
   40 |     
   41 |     fgcom_band_segment() {
   42 |         // Initialize with safe default values to prevent undefined behavior
   43 |         // CRITICAL: These defaults must be valid to prevent validation errors
   44 |         band = "";              // Empty string indicates no band assigned
   45 |         mode = "";              // Empty string indicates no mode assigned
   46 |         start_freq = 0.0;       // Zero frequency indicates invalid allocation
   47 |         end_freq = 0.0;         // Zero frequency indicates invalid allocation
   48 |         itu_region = 1;         // Default to Region 1 (Europe/Africa) - most restrictive
   49 |         countries = "";          // Empty string indicates no country assigned
   50 |         license_class = "";     // Empty string indicates no license class assigned
   51 |         power_limit = 400.0;    // Default 400W power limit (common for intermediate licenses)
   52 |         notes = "";             // Empty string indicates no restrictions
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:52:15: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   52 |         notes = "";             // Empty string indicates no restrictions
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: warning: accessing fields in struct 'fgcom_band_characteristics' is inefficient due to padding; only needs 81 bytes but is using 88 bytes [altera-struct-pack-align]
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_band_characteristics'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: warning: accessing fields in struct 'fgcom_band_characteristics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   57 | struct fgcom_band_characteristics {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:57:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_band_characteristics' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:58:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string band;           // Band name
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:59:11: warning: member variable 'center_freq' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     float center_freq;          // Center frequency in kHz
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:60:11: warning: member variable 'wavelength' has public visibility [misc-non-private-member-variables-in-classes]
   60 |     float wavelength;           // Wavelength in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:61:17: warning: member variable 'propagation' has public visibility [misc-non-private-member-variables-in-classes]
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:62:11: warning: member variable 'max_range_km' has public visibility [misc-non-private-member-variables-in-classes]
   62 |     float max_range_km;         // Typical maximum range in km
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:63:11: warning: member variable 'day_night_factor' has public visibility [misc-non-private-member-variables-in-classes]
   63 |     float day_night_factor;     // Day/night propagation factor
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:64:10: warning: member variable 'dx_capable' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     bool dx_capable;            // DX (long distance) capable
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:66:5: warning: 'fgcom_band_characteristics' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   66 |     fgcom_band_characteristics() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:67:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |     std::string band;           // Band name
      |                     
      |                     {""}
   59 |     float center_freq;          // Center frequency in kHz
   60 |     float wavelength;           // Wavelength in meters
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:67:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:68:9: warning: 'center_freq' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   59 |     float center_freq;          // Center frequency in kHz
      |                      
      |                      {0.0}
   60 |     float wavelength;           // Wavelength in meters
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:69:9: warning: 'wavelength' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   60 |     float wavelength;           // Wavelength in meters
      |                     
      |                     {0.0}
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:70:9: warning: 'propagation' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   61 |     std::string propagation;    // "Ground wave", "Sky wave", "Line of sight"
      |                            
      |                            {""}
   62 |     float max_range_km;         // Typical maximum range in km
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:70:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |         propagation = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:71:9: warning: 'max_range_km' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   62 |     float max_range_km;         // Typical maximum range in km
      |                       
      |                       {0.0}
   63 |     float day_night_factor;     // Day/night propagation factor
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
   71 |         max_range_km = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:72:9: warning: 'day_night_factor' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   63 |     float day_night_factor;     // Day/night propagation factor
      |                           
      |                           {1.0}
   64 |     bool dx_capable;            // DX (long distance) capable
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
   71 |         max_range_km = 0.0;
   72 |         day_night_factor = 1.0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:73:9: warning: 'dx_capable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   64 |     bool dx_capable;            // DX (long distance) capable
      |                    
      |                    {false}
   65 |     
   66 |     fgcom_band_characteristics() {
   67 |         band = "";
   68 |         center_freq = 0.0;
   69 |         wavelength = 0.0;
   70 |         propagation = "";
   71 |         max_range_km = 0.0;
   72 |         day_night_factor = 1.0;
   73 |         dx_capable = false;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: warning: accessing fields in struct 'fgcom_itu_region' is inefficient due to padding; only needs 52 bytes but is using 56 bytes [altera-struct-pack-align]
   78 | struct fgcom_itu_region {
      |        ^
   79 |     int region;                 // 1, 2, or 3
   80 |     std::string name;           // Region name
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
   86 |         name = "";
   87 |         min_lat = max_lat = min_lon = max_lon = 0.0;
   88 |     }
   89 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_itu_region'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: warning: accessing fields in struct 'fgcom_itu_region' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   78 | struct fgcom_itu_region {
      |        ^
   79 |     int region;                 // 1, 2, or 3
   80 |     std::string name;           // Region name
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
   86 |         name = "";
   87 |         min_lat = max_lat = min_lon = max_lon = 0.0;
   88 |     }
   89 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:78:8: note: use "__attribute__((aligned(64)))" to align struct 'fgcom_itu_region' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:79:9: warning: member variable 'region' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     int region;                 // 1, 2, or 3
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:80:17: warning: member variable 'name' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     std::string name;           // Region name
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:81:11: warning: member variable 'min_lat' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     float min_lat, max_lat;     // Latitude bounds
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:81:20: warning: member variable 'max_lat' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     float min_lat, max_lat;     // Latitude bounds
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:82:11: warning: member variable 'min_lon' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     float min_lon, max_lon;     // Longitude bounds
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:82:20: warning: member variable 'max_lon' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     float min_lon, max_lon;     // Longitude bounds
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:84:5: warning: 'fgcom_itu_region' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   84 |     fgcom_itu_region() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:85:9: warning: 'region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   79 |     int region;                 // 1, 2, or 3
      |               
      |               {1}
   80 |     std::string name;           // Region name
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:86:9: warning: 'name' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   80 |     std::string name;           // Region name
      |                     
      |                     {""}
   81 |     float min_lat, max_lat;     // Latitude bounds
   82 |     float min_lon, max_lon;     // Longitude bounds
   83 |     
   84 |     fgcom_itu_region() {
   85 |         region = 1;
   86 |         name = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:86:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |         name = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: warning: accessing fields in struct 'fgcom_grid_locator' is inefficient due to padding; only needs 49 bytes but is using 56 bytes [altera-struct-pack-align]
   92 | struct fgcom_grid_locator {
      |        ^
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
   94 |     double lat, lon;           // Calculated latitude/longitude
   95 |     bool valid;                // Whether the grid locator is valid
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
   99 |         lat = lon = 0.0;
  100 |         valid = false;
  101 |     }
  102 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_grid_locator'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: warning: accessing fields in struct 'fgcom_grid_locator' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   92 | struct fgcom_grid_locator {
      |        ^
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
   94 |     double lat, lon;           // Calculated latitude/longitude
   95 |     bool valid;                // Whether the grid locator is valid
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
   99 |         lat = lon = 0.0;
  100 |         valid = false;
  101 |     }
  102 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:92:8: note: use "__attribute__((aligned(64)))" to align struct 'fgcom_grid_locator' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:93:17: warning: member variable 'grid' has public visibility [misc-non-private-member-variables-in-classes]
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:94:12: warning: member variable 'lat' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     double lat, lon;           // Calculated latitude/longitude
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:94:17: warning: member variable 'lon' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     double lat, lon;           // Calculated latitude/longitude
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:95:10: warning: member variable 'valid' has public visibility [misc-non-private-member-variables-in-classes]
   95 |     bool valid;                // Whether the grid locator is valid
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:97:5: warning: 'fgcom_grid_locator' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   97 |     fgcom_grid_locator() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:98:9: warning: 'grid' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   93 |     std::string grid;           // Full grid locator (e.g., "FN31pr")
      |                     
      |                     {""}
   94 |     double lat, lon;           // Calculated latitude/longitude
   95 |     bool valid;                // Whether the grid locator is valid
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:98:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   98 |         grid = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:100:9: warning: 'valid' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   95 |     bool valid;                // Whether the grid locator is valid
      |               
      |               {false}
   96 |     
   97 |     fgcom_grid_locator() {
   98 |         grid = "";
   99 |         lat = lon = 0.0;
  100 |         valid = false;
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: warning: accessing fields in struct 'fgcom_frequency_validation' is inefficient due to padding; only needs 101 bytes but is using 112 bytes [altera-struct-pack-align]
  105 | struct fgcom_frequency_validation {
      |        ^
  106 |     bool valid;                // Whether frequency is valid
  107 |     std::string band;          // Band name if valid
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
  117 |         channel_spacing = 0.0;
  118 |     }
  119 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_frequency_validation'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: warning: accessing fields in struct 'fgcom_frequency_validation' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  105 | struct fgcom_frequency_validation {
      |        ^
  106 |     bool valid;                // Whether frequency is valid
  107 |     std::string band;          // Band name if valid
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
  117 |         channel_spacing = 0.0;
  118 |     }
  119 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:105:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_frequency_validation' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:106:10: warning: member variable 'valid' has public visibility [misc-non-private-member-variables-in-classes]
  106 |     bool valid;                // Whether frequency is valid
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:107:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
  107 |     std::string band;          // Band name if valid
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:108:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
  108 |     std::string mode;          // Mode if valid
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:109:17: warning: member variable 'error_message' has public visibility [misc-non-private-member-variables-in-classes]
  109 |     std::string error_message; // Error message if invalid
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:110:11: warning: member variable 'channel_spacing' has public visibility [misc-non-private-member-variables-in-classes]
  110 |     float channel_spacing;     // Required channel spacing in Hz
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:112:5: warning: 'fgcom_frequency_validation' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  112 |     fgcom_frequency_validation() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:113:9: warning: 'valid' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  106 |     bool valid;                // Whether frequency is valid
      |               
      |               {false}
  107 |     std::string band;          // Band name if valid
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:114:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  107 |     std::string band;          // Band name if valid
      |                     
      |                     {""}
  108 |     std::string mode;          // Mode if valid
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:114:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:115:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  108 |     std::string mode;          // Mode if valid
      |                     
      |                     {""}
  109 |     std::string error_message; // Error message if invalid
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:115:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |         mode = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:116:9: warning: 'error_message' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  109 |     std::string error_message; // Error message if invalid
      |                              
      |                              {""}
  110 |     float channel_spacing;     // Required channel spacing in Hz
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:116:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  116 |         error_message = "";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:117:9: warning: 'channel_spacing' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  110 |     float channel_spacing;     // Required channel spacing in Hz
      |                          
      |                          {0.0}
  111 |     
  112 |     fgcom_frequency_validation() {
  113 |         valid = false;
  114 |         band = "";
  115 |         mode = "";
  116 |         error_message = "";
  117 |         channel_spacing = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:134:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     static bool initialize();
      |            ~~~~ ^           
      |            auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:140:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     static bool loadBandSegments(const std::string& csv_file);
      |            ~~~~ ^                                            
      |            auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:147:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     static int detectITURegion(double lat, double lon);
      |            ~~~ ^                                      
      |            auto                                        -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:153:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 |     static bool validateAmateurFrequency(const std::string& frequency, const std::string& mode, int itu_region);
      |            ~~~~ ^                                                                                              
      |            auto                                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:156:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     static fgcom_frequency_validation validateFrequencyDetailed(const std::string& frequency, const std::string& mode, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                                               
      |            auto                                                                                                                        -> fgcom_frequency_validation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:159:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     static bool checkBandCompliance(float frequency_khz, const std::string& mode, int itu_region);
      |            ~~~~ ^                                                                                
      |            auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:162:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  162 |     static bool enforceModeSeparation(float frequency_khz, const std::string& mode, int itu_region);
      |            ~~~~ ^                                                                                  
      |            auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:165:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     static bool checkRegionalRestrictions(float frequency_khz, int itu_region);
      |            ~~~~ ^                                                             
      |            auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:168:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  168 |     static float getPowerLimit(float frequency_khz, int itu_region, const std::string& mode);
      |            ~~~~~ ^                                                                          
      |            auto                                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:171:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     static fgcom_band_segment getBandSegmentInfo(float frequency_khz, int itu_region, const std::string& mode);
      |            ~~~~~~~~~~~~~~~~~~ ^                                                                               
      |            auto                                                                                                -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:174:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     static bool validatePowerLevel(float frequency_khz, int itu_region, const std::string& mode, float power_watts);
      |            ~~~~ ^                                                                                                  
      |            auto                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:177:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  177 |     static std::string getRequiredLicenseClass(float frequency_khz, int itu_region, const std::string& mode);
      |            ~~~~~~~~~~~ ^                                                                                    
      |            auto                                                                                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:180:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  180 |     static std::vector<fgcom_band_segment> getCountryAllocations(const std::string& country, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                
      |            auto                                                                                              -> std::vector<fgcom_band_segment>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:183:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     static bool canLicenseClassOperate(float frequency_khz, int itu_region, const std::string& mode, const std::string& license_class);
      |            ~~~~ ^                                                                                                                     
      |            auto                                                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:186:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     static std::vector<std::string> getAvailableBands(const std::string& license_class, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                  
      |            auto                                                                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:189:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  189 |     static bool validateChannelSpacing(float frequency_khz, const std::string& mode);
      |            ~~~~ ^                                                                   
      |            auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:192:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     static fgcom_band_segment getBandSegment(float frequency_khz, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~ ^                                                  
      |            auto                                                                   -> fgcom_band_segment
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:195:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  195 |     static fgcom_band_characteristics getBandCharacteristics(const std::string& band);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                              
      |            auto                                                                       -> fgcom_band_characteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:198:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 |     static std::string frequencyToBand(float frequency_khz);
      |            ~~~~~~~~~~~ ^                                   
      |            auto                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:201:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     static bool isAmateurFrequency(float frequency_khz, int itu_region);
      |            ~~~~ ^                                                      
      |            auto                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:204:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     static std::vector<std::string> getAvailableBands(int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                
      |            auto                                                       -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:207:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  207 |     static std::vector<std::string> getAvailableModes(const std::string& band, int itu_region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                         
      |            auto                                                                                -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:210:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  210 |     static fgcom_grid_locator parseGridLocator(const std::string& grid_string);
      |            ~~~~~~~~~~~~~~~~~~ ^                                               
      |            auto                                                                -> fgcom_grid_locator
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:211:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  211 |     static std::string gridToLatLon(const std::string& grid, double& lat, double& lon);
      |            ~~~~~~~~~~~ ^                                                              
      |            auto                                                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:212:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  212 |     static std::string latLonToGrid(double lat, double lon, int precision = 4);
      |            ~~~~~~~~~~~ ^                                                      
      |            auto                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:212:61: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  212 |     static std::string latLonToGrid(double lat, double lon, int precision = 4);
      |                                                             ^             ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:213:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 |     static double gridDistance(const std::string& grid1, const std::string& grid2);
      |            ~~~~~~ ^                                                               
      |            auto                                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:214:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     static double gridBearing(const std::string& grid1, const std::string& grid2);
      |            ~~~~~~ ^                                                              
      |            auto                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:215:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     static bool validateGridLocator(const std::string& grid);
      |            ~~~~ ^                                           
      |            auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_ANTENNA_GROUND_SYSTEM_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_GROUND_SYSTEM_H
   19 | #define FGCOM_ANTENNA_GROUND_SYSTEM_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_GROUND_SYSTEM_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include <complex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:24:1: warning: system include complex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   24 | #include <complex>
      | ^~~~~~~~~~~~~~~~~~
   25 | #include "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: warning: accessing fields in struct 'GroundSystem' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: use "__attribute__((aligned(128)))" to align struct 'GroundSystem' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:29:17: warning: member variable 'type' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     std::string type;               // "star_network", "copper_plate", "fuselage", "vehicle"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:30:11: warning: member variable 'conductivity' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     float conductivity;             // Ground conductivity in S/m
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:31:11: warning: member variable 'area_coverage' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     float area_coverage;           // Coverage area in square meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:32:10: warning: member variable 'is_saltwater' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     bool is_saltwater;             // Saltwater ground effects
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:33:11: warning: member variable 'depth' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     float depth;                   // Ground system depth in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:34:9: warning: member variable 'radial_count' has public visibility [misc-non-private-member-variables-in-classes]
   34 |     int radial_count;              // Number of radials (for star networks)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:35:11: warning: member variable 'radial_length' has public visibility [misc-non-private-member-variables-in-classes]
   35 |     float radial_length;           // Radial length in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:36:11: warning: member variable 'ground_resistance' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     float ground_resistance;       // Ground resistance in ohms
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:37:17: warning: member variable 'material' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     std::string material;          // Ground system material
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:38:17: warning: member variable 'notes' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     std::string notes;             // Additional information
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:40:5: warning: 'GroundSystem' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   40 |     GroundSystem() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:41:9: warning: 'type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   29 |     std::string type;               // "star_network", "copper_plate", "fuselage", "vehicle"
      |                     
      |                     {"average"}
   30 |     float conductivity;             // Ground conductivity in S/m
   31 |     float area_coverage;           // Coverage area in square meters
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:41:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   41 |         type = "average";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:42:9: warning: 'conductivity' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   30 |     float conductivity;             // Ground conductivity in S/m
      |                       
      |                       {0.01}
   31 |     float area_coverage;           // Coverage area in square meters
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:42:24: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         conductivity = 0.01;       // Average soil conductivity
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:43:9: warning: 'area_coverage' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   31 |     float area_coverage;           // Coverage area in square meters
      |                        
      |                        {100.0}
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
      |         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:44:9: warning: 'is_saltwater' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   32 |     bool is_saltwater;             // Saltwater ground effects
      |                      
      |                      {false}
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:45:9: warning: 'depth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   33 |     float depth;                   // Ground system depth in meters
      |                
      |                {0.1}
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
      |         ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:45:17: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   45 |         depth = 0.1;               // 10cm burial depth
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:46:9: warning: 'radial_count' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   34 |     int radial_count;              // Number of radials (for star networks)
      |                     
      |                     {16}
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:46:24: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   46 |         radial_count = 16;         // 16 radials default
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:47:9: warning: 'radial_length' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   35 |     float radial_length;           // Radial length in meters
      |                        
      |                        {10.0}
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:47:25: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   47 |         radial_length = 10.0;      // 10m radial length
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:48:9: warning: 'ground_resistance' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   36 |     float ground_resistance;       // Ground resistance in ohms
      |                            
      |                            {1.0}
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:49:9: warning: 'material' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   37 |     std::string material;          // Ground system material
      |                         
      |                         {"copper"}
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
   49 |         material = "copper";
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:49:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   49 |         material = "copper";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:50:9: warning: 'notes' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   38 |     std::string notes;             // Additional information
      |                      
      |                      {""}
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
   49 |         material = "copper";
   50 |         notes = "";
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:50:15: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |         notes = "";
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: warning: accessing fields in struct 'AntennaPattern' is inefficient due to padding; only needs 213 bytes but is using 224 bytes [altera-struct-pack-align]
   55 | struct AntennaPattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: warning: accessing fields in struct 'AntennaPattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   55 | struct AntennaPattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPattern' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:56:17: warning: member variable 'antenna_name' has public visibility [misc-non-private-member-variables-in-classes]
   56 |     std::string antenna_name;      // Antenna model name
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:57:11: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   57 |     float frequency_mhz;           // Frequency in MHz
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:58:17: warning: member variable 'polarization' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:59:24: warning: member variable 'theta_angles' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:60:24: warning: member variable 'phi_angles' has public visibility [misc-non-private-member-variables-in-classes]
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:61:24: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:62:24: warning: member variable 'phase_deg' has public visibility [misc-non-private-member-variables-in-classes]
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:63:38: warning: member variable 'e_theta' has public visibility [misc-non-private-member-variables-in-classes]
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:64:38: warning: member variable 'e_phi' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:65:10: warning: member variable 'is_loaded' has public visibility [misc-non-private-member-variables-in-classes]
   65 |     bool is_loaded;                // Whether pattern data is loaded
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:67:5: warning: 'AntennaPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   67 |     AntennaPattern() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:68:9: warning: 'antenna_name' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |     std::string antenna_name;      // Antenna model name
      |                             
      |                             {""}
   57 |     float frequency_mhz;           // Frequency in MHz
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:68:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |         antenna_name = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:69:9: warning: 'frequency_mhz' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   57 |     float frequency_mhz;           // Frequency in MHz
      |                        
      |                        {0.0}
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:70:9: warning: 'polarization' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
      |                             
      |                             {"vertical"}
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
   70 |         polarization = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:70:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |         polarization = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:71:9: warning: 'is_loaded' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   65 |     bool is_loaded;                // Whether pattern data is loaded
      |                   
      |                   {false}
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
   70 |         polarization = "vertical";
   71 |         is_loaded = false;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: warning: accessing fields in struct 'AntennaSystem' is inefficient due to padding; only needs 440 bytes but is using 448 bytes [altera-struct-pack-align]
   76 | struct AntennaSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaSystem'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: warning: accessing fields in struct 'AntennaSystem' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   76 | struct AntennaSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaSystem' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:77:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   77 |     std::string antenna_type;      // "dipole", "yagi", "vertical", "whip", "custom"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:78:11: warning: member variable 'height_meters' has public visibility [misc-non-private-member-variables-in-classes]
   78 |     float height_meters;           // Antenna height above ground
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:79:11: warning: member variable 'azimuth_deg' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     float azimuth_deg;             // Azimuth orientation
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:80:11: warning: member variable 'elevation_deg' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     float elevation_deg;           // Elevation angle
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:81:18: warning: member variable 'ground_system' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     GroundSystem ground_system;    // Ground system characteristics
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:82:20: warning: member variable 'pattern' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:83:17: warning: member variable 'pattern_file' has public visibility [misc-non-private-member-variables-in-classes]
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:84:11: warning: member variable 'efficiency' has public visibility [misc-non-private-member-variables-in-classes]
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:85:11: warning: member variable 'swr' has public visibility [misc-non-private-member-variables-in-classes]
   85 |     float swr;                     // Standing wave ratio
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:86:11: warning: member variable 'feedpoint_impedance' has public visibility [misc-non-private-member-variables-in-classes]
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:88:5: warning: 'AntennaSystem' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   88 |     AntennaSystem() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:89:9: warning: 'antenna_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   77 |     std::string antenna_type;      // "dipole", "yagi", "vertical", "whip", "custom"
      |                             
      |                             {"vertical"}
   78 |     float height_meters;           // Antenna height above ground
   79 |     float azimuth_deg;             // Azimuth orientation
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:89:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         antenna_type = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:90:9: warning: 'height_meters' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   78 |     float height_meters;           // Antenna height above ground
      |                        
      |                        {10.0}
   79 |     float azimuth_deg;             // Azimuth orientation
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:90:25: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   90 |         height_meters = 10.0;      // 10m default height
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:91:9: warning: 'azimuth_deg' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   79 |     float azimuth_deg;             // Azimuth orientation
      |                      
      |                      {0.0}
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:92:9: warning: 'elevation_deg' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   80 |     float elevation_deg;           // Elevation angle
      |                        
      |                        {0.0}
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:93:9: warning: 'efficiency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
      |                     
      |                     {0.8}
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:93:22: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   93 |         efficiency = 0.8;          // 80% efficiency
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:94:9: warning: 'swr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   85 |     float swr;                     // Standing wave ratio
      |              
      |              {1.5}
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
   94 |         swr = 1.5;                 // 1.5:1 SWR
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:94:15: warning: 1.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   94 |         swr = 1.5;                 // 1.5:1 SWR
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:95:9: warning: 'feedpoint_impedance' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
      |                              
      |                              {50.0}
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
   94 |         swr = 1.5;                 // 1.5:1 SWR
   95 |         feedpoint_impedance = 50.0; // 50 ohm impedance
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:95:31: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |         feedpoint_impedance = 50.0; // 50 ohm impedance
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:100:12: warning: enum 'GroundPerformance' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  100 | enum class GroundPerformance {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:117:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     static bool initialize();
      |            ~~~~ ^           
      |            auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:121:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     static GroundSystem createGroundSystem(const std::string& type, float conductivity, float area);
      |            ~~~~~~~~~~~~ ^                                                                          
      |            auto                                                                                     -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:122:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     static GroundSystem getPredefinedGroundSystem(const std::string& name);
      |            ~~~~~~~~~~~~ ^                                                 
      |            auto                                                            -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:123:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     static std::vector<std::string> getAvailableGroundSystems();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |            auto                                                 -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:126:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     static GroundPerformance evaluateGroundPerformance(const GroundSystem& ground);
      |            ~~~~~~~~~~~~~~~~~ ^                                                    
      |            auto                                                                    -> GroundPerformance
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:127:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  127 |     static float calculateGroundLoss(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                   
      |            auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:128:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     static float calculateGroundResistance(const GroundSystem& ground);
      |            ~~~~~ ^                                                    
      |            auto                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:129:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     static float calculateGroundConductivity(const GroundSystem& ground);
      |            ~~~~~ ^                                                      
      |            auto                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:132:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 |     static GroundSystem createStarNetwork(int radials, float length, float conductivity);
      |            ~~~~~~~~~~~~ ^                                                               
      |            auto                                                                          -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:133:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  133 |     static float calculateStarNetworkResistance(int radials, float length, float conductivity);
      |            ~~~~~ ^                                                                            
      |            auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:134:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     static float calculateOptimalRadialLength(float frequency_mhz);
      |            ~~~~~ ^                                                
      |            auto                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:137:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     static GroundSystem createCopperPlate(float area, float conductivity, bool saltwater);
      |            ~~~~~~~~~~~~ ^                                                                
      |            auto                                                                           -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:138:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 |     static float calculatePlateResistance(float area, float conductivity);
      |            ~~~~~ ^                                                       
      |            auto                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:139:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 |     static float calculatePlateCapacitance(float area, float depth);
      |            ~~~~~ ^                                                 
      |            auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:142:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     static GroundSystem createFuselageGround(const std::string& vehicle_type, float area);
      |            ~~~~~~~~~~~~ ^                                                                
      |            auto                                                                           -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:143:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     static GroundSystem createAircraftFuselage(const std::string& aircraft_type);
      |            ~~~~~~~~~~~~ ^                                                       
      |            auto                                                                  -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:144:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     static GroundSystem createMaritimeVessel(const std::string& vessel_type, float hull_area);
      |            ~~~~~~~~~~~~ ^                                                                    
      |            auto                                                                               -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:145:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |     static float calculateFuselageResistance(float area, const std::string& material);
      |            ~~~~~ ^                                                                   
      |            auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:148:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     static bool loadAntennaPattern(const std::string& pattern_file);
      |            ~~~~ ^                                                  
      |            auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:149:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     static bool load4NEC2Pattern(const std::string& filename);
      |            ~~~~ ^                                            
      |            auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:150:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  150 |     static AntennaPattern getAntennaPattern(const std::string& antenna_name, float frequency_mhz);
      |            ~~~~~~~~~~~~~~ ^                                                                      
      |            auto                                                                                   -> AntennaPattern
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:151:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     static std::vector<std::string> getAvailablePatterns();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |            auto                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:154:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |     static float getAntennaGain(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                    
      |            auto                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:155:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     static float getAntennaGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                   
      |            auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:156:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     static float calculateAntennaEfficiency(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                            
      |            auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:159:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     static float calculateDipoleGroundEffect(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                             
      |            auto                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:160:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     static float calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                              
      |            auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:161:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     static float calculateVerticalDipoleGroundEffect(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                                   
      |            auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:164:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  164 |     static float calculateYagiGroundEffect(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                           
      |            auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:165:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     static float calculateYagiHeightEffect(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                  
      |            auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:166:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     static float calculateYagiPatternDistortion(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                       
      |            auto                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:169:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  169 |     static float calculateWhipEfficiency(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                         
      |            auto                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:170:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     static float calculateWhipGroundEffect(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                         
      |            auto                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:171:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     static float calculateWhipImpedance(float length_meters, float frequency_mhz);
      |            ~~~~~ ^                                                               
      |            auto                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:174:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     static float calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz);
      |            ~~~~~ ^                                                                                                             
      |            auto                                                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:175:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     static float calculateSystemLoss(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                     
      |            auto                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:176:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     static float calculateEffectiveRadiatedPower(float tx_power_watts, const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz);
      |            ~~~~~ ^                                                                                                                                               
      |            auto                                                                                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:181:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     static bool parse4NEC2File(const std::string& filename, AntennaPattern& pattern);
      |            ~~~~ ^                                                                   
      |            auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:182:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     static float interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                        
      |            auto                                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:183:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     static float calculateGroundReflectionCoefficient(const GroundSystem& ground, float frequency_mhz, float angle_deg);
      |            ~~~~~ ^                                                                                                     
      |            auto                                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:184:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     static float calculateGroundWaveAttenuation(const GroundSystem& ground, float frequency_mhz, float distance_km);
      |            ~~~~~ ^                                                                                                 
      |            auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:195:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  195 |     static bool loadConfig(const std::string& config_file);
      |            ~~~~ ^                                         
      |            auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:196:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |     static bool saveConfig(const std::string& config_file);
      |            ~~~~ ^                                         
      |            auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |            ~~~~~~~~~~~ ^                                                                            
      |            auto                                                                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:63: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |                                                               ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:98: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:201:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     static AntennaSystem getDefaultAntennaSystem();
      |            ~~~~~~~~~~~~~ ^                        
      |            auto                                    -> AntennaSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:202:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  202 |     static GroundSystem getDefaultGroundSystem();
      |            ~~~~~~~~~~~~ ^                       
      |            auto                                  -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:203:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     static std::string getPatternDirectory();
      |            ~~~~~~~~~~~ ^                    
      |            auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:204:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     static bool is4NEC2Enabled();
      |            ~~~~ ^               
      |            auto                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:205:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 |     static bool isGPUAccelerationEnabled();
      |            ~~~~ ^                         
      |            auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:208:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     static bool isMUFEnabled();
      |            ~~~~ ^             
      |            auto                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:209:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  209 |     static bool isSolarEffectsEnabled();
      |            ~~~~ ^                      
      |            auto                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:210:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  210 |     static bool isSeasonalVariationsEnabled();
      |            ~~~~ ^                            
      |            auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:211:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  211 |     static bool isPropagationCacheEnabled();
      |            ~~~~ ^                          
      |            auto                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:214:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     static bool isAmateurRadioEnabled();
      |            ~~~~ ^                      
      |            auto                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:215:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     static int getITURegion();
      |            ~~~ ^             
      |            auto               -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:216:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     static bool isStrictBandCompliance();
      |            ~~~~ ^                       
      |            auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:217:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  217 |     static float getDefaultPower();
      |            ~~~~~ ^                
      |            auto                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:218:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  218 |     static float getAntennaHeight();
      |            ~~~~~ ^                 
      |            auto                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:221:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     static std::string getNOAAAPIURL();
      |            ~~~~~~~~~~~ ^              
      |            auto                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:222:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 |     static int getUpdateInterval();
      |            ~~~ ^                  
      |            auto                    -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:223:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  223 |     static std::string getFallbackDataPath();
      |            ~~~~~~~~~~~ ^                    
      |            auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:227:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     static std::string trimString(const std::string& str);
      |            ~~~~~~~~~~~ ^                                 
      |            auto                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:228:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     static std::vector<std::string> splitString(const std::string& str, char delimiter);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                  
      |            auto                                                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_ANTENNA_PATTERN_MAPPING_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_PATTERN_MAPPING_H
    2 | #define FGCOM_ANTENNA_PATTERN_MAPPING_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_PATTERN_MAPPING_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:6:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:8:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    9 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:9:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   10 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: warning: accessing fields in struct 'AntennaPatternInfo' is inefficient due to padding; only needs 150 bytes but is using 160 bytes [altera-struct-pack-align]
   18 | struct AntennaPatternInfo {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPatternInfo'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: warning: accessing fields in struct 'AntennaPatternInfo' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   18 | struct AntennaPatternInfo {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPatternInfo' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:19:17: warning: member variable 'antenna_name' has public visibility [misc-non-private-member-variables-in-classes]
   19 |     std::string antenna_name;      // Internal antenna identifier
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:20:17: warning: member variable 'pattern_file' has public visibility [misc-non-private-member-variables-in-classes]
   20 |     std::string pattern_file;     // Path to pattern file
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:21:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   21 |     double frequency_mhz;         // Operating frequency
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:22:17: warning: member variable 'vehicle_type' has public visibility [misc-non-private-member-variables-in-classes]
   22 |     std::string vehicle_type;     // Vehicle type (aircraft, ground, maritime)
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:23:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   23 |     std::string antenna_type;     // Antenna type (blade, whip, yagi, etc.)
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:24:10: warning: member variable 'is_loaded' has public visibility [misc-non-private-member-variables-in-classes]
   24 |     bool is_loaded;               // Whether pattern is currently loaded
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:27:9: warning: member variable 'roll_deg' has public visibility [misc-non-private-member-variables-in-classes]
   27 |     int roll_deg;                 // Roll angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:28:9: warning: member variable 'pitch_deg' has public visibility [misc-non-private-member-variables-in-classes]
   28 |     int pitch_deg;                // Pitch angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:29:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     int altitude_m;               // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:30:10: warning: member variable 'is_3d_pattern' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     bool is_3d_pattern;           // Whether this is a 3D attitude pattern
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:32:5: warning: 'AntennaPatternInfo' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   32 |     AntennaPatternInfo() : frequency_mhz(0.0), is_loaded(false), 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:5: warning: 'AntennaPatternInfo' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:24: warning: 2 adjacent parameters of 'AntennaPatternInfo' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:43: note: the first parameter in the range is 'name'
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:68: note: the last parameter in the range is 'file'
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:24: warning: pass by value and use std::move [modernize-pass-by-value]
    6 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~
      |                        std::string 
    7 |                       double freq, const std::string& vtype, const std::string& atype)
    8 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                            
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:49: warning: pass by value and use std::move [modernize-pass-by-value]
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                 ^~~~~~~~~~~~~~~~~~
      |                                                 std::string 
   35 |                       double freq, const std::string& vtype, const std::string& atype)
   36 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                                                
      |                                            std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:35:36: warning: pass by value and use std::move [modernize-pass-by-value]
   35 |                       double freq, const std::string& vtype, const std::string& atype)
      |                                    ^~~~~~~~~~~~~~~~~~
      |                                    std::string 
   36 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   37 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                             
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:35:62: warning: pass by value and use std::move [modernize-pass-by-value]
   35 |                       double freq, const std::string& vtype, const std::string& atype)
      |                                                              ^~~~~~~~~~~~~~~~~~
      |                                                              std::string 
   36 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   37 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                                                  
      |                                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:5: warning: 'AntennaPatternInfo' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:24: warning: 2 adjacent parameters of 'AntennaPatternInfo' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:43: note: the first parameter in the range is 'name'
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:68: note: the last parameter in the range is 'file'
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:24: warning: pass by value and use std::move [modernize-pass-by-value]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~
      |                        std::string 
   40 |                       double freq, const std::string& vtype, const std::string& atype,
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                            
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:49: warning: pass by value and use std::move [modernize-pass-by-value]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                 ^~~~~~~~~~~~~~~~~~
      |                                                 std::string 
   40 |                       double freq, const std::string& vtype, const std::string& atype,
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                                                
      |                                            std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:40:36: warning: pass by value and use std::move [modernize-pass-by-value]
   40 |                       double freq, const std::string& vtype, const std::string& atype,
      |                                    ^~~~~~~~~~~~~~~~~~
      |                                    std::string 
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   43 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                             
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:40:62: warning: pass by value and use std::move [modernize-pass-by-value]
   40 |                       double freq, const std::string& vtype, const std::string& atype,
      |                                                              ^~~~~~~~~~~~~~~~~~
      |                                                              std::string 
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   43 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                                                  
      |                                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:41:23: warning: 3 adjacent parameters of 'AntennaPatternInfo' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   41 |                       int roll, int pitch, int alt)
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:41:27: note: the first parameter in the range is 'roll'
   41 |                       int roll, int pitch, int alt)
      |                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:41:48: note: the last parameter in the range is 'alt'
   41 |                       int roll, int pitch, int alt)
      |                                                ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:47:7: warning: class 'FGCom_AntennaPatternMapping' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   47 | class FGCom_AntennaPatternMapping {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:62:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   62 |     AntennaPatternInfo getVHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                   
      |     auto                                                                                    -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:65:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   65 |     AntennaPatternInfo getUHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                   
      |     auto                                                                                    -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:68:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |     std::vector<AntennaPatternInfo> getAvailableVHFPatterns(const std::string& vehicle_type);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                                     -> std::vector<AntennaPatternInfo>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:69:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     std::vector<AntennaPatternInfo> getAvailableUHFPatterns(const std::string& vehicle_type);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                                     -> std::vector<AntennaPatternInfo>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:72:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   72 |     bool hasVHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~ ^                                                                   
      |     auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:73:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     bool hasUHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~ ^                                                                   
      |     auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:76:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   76 |     bool loadPatternFromFile(const std::string& pattern_file, AntennaPatternInfo& info);
      |     ~~~~ ^                                                                             
      |     auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:79:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   79 |     AntennaPatternInfo getClosestVHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                          
      |     auto                                                                                           -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:80:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     AntennaPatternInfo getClosestUHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                          
      |     auto                                                                                           -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:83:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   83 |     AntennaPatternInfo get3DAttitudePattern(const std::string& vehicle_type, double frequency_mhz, 
      |     ~~~~~~~~~~~~~~~~~~ ^
      |     auto
   84 |                                            int roll_deg, int pitch_deg, int altitude_m);
      |                                                                                        
      |                                                                                         -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:85:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     std::vector<AntennaPatternInfo> getAvailable3DPatterns(const std::string& vehicle_type, 
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   86 |                                                           double frequency_mhz, int altitude_m);
      |                                                                                                
      |                                                                                                 -> std::vector<AntennaPatternInfo>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:87:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 |     bool has3DAttitudePattern(const std::string& vehicle_type, double frequency_mhz, 
      |     ~~~~ ^
      |     auto
   88 |                              int roll_deg, int pitch_deg, int altitude_m);
      |                                                                          
      |                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:91:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |     std::string detectVehicleType(const std::string& vehicle_name);
      |     ~~~~~~~~~~~ ^                                                 
      |     auto                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:94:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     bool isVHFFrequency(double frequency_mhz);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:95:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   95 |     bool isUHFFrequency(double frequency_mhz);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:99:53: warning: variable 'g_antenna_pattern_mapping' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
   99 | extern std::unique_ptr<FGCom_AntennaPatternMapping> g_antenna_pattern_mapping;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:100:19: warning: variable 'g_antenna_mapping_mutex' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  100 | extern std::mutex g_antenna_mapping_mutex;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:101:26: warning: variable 'g_antenna_mapping_initialized' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  101 | extern std::atomic<bool> g_antenna_mapping_initialized;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:104:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 | FGCom_AntennaPatternMapping* getAntennaPatternMapping();
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                         
      | auto                                                    -> FGCom_AntennaPatternMapping*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:107:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 | AntennaPatternInfo getAntennaPattern(const std::string& vehicle_type, double frequency_mhz);
      | ~~~~~~~~~~~~~~~~~~ ^                                                                       
      | auto                                                                                        -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:108:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 | bool loadAntennaPattern(const std::string& vehicle_type, double frequency_mhz);
      | ~~~~ ^                                                                        
      | auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:8:9: warning: header guard does not follow preferred style [llvm-header-guard]
    8 | #ifndef FGCOM_ATMOSPHERIC_DUCTING_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ATMOSPHERIC_DUCTING_H
    9 | #define FGCOM_ATMOSPHERIC_DUCTING_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ATMOSPHERIC_DUCTING_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:11:1: warning: #includes are not sorted properly [llvm-include-order]
   11 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:11:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   12 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:12:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <map>
      | ^~~~~~~~~~~~~~
   13 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:13:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   14 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:14:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   15 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:17:8: warning: accessing fields in struct 'DuctingAtmosphericConditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   17 | struct DuctingAtmosphericConditions {
      |        ^
   18 |     float temperature_celsius;
   19 |     float humidity_percent;
   20 |     float pressure_hpa;
   21 |     float wind_speed_ms;
   22 |     float wind_direction_deg;
   23 |     float altitude_m;
   24 |     std::chrono::system_clock::time_point timestamp;
   25 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:17:8: note: use "__attribute__((aligned(32)))" to align struct 'DuctingAtmosphericConditions' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:17:8: warning: constructor does not initialize these fields: temperature_celsius, humidity_percent, pressure_hpa, wind_speed_ms, wind_direction_deg, altitude_m [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   17 | struct DuctingAtmosphericConditions {
      |        ^
   18 |     float temperature_celsius;
      |                              
      |                              {}
   19 |     float humidity_percent;
      |                           
      |                           {}
   20 |     float pressure_hpa;
      |                       
      |                       {}
   21 |     float wind_speed_ms;
      |                        
      |                        {}
   22 |     float wind_direction_deg;
      |                             
      |                             {}
   23 |     float altitude_m;
      |                     
      |                     {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:28:8: warning: accessing fields in struct 'DuctingConditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   28 | struct DuctingConditions {
      |        ^
   29 |     bool ducting_present;
   30 |     float ducting_strength;  // 0.0 to 1.0
   31 |     float ducting_height_m;  // Height of ducting layer
   32 |     float ducting_thickness_m;  // Thickness of ducting layer
   33 |     float temperature_inversion_strength;  // Temperature gradient
   34 |     float humidity_gradient;  // Humidity gradient
   35 |     float wind_shear;  // Wind shear effect
   36 |     std::string ducting_type;  // "surface", "elevated", "multiple"
   37 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:28:8: note: use "__attribute__((aligned(64)))" to align struct 'DuctingConditions' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: warning: accessing fields in struct 'DuctingCalculationParams' is inefficient due to padding; only needs 27 bytes but is using 28 bytes [altera-struct-pack-align]
   40 | struct DuctingCalculationParams {
      |        ^
   41 |     float frequency_hz;
   42 |     float distance_km;
   43 |     float tx_altitude_m;
   44 |     float rx_altitude_m;
   45 |     float tx_power_watts;
   46 |     bool enable_temperature_inversion;
   47 |     bool enable_humidity_effects;
   48 |     bool enable_wind_shear;
   49 |     float minimum_ducting_strength;
   50 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'DuctingCalculationParams'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: warning: accessing fields in struct 'DuctingCalculationParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   40 | struct DuctingCalculationParams {
      |        ^
   41 |     float frequency_hz;
   42 |     float distance_km;
   43 |     float tx_altitude_m;
   44 |     float rx_altitude_m;
   45 |     float tx_power_watts;
   46 |     bool enable_temperature_inversion;
   47 |     bool enable_humidity_effects;
   48 |     bool enable_wind_shear;
   49 |     float minimum_ducting_strength;
   50 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: note: use "__attribute__((aligned(32)))" to align struct 'DuctingCalculationParams' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:53:7: warning: class 'FGCom_AtmosphericDucting' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   53 | class FGCom_AtmosphericDucting {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:61:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   61 |     float calculateTemperatureInversion(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                      
      |     auto                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:62:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   62 |     float calculateHumidityGradient(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:63:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   63 |     float calculateWindShear(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                           
      |     auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:64:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   64 |     float calculateDuctingHeight(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:65:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   65 |     float calculateDuctingThickness(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:68:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |     std::vector<DuctingAtmosphericConditions> generateAtmosphericProfile(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   69 |         double latitude, double longitude, double start_altitude, double end_altitude, int steps);
      |                                                                                                  
      |                                                                                                   -> std::vector<DuctingAtmosphericConditions>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:72:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   72 |     float calculateDuctingStrength(const DuctingConditions& conditions, const DuctingCalculationParams& params);
      |     ~~~~~ ^                                                                                                    
      |     auto                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:75:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   75 |     float calculateSignalEnhancement(const DuctingConditions& conditions, float frequency_hz, float distance_km);
      |     ~~~~~ ^                                                                                                     
      |     auto                                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:82:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |     DuctingConditions analyzeDuctingConditions(double latitude, double longitude, 
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
   83 |                                              double start_altitude, double end_altitude);
      |                                                                                         
      |                                                                                          -> DuctingConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:86:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   86 |     float calculateDuctingEffects(const DuctingConditions& conditions, 
      |     ~~~~~ ^
      |     auto
   87 |                                  const DuctingCalculationParams& params);
      |                                                                         
      |                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:91:47: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   91 |     void setWeatherCacheEnabled(bool enabled, float timeout_seconds = 300.0f);
      |                                               ^                     ~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:91:71: warning: 300.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   91 |     void setWeatherCacheEnabled(bool enabled, float timeout_seconds = 300.0f);
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:91:71: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:94:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     bool predictDuctingConditions(double latitude, double longitude, 
      |     ~~~~ ^
      |     auto
   95 |                                   const std::chrono::system_clock::time_point& time);
      |                                                                                     
      |                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:98:12: warning: accessing fields in struct 'DuctingStatistics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   98 |     struct DuctingStatistics {
      |            ^
   99 |         int total_analyses;
  100 |         int ducting_detected;
  101 |         float average_ducting_strength;
  102 |         float average_ducting_height;
  103 |         std::chrono::system_clock::time_point last_analysis;
  104 |     };
      |      
      |       __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:98:12: note: use "__attribute__((aligned(32)))" to align struct 'DuctingStatistics' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:106:5: warning: function 'getStatistics' should be marked [[nodiscard]] [modernize-use-nodiscard]
  106 |     DuctingStatistics getStatistics() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:106:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 |     DuctingStatistics getStatistics() const;
      |     ~~~~~~~~~~~~~~~~~ ^                    
      |     auto                                    -> DuctingStatistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:125:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     float calculateRefractionIndex(float temperature_celsius, float humidity_percent, float pressure_hpa);
      |     ~~~~~ ^                                                                                              
      |     auto                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:128:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     float calculateTemperatureGradient(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                     
      |     auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:131:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     float calculateHumidityGradient(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:134:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     float calculateWindShear(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                           
      |     auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:137:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     float calculateDuctingProbability(const DuctingAtmosphericConditions& surface, 
      |     ~~~~~ ^
      |     auto
  138 |                                     const DuctingAtmosphericConditions& elevated);
      |                                                                                  
      |                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:141:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     float calculateSignalEnhancement(float ducting_strength, float frequency_hz, float distance_km);
      |     ~~~~~ ^                                                                                        
      |     auto                                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:144:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     bool validateDuctingAtmosphericConditions(const DuctingAtmosphericConditions& conditions);
      |     ~~~~ ^                                                                                   
      |     auto                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:145:1: warning: namespace 'AtmosphericDuctingUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  145 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:123:11: note: namespace 'AtmosphericDuctingUtils' starts here
  123 | namespace AtmosphericDuctingUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:17:9: warning: header guard does not follow preferred style [llvm-header-guard]
   17 | #ifndef FGCOM_AUDIO_H
      |         ^~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AUDIO_H
   18 | #define FGCOM_AUDIO_H
      |         ~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AUDIO_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:19:1: warning: #includes are not sorted properly [llvm-include-order]
   19 | #include "mumble/PluginComponents_v_1_0_x.h"
      | ^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "frequency_offset.h"
   20 | #include "frequency_offset.h"
      |          ~~~~~~~~~~~~~~~~~~~~
      |          "mumble/PluginComponents_v_1_0_x.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:8:9: warning: header guard does not follow preferred style [llvm-header-guard]
    8 | #ifndef FGCOM_ENHANCED_MULTIPATH_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ENHANCED_MULTIPATH_H
    9 | #define FGCOM_ENHANCED_MULTIPATH_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ENHANCED_MULTIPATH_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:11:1: warning: #includes are not sorted properly [llvm-include-order]
   11 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:11:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   12 | #include <complex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:12:1: warning: system include complex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <complex>
      | ^~~~~~~~~~~~~~~~~~
   13 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:13:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <map>
      | ^~~~~~~~~~~~~~
   14 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:14:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   15 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:15:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   15 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   16 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:18:8: warning: accessing fields in struct 'MultipathComponent' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   18 | struct MultipathComponent {
      |        ^
   19 |     float amplitude;
   20 |     float phase;
   21 |     float delay_ns;
   22 |     float doppler_shift_hz;
   23 |     float angle_of_arrival_deg;
   24 |     float angle_of_departure_deg;
   25 |     std::string component_type; // "direct", "reflected", "diffracted", "scattered"
   26 |     float power_db;
   27 |     float coherence_time_ms;
   28 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:18:8: note: use "__attribute__((aligned(64)))" to align struct 'MultipathComponent' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: warning: accessing fields in struct 'MultipathChannel' is inefficient due to padding; only needs 78 bytes but is using 80 bytes [altera-struct-pack-align]
   31 | struct MultipathChannel {
      |        ^
   32 |     std::vector<MultipathComponent> components;
   33 |     float total_power_db;
   34 |     float rms_delay_spread_ns;
   35 |     float coherence_bandwidth_hz;
   36 |     float coherence_time_ms;
   37 |     float doppler_spread_hz;
   38 |     bool is_wideband;
   39 |     bool is_fast_fading;
   40 |     std::string channel_type; // "rural", "urban", "indoor", "highway"
   41 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'MultipathChannel'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: warning: accessing fields in struct 'MultipathChannel' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   31 | struct MultipathChannel {
      |        ^
   32 |     std::vector<MultipathComponent> components;
   33 |     float total_power_db;
   34 |     float rms_delay_spread_ns;
   35 |     float coherence_bandwidth_hz;
   36 |     float coherence_time_ms;
   37 |     float doppler_spread_hz;
   38 |     bool is_wideband;
   39 |     bool is_fast_fading;
   40 |     std::string channel_type; // "rural", "urban", "indoor", "highway"
   41 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: note: use "__attribute__((aligned(128)))" to align struct 'MultipathChannel' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:44:8: warning: accessing fields in struct 'MultipathCalculationParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   44 | struct MultipathCalculationParams {
      |        ^
   45 |     float frequency_hz;
   46 |     float bandwidth_hz;
   47 |     float distance_km;
   48 |     float tx_altitude_m;
   49 |     float rx_altitude_m;
   50 |     float tx_power_watts;
   51 |     bool enable_ground_reflection;
   52 |     bool enable_building_scattering;
   53 |     bool enable_vegetation_effects;
   54 |     bool enable_vehicle_scattering;
   55 |     float terrain_roughness_m;
   56 |     float building_density;
   57 |     float vegetation_density;
   58 |     float vehicle_density;
   59 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:44:8: note: use "__attribute__((aligned(64)))" to align struct 'MultipathCalculationParams' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:62:8: warning: accessing fields in struct 'FadingStatistics' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   62 | struct FadingStatistics {
      |        ^
   63 |     float mean_power_db;
   64 |     float variance_db;
   65 |     float skewness;
   66 |     float kurtosis;
   67 |     float rms_delay_spread_ns;
   68 |     float coherence_bandwidth_hz;
   69 |     float coherence_time_ms;
   70 |     float doppler_spread_hz;
   71 |     int num_components;
   72 |     float k_factor_db; // Ricean K-factor
   73 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:62:8: note: use "__attribute__((aligned(64)))" to align struct 'FadingStatistics' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:76:7: warning: class 'FGCom_EnhancedMultipath' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   76 | class FGCom_EnhancedMultipath {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:84:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     std::vector<MultipathComponent> generateMultipathComponents(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                    
      |     auto                                                                                                  -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:85:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     std::string generateChannelId(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~ ^                                                          
      |     auto                                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:86:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   86 |     MultipathComponent generateDirectPath(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                           
      |     auto                                                                            -> MultipathComponent
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:87:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 |     MultipathComponent generateGroundReflection(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                 
      |     auto                                                                                  -> MultipathComponent
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:88:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     std::vector<MultipathComponent> generateBuildingScattering(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                   
      |     auto                                                                                                 -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:89:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   89 |     std::vector<MultipathComponent> generateVegetationScattering(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                     
      |     auto                                                                                                   -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:90:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   90 |     std::vector<MultipathComponent> generateVehicleScattering(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                  
      |     auto                                                                                                -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:93:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     MultipathChannel createMultipathChannel(const std::vector<MultipathComponent>& components);
      |     ~~~~~~~~~~~~~~~~ ^                                                                        
      |     auto                                                                                       -> MultipathChannel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:98:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   98 |     std::complex<float> calculateReceivedSignal(const MultipathChannel& channel, float time_ms);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                                      
      |     auto                                                                                        -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:99:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     float calculateSignalPower(const MultipathChannel& channel);
      |     ~~~~~ ^                                                    
      |     auto                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:100:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  100 |     float calculateSNR(const MultipathChannel& channel, float noise_power_db);
      |     ~~~~~ ^                                                                  
      |     auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:103:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |     float calculatePathLoss(const MultipathCalculationParams& params);
      |     ~~~~~ ^                                                          
      |     auto                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:104:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 |     float calculateShadowing(const MultipathCalculationParams& params);
      |     ~~~~~ ^                                                           
      |     auto                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:105:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |     float calculateFastFading(const MultipathChannel& channel, float time_ms);
      |     ~~~~~ ^                                                                  
      |     auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:112:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     MultipathChannel analyzeMultipathChannel(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~ ^                                                                
      |     auto                                                                               -> MultipathChannel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:115:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     float calculateSignalQuality(const MultipathChannel& channel, float time_ms);
      |     ~~~~~ ^                                                                     
      |     auto                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:116:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  116 |     float calculateBitErrorRate(const MultipathChannel& channel, float snr_db);
      |     ~~~~~ ^                                                                   
      |     auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:117:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     float calculateThroughput(const MultipathChannel& channel, float snr_db);
      |     ~~~~~ ^                                                                 
      |     auto                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:120:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     FadingStatistics calculateFadingStatistics(const MultipathChannel& channel);
      |     ~~~~~~~~~~~~~~~~ ^                                                         
      |     auto                                                                        -> FadingStatistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:121:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     bool isFastFading(const MultipathChannel& channel);
      |     ~~~~ ^                                            
      |     auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:122:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     bool isWidebandFading(const MultipathChannel& channel);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:125:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     MultipathChannel predictChannelEvolution(const MultipathChannel& current_channel, 
      |     ~~~~~~~~~~~~~~~~ ^
      |     auto
  126 |                                            float time_advance_ms);
      |                                                                  
      |                                                                   -> MultipathChannel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:129:40: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  129 |     void setCacheEnabled(bool enabled, float timeout_seconds = 60.0f);
      |                                        ^                     ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:129:64: warning: 60.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  129 |     void setCacheEnabled(bool enabled, float timeout_seconds = 60.0f);
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:129:64: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:140:12: warning: accessing fields in struct 'MultipathStatistics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
  140 |     struct MultipathStatistics {
      |            ^
  141 |         int total_analyses;
  142 |         int fast_fading_detected;
  143 |         int wideband_fading_detected;
  144 |         float average_components;
  145 |         float average_delay_spread;
  146 |         std::chrono::system_clock::time_point last_analysis;
  147 |     };
      |      
      |       __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:140:12: note: use "__attribute__((aligned(32)))" to align struct 'MultipathStatistics' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:149:5: warning: function 'getStatistics' should be marked [[nodiscard]] [modernize-use-nodiscard]
  149 |     MultipathStatistics getStatistics() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:149:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     MultipathStatistics getStatistics() const;
      |     ~~~~~~~~~~~~~~~~~~~ ^                    
      |     auto                                      -> MultipathStatistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:163:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 |     float calculatePathLoss(float frequency_hz, float distance_km, float tx_altitude_m, float rx_altitude_m);
      |     ~~~~~ ^                                                                                                 
      |     auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:166:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     float calculateGroundReflectionCoefficient(float frequency_hz, float grazing_angle_deg, 
      |     ~~~~~ ^
      |     auto
  167 |                                              float ground_permittivity, float ground_conductivity);
      |                                                                                                   
      |                                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:170:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     float calculateBuildingScattering(float frequency_hz, float building_density, float distance_km);
      |     ~~~~~ ^                                                                                         
      |     auto                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:173:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     float calculateVegetationAttenuation(float frequency_hz, float vegetation_density, float path_length_km);
      |     ~~~~~ ^                                                                                                 
      |     auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:176:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     float calculateVehicleScattering(float frequency_hz, float vehicle_density, float distance_km);
      |     ~~~~~ ^                                                                                       
      |     auto                                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:179:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  179 |     float calculateDopplerShift(float frequency_hz, float relative_velocity_ms, float angle_deg);
      |     ~~~~~ ^                                                                                     
      |     auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:182:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     float calculateDelaySpread(const std::vector<MultipathComponent>& components);
      |     ~~~~~ ^                                                                      
      |     auto                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:185:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     float calculateCoherenceBandwidth(float rms_delay_spread_ns);
      |     ~~~~~ ^                                                     
      |     auto                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:188:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 |     float calculateCoherenceTime(float doppler_spread_hz);
      |     ~~~~~ ^                                              
      |     auto                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:191:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     float generateRandomPhase();
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:194:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |     float generateRayleighAmplitude(float mean_power);
      |     ~~~~~ ^                                          
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:197:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  197 |     float generateRiceanAmplitude(float mean_power, float k_factor_db);
      |     ~~~~~ ^                                                           
      |     auto                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:200:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  200 |     bool validateMultipathParameters(const MultipathCalculationParams& params);
      |     ~~~~ ^                                                                    
      |     auto                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:201:1: warning: namespace 'EnhancedMultipathUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  201 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:161:11: note: namespace 'EnhancedMultipathUtils' starts here
  161 | namespace EnhancedMultipathUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_FREQUENCY_OFFSET_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_FREQUENCY_OFFSET_H
    2 | #define FGCOM_FREQUENCY_OFFSET_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_FREQUENCY_OFFSET_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <complex>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:4:1: warning: system include complex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <complex>
      | ^~~~~~~~~~~~~~~~~~
    5 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:5:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:7:1: warning: system include cmath not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    8 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:8:1: warning: system include algorithm not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:10:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   11 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:11:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   12 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: warning: accessing fields in struct 'FrequencyOffsetConfig' is inefficient due to padding; only needs 32 bytes but is using 36 bytes [altera-struct-pack-align]
   14 | struct FrequencyOffsetConfig {
      |        ^
   15 |     bool enable_frequency_offset = true;
   16 |     bool enable_donald_duck_effect = true;
   17 |     bool enable_doppler_shift = true;
   18 |     bool enable_heterodyne_mixing = true;
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
   22 |     bool enable_analog_artifacts = true;  // Enable analog radio artifacts
   23 |     bool enable_digital_artifacts = false; // Enable digital radio artifacts
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
   25 |     int fft_size = 1024;                  // FFT size for processing
   26 |     bool enable_real_time_processing = true;
   27 |     bool enable_batch_processing = false;
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
   29 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FrequencyOffsetConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: warning: accessing fields in struct 'FrequencyOffsetConfig' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   14 | struct FrequencyOffsetConfig {
      |        ^
   15 |     bool enable_frequency_offset = true;
   16 |     bool enable_donald_duck_effect = true;
   17 |     bool enable_doppler_shift = true;
   18 |     bool enable_heterodyne_mixing = true;
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
   22 |     bool enable_analog_artifacts = true;  // Enable analog radio artifacts
   23 |     bool enable_digital_artifacts = false; // Enable digital radio artifacts
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
   25 |     int fft_size = 1024;                  // FFT size for processing
   26 |     bool enable_real_time_processing = true;
   27 |     bool enable_batch_processing = false;
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
   29 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: note: use "__attribute__((aligned(32)))" to align struct 'FrequencyOffsetConfig' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:19:27: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:19:27: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
      |                           ^     ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:20:28: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:20:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
      |                            ^     ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:21:37: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:21:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
      |                                     ^  ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:24:25: warning: 48000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:24:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
      |                         ^      ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:25:20: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   25 |     int fft_size = 1024;                  // FFT size for processing
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:28:35: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:28:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
      |                                   ^   ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: warning: accessing fields in struct 'FrequencyOffsetStats' is inefficient due to padding; only needs 69 bytes but is using 80 bytes [altera-struct-pack-align]
   32 | struct FrequencyOffsetStats {
      |        ^
   33 |     float current_offset_hz;
   34 |     float average_offset_hz;
   35 |     float peak_offset_hz;
   36 |     float offset_variance;
   37 |     int total_offsets_applied;
   38 |     float processing_time_ms;
   39 |     float cpu_usage_percent;
   40 |     std::chrono::system_clock::time_point last_update;
   41 |     std::vector<float> offset_history;    // Recent offset history
   42 |     bool is_processing_active;
   43 |     int dropped_samples;
   44 |     int processed_samples;
   45 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FrequencyOffsetStats'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: warning: accessing fields in struct 'FrequencyOffsetStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   32 | struct FrequencyOffsetStats {
      |        ^
   33 |     float current_offset_hz;
   34 |     float average_offset_hz;
   35 |     float peak_offset_hz;
   36 |     float offset_variance;
   37 |     int total_offsets_applied;
   38 |     float processing_time_ms;
   39 |     float cpu_usage_percent;
   40 |     std::chrono::system_clock::time_point last_update;
   41 |     std::vector<float> offset_history;    // Recent offset history
   42 |     bool is_processing_active;
   43 |     int dropped_samples;
   44 |     int processed_samples;
   45 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: note: use "__attribute__((aligned(128)))" to align struct 'FrequencyOffsetStats' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: warning: accessing fields in struct 'DopplerShiftParams' is inefficient due to padding; only needs 17 bytes but is using 20 bytes [altera-struct-pack-align]
   48 | struct DopplerShiftParams {
      |        ^
   49 |     float relative_velocity_mps;          // Relative velocity in m/s
   50 |     float carrier_frequency_hz;           // Carrier frequency in Hz
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
   52 |     bool enable_relativistic_correction = true;
   53 |     float atmospheric_refraction_factor = 1.0003f;
   54 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'DopplerShiftParams'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: warning: accessing fields in struct 'DopplerShiftParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   48 | struct DopplerShiftParams {
      |        ^
   49 |     float relative_velocity_mps;          // Relative velocity in m/s
   50 |     float carrier_frequency_hz;           // Carrier frequency in Hz
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
   52 |     bool enable_relativistic_correction = true;
   53 |     float atmospheric_refraction_factor = 1.0003f;
   54 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: note: use "__attribute__((aligned(32)))" to align struct 'DopplerShiftParams' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:51:32: warning: 299792458.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:51:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
      |                                ^          ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:53:43: warning: 1.0003f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   53 |     float atmospheric_refraction_factor = 1.0003f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:53:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   53 |     float atmospheric_refraction_factor = 1.0003f;
      |                                           ^     ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: warning: accessing fields in struct 'HeterodyneMixingParams' is inefficient due to padding; only needs 18 bytes but is using 24 bytes [altera-struct-pack-align]
   57 | struct HeterodyneMixingParams {
      |        ^
   58 |     float local_oscillator_freq_hz;       // Local oscillator frequency
   59 |     float intermediate_freq_hz;           // Intermediate frequency
   60 |     bool enable_image_rejection = true;
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
   62 |     bool enable_phase_noise = true;
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
   64 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'HeterodyneMixingParams'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: warning: accessing fields in struct 'HeterodyneMixingParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   57 | struct HeterodyneMixingParams {
      |        ^
   58 |     float local_oscillator_freq_hz;       // Local oscillator frequency
   59 |     float intermediate_freq_hz;           // Intermediate frequency
   60 |     bool enable_image_rejection = true;
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
   62 |     bool enable_phase_noise = true;
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
   64 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: note: use "__attribute__((aligned(32)))" to align struct 'HeterodyneMixingParams' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:61:32: warning: 40.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:61:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
      |                                ^   ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:63:32: warning: 80.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:63:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
      |                                ^   ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:101:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  101 |     static FGCom_FrequencyOffsetProcessor& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                                          -> FGCom_FrequencyOffsetProcessor&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:105:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |     bool applyFrequencyOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                         
      |     auto                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:106:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 |     bool applyDonaldDuckEffect(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:107:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 |     bool applyDopplerShift(float* audio_buffer, size_t samples, const DopplerShiftParams& params);
      |     ~~~~ ^                                                                                       
      |     auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:108:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 |     bool applyHeterodyneMixing(float* audio_buffer, size_t samples, const HeterodyneMixingParams& params);
      |     ~~~~ ^                                                                                               
      |     auto                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:111:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  111 |     bool applyComplexExponentialOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                                  
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:112:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     bool applyAnalyticSignalOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:113:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     bool applyFFTBasedOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                        
      |     auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:114:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     bool applyRealTimeOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                        
      |     auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:117:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     std::complex<float>* createAnalyticSignal(const float* audio_buffer, size_t samples);
      |     ~~~~~~~~~~~~~~~~~~~~ ^                                                              
      |     auto                                                                                 -> std::complex<float>*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:120:61: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  120 |     void applyWindowFunction(float* buffer, size_t samples, const std::string& window_type = "hann");
      |                                                             ^                              ~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:120:94: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  120 |     void applyWindowFunction(float* buffer, size_t samples, const std::string& window_type = "hann");
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:123:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     bool initializeFFT(int fft_size);
      |     ~~~~ ^                          
      |     auto                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:124:58: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  124 |     void performFFT(std::complex<float>* data, int size, bool inverse = false);
      |                                                          ^            ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:130:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  130 |     FrequencyOffsetConfig getConfig() const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                    -> FrequencyOffsetConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:131:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     bool loadConfigFromFile(const std::string& config_file);
      |     ~~~~ ^                                                 
      |     auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:132:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 |     bool saveConfigToFile(const std::string& config_file) const;
      |     ~~~~ ^                                                     
      |     auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:136:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  136 |     DopplerShiftParams getDopplerParams() const;
      |     ~~~~~~~~~~~~~~~~~~ ^                       
      |     auto                                        -> DopplerShiftParams
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:137:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     float calculateDopplerShift(const DopplerShiftParams& params);
      |     ~~~~~ ^                                                      
      |     auto                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:138:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 |     bool updateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:142:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     HeterodyneMixingParams getHeterodyneParams() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |     auto                                               -> HeterodyneMixingParams
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:143:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     bool applyImageRejection(std::complex<float>* signal, size_t samples, float rejection_db);
      |     ~~~~ ^                                                                                   
      |     auto                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:144:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     bool applyPhaseNoise(std::complex<float>* signal, size_t samples, float noise_db_hz);
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:147:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     bool startRealTimeProcessing();
      |     ~~~~ ^                        
      |     auto                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool stopRealTimeProcessing();
      |     ~~~~ ^                       
      |     auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:149:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     bool isRealTimeProcessingActive() const;
      |     ~~~~ ^                                 
      |     auto                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:151:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     float getCurrentOffset() const;
      |     ~~~~~ ^                       
      |     auto                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:152:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  152 |     bool updateOffsetSmoothly(float target_offset_hz);
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:155:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     FrequencyOffsetStats getStats() const;
      |     ~~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                  -> FrequencyOffsetStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:158:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  158 |     bool isProcessingActive() const;
      |     ~~~~ ^                         
      |     auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:159:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     float getProcessingLatency() const;
      |     ~~~~~ ^                           
      |     auto                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:160:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     float getCPUUsage() const;
      |     ~~~~~ ^                  
      |     auto                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:163:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 |     bool setSampleRate(float sample_rate);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:164:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  164 |     float getSampleRate() const;
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:165:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     bool setFFTSize(int fft_size);
      |     ~~~~ ^                       
      |     auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:166:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     int getFFTSize() const;
      |     ~~~ ^                 
      |     auto                   -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool optimizeForLatency();
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:168:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  168 |     bool optimizeForQuality();
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:171:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     bool validateOffset(float offset_hz) const;
      |     ~~~~ ^                                    
      |     auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:172:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  172 |     bool validateSampleRate(float sample_rate) const;
      |     ~~~~ ^                                          
      |     auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:173:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     bool validateFFTSize(int fft_size) const;
      |     ~~~~ ^                                  
      |     auto                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:174:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     std::string getLastError() const;
      |     ~~~~~~~~~~~ ^                   
      |     auto                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:197:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  197 |     float calculateHannWindow(int n, int N);
      |     ~~~~~ ^                                
      |     auto                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:197:42: warning: parameter name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  197 |     float calculateHannWindow(int n, int N);
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:198:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 |     float calculateHammingWindow(int n, int N);
      |     ~~~~~ ^                                   
      |     auto                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:198:45: warning: parameter name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  198 |     float calculateHammingWindow(int n, int N);
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:199:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  199 |     float calculateBlackmanWindow(int n, int N);
      |     ~~~~~ ^                                    
      |     auto                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:199:46: warning: parameter name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  199 |     float calculateBlackmanWindow(int n, int N);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:213:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 |     float hzToRadians(float frequency_hz, float sample_rate);
      |     ~~~~~ ^                                                 
      |     auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:214:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     float radiansToHz(float radians, float sample_rate);
      |     ~~~~~ ^                                            
      |     auto                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:215:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     float normalizeFrequency(float frequency_hz, float sample_rate);
      |     ~~~~~ ^                                                        
      |     auto                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:216:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     float denormalizeFrequency(float normalized_freq, float sample_rate);
      |     ~~~~~ ^                                                             
      |     auto                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:219:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     std::complex<float> createComplexExponential(float frequency_hz, float time, float sample_rate);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                                          
      |     auto                                                                                            -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:220:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     std::complex<float> createComplexExponential(float frequency_hz, float time);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                         -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:221:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     float getMagnitude(const std::complex<float>& complex_num);
      |     ~~~~~ ^                                                   
      |     auto                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:222:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 |     float getPhase(const std::complex<float>& complex_num);
      |     ~~~~~ ^                                               
      |     auto                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:223:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  223 |     std::complex<float> fromMagnitudePhase(float magnitude, float phase);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                               
      |     auto                                                                 -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:226:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  226 |     float calculateSNR(const float* signal, size_t samples);
      |     ~~~~~ ^                                                
      |     auto                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:227:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     float calculateTHD(const float* signal, size_t samples, float fundamental_freq, float sample_rate);
      |     ~~~~~ ^                                                                                           
      |     auto                                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:228:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     float calculateDynamicRange(const float* signal, size_t samples);
      |     ~~~~~ ^                                                         
      |     auto                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     bool detectClipping(const float* signal, size_t samples, float threshold = 0.95f);
      |     ~~~~ ^                                                                           
      |     auto                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:62: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  229 |     bool detectClipping(const float* signal, size_t samples, float threshold = 0.95f);
      |                                                              ^               ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:80: warning: 0.95f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  229 |     bool detectClipping(const float* signal, size_t samples, float threshold = 0.95f);
      |                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:80: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     float calculateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz, float speed_of_light_mps = 299792458.0f);
      |     ~~~~~ ^                                                                                                                      
      |     auto                                                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:90: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  232 |     float calculateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz, float speed_of_light_mps = 299792458.0f);
      |                                                                                          ^                        ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:117: warning: 299792458.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  232 |     float calculateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz, float speed_of_light_mps = 299792458.0f);
      |                                                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:117: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:233:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     float calculateRelativisticDopplerShift(float relative_velocity_mps, float carrier_frequency_hz);
      |     ~~~~~ ^                                                                                         
      |     auto                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:234:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  234 |     float calculateAtmosphericRefractionCorrection(float elevation_angle_deg, float frequency_hz);
      |     ~~~~~ ^                                                                                      
      |     auto                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:237:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  237 |     std::complex<float> createLocalOscillator(float frequency_hz, float time, float sample_rate);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                                       
      |     auto                                                                                         -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:239:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  239 |     float calculateImageRejection(float if_freq, float rf_freq, float lo_freq);
      |     ~~~~~ ^                                                                   
      |     auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:240:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  240 |     float calculatePhaseNoiseVariance(float phase_noise_db_hz, float bandwidth_hz);
      |     ~~~~~ ^                                                                       
      |     auto                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:243:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  243 |     float calculateSpectralCentroid(const float* signal, size_t samples, float sample_rate);
      |     ~~~~~ ^                                                                                
      |     auto                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  244 |     float calculateSpectralRolloff(const float* signal, size_t samples, float sample_rate, float rolloff_percent = 0.85f);
      |     ~~~~~ ^                                                                                                              
      |     auto                                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:92: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  244 |     float calculateSpectralRolloff(const float* signal, size_t samples, float sample_rate, float rolloff_percent = 0.85f);
      |                                                                                            ^                     ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:116: warning: 0.85f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     float calculateSpectralRolloff(const float* signal, size_t samples, float sample_rate, float rolloff_percent = 0.85f);
      |                                                                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:116: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:245:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  245 |     float calculateSpectralFlux(const float* signal, size_t samples, float sample_rate);
      |     ~~~~~ ^                                                                            
      |     auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:246:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 |     float calculateZeroCrossingRate(const float* signal, size_t samples);
      |     ~~~~~ ^                                                             
      |     auto                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:250:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  250 |     float calculateWindowGain(const float* window, int size);
      |     ~~~~~ ^                                                 
      |     auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:252:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  252 |     std::string getAvailableWindowTypes();
      |     ~~~~~~~~~~~ ^                        
      |     auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:253:1: warning: namespace 'FrequencyOffsetUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  253 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:211:11: note: namespace 'FrequencyOffsetUtils' starts here
  211 | namespace FrequencyOffsetUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:8:9: warning: header guard does not follow preferred style [llvm-header-guard]
    8 | #ifndef EXTERNAL_MUMBLE_PLUGINCOMPONENT_H_
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_MUMBLE_PLUGINCOMPONENTS_V_1_0_X_H
    9 | #define EXTERNAL_MUMBLE_PLUGINCOMPONENT_H_
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_MUMBLE_PLUGINCOMPONENTS_V_1_0_X_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:16:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h [llvmlibc-restrict-system-libc-headers]
   16 | #       include <string>
      | ^~~~~~~~~~~~~~~~~~~~~~~~
   17 | #endif
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:35:6: warning: enum 'Mumble_PluginFeature' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   35 | enum Mumble_PluginFeature {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:39:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
   39 |         MUMBLE_FEATURE_POSITIONAL = 1 << 0,
      |                                     ^ ~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:41:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
   41 |         MUMBLE_FEATURE_AUDIO = 1 << 1
      |                                ^ ~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:45:6: warning: enum 'Mumble_TalkingState' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   45 | enum Mumble_TalkingState {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:57:6: warning: enum 'Mumble_TransmissionMode' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   57 | enum Mumble_TransmissionMode { MUMBLE_TM_CONTINOUS, MUMBLE_TM_VOICE_ACTIVATION, MUMBLE_TM_PUSH_TO_TALK };
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:61:6: warning: enum 'Mumble_ErrorCode' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   61 | enum Mumble_ErrorCode {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:89:6: warning: enum 'Mumble_PositionalDataErrorCode' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   89 | enum Mumble_PositionalDataErrorCode {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:100:6: warning: enum 'Mumble_SettingsKey' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  100 | enum Mumble_SettingsKey {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:112:6: warning: enum 'Mumble_KeyCode' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int16_t' (2 bytes) as the base type to reduce its size [performance-enum-size]
  112 | enum Mumble_KeyCode {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:183:2: warning: 'MUMBLE_KC_I' is confusable with 'MUMBLE_KC_1' [misc-confusable-identifiers]
  183 |         MUMBLE_KC_I                 = 'I',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:159:2: note: other declaration found here
  159 |         MUMBLE_KC_1                 = '1',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:189:2: warning: 'MUMBLE_KC_O' is confusable with 'MUMBLE_KC_0' [misc-confusable-identifiers]
  189 |         MUMBLE_KC_O                 = 'O',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:158:2: note: other declaration found here
  158 |         MUMBLE_KC_0                 = '0',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:242:8: warning: accessing fields in struct 'MumbleVersion' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
  242 | struct MumbleVersion {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:242:8: note: use "__attribute__((aligned(16)))" to align struct 'MumbleVersion' to 16 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:243:10: warning: member variable 'major' has public visibility [misc-non-private-member-variables-in-classes]
  243 |         int32_t major;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:244:10: warning: member variable 'minor' has public visibility [misc-non-private-member-variables-in-classes]
  244 |         int32_t minor;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:245:10: warning: member variable 'patch' has public visibility [misc-non-private-member-variables-in-classes]
  245 |         int32_t patch;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:247:2: warning: overloading 'operator<' is disallowed [fuchsia-overloaded-operator]
  247 |         bool operator<(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:247:2: warning: 'operator<' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  247 |         bool operator<(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:247:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |         bool operator<(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:258:2: warning: overloading 'operator>' is disallowed [fuchsia-overloaded-operator]
  258 |         bool operator>(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:258:2: warning: 'operator>' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  258 |         bool operator>(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:258:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 |         bool operator>(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:269:2: warning: overloading 'operator>=' is disallowed [fuchsia-overloaded-operator]
  269 |         bool operator>=(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:269:2: warning: 'operator>=' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  269 |         bool operator>=(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:269:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  269 |         bool operator>=(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:280:2: warning: overloading 'operator<=' is disallowed [fuchsia-overloaded-operator]
  280 |         bool operator<=(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:280:2: warning: 'operator<=' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  280 |         bool operator<=(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:280:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  280 |         bool operator<=(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:291:2: warning: overloading 'operator==' is disallowed [fuchsia-overloaded-operator]
  291 |         bool operator==(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:291:2: warning: 'operator==' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  291 |         bool operator==(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:291:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  291 |         bool operator==(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:295:2: warning: overloading 'operator!=' is disallowed [fuchsia-overloaded-operator]
  295 |         bool operator!=(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:295:2: warning: 'operator!=' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  295 |         bool operator!=(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:295:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  295 |         bool operator!=(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:299:2: warning: 'operator basic_string' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
  299 |         operator std::string() const {
      |         ^
      |         explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:299:2: warning: 'operator basic_string' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  299 |         operator std::string() const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:27: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:29: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:57: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:59: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:76: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:78: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:7: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:26: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:28: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:321:1: warning: 'mumble_errorMessage' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  321 | inline const char *mumble_errorMessage(int16_t errorCode) {
      | ^
      | LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:321:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 | inline const char *mumble_errorMessage(int16_t errorCode) {
      |        ~~~~~~~~~~~~^
      |        auto                                               -> const char *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: warning: accessing fields in struct 'MumbleStringWrapper' is inefficient due to padding; only needs 17 bytes but is using 24 bytes [altera-struct-pack-align]
  377 | struct MumbleStringWrapper {
      |        ^
  378 |         /// The pointer to the actual String data
  379 |         const char *data;
  380 |         /// The size of the pointed String data
  381 |         size_t size;
  382 |         /// Whether the wrapped String needs to be released
  383 |         /// after its usage. Instances for which this would be
  384 |         /// false: Static Strings, String literals
  385 |         bool needsReleasing;
  386 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'MumbleStringWrapper'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: warning: accessing fields in struct 'MumbleStringWrapper' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
  377 | struct MumbleStringWrapper {
      |        ^
  378 |         /// The pointer to the actual String data
  379 |         const char *data;
  380 |         /// The size of the pointed String data
  381 |         size_t size;
  382 |         /// Whether the wrapped String needs to be released
  383 |         /// after its usage. Instances for which this would be
  384 |         /// false: Static Strings, String literals
  385 |         bool needsReleasing;
  386 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: note: use "__attribute__((aligned(32)))" to align struct 'MumbleStringWrapper' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:389:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  389 | typedef enum Mumble_TalkingState mumble_talking_state_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_talking_state_t = enum Mumble_TalkingState
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:391:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  391 | typedef enum Mumble_TransmissionMode mumble_transmission_mode_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_transmission_mode_t = enum Mumble_TransmissionMode
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:393:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  393 | typedef struct MumbleVersion mumble_version_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_version_t = struct MumbleVersion
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:395:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  395 | typedef int32_t mumble_connection_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_connection_t = int32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:397:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  397 | typedef uint32_t mumble_userid_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_userid_t = uint32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:399:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  399 | typedef int32_t mumble_channelid_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_channelid_t = int32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:401:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  401 | typedef enum Mumble_ErrorCode mumble_error_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_error_t = enum Mumble_ErrorCode
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:403:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  403 | typedef uint32_t mumble_plugin_id_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_plugin_id_t = uint32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:405:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  405 | typedef enum Mumble_SettingsKey mumble_settings_key_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_settings_key_t = enum Mumble_SettingsKey
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:407:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  407 | typedef enum Mumble_KeyCode mumble_keycode_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_keycode_t = enum Mumble_KeyCode
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_NON_AMATEUR_HF_H
      |         ^~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_NON_AMATEUR_HF_H
   19 | #define FGCOM_NON_AMATEUR_HF_H
      |         ~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_NON_AMATEUR_HF_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:27:8: warning: accessing fields in struct 'fgcom_aviation_hf_band' is inefficient due to padding; only needs 140 bytes but is using 144 bytes [altera-struct-pack-align]
   27 | struct fgcom_aviation_hf_band {
      |        ^
   28 |     std::string name;           // Band name (e.g., "2.85MHz", "3.4MHz", "8.815MHz")
   29 |     float start_freq;           // Start frequency in kHz
   30 |     float end_freq;             // End frequency in kHz
   31 |     std::string modulation;     // "USB" for aviation HF
   32 |     float filter_bandwidth;     // 3kHz for USB
   33 |     std::string service_type;   // "AERONAUTICAL"
   34 |     std::string notes;          // Additional information
   35 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:27:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_aviation_hf_band'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:27:8: warning: accessing fields in struct 'fgcom_aviation_hf_band' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   27 | struct fgcom_aviation_hf_band {
      |        ^
   28 |     std::string name;           // Band name (e.g., "2.85MHz", "3.4MHz", "8.815MHz")
   29 |     float start_freq;           // Start frequency in kHz
   30 |     float end_freq;             // End frequency in kHz
   31 |     std::string modulation;     // "USB" for aviation HF
   32 |     float filter_bandwidth;     // 3kHz for USB
   33 |     std::string service_type;   // "AERONAUTICAL"
   34 |     std::string notes;          // Additional information
   35 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:27:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_aviation_hf_band' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:38:8: warning: accessing fields in struct 'fgcom_mwara_frequency' is inefficient due to padding; only needs 100 bytes but is using 104 bytes [altera-struct-pack-align]
   38 | struct fgcom_mwara_frequency {
      |        ^
   39 |     std::string region;         // Region (NAT, CAR, SAT, SAM, EUR, etc.)
   40 |     float frequency;            // Frequency in kHz
   41 |     std::string service_type;   // "MWARA", "VOLMET", "RADRA"
   42 |     std::string notes;          // Additional information
   43 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:38:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_mwara_frequency'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:38:8: warning: accessing fields in struct 'fgcom_mwara_frequency' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   38 | struct fgcom_mwara_frequency {
      |        ^
   39 |     std::string region;         // Region (NAT, CAR, SAT, SAM, EUR, etc.)
   40 |     float frequency;            // Frequency in kHz
   41 |     std::string service_type;   // "MWARA", "VOLMET", "RADRA"
   42 |     std::string notes;          // Additional information
   43 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:38:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_mwara_frequency' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:46:8: warning: accessing fields in struct 'fgcom_maritime_channel' is inefficient due to padding; only needs 109 bytes but is using 120 bytes [altera-struct-pack-align]
   46 | struct fgcom_maritime_channel {
      |        ^
   47 |     int channel_number;         // ITU channel number
   48 |     std::string band;           // Band (4MHz, 6MHz, 8MHz, etc.)
   49 |     float coast_freq;           // Coast station frequency in kHz
   50 |     float ship_freq;            // Ship station frequency in kHz
   51 |     std::string service_type;   // "MARITIME"
   52 |     std::string notes;          // Special notes (USCG Calling, etc.)
   53 |     bool is_simplex;            // True for simplex channels
   54 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:46:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_maritime_channel'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:46:8: warning: accessing fields in struct 'fgcom_maritime_channel' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   46 | struct fgcom_maritime_channel {
      |        ^
   47 |     int channel_number;         // ITU channel number
   48 |     std::string band;           // Band (4MHz, 6MHz, 8MHz, etc.)
   49 |     float coast_freq;           // Coast station frequency in kHz
   50 |     float ship_freq;            // Ship station frequency in kHz
   51 |     std::string service_type;   // "MARITIME"
   52 |     std::string notes;          // Special notes (USCG Calling, etc.)
   53 |     bool is_simplex;            // True for simplex channels
   54 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:46:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_maritime_channel' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:57:8: warning: accessing fields in struct 'fgcom_aviation_hf_radio' is inefficient due to padding; only needs 137 bytes but is using 336 bytes [altera-struct-pack-align]
   57 | struct fgcom_aviation_hf_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:57:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_aviation_hf_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:57:8: warning: accessing fields in struct 'fgcom_aviation_hf_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   57 | struct fgcom_aviation_hf_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:57:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_aviation_hf_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:58:17: warning: member variable 'aircraft_type' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string aircraft_type;  // "COMMERCIAL", "MILITARY", "GENERAL_AVIATION"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:59:11: warning: member variable 'altitude_ft' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     float altitude_ft;          // Aircraft altitude in feet
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:60:17: warning: member variable 'callsign' has public visibility [misc-non-private-member-variables-in-classes]
   60 |     std::string callsign;       // Aircraft callsign
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:61:17: warning: member variable 'registration' has public visibility [misc-non-private-member-variables-in-classes]
   61 |     std::string registration;   // Aircraft registration
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:62:10: warning: member variable 'is_usb_modulation' has public visibility [misc-non-private-member-variables-in-classes]
   62 |     bool is_usb_modulation;     // USB modulation flag (HF aviation uses USB)
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:63:11: warning: member variable 'usb_bandwidth' has public visibility [misc-non-private-member-variables-in-classes]
   63 |     float usb_bandwidth;        // USB filter bandwidth (3kHz)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:64:17: warning: member variable 'mwara_region' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:66:5: warning: 'fgcom_aviation_hf_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:66:33: warning: initializer for base class 'fgcom_radio' is redundant [readability-redundant-member-init]
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
      |                                 ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:67:9: warning: 'aircraft_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |     std::string aircraft_type;  // "COMMERCIAL", "MILITARY", "GENERAL_AVIATION"
      |                              
      |                              {"COMMERCIAL"}
   59 |     float altitude_ft;          // Aircraft altitude in feet
   60 |     std::string callsign;       // Aircraft callsign
   61 |     std::string registration;   // Aircraft registration
   62 |     bool is_usb_modulation;     // USB modulation flag (HF aviation uses USB)
   63 |     float usb_bandwidth;        // USB filter bandwidth (3kHz)
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
   65 |     
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
   67 |         aircraft_type = "COMMERCIAL";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:67:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |         aircraft_type = "COMMERCIAL";
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:68:9: warning: 'altitude_ft' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   59 |     float altitude_ft;          // Aircraft altitude in feet
      |                      
      |                      {35000.0}
   60 |     std::string callsign;       // Aircraft callsign
   61 |     std::string registration;   // Aircraft registration
   62 |     bool is_usb_modulation;     // USB modulation flag (HF aviation uses USB)
   63 |     float usb_bandwidth;        // USB filter bandwidth (3kHz)
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
   65 |     
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
   67 |         aircraft_type = "COMMERCIAL";
   68 |         altitude_ft = 35000.0;  // Default cruise altitude
      |         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:68:23: warning: 35000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   68 |         altitude_ft = 35000.0;  // Default cruise altitude
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:69:9: warning: 'callsign' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   60 |     std::string callsign;       // Aircraft callsign
      |                         
      |                         {""}
   61 |     std::string registration;   // Aircraft registration
   62 |     bool is_usb_modulation;     // USB modulation flag (HF aviation uses USB)
   63 |     float usb_bandwidth;        // USB filter bandwidth (3kHz)
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
   65 |     
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
   67 |         aircraft_type = "COMMERCIAL";
   68 |         altitude_ft = 35000.0;  // Default cruise altitude
   69 |         callsign = "";
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:69:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |         callsign = "";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:70:9: warning: 'registration' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   61 |     std::string registration;   // Aircraft registration
      |                             
      |                             {""}
   62 |     bool is_usb_modulation;     // USB modulation flag (HF aviation uses USB)
   63 |     float usb_bandwidth;        // USB filter bandwidth (3kHz)
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
   65 |     
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
   67 |         aircraft_type = "COMMERCIAL";
   68 |         altitude_ft = 35000.0;  // Default cruise altitude
   69 |         callsign = "";
   70 |         registration = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:70:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |         registration = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:71:9: warning: 'is_usb_modulation' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   62 |     bool is_usb_modulation;     // USB modulation flag (HF aviation uses USB)
      |                           
      |                           {true}
   63 |     float usb_bandwidth;        // USB filter bandwidth (3kHz)
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
   65 |     
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
   67 |         aircraft_type = "COMMERCIAL";
   68 |         altitude_ft = 35000.0;  // Default cruise altitude
   69 |         callsign = "";
   70 |         registration = "";
   71 |         is_usb_modulation = true;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:72:9: warning: 'usb_bandwidth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   63 |     float usb_bandwidth;        // USB filter bandwidth (3kHz)
      |                        
      |                        {3.0}
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
   65 |     
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
   67 |         aircraft_type = "COMMERCIAL";
   68 |         altitude_ft = 35000.0;  // Default cruise altitude
   69 |         callsign = "";
   70 |         registration = "";
   71 |         is_usb_modulation = true;
   72 |         usb_bandwidth = 3.0;    // 3kHz USB bandwidth
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:72:25: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   72 |         usb_bandwidth = 3.0;    // 3kHz USB bandwidth
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:73:9: warning: 'mwara_region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   64 |     std::string mwara_region;   // MWARA region (NAT, CAR, SAT, etc.)
      |                             
      |                             {"NAT"}
   65 |     
   66 |     fgcom_aviation_hf_radio() : fgcom_radio() {
   67 |         aircraft_type = "COMMERCIAL";
   68 |         altitude_ft = 35000.0;  // Default cruise altitude
   69 |         callsign = "";
   70 |         registration = "";
   71 |         is_usb_modulation = true;
   72 |         usb_bandwidth = 3.0;    // 3kHz USB bandwidth
   73 |         mwara_region = "NAT";   // Default to North Atlantic
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:73:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   73 |         mwara_region = "NAT";   // Default to North Atlantic
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:78:8: warning: accessing fields in struct 'fgcom_maritime_hf_radio' is inefficient due to padding; only needs 133 bytes but is using 328 bytes [altera-struct-pack-align]
   78 | struct fgcom_maritime_hf_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:78:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_maritime_hf_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:78:8: warning: accessing fields in struct 'fgcom_maritime_hf_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   78 | struct fgcom_maritime_hf_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:78:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_maritime_hf_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:79:17: warning: member variable 'vessel_type' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     std::string vessel_type;    // "COMMERCIAL", "FISHING", "PLEASURE", "MILITARY"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:80:17: warning: member variable 'callsign' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     std::string callsign;       // Vessel callsign
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:81:17: warning: member variable 'mmsi' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     std::string mmsi;           // Maritime Mobile Service Identity
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:82:17: warning: member variable 'flag_state' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     std::string flag_state;     // Flag state
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:83:10: warning: member variable 'is_duplex' has public visibility [misc-non-private-member-variables-in-classes]
   83 |     bool is_duplex;             // Duplex operation flag
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:84:9: warning: member variable 'itu_channel' has public visibility [misc-non-private-member-variables-in-classes]
   84 |     int itu_channel;            // ITU channel number
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:86:5: warning: 'fgcom_maritime_hf_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:86:33: warning: initializer for base class 'fgcom_radio' is redundant [readability-redundant-member-init]
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
      |                                 ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:87:9: warning: 'vessel_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   79 |     std::string vessel_type;    // "COMMERCIAL", "FISHING", "PLEASURE", "MILITARY"
      |                            
      |                            {"COMMERCIAL"}
   80 |     std::string callsign;       // Vessel callsign
   81 |     std::string mmsi;           // Maritime Mobile Service Identity
   82 |     std::string flag_state;     // Flag state
   83 |     bool is_duplex;             // Duplex operation flag
   84 |     int itu_channel;            // ITU channel number
   85 |     
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
   87 |         vessel_type = "COMMERCIAL";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:87:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   87 |         vessel_type = "COMMERCIAL";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:88:9: warning: 'callsign' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   80 |     std::string callsign;       // Vessel callsign
      |                         
      |                         {""}
   81 |     std::string mmsi;           // Maritime Mobile Service Identity
   82 |     std::string flag_state;     // Flag state
   83 |     bool is_duplex;             // Duplex operation flag
   84 |     int itu_channel;            // ITU channel number
   85 |     
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
   87 |         vessel_type = "COMMERCIAL";
   88 |         callsign = "";
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:88:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   88 |         callsign = "";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:89:9: warning: 'mmsi' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   81 |     std::string mmsi;           // Maritime Mobile Service Identity
      |                     
      |                     {""}
   82 |     std::string flag_state;     // Flag state
   83 |     bool is_duplex;             // Duplex operation flag
   84 |     int itu_channel;            // ITU channel number
   85 |     
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
   87 |         vessel_type = "COMMERCIAL";
   88 |         callsign = "";
   89 |         mmsi = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:89:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         mmsi = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:90:9: warning: 'flag_state' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   82 |     std::string flag_state;     // Flag state
      |                           
      |                           {""}
   83 |     bool is_duplex;             // Duplex operation flag
   84 |     int itu_channel;            // ITU channel number
   85 |     
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
   87 |         vessel_type = "COMMERCIAL";
   88 |         callsign = "";
   89 |         mmsi = "";
   90 |         flag_state = "";
      |         ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:90:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |         flag_state = "";
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:91:9: warning: 'is_duplex' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   83 |     bool is_duplex;             // Duplex operation flag
      |                   
      |                   {true}
   84 |     int itu_channel;            // ITU channel number
   85 |     
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
   87 |         vessel_type = "COMMERCIAL";
   88 |         callsign = "";
   89 |         mmsi = "";
   90 |         flag_state = "";
   91 |         is_duplex = true;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:92:9: warning: 'itu_channel' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   84 |     int itu_channel;            // ITU channel number
      |                    
      |                    {0}
   85 |     
   86 |     fgcom_maritime_hf_radio() : fgcom_radio() {
   87 |         vessel_type = "COMMERCIAL";
   88 |         callsign = "";
   89 |         mmsi = "";
   90 |         flag_state = "";
   91 |         is_duplex = true;
   92 |         itu_channel = 0;
      |         ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:106:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 |     static bool initialize();
      |            ~~~~ ^           
      |            auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:109:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 |     static std::vector<fgcom_aviation_hf_band> getAviationBands();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                 
      |            auto                                                   -> std::vector<fgcom_aviation_hf_band>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:110:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  110 |     static fgcom_aviation_hf_band getAviationBand(float frequency_khz);
      |            ~~~~~~~~~~~~~~~~~~~~~~ ^                                   
      |            auto                                                        -> fgcom_aviation_hf_band
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:111:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  111 |     static bool isAviationFrequency(float frequency_khz);
      |            ~~~~ ^                                       
      |            auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:112:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     static float calculateAviationPropagation(float frequency_khz, double distance_km, float altitude1_ft, float altitude2_ft);
      |            ~~~~~ ^                                                                                                            
      |            auto                                                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:113:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     static float calculateWhipAntennaEfficiency(float frequency_khz, float altitude_ft);
      |            ~~~~~ ^                                                                     
      |            auto                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:114:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     static float calculateHighAltitudeEffects(float altitude_ft, double distance_km);
      |            ~~~~~ ^                                                                  
      |            auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:117:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     static std::vector<fgcom_mwara_frequency> getMWARAFrequencies();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                    
      |            auto                                                     -> std::vector<fgcom_mwara_frequency>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:118:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  118 |     static std::vector<fgcom_mwara_frequency> getMWARAFrequenciesByRegion(const std::string& region);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                     
      |            auto                                                                                      -> std::vector<fgcom_mwara_frequency>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:119:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 |     static bool isMWARAFrequency(float frequency_khz);
      |            ~~~~ ^                                    
      |            auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:120:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     static fgcom_mwara_frequency getMWARAFrequency(float frequency_khz);
      |            ~~~~~~~~~~~~~~~~~~~~~ ^                                     
      |            auto                                                         -> fgcom_mwara_frequency
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:121:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     static std::vector<std::string> getMWARARegions();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |            auto                                       -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:124:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |     static std::vector<fgcom_maritime_channel> getMaritimeChannels();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                    
      |            auto                                                      -> std::vector<fgcom_maritime_channel>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:125:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     static fgcom_maritime_channel getMaritimeChannel(int channel_number);
      |            ~~~~~~~~~~~~~~~~~~~~~~ ^                                     
      |            auto                                                          -> fgcom_maritime_channel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:126:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     static fgcom_maritime_channel getMaritimeChannelByFrequency(float frequency_khz);
      |            ~~~~~~~~~~~~~~~~~~~~~~ ^                                                 
      |            auto                                                                      -> fgcom_maritime_channel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:127:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  127 |     static bool isMaritimeFrequency(float frequency_khz);
      |            ~~~~ ^                                       
      |            auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:128:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     static float calculateMaritimePropagation(float frequency_khz, double distance_km, float altitude1_ft, float altitude2_ft);
      |            ~~~~~ ^                                                                                                            
      |            auto                                                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:129:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     static float calculateSeaPathEffects(double distance_km, float altitude_ft);
      |            ~~~~~ ^                                                             
      |            auto                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:132:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 |     static std::string aviationFreqToChannel(float frequency_khz);
      |            ~~~~~~~~~~~ ^                                         
      |            auto                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:133:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  133 |     static std::string maritimeFreqToChannel(float frequency_khz);
      |            ~~~~~~~~~~~ ^                                         
      |            auto                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:134:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     static float aviationChannelToFreq(const std::string& channel);
      |            ~~~~~ ^                                                
      |            auto                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:135:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  135 |     static float maritimeChannelToFreq(const std::string& channel);
      |            ~~~~~ ^                                                
      |            auto                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:138:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 |     static float getUSBBandwidth(float frequency_khz);
      |            ~~~~~ ^                                   
      |            auto                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:139:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 |     static float getSSBBandwidth(float frequency_khz);
      |            ~~~~~ ^                                   
      |            auto                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:140:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     static std::string getModulationType(float frequency_khz);
      |            ~~~~~~~~~~~ ^                                     
      |            auto                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:151:7: warning: destructor of 'FGCom_radiowaveModel_AviationHF' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
  151 | class FGCom_radiowaveModel_AviationHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:151:7: note: make it public and virtual
  151 | class FGCom_radiowaveModel_AviationHF : public FGCom_radiowaveModel {
      |       ^
  152 | private:
  153 |     float aircraft_altitude_ft;
  154 |     std::string aircraft_type;
  155 |     
  156 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:157:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
  157 |     FGCom_radiowaveModel_AviationHF(float altitude_ft = 35000.0, const std::string& type = "COMMERCIAL");
      |     ^
      |     explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:157:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  157 |     FGCom_radiowaveModel_AviationHF(float altitude_ft = 35000.0, const std::string& type = "COMMERCIAL");
      |                                     ^                 ~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:157:57: warning: 35000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  157 |     FGCom_radiowaveModel_AviationHF(float altitude_ft = 35000.0, const std::string& type = "COMMERCIAL");
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:157:66: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  157 |     FGCom_radiowaveModel_AviationHF(float altitude_ft = 35000.0, const std::string& type = "COMMERCIAL");
      |                                                                  ^                       ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:157:92: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  157 |     FGCom_radiowaveModel_AviationHF(float altitude_ft = 35000.0, const std::string& type = "COMMERCIAL");
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:159:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     std::string getType() override;
      |     ~~~~~~~~~~~ ^
      |     auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:160:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     bool isCompatible(FGCom_radiowaveModel *otherModel) override;
      |     ~~~~ ^
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:161:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) override;
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:162:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  162 |     std::string conv_chan2freq(std::string frq) override;
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:163:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 |     std::string conv_freq2chan(std::string frq) override;
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:164:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  164 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |     ~~~~~ ^
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:164:35: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  164 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:164:51: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  164 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:168:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  168 |     float calculateWhipAntennaEfficiency(float frequency_khz);
      |     ~~~~~ ^                                                  
      |     auto                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:169:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  169 |     float calculateHighAltitudePropagation(double distance_km, float frequency_khz);
      |     ~~~~~ ^                                                                        
      |     auto                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:170:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     float calculateUSBModulationEffects(float frequency_khz);
      |     ~~~~~ ^                                                 
      |     auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:174:7: warning: destructor of 'FGCom_radiowaveModel_MaritimeHF' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
  174 | class FGCom_radiowaveModel_MaritimeHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:174:7: note: make it public and virtual
  174 | class FGCom_radiowaveModel_MaritimeHF : public FGCom_radiowaveModel {
      |       ^
  175 | private:
  176 |     std::string vessel_type;
  177 |     bool is_duplex_operation;
  178 |     
  179 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:180:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
  180 |     FGCom_radiowaveModel_MaritimeHF(const std::string& type = "COMMERCIAL", bool duplex = true);
      |     ^
      |     explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:180:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  180 |     FGCom_radiowaveModel_MaritimeHF(const std::string& type = "COMMERCIAL", bool duplex = true);
      |                                     ^                       ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:180:63: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  180 |     FGCom_radiowaveModel_MaritimeHF(const std::string& type = "COMMERCIAL", bool duplex = true);
      |                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:180:77: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  180 |     FGCom_radiowaveModel_MaritimeHF(const std::string& type = "COMMERCIAL", bool duplex = true);
      |                                                                             ^           ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:182:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     std::string getType() override;
      |     ~~~~~~~~~~~ ^
      |     auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:183:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     bool isCompatible(FGCom_radiowaveModel *otherModel) override;
      |     ~~~~ ^
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:184:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) override;
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:185:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     std::string conv_chan2freq(std::string frq) override;
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:186:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     std::string conv_freq2chan(std::string frq) override;
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:187:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |     ~~~~~ ^
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:187:35: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  187 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:187:51: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  187 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:191:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     float calculateSeaPathPropagation(double distance_km, float frequency_khz);
      |     ~~~~~ ^                                                                   
      |     auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:192:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     float calculateMaritimeChannelEffects(int channel_number);
      |     ~~~~~ ^                                                  
      |     auto                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:193:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     float calculateDuplexOperationEffects(bool is_duplex);
      |     ~~~~~ ^                                              
      |     auto                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_PATTERN_INTERPOLATION_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PATTERN_INTERPOLATION_H
    2 | #define FGCOM_PATTERN_INTERPOLATION_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PATTERN_INTERPOLATION_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:6:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: warning: accessing fields in struct 'FGCom_RadiationPattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   10 | struct FGCom_RadiationPattern {
      |        ^
   11 |     double theta;           // Elevation angle (degrees)
   12 |     double phi;             // Azimuth angle (degrees)
   13 |     double gain_dbi;        // Gain in dBi
   14 |     double phase_deg;       // Phase in degrees
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
   16 |     
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
   19 |         : theta(t), phi(p), gain_dbi(g), phase_deg(ph), polarization(pol) {}
   20 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_RadiationPattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:11:12: warning: member variable 'theta' has public visibility [misc-non-private-member-variables-in-classes]
   11 |     double theta;           // Elevation angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:12:12: warning: member variable 'phi' has public visibility [misc-non-private-member-variables-in-classes]
   12 |     double phi;             // Azimuth angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:13:12: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
   13 |     double gain_dbi;        // Gain in dBi
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:14:12: warning: member variable 'phase_deg' has public visibility [misc-non-private-member-variables-in-classes]
   14 |     double phase_deg;       // Phase in degrees
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:15:17: warning: member variable 'polarization' has public visibility [misc-non-private-member-variables-in-classes]
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:17:5: warning: 'FGCom_RadiationPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:17:77: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:5: warning: 'FGCom_RadiationPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:28: warning: 4 adjacent parameters of 'FGCom_RadiationPattern' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:35: note: the first parameter in the range is 't'
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:65: note: the last parameter in the range is 'ph'
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                 ^~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:35: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:45: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:55: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:65: warning: parameter name 'ph' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:69: warning: pass by value and use std::move [modernize-pass-by-value]
    4 | #include <vector>
    5 | #include <map>
    6 | #include <string>
    7 | #include <memory>
    8 | 
    9 | // 4NEC2 radiation pattern data structure
   10 | struct FGCom_RadiationPattern {
   11 |     double theta;           // Elevation angle (degrees)
   12 |     double phi;             // Azimuth angle (degrees)
   13 |     double gain_dbi;        // Gain in dBi
   14 |     double phase_deg;       // Phase in degrees
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
   16 |     
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                     ^~~~~~~~~~~~~~~~~~
      |                                                                     std::string 
   19 |         : theta(t), phi(p), gain_dbi(g), phase_deg(ph), polarization(pol) {}
      |                                                                         
      |                                                                      std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: warning: accessing fields in struct 'FGCom_AttitudePattern' is inefficient due to padding; only needs 44 bytes but is using 48 bytes [altera-struct-pack-align]
   23 | struct FGCom_AttitudePattern {
      |        ^
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
   26 |     int altitude_m;          // Altitude in meters
   27 |     double frequency_mhz;   // Frequency in MHz
   28 |     std::vector<FGCom_RadiationPattern> patterns;
   29 |     
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
   32 |         : roll_deg(roll), pitch_deg(pitch), altitude_m(alt), frequency_mhz(freq) {}
   33 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FGCom_AttitudePattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: warning: accessing fields in struct 'FGCom_AttitudePattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   23 | struct FGCom_AttitudePattern {
      |        ^
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
   26 |     int altitude_m;          // Altitude in meters
   27 |     double frequency_mhz;   // Frequency in MHz
   28 |     std::vector<FGCom_RadiationPattern> patterns;
   29 |     
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
   32 |         : roll_deg(roll), pitch_deg(pitch), altitude_m(alt), frequency_mhz(freq) {}
   33 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_AttitudePattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:24:9: warning: member variable 'roll_deg' has public visibility [misc-non-private-member-variables-in-classes]
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:25:9: warning: member variable 'pitch_deg' has public visibility [misc-non-private-member-variables-in-classes]
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:26:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   26 |     int altitude_m;          // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:27:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   27 |     double frequency_mhz;   // Frequency in MHz
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:28:41: warning: member variable 'patterns' has public visibility [misc-non-private-member-variables-in-classes]
   28 |     std::vector<FGCom_RadiationPattern> patterns;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:30:5: warning: 'FGCom_AttitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:5: warning: 'FGCom_AttitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:27: warning: 4 adjacent parameters of 'FGCom_AttitudePattern' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:31: note: the first parameter in the range is 'roll'
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                               ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:64: note: the last parameter in the range is 'freq'
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                                                                ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:57: note: 'int' and 'double' may be implicitly converted
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: warning: accessing fields in struct 'FGCom_AltitudePattern' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
   36 | struct FGCom_AltitudePattern {
      |        ^
   37 |     int altitude_m;         // Altitude in meters
   38 |     double frequency_mhz;   // Frequency in MHz
   39 |     std::vector<FGCom_RadiationPattern> patterns;
   40 |     
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
   43 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FGCom_AltitudePattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: warning: accessing fields in struct 'FGCom_AltitudePattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   36 | struct FGCom_AltitudePattern {
      |        ^
   37 |     int altitude_m;         // Altitude in meters
   38 |     double frequency_mhz;   // Frequency in MHz
   39 |     std::vector<FGCom_RadiationPattern> patterns;
   40 |     
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
   43 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_AltitudePattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:37:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     int altitude_m;         // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:38:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     double frequency_mhz;   // Frequency in MHz
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:39:41: warning: member variable 'patterns' has public visibility [misc-non-private-member-variables-in-classes]
   39 |     std::vector<FGCom_RadiationPattern> patterns;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:41:5: warning: 'FGCom_AltitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:5: warning: 'FGCom_AltitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:27: warning: 2 adjacent parameters of 'FGCom_AltitudePattern' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                           ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:31: note: the first parameter in the range is 'alt'
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                               ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:43: note: the last parameter in the range is 'freq'
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:36: note: 'int' and 'double' may be implicitly converted
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:46:7: warning: class 'FGCom_PatternInterpolation' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   46 | class FGCom_PatternInterpolation {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:69:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     bool load4NEC2Pattern(const std::string& filename, const std::string& antenna_name, 
      |     ~~~~ ^
      |     auto
   70 |                          int altitude_m, double frequency_mhz);
      |                                                               
      |                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:73:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     bool load3DAttitudePattern(const std::string& filename, const std::string& antenna_name,
      |     ~~~~ ^
      |     auto
   74 |                                int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                                                                                  
      |                                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:77:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   77 |     bool loadAltitudePatterns(const std::string& antenna_name, const std::string& pattern_dir);
      |     ~~~~ ^                                                                                    
      |     auto                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:80:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     double getInterpolatedGain(const std::string& antenna_name, int altitude_m, 
      |     ~~~~~~ ^
      |     auto
   81 |                               double frequency_mhz, double theta_deg, double phi_deg);
      |                                                                                      
      |                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:84:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     double get3DAttitudeGain(const std::string& antenna_name, double theta, double phi,
      |     ~~~~~~ ^
      |     auto
   85 |                              int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                                                                                
      |                                                                                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:88:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     bool has3DAttitudePattern(const std::string& antenna_name);
      |     ~~~~ ^                                                    
      |     auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:91:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |     double getBilinearInterpolatedGain(const std::string& antenna_name, int altitude_m,
      |     ~~~~~~ ^
      |     auto
   92 |                                       double frequency_mhz, double theta_deg, double phi_deg);
      |                                                                                              
      |                                                                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:95:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   95 |     const FGCom_AltitudePattern* getPatternAtAltitude(const std::string& antenna_name, 
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   96 |                                                       int altitude_m, double frequency_mhz);
      |                                                                                            
      |                                                                                             -> const FGCom_AltitudePattern*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:99:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     double getGroundEffectFactor(int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                          
      |     auto                                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:102:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  102 |     double getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg);
      |     ~~~~~~ ^                                                                         
      |     auto                                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:105:12: warning: accessing fields in struct 'AltitudeCharacteristics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  105 |     struct AltitudeCharacteristics {
      |            ^
  106 |         double ground_effect_factor;    // 0.0 (free space) to 1.0 (full ground effects)
  107 |         double multipath_factor;        // Multipath interference strength
  108 |         double pattern_stability;       // Pattern stability (0.0 to 1.0)
  109 |         std::string dominant_mode;      // "ground_wave", "sky_wave", "mixed"
  110 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:105:12: note: use "__attribute__((aligned(64)))" to align struct 'AltitudeCharacteristics' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:112:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     AltitudeCharacteristics getAltitudeCharacteristics(int altitude_m, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                               
      |     auto                                                                                     -> AltitudeCharacteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:115:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     bool isAntennaLoaded(const std::string& antenna_name);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:116:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  116 |     std::vector<int> getAvailableAltitudes(const std::string& antenna_name);
      |     ~~~~~~~~~~~~~~~~ ^                                                     
      |     auto                                                                    -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:117:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     std::vector<double> getAvailableFrequencies(const std::string& antenna_name);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                         -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:120:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     double getMaximumGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:121:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     double getMinimumGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:122:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     double getAverageGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:125:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     double calculateGroundReflectionCoefficient(int altitude_m, double frequency_mhz, 
      |     ~~~~~~ ^
      |     auto
  126 |                                                double theta_deg, double ground_conductivity);
      |                                                                                             
      |                                                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:127:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  127 |     double calculatePathDifference(int altitude_m, double theta_deg);
      |     ~~~~~~ ^                                                        
      |     auto                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:128:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     double calculatePhaseDifference(double path_diff_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                 
      |     auto                                                                      -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:131:56: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  131 |     void smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor = 0.1);
      |                                                        ^                       ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:131:82: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  131 |     void smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor = 0.1);
      |                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:132:56: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  132 |     void filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold = -30.0);
      |                                                        ^                         ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:132:85: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  132 |     void filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold = -30.0);
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |     ~~~~~~ ^                                                                      
      |     auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:37: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:48: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:59: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:70: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:81: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |     ~~~~~~ ^
      |     auto
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                                                                                  
      |                                                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:39: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:50: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:61: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:72: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:138:38: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:138:48: warning: parameter name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:141:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     std::vector<FGCom_RadiationPattern*> findClosestPatterns(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  142 |         const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count = 4);
      |                                                                                               
      |                                                                                                -> std::vector<FGCom_RadiationPattern*>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:142:81: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  142 |         const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count = 4);
      |                                                                                 ^         ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:145:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |     bool parse4NEC2File(const std::string& filename, FGCom_AltitudePattern& pattern);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool validatePattern(const FGCom_AltitudePattern& pattern);
      |     ~~~~ ^                                                    
      |     auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: warning: accessing fields in struct 'PatternStats' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
  151 |     struct PatternStats {
      |            ^
  152 |         double max_gain;
  153 |         double min_gain;
  154 |         double avg_gain;
  155 |         double std_dev;
  156 |         int total_points;
  157 |     };
      |      
      |       __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'PatternStats'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: warning: accessing fields in struct 'PatternStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  151 |     struct PatternStats {
      |            ^
  152 |         double max_gain;
  153 |         double min_gain;
  154 |         double avg_gain;
  155 |         double std_dev;
  156 |         int total_points;
  157 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: note: use "__attribute__((aligned(64)))" to align struct 'PatternStats' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:159:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     PatternStats calculatePatternStats(const FGCom_AltitudePattern& pattern);
      |     ~~~~~~~~~~~~ ^                                                          
      |     auto                                                                     -> PatternStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:163:52: warning: variable 'g_pattern_interpolation' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  163 | extern std::unique_ptr<FGCom_PatternInterpolation> g_pattern_interpolation;
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:168:10: warning: enum 'AltitudeCategory' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  168 |     enum AltitudeCategory {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:175:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     AltitudeCategory getAltitudeCategory(int altitude_m);
      |     ~~~~~~~~~~~~~~~~ ^                                  
      |     auto                                                 -> AltitudeCategory
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:178:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  178 |     int getRecommendedSamplingInterval(int altitude_m);
      |     ~~~ ^                                             
      |     auto                                               -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:181:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     bool isCriticalTransitionZone(int altitude_m);
      |     ~~~~ ^                                       
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:184:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                            
      |     auto                                                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:187:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg);
      |     ~~~~~~ ^                                                                                  
      |     auto                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:188:1: warning: namespace 'FGCom_AltitudeUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  188 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:166:11: note: namespace 'FGCom_AltitudeUtils' starts here
  166 | namespace FGCom_AltitudeUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_POWER_MANAGEMENT_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_POWER_MANAGEMENT_H
    2 | #define FGCOM_POWER_MANAGEMENT_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_POWER_MANAGEMENT_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:5:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:6:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <map>
      | ^~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:10:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   11 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:13:8: warning: accessing fields in struct 'PowerLevels' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   13 | struct PowerLevels {
      |        ^
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
   15 |     int current_power;
   16 |     float power_efficiency;         // Antenna efficiency at current power
   17 |     bool power_limiting;            // Automatic power limiting for safety
   18 |     float max_safe_power;           // Maximum safe power for current antenna
   19 |     float regulatory_limit;         // Regulatory power limit for current band
   20 |     bool efficiency_optimization;   // Enable power efficiency optimization
   21 |     float battery_level;            // Current battery level (0.0-1.0)
   22 |     float power_consumption;        // Current power consumption in watts
   23 |     std::chrono::system_clock::time_point last_power_change;
   24 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:13:8: note: use "__attribute__((aligned(64)))" to align struct 'PowerLevels' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:42: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:46: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:51: warning: 150 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:56: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:61: warning: 250 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:66: warning: 300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:71: warning: 350 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:76: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:81: warning: 450 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:86: warning: 500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:91: warning: 550 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:96: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:101: warning: 650 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:106: warning: 700 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:111: warning: 750 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:116: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:121: warning: 850 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:126: warning: 900 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:131: warning: 950 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:136: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: warning: accessing fields in struct 'AntennaPowerEfficiency' is inefficient due to padding; only needs 97 bytes but is using 104 bytes [altera-struct-pack-align]
   27 | struct AntennaPowerEfficiency {
      |        ^
   28 |     std::string antenna_type;
   29 |     std::map<int, float> efficiency_at_power;  // Power level -> efficiency (0.0-1.0)
   30 |     float max_efficient_power;                 // Power level with best efficiency
   31 |     float efficiency_threshold;                // Minimum efficiency threshold
   32 |     bool has_power_limiting;                   // Whether this antenna has power limiting
   33 |     float thermal_limit;                       // Thermal power limit in watts
   34 |     float swr_limit;                          // SWR limit for power limiting
   35 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPowerEfficiency'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: warning: accessing fields in struct 'AntennaPowerEfficiency' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   27 | struct AntennaPowerEfficiency {
      |        ^
   28 |     std::string antenna_type;
   29 |     std::map<int, float> efficiency_at_power;  // Power level -> efficiency (0.0-1.0)
   30 |     float max_efficient_power;                 // Power level with best efficiency
   31 |     float efficiency_threshold;                // Minimum efficiency threshold
   32 |     bool has_power_limiting;                   // Whether this antenna has power limiting
   33 |     float thermal_limit;                       // Thermal power limit in watts
   34 |     float swr_limit;                          // SWR limit for power limiting
   35 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPowerEfficiency' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: warning: accessing fields in struct 'RegulatoryPowerLimits' is inefficient due to padding; only needs 113 bytes but is using 120 bytes [altera-struct-pack-align]
   38 | struct RegulatoryPowerLimits {
      |        ^
   39 |     std::string band_name;
   40 |     float min_freq_mhz;
   41 |     float max_freq_mhz;
   42 |     float max_power_watts;
   43 |     std::string regulatory_body;  // FCC, ITU, etc.
   44 |     std::string license_type;     // Amateur, Commercial, Military, etc.
   45 |     bool requires_license;
   46 |     float power_density_limit;    // Power density limit in W/m²
   47 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'RegulatoryPowerLimits'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: warning: accessing fields in struct 'RegulatoryPowerLimits' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   38 | struct RegulatoryPowerLimits {
      |        ^
   39 |     std::string band_name;
   40 |     float min_freq_mhz;
   41 |     float max_freq_mhz;
   42 |     float max_power_watts;
   43 |     std::string regulatory_body;  // FCC, ITU, etc.
   44 |     std::string license_type;     // Amateur, Commercial, Military, etc.
   45 |     bool requires_license;
   46 |     float power_density_limit;    // Power density limit in W/m²
   47 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: use "__attribute__((aligned(128)))" to align struct 'RegulatoryPowerLimits' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:50:8: warning: accessing fields in struct 'PowerManagementConfig' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   50 | struct PowerManagementConfig {
      |        ^
   51 |     bool enable_automatic_power_limiting = true;
   52 |     bool enable_efficiency_optimization = true;
   53 |     bool enable_regulatory_compliance = true;
   54 |     bool enable_thermal_protection = true;
   55 |     bool enable_swr_protection = true;
   56 |     bool enable_battery_management = true;
   57 |     float default_efficiency_threshold = 0.7f;
   58 |     float thermal_shutdown_threshold = 0.9f;
   59 |     float swr_shutdown_threshold = 3.0f;
   60 |     float battery_low_threshold = 0.2f;
   61 |     int power_change_delay_ms = 100;  // Delay between power changes
   62 |     bool log_power_changes = true;
   63 |     bool enable_power_analytics = true;
   64 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:50:8: note: use "__attribute__((aligned(32)))" to align struct 'PowerManagementConfig' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:57:42: warning: 0.7f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   57 |     float default_efficiency_threshold = 0.7f;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:57:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   57 |     float default_efficiency_threshold = 0.7f;
      |                                          ^  ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:58:40: warning: 0.9f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   58 |     float thermal_shutdown_threshold = 0.9f;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:58:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   58 |     float thermal_shutdown_threshold = 0.9f;
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:59:36: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     float swr_shutdown_threshold = 3.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:59:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   59 |     float swr_shutdown_threshold = 3.0f;
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:60:35: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     float battery_low_threshold = 0.2f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:60:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   60 |     float battery_low_threshold = 0.2f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:61:33: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   61 |     int power_change_delay_ms = 100;  // Delay between power changes
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: warning: accessing fields in struct 'PowerManagementStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   67 | struct PowerManagementStats {
      |        ^
   68 |     int total_power_changes;
   69 |     float average_efficiency;
   70 |     float peak_power_used;
   71 |     float total_energy_consumed;
   72 |     std::chrono::system_clock::time_point last_reset;
   73 |     std::map<int, int> power_level_usage;  // Power level -> usage count
   74 |     float efficiency_vs_power_correlation;
   75 |     int thermal_shutdowns;
   76 |     int swr_shutdowns;
   77 |     int regulatory_violations;
   78 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: note: use "__attribute__((aligned(128)))" to align struct 'PowerManagementStats' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:107:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 |     static FGCom_PowerManager& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                              -> FGCom_PowerManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:111:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  111 |     bool setPowerLevel(int power_watts);
      |     ~~~~ ^                             
      |     auto                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:112:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     int getCurrentPower() const;
      |     ~~~ ^                      
      |     auto                        -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:113:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     std::vector<int> getAvailablePowerLevels() const;
      |     ~~~~~~~~~~~~~~~~ ^                              
      |     auto                                             -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:114:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     bool isPowerLevelAvailable(int power_watts) const;
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:117:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     float calculatePowerEfficiency(int power_watts, const std::string& antenna_type) const;
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:118:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  118 |     float getCurrentPowerEfficiency() const;
      |     ~~~~~ ^                                
      |     auto                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:119:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 |     int getOptimalPowerLevel(const std::string& antenna_type) const;
      |     ~~~ ^                                                          
      |     auto                                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:120:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     bool optimizePowerForEfficiency();
      |     ~~~~ ^                           
      |     auto                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:123:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     bool enablePowerLimiting(bool enable);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:124:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |     bool isPowerLimitingActive() const;
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:125:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     bool checkPowerLimits(int power_watts) const;
      |     ~~~~ ^                                      
      |     auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:126:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     bool applyPowerLimits(int requested_power, int& actual_power) const;
      |     ~~~~ ^                                                             
      |     auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:129:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     bool checkRegulatoryCompliance(int power_watts, const std::string& frequency_band) const;
      |     ~~~~ ^                                                                                  
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:130:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  130 |     float getRegulatoryPowerLimit(const std::string& frequency_band) const;
      |     ~~~~~ ^                                                               
      |     auto                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:131:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     bool isRegulatoryCompliant(int power_watts, const std::string& frequency_band) const;
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:134:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     bool enableThermalProtection(bool enable);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:135:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  135 |     bool isThermalProtectionActive() const;
      |     ~~~~ ^                                
      |     auto                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:137:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     bool checkThermalLimits(int power_watts) const;
      |     ~~~~ ^                                        
      |     auto                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:140:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     bool enableSWRProtection(bool enable);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:141:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     bool isSWRProtectionActive() const;
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:143:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     bool checkSWRLimits(int power_watts) const;
      |     ~~~~ ^                                    
      |     auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:147:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     float getBatteryLevel() const;
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool isBatteryLow() const;
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:149:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     int getMaxPowerForBattery() const;
      |     ~~~ ^                            
      |     auto                              -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:153:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 |     std::string getCurrentAntenna() const;
      |     ~~~~~~~~~~~ ^                        
      |     auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:154:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |     bool loadAntennaEfficiencyData(const std::string& antenna_type, const AntennaPowerEfficiency& data);
      |     ~~~~ ^                                                                                             
      |     auto                                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:155:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     AntennaPowerEfficiency getAntennaEfficiencyData(const std::string& antenna_type) const;
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                              
      |     auto                                                                                   -> AntennaPowerEfficiency
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:159:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     std::string getCurrentFrequencyBand() const;
      |     ~~~~~~~~~~~ ^                              
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:160:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     bool loadRegulatoryLimits(const std::string& frequency_band, const RegulatoryPowerLimits& limits);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:161:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     RegulatoryPowerLimits getRegulatoryLimits(const std::string& frequency_band) const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                                                           
      |     auto                                                                               -> RegulatoryPowerLimits
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:165:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     PowerManagementConfig getConfig() const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                    -> PowerManagementConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:166:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     bool loadConfigFromFile(const std::string& config_file);
      |     ~~~~ ^                                                 
      |     auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool saveConfigToFile(const std::string& config_file) const;
      |     ~~~~ ^                                                     
      |     auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:170:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     PowerManagementStats getStats() const;
      |     ~~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                  -> PowerManagementStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:173:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     bool isPowerAnalyticsEnabled() const;
      |     ~~~~ ^                              
      |     auto                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool canChangePower() const;
      |     ~~~~ ^                     
      |     auto                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:178:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  178 |     int getPowerChangeDelay() const;
      |     ~~~ ^                          
      |     auto                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:181:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     bool isSafeToTransmit(int power_watts) const;
      |     ~~~~ ^                                      
      |     auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:182:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     bool checkAllSafetyLimits(int power_watts) const;
      |     ~~~~ ^                                          
      |     auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:184:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     bool isEmergencyPowerDown() const;
      |     ~~~~ ^                           
      |     auto                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:187:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     int calculateOptimalPowerForRange(double distance_km, const std::string& antenna_type) const;
      |     ~~~ ^                                                                                       
      |     auto                                                                                         -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:188:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 |     int calculateOptimalPowerForSignalQuality(float target_quality, double distance_km, const std::string& antenna_type) const;
      |     ~~~ ^                                                                                                                     
      |     auto                                                                                                                       -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:189:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  189 |     float calculatePowerConsumption(int power_watts, const std::string& antenna_type) const;
      |     ~~~~~ ^                                                                                
      |     auto                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:192:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     float getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const;
      |     ~~~~~ ^                                                                                                                                                
      |     auto                                                                                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:193:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     float getPowerEfficiencyAtFrequency(int power_watts, const std::string& antenna_type, float frequency_mhz) const;
      |     ~~~~~ ^                                                                                                         
      |     auto                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:218:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  218 |     float wattsToDBm(float watts);
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:219:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     float dbmToWatts(float dbm);
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:220:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     float wattsToDBW(float watts);
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:221:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     float dbwToWatts(float dbw);
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:224:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  224 |     float calculatePowerDensity(float power_watts, float distance_meters);
      |     ~~~~~ ^                                                              
      |     auto                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:225:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  225 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2);
      |     ~~~~ ^                                                                                     
      |     auto                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:228:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db);
      |     ~~~~~ ^                                                                              
      |     auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:229:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     float calculateEIRP(float tx_power_watts, float antenna_gain_db, float system_loss_db);
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:232:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:233:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db);
      |     ~~~~~ ^                                                                                                                         
      |     auto                                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:236:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  236 |     bool isAmateurRadioFrequency(float frequency_mhz);
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:237:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  237 |     bool isCommercialFrequency(float frequency_mhz);
      |     ~~~~ ^                                         
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:238:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  238 |     bool isMilitaryFrequency(float frequency_mhz);
      |     ~~~~ ^                                       
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:239:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  239 |     std::string getRegulatoryBody(float frequency_mhz);
      |     ~~~~~~~~~~~ ^                                     
      |     auto                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:240:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  240 |     std::string getLicenseType(float frequency_mhz);
      |     ~~~~~~~~~~~ ^                                  
      |     auto                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:241:1: warning: namespace 'PowerManagementUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  241 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:216:11: note: namespace 'PowerManagementUtils' starts here
  216 | namespace PowerManagementUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:7:9: warning: header guard does not follow preferred style [llvm-header-guard]
    7 | #ifndef PROPAGATION_PHYSICS_H
      |         ^~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PROPAGATION_PHYSICS_H
    8 | #define PROPAGATION_PHYSICS_H
      |         ~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PROPAGATION_PHYSICS_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:10:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   11 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:13:8: warning: accessing fields in struct 'AtmosphericConditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   13 | struct AtmosphericConditions {
      |        ^
   14 |     double temperature_c;
   15 |     double humidity_percent;
   16 |     double rain_rate_mmh;
   17 |     double wind_speed_ms;
   18 |     double wind_direction_deg;
   19 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:13:8: note: use "__attribute__((aligned(64)))" to align struct 'AtmosphericConditions' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:24:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   24 |     static AtmosphericConditions getAtmosphericConditions(double latitude, double longitude, double altitude);
      |            ~~~~~~~~~~~~~~~~~~~~~ ^                                                                           
      |            auto                                                                                               -> AtmosphericConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:27:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   27 |     static double calculateTotalPropagationLoss(
      |            ~~~~~~ ^
      |            auto
   28 |         double frequency_mhz,
   29 |         double distance_km,
   30 |         double tx_altitude_m,
   31 |         double rx_altitude_m,
   32 |         double tx_power_dbm,
   33 |         double rx_sensitivity_dbm,
   34 |         double atmospheric_loss_db,
   35 |         double terrain_loss_db
   36 |     );
      |      
      |       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_RADIO_CONFIG_H
      |         ^~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_CONFIG_H
    2 | #define FGCOM_RADIO_CONFIG_H
      |         ~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_CONFIG_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:26:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   26 |     static bool initialize(const std::string& config_file = "");
      |            ~~~~ ^                                              
      |            auto                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:26:28: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   26 |     static bool initialize(const std::string& config_file = "");
      |                            ^                              ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:26:61: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   26 |     static bool initialize(const std::string& config_file = "");
      |                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:29:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   29 |     static std::string getString(const std::string& key, const std::string& default_value = "");
      |            ~~~~~~~~~~~ ^                                                                       
      |            auto                                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:29:58: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   29 |     static std::string getString(const std::string& key, const std::string& default_value = "");
      |                                                          ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:29:93: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   29 |     static std::string getString(const std::string& key, const std::string& default_value = "");
      |                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:30:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   30 |     static int getInt(const std::string& key, int default_value = 0);
      |            ~~~ ^                                                    
      |            auto                                                      -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:30:47: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   30 |     static int getInt(const std::string& key, int default_value = 0);
      |                                               ^                 ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:31:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   31 |     static float getFloat(const std::string& key, float default_value = 0.0f);
      |            ~~~~~ ^                                                           
      |            auto                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:31:51: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   31 |     static float getFloat(const std::string& key, float default_value = 0.0f);
      |                                                   ^                   ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:31:73: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   31 |     static float getFloat(const std::string& key, float default_value = 0.0f);
      |                                                                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:32:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   32 |     static bool getBool(const std::string& key, bool default_value = false);
      |            ~~~~ ^                                                          
      |            auto                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:32:49: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   32 |     static bool getBool(const std::string& key, bool default_value = false);
      |                                                 ^                  ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:41:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   41 |     static bool isValidFrequency(float frequency);
      |            ~~~~ ^                                
      |            auto                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:42:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 |     static bool isValidPort(int port);
      |            ~~~~ ^                    
      |            auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:43:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   43 |     static bool isValidFieldLength(int length);
      |            ~~~~ ^                             
      |            auto                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:31:1: warning: #includes are not sorted properly [llvm-include-order]
   31 | #include "radio_model_vhf.h"
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:37:1: warning: included header advanced_modulation.h is not used directly [misc-include-cleaner]
   37 | #include "advanced_modulation.h"
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   38 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:45:6: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   45 | bool fgcom_radio_updateOperable(fgcom_radio &r){
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:45:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   45 | bool fgcom_radio_updateOperable(fgcom_radio &r){
      | ~~~~ ^                                         
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:45:46: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
   45 | bool fgcom_radio_updateOperable(fgcom_radio &r){
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:46:5: warning: variable 'oldOperableValue' of type 'bool' can be declared 'const' [misc-const-correctness]
   46 |     bool oldOperableValue = r.operable;
      |     ^
      |          const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:47:21: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   47 |     if (r.frequency == "<del>") {
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3727:5: note: resolves to this declaration
 3727 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:50:9: warning: variable 'serviceable' of type 'bool' can be declared 'const' [misc-const-correctness]
   50 |         bool serviceable = r.serviceable;
      |         ^
      |              const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:51:9: warning: variable 'switchedOn' of type 'bool' can be declared 'const' [misc-const-correctness]
   51 |         bool switchedOn  = r.power_btn;
      |         ^
      |              const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:52:9: warning: variable 'powered' of type 'bool' can be declared 'const' [misc-const-correctness]
   52 |         bool powered     = (r.volts >= 1.0)? true:false; // some aircraft report boolean here, so treat 1.0 as powered
      |         ^
      |              const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:52:46: warning: redundant boolean literal in ternary expression result [readability-simplify-boolean-expr]
   52 |         bool powered     = (r.volts >= 1.0)? true:false; // some aircraft report boolean here, so treat 1.0 as powered
      |                            ~~~~~~~~~~~~~~~~~~^~~~~~~~~~
      |                            r.volts >= 1.0
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:71:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
   38 | std::unique_ptr<FGCom_radiowaveModel> FGCom_radiowaveModel::selectModel(std::string freq) {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:71:61: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   71 | std::unique_ptr<FGCom_radiowaveModel> FGCom_radiowaveModel::selectModel(std::string freq) {
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:71:61: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   71 | std::unique_ptr<FGCom_radiowaveModel> FGCom_radiowaveModel::selectModel(std::string freq) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                       ^
      | auto                                                                                      -> std::unique_ptr<FGCom_radiowaveModel>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:71:78: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   38 | std::unique_ptr<FGCom_radiowaveModel> FGCom_radiowaveModel::selectModel(std::string freq) {
      |                                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:73:5: warning: variable 'freq_p' of type 'fgcom_radiowave_freqConvRes' can be declared 'const' [misc-const-correctness]
   73 |     fgcom_radiowave_freqConvRes freq_p = FGCom_radiowaveModel::splitFreqString(freq);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:73:42: warning: 'splitFreqString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   73 |     fgcom_radiowave_freqConvRes freq_p = FGCom_radiowaveModel::splitFreqString(freq);
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: note: resolves to this declaration
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:73:80: warning: parameter 'freq' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
   28 |     fgcom_radiowave_freqConvRes freq_p = FGCom_radiowaveModel::splitFreqString(freq);
      |                                                                                ^   
      |                                                                                std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:80:9: warning: variable 'frq_num' of type 'float' can be declared 'const' [misc-const-correctness]
   80 |         float frq_num = std::stof(freq_p.frequency);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:80:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   80 |         float frq_num = std::stof(freq_p.frequency);
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:80:25: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   80 |         float frq_num = std::stof(freq_p.frequency);
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:80:30: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
   80 |         float frq_num = std::stof(freq_p.frequency);
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:84:9: warning: variable 'echo_test_freq' of type 'float' can be declared 'const' [misc-const-correctness]
   84 |         float echo_test_freq = FGCom_RadioConfig::getFloat(FGCom_RadioConfig::ECHO_TEST_FREQUENCY, 910.0f);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:84:32: warning: 'getFloat' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   84 |         float echo_test_freq = FGCom_RadioConfig::getFloat(FGCom_RadioConfig::ECHO_TEST_FREQUENCY, 910.0f);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_config.h:31:18: note: resolves to this declaration
   31 |     static float getFloat(const std::string& key, float default_value = 0.0f);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:84:100: warning: 910.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   84 |         float echo_test_freq = FGCom_RadioConfig::getFloat(FGCom_RadioConfig::ECHO_TEST_FREQUENCY, 910.0f);
      |                                                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:84:100: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   84 |         float echo_test_freq = FGCom_RadioConfig::getFloat(FGCom_RadioConfig::ECHO_TEST_FREQUENCY, 910.0f);
      |                                                                                                    ^    ~
      |                                                                                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:92:9: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   92 |         FGCom_NonAmateurHF::initialize();
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:106:17: note: resolves to this declaration
  106 |     static bool initialize();
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:93:13: warning: 'isAviationFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |         if (FGCom_NonAmateurHF::isAviationFrequency(frq_num)) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:111:17: note: resolves to this declaration
  111 |     static bool isAviationFrequency(float frequency_khz);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:94:94: warning: 35000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   94 |             return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_AviationHF(35000.0, "COMMERCIAL"));
      |                                                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:94:103: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   94 |             return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_AviationHF(35000.0, "COMMERCIAL"));
      |                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:100:13: warning: 'isMaritimeFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  100 |         if (FGCom_NonAmateurHF::isMaritimeFrequency(frq_num)) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/non_amateur_hf.h:127:17: note: resolves to this declaration
  127 |     static bool isMaritimeFrequency(float frequency_khz);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:101:94: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  101 |             return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_MaritimeHF("COMMERCIAL", true));
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:107:24: warning: 1800.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  107 |         if (frq_num >= 1800.0 && frq_num <= 54000.0) {
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:107:45: warning: 54000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  107 |         if (frq_num >= 1800.0 && frq_num <= 54000.0) {
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:109:13: warning: 'initialize' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  109 |             FGCom_AmateurRadio::initialize();
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:134:17: note: resolves to this declaration
  134 |     static bool initialize();
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:109:13: warning: no header providing "FGCom_AmateurRadio" is directly included [misc-include-cleaner]
   28 |             FGCom_AmateurRadio::initialize();
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:111:17: warning: 'isAmateurFrequency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  111 |             if (FGCom_AmateurRadio::isAmateurFrequency(frq_num, 1)) {
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/amateur_radio.h:201:17: note: resolves to this declaration
  201 |     static bool isAmateurFrequency(float frequency_khz, int itu_region);
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:120:25: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  120 |         if (frq_num <=  30.0)                    return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_HF());
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:120:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  120 |         if (frq_num <=  30.0)                    return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_HF());
      |                              ^                                                                                               
      |                               {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:121:24: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  121 |         if (frq_num >  30.0 && frq_num <= 300.0) return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_VHF());
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:121:43: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  121 |         if (frq_num >  30.0 && frq_num <= 300.0) return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_VHF());
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:121:49: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  121 |         if (frq_num >  30.0 && frq_num <= 300.0) return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_VHF());
      |                                                 ^                                                                             
      |                                                  {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:122:23: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  122 |         if (frq_num > 300.0)                     return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_UHF());
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:122:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  122 |         if (frq_num > 300.0)                     return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_UHF());
      |                             ^                                                                                                 
      |                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:127:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  127 |     } else {
      |       ^~~~~~
  128 |         // NON-NUMERIC FREQUENCY: Use string model for special frequency names
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |         // This handles cases like "GUARD", "EMERGENCY", "TAC", etc.
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  130 |         return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_String());
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:138:51: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  138 | fgcom_radiowave_freqConvRes FGCom_radiowaveModel::splitFreqString(std::string frq) {
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:138:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 | fgcom_radiowave_freqConvRes FGCom_radiowaveModel::splitFreqString(std::string frq) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~                       ^
      | auto                                                                               -> fgcom_radiowave_freqConvRes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:138:79: warning: the parameter 'frq' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  138 | fgcom_radiowave_freqConvRes FGCom_radiowaveModel::splitFreqString(std::string frq) {
      |                                                                               ^
      |                                                                   const      &
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:139:5: warning: the value returned by this function should not be disregarded; neglecting it may lead to errors [cert-err33-c]
  139 |     setlocale(LC_NUMERIC,"C"); // decimal points always ".", not ","
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:139:5: note: cast the expression to void to silence this warning
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:139:5: warning: function is not thread safe [concurrency-mt-unsafe]
  139 |     setlocale(LC_NUMERIC,"C"); // decimal points always ".", not ","
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:139:5: warning: 'setlocale' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/locale.h:122:14: note: resolves to this declaration
  122 | extern char *setlocale (int __category, const char *__locale) __THROW;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:139:5: warning: no header providing "setlocale" is directly included [misc-include-cleaner]
   38 |     setlocale(LC_NUMERIC,"C"); // decimal points always ".", not ","
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:139:15: warning: no header providing "LC_NUMERIC" is directly included [misc-include-cleaner]
  139 |     setlocale(LC_NUMERIC,"C"); // decimal points always ".", not ","
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:142:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  142 |     res.frequency = frq;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:146:14: warning: no header providing "std::smatch" is directly included [misc-include-cleaner]
   38 |         std::smatch sm;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:146:21: warning: variable name 'sm' is too short, expected at least 3 characters [readability-identifier-length]
  146 |         std::smatch sm;
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:147:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  147 |         if (std::regex_match(frq, sm, std::regex("^[\\s0]*((?:RECORD_)?)([0-9.]+?)[\\s]*$") )) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/regex.h:2341:3: note: default parameter was declared here
 2341 |                 regex_constants::match_flag_type __flags
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:147:13: warning: 'regex_match<std::char_traits<char>, std::allocator<char>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char>>>>, char, std::regex_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |         if (std::regex_match(frq, sm, std::regex("^[\\s0]*((?:RECORD_)?)([0-9.]+?)[\\s]*$") )) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/regex.h:2337:5: note: resolves to this declaration
 2337 |     regex_match(const basic_string<_Ch_type, _Ch_traits, _Ch_alloc>& __s,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:147:18: warning: no header providing "std::regex_match" is directly included [misc-include-cleaner]
  147 |         if (std::regex_match(frq, sm, std::regex("^[\\s0]*((?:RECORD_)?)([0-9.]+?)[\\s]*$") )) {
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:147:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  147 |         if (std::regex_match(frq, sm, std::regex("^[\\s0]*((?:RECORD_)?)([0-9.]+?)[\\s]*$") )) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/regex.h:472:40: note: default parameter was declared here
  472 |       basic_regex(const _Ch_type* __p, flag_type __f = ECMAScript)
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:147:44: warning: no header providing "std::regex" is directly included [misc-include-cleaner]
  147 |         if (std::regex_match(frq, sm, std::regex("^[\\s0]*((?:RECORD_)?)([0-9.]+?)[\\s]*$") )) {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:150:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  150 |             res.prefix    = sm[1];
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:150:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  150 |             res.prefix    = sm[1];
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/regex.h:1949:7: note: resolves to this declaration
 1949 |       operator[](size_type __sub) const
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:151:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |             res.frequency = sm[2];
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:151:31: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  151 |             res.frequency = sm[2];
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/regex.h:1949:7: note: resolves to this declaration
 1949 |       operator[](size_type __sub) const
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:154:11: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  154 |         } else {
      |           ^~~~~~
  155 |             // not numeric: use as-is
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~
  156 |             return res;
      |             ~~~~~~~~~~~
  157 |         }
      |         ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:158:25: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
   38 |     } catch (const std::exception& e) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:169:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  169 | bool FGCom_radiowaveModel::isCompatible(FGCom_radiowaveModel *otherModel) {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:169:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  169 | bool FGCom_radiowaveModel::isCompatible(FGCom_radiowaveModel *otherModel) {
      | ~~~~                       ^
      | auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:170:28: warning: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |     return this->getType() == otherModel->getType();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3710:5: note: resolves to this declaration
 3710 |     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:174:30: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  174 | double FGCom_radiowaveModel::getDistToHorizon(float h) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:174:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 | double FGCom_radiowaveModel::getDistToHorizon(float h) {
      | ~~~~~~                       ^
      | auto                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:174:53: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  174 | double FGCom_radiowaveModel::getDistToHorizon(float h) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:177:33: warning: no header providing "sqrt" is directly included [misc-include-cleaner]
   38 |     return EARTH_RADIUS_CONST * sqrt(h);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:177:33: warning: call to 'sqrt' promotes float to double [performance-type-promotion-in-math-fn]
   28 |     return EARTH_RADIUS_CONST * sqrt(h);
      |                                 ^~~~
      |                                 std::sqrt
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:30: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      | ~~~~~~                       ^
      | auto                                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:49: warning: 2 adjacent parameters of 'heightAboveHorizon' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      |                                                 ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:56: note: the first parameter in the range is 'dist'
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      |                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:68: note: the last parameter in the range is 'hA'
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      |                                                                    ^~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:62: note: 'double' and 'float' may be implicitly converted
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:68: warning: parameter name 'hA' is too short, expected at least 3 characters [readability-identifier-length]
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:180:78: warning: parameter name 'hB' is too short, expected at least 3 characters [readability-identifier-length]
  180 | double FGCom_radiowaveModel::heightAboveHorizon(double dist, float hA, float hB) {
      |                                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:181:5: warning: variable 'horizA' of type 'double' can be declared 'const' [misc-const-correctness]
  181 |     double horizA          = FGCom_radiowaveModel::getDistToHorizon(hA);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:182:5: warning: variable 'distB_behHoriz' of type 'double' can be declared 'const' [misc-const-correctness]
  182 |     double distB_behHoriz  = dist - horizA;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:187:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  187 |     } else {
      |       ^~~~~~
  188 |         // positive: the object is somewhere behind A's horizon and thus at least partly covered by earth
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  189 |         double heightB_visible = pow(distB_behHoriz / EARTH_RADIUS_CONST, 2); // the result is the minimum visible altitude at that distance (A sees anything that is higher than this)
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  190 |         double opticalHeight = hB - heightB_visible; // opticalHeight = real height - earth radius clipping
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  191 |         
  192 |         return opticalHeight; // when negative: the object is hidden behind earth positive: the object appears that much above the horizont
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:189:9: warning: variable 'heightB_visible' of type 'double' can be declared 'const' [misc-const-correctness]
  189 |         double heightB_visible = pow(distB_behHoriz / EARTH_RADIUS_CONST, 2); // the result is the minimum visible altitude at that distance (A sees anything that is higher than this)
      |         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:189:34: warning: no header providing "pow" is directly included [misc-include-cleaner]
  189 |         double heightB_visible = pow(distB_behHoriz / EARTH_RADIUS_CONST, 2); // the result is the minimum visible altitude at that distance (A sees anything that is higher than this)
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:190:9: warning: variable 'opticalHeight' of type 'double' can be declared 'const' [misc-const-correctness]
  190 |         double opticalHeight = hB - heightB_visible; // opticalHeight = real height - earth radius clipping
      |         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:196:30: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  196 | double FGCom_radiowaveModel::getSlantDistance(double surfacedist, double hah) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:196:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 | double FGCom_radiowaveModel::getSlantDistance(double surfacedist, double hah) {
      | ~~~~~~                       ^
      | auto                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:198:48: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  198 |     return sqrt( pow(surfacedist, 2) + pow(hah/1000, 2) );
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:201:30: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  201 | double FGCom_radiowaveModel::degreeAboveHorizon(double surfacedist, double hah) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:201:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 | double FGCom_radiowaveModel::degreeAboveHorizon(double surfacedist, double hah) {
      | ~~~~~~                       ^
      | auto                                                                            -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:201:49: warning: 2 adjacent parameters of 'degreeAboveHorizon' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  201 | double FGCom_radiowaveModel::degreeAboveHorizon(double surfacedist, double hah) {
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:201:56: note: the first parameter in the range is 'surfacedist'
  201 | double FGCom_radiowaveModel::degreeAboveHorizon(double surfacedist, double hah) {
      |                                                        ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:201:76: note: the last parameter in the range is 'hah'
  201 | double FGCom_radiowaveModel::degreeAboveHorizon(double surfacedist, double hah) {
      |                                                                            ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:203:5: warning: variable 'distM' of type 'double' can be declared 'const' [misc-const-correctness]
  203 |     double distM = surfacedist * 1000; // in m because hah is also in m
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:203:34: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  203 |     double distM = surfacedist * 1000; // in m because hah is also in m
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:204:5: warning: variable 'hypo' of type 'double' can be declared 'const' [misc-const-correctness]
  204 |     double hypo  = sqrt( pow(distM, 2) + pow(hah, 2) ); 
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:206:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  206 |     if (hah == 0)  return 0; // in case of horizontal alignment
      |                  ^                                             
      |                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:207:19: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  207 |     if (hypo == 0) return (hah >=0)? 90: -90; // in case the tgt point lies directly above/below
      |                   ^                                                                             
      |                    {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:207:38: warning: 90 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  207 |     if (hypo == 0) return (hah >=0)? 90: -90; // in case the tgt point lies directly above/below
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:207:43: warning: 90 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  207 |     if (hypo == 0) return (hah >=0)? 90: -90; // in case the tgt point lies directly above/below
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:208:5: warning: variable 'sinA' of type 'double' can be declared 'const' [misc-const-correctness]
  208 |     double sinA = hah / hypo;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:209:5: warning: variable 'angle' of type 'double' can be declared 'const' [misc-const-correctness]
  209 |     double angle = (sinA != 0)? asin(sinA) * (180.0 / M_PI) : 0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:209:33: warning: no header providing "asin" is directly included [misc-include-cleaner]
  209 |     double angle = (sinA != 0)? asin(sinA) * (180.0 / M_PI) : 0;
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:209:47: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  209 |     double angle = (sinA != 0)? asin(sinA) * (180.0 / M_PI) : 0;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:209:55: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
   38 |     double angle = (sinA != 0)? asin(sinA) * (180.0 / M_PI) : 0;
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:213:30: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  213 | double FGCom_radiowaveModel::getDirection(double lat1, double lon1, double lat2, double lon2) {
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:213:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 | double FGCom_radiowaveModel::getDirection(double lat1, double lon1, double lat2, double lon2) {
      | ~~~~~~                       ^
      | auto                                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:213:69: warning: 2 adjacent parameters of 'getDirection' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  213 | double FGCom_radiowaveModel::getDirection(double lat1, double lon1, double lat2, double lon2) {
      |                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:213:76: note: the first parameter in the range is 'lat2'
  213 | double FGCom_radiowaveModel::getDirection(double lat1, double lon1, double lat2, double lon2) {
      |                                                                            ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:213:89: note: the last parameter in the range is 'lon2'
  213 | double FGCom_radiowaveModel::getDirection(double lat1, double lon1, double lat2, double lon2) {
      |                                                                                         ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:219:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  219 |     if (lat2 < lat1) dLat *= -1; // apply sign (down is negative vector)
      |                     ^                                                   
      |                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:220:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  220 |     if (lon2 < lon1) dLon *= -1; // apply sign (left is negative vector)
      |                     ^                                                   
      |                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:222:19: warning: no header providing "atan2" is directly included [misc-include-cleaner]
  222 |     double brng = atan2(dLat, dLon) * (180.0 / M_PI);  // 0°=east, 90°=north, etc; lat=y, lon=x
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:222:40: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  222 |     double brng = atan2(dLat, dLon) * (180.0 / M_PI);  // 0°=east, 90°=north, etc; lat=y, lon=x
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:223:12: warning: 360 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  223 |     brng = 360 - brng; // count degrees clockwise
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:224:13: warning: 90 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  224 |     brng += 90; // atan returns with east=0°, so we need to rotate right (atan counts counter-clockwise)
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:227:16: warning: 360 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  227 |     if (brng < 360) brng += 360;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:227:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  227 |     if (brng < 360) brng += 360;
      |                    ^            
      |                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:227:29: warning: 360 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  227 |     if (brng < 360) brng += 360;
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:228:16: warning: 360 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  228 |     if (brng > 360) brng -= 360;
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:228:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  228 |     if (brng > 360) brng -= 360;
      |                    ^            
      |                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:228:29: warning: 360 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  228 |     if (brng > 360) brng -= 360;
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:229:17: warning: 360 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  229 |     if (brng == 360) brng = 0;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:229:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  229 |     if (brng == 360) brng = 0;
      |                     ^         
      |                      {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:234:30: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  234 | double FGCom_radiowaveModel::getSurfaceDistance(double lat1, double lon1, 
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:234:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  234 | double FGCom_radiowaveModel::getSurfaceDistance(double lat1, double lon1, 
      | ~~~~~~                       ^
      | auto
  235 |                         double lat2, double lon2) {
      |                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:234:49: warning: 2 adjacent parameters of 'getSurfaceDistance' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  234 | double FGCom_radiowaveModel::getSurfaceDistance(double lat1, double lon1, 
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:234:56: note: the first parameter in the range is 'lat1'
  234 | double FGCom_radiowaveModel::getSurfaceDistance(double lat1, double lon1, 
      |                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:234:69: note: the last parameter in the range is 'lon1'
  234 | double FGCom_radiowaveModel::getSurfaceDistance(double lat1, double lon1, 
      |                                                                     ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:235:25: warning: 2 adjacent parameters of 'getSurfaceDistance' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  235 |                         double lat2, double lon2) {
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:235:32: note: the first parameter in the range is 'lat2'
  235 |                         double lat2, double lon2) {
      |                                ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:235:45: note: the last parameter in the range is 'lon2'
  235 |                         double lat2, double lon2) {
      |                                             ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:246:5: warning: variable 'dLat' of type 'double' can be declared 'const' [misc-const-correctness]
  246 |     double dLat = (lat2 - lat1) * 
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:247:28: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  247 |                     M_PI / 180.0; 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:248:5: warning: variable 'dLon' of type 'double' can be declared 'const' [misc-const-correctness]
  248 |     double dLon = (lon2 - lon1) *  
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:249:28: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  249 |                     M_PI / 180.0; 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:252:28: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  252 |     lat1 = (lat1) * M_PI / 180.0; 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:253:28: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  253 |     lat2 = (lat2) * M_PI / 180.0; 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:256:5: warning: variable 'a' of type 'double' can be declared 'const' [misc-const-correctness]
  256 |     double a = pow(sin(dLat / 2), 2) +  
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:256:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  256 |     double a = pow(sin(dLat / 2), 2) +  
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:256:20: warning: no header providing "sin" is directly included [misc-include-cleaner]
  256 |     double a = pow(sin(dLat / 2), 2) +  
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:258:17: warning: no header providing "cos" is directly included [misc-include-cleaner]
  258 |                 cos(lat1) * cos(lat2); 
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:259:5: warning: variable 'rad' of type 'double' can be declared 'const' [misc-const-correctness]
  259 |     double rad = EARTH_RADIUS_AVG; // average earth radius
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:260:5: warning: variable 'c' of type 'double' can be declared 'const' [misc-const-correctness]
  260 |     double c = 2 * asin(sqrt(a)); 
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:260:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  260 |     double c = 2 * asin(sqrt(a)); 
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:283:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  283 | float FGCom_radiowaveModel::getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:283:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  283 | float FGCom_radiowaveModel::getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz) {
      | ~~~~~                       ^
      | auto                                                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:283:66: warning: 3 adjacent parameters of 'getChannelAlignment' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  283 | float FGCom_radiowaveModel::getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz) {
      |                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:283:72: note: the first parameter in the range is 'frq2_real'
  283 | float FGCom_radiowaveModel::getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz) {
      |                                                                        ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:283:106: note: the last parameter in the range is 'core_kHz'
  283 | float FGCom_radiowaveModel::getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz) {
      |                                                                                                          ^~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:286:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  286 |     if (width_kHz < 0) throw "FGCom_radiowaveModel::getFrqMatch() calling error: width_kHz not defined!";
      |                       ^                                                                                  
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:286:30: warning: throwing an exception whose type 'const char *' is not derived from 'std::exception' [hicpp-exception-baseclass]
  286 |     if (width_kHz < 0) throw "FGCom_radiowaveModel::getFrqMatch() calling error: width_kHz not defined!";
      |                        ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:287:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  287 |     if (core_kHz  < 0) throw "FGCom_radiowaveModel::getFrqMatch() calling error: core_kHz not defined!";
      |                       ^                                                                                 
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:287:30: warning: throwing an exception whose type 'const char *' is not derived from 'std::exception' [hicpp-exception-baseclass]
  287 |     if (core_kHz  < 0) throw "FGCom_radiowaveModel::getFrqMatch() calling error: core_kHz not defined!";
      |                        ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:291:5: warning: the value returned by this function should not be disregarded; neglecting it may lead to errors [cert-err33-c]
  291 |     setlocale(LC_NUMERIC,"C");
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:291:5: note: cast the expression to void to silence this warning
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:291:5: warning: function is not thread safe [concurrency-mt-unsafe]
  291 |     setlocale(LC_NUMERIC,"C");
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:291:5: warning: 'setlocale' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/locale.h:122:14: note: resolves to this declaration
  122 | extern char *setlocale (int __category, const char *__locale) __THROW;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:297:5: warning: variable 'diff_kHz' of type 'float' can be declared 'const' [misc-const-correctness]
  297 |     float diff_kHz = std::fabs(frq1_real - frq2_real) * 1000; // Convert MHz to kHz
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:297:22: warning: 'fabs' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  297 |     float diff_kHz = std::fabs(frq1_real - frq2_real) * 1000; // Convert MHz to kHz
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/cmath:234:3: note: resolves to this declaration
  234 |   fabs(float __x)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:297:27: warning: no header providing "std::fabs" is directly included [misc-include-cleaner]
  297 |     float diff_kHz = std::fabs(frq1_real - frq2_real) * 1000; // Convert MHz to kHz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:297:57: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  297 |     float diff_kHz = std::fabs(frq1_real - frq2_real) * 1000; // Convert MHz to kHz
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:301:5: warning: variable 'widthKhz_eff' of type 'float' can be declared 'const' [misc-const-correctness]
  301 |     float widthKhz_eff = (width_kHz) / 2;  // Half channel width (from center to edge)
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:302:5: warning: variable 'corekHz_eff' of type 'float' can be declared 'const' [misc-const-correctness]
  302 |     float corekHz_eff  = core_kHz  / 2;    // Half channel core (from center to core edge)
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:312:18: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  312 |         filter = 1.0 - (diff_kHz / corekHz_eff) * 0.1;  // 90-100% match quality
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:312:51: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  312 |         filter = 1.0 - (diff_kHz / corekHz_eff) * 0.1;  // 90-100% match quality
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:317:9: warning: variable 'normalized_diff' of type 'float' can be declared 'const' [misc-const-correctness]
  317 |         float normalized_diff = (diff_kHz - corekHz_eff) / (widthKhz_eff - corekHz_eff);
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:318:18: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  318 |         filter = 0.9 * std::exp(-3.0 * normalized_diff);  // Exponential decay curve
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:318:18: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:318:29: warning: no header providing "std::exp" is directly included [misc-include-cleaner]
  318 |         filter = 0.9 * std::exp(-3.0 * normalized_diff);  // Exponential decay curve
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:318:34: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  318 |         filter = 0.9 * std::exp(-3.0 * normalized_diff);  // Exponential decay curve
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:327:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  327 |     if (filter > 1.0) filter = 1.0;
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:328:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  328 |     if (filter < 0.0) filter = 0.0;
      |                      ^             
      |                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:1:1: warning: header is missing header guard [llvm-header-guard]
    1 | /* 
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: #includes are not sorted properly [llvm-include-order]
   17 | #include <cstdint>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   17 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   18 | #include <iostream> 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:18:1: warning: system include iostream not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   18 | #include <iostream> 
      | ^~~~~~~~~~~~~~~~~~~
   19 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:19:1: warning: system include cmath not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   19 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   20 | #include <regex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:20:1: warning: system include regex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   20 | #include <regex>
      | ^~~~~~~~~~~~~~~~
   21 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:34:9: warning: macro 'EARTH_RADIUS_CONST' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
   34 | #define EARTH_RADIUS_CONST 3.57  // earth radius factor constant for m/km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:1: warning: replace macro with enum [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      | ^~~~~~~
      |                          =
   36 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' defines an integral constant; prefer an enum instead [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to padding; only needs 172 bytes but is using 192 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:40:15: warning: member variable 'frequency' has public visibility [misc-non-private-member-variables-in-classes]
   40 |         std::string  frequency; // tuned frequency (real carrier frequency)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:41:15: warning: member variable 'dialedFRQ' has public visibility [misc-non-private-member-variables-in-classes]
   41 |         std::string  dialedFRQ; // dialed frequency (aka "channel"; what was supplied from the COMn_FRQ= field)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:42:8: warning: member variable 'power_btn' has public visibility [misc-non-private-member-variables-in-classes]
   42 |         bool  power_btn;     // true if switched on
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:43:8: warning: member variable 'volts' has public visibility [misc-non-private-member-variables-in-classes]
   43 |         float volts;         // how much electric power it has (>0 = on)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:44:8: warning: member variable 'serviceable' has public visibility [misc-non-private-member-variables-in-classes]
   44 |         bool  serviceable;   // false if broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:45:8: warning: member variable 'ptt' has public visibility [misc-non-private-member-variables-in-classes]
   45 |         bool  ptt;           // true if PTT is actually pushed (synced to remotes and used to determine reception)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:46:8: warning: member variable 'ptt_req' has public visibility [misc-non-private-member-variables-in-classes]
   46 |         bool  ptt_req;       // true if PTT is requested from client/udp
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:47:8: warning: member variable 'volume' has public visibility [misc-non-private-member-variables-in-classes]
   47 |         float volume;        // volume, 0.0->1.0
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:48:8: warning: member variable 'pwr' has public visibility [misc-non-private-member-variables-in-classes]
   48 |         float pwr;           // tx power in watts
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:49:8: warning: member variable 'operable' has public visibility [misc-non-private-member-variables-in-classes]
   49 |         bool  operable;      // false if switched off, not powered or broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:50:8: warning: member variable 'squelch' has public visibility [misc-non-private-member-variables-in-classes]
   50 |         float squelch;       // squelch setting (cutoff signal below this quality)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:51:8: warning: member variable 'rdfEnabled' has public visibility [misc-non-private-member-variables-in-classes]
   51 |         bool  rdfEnabled;    // if radio can receive RDF information
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:52:8: warning: member variable 'channelWidth' has public visibility [misc-non-private-member-variables-in-classes]
   52 |         float channelWidth;  // channel width in kHz
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:53:8: warning: member variable 'publish' has public visibility [misc-non-private-member-variables-in-classes]
   53 |         bool  publish;       // if set to false, radio will not be broadcast to other plugins (implies receive-only)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:56:14: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   56 |         std::string antenna_type;      // Type of antenna (vertical, yagi, loop, etc.)
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:57:14: warning: member variable 'frequency_band' has public visibility [misc-non-private-member-variables-in-classes]
   57 |         std::string frequency_band;    // Frequency band for regulatory compliance
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:58:8: warning: member variable 'power_efficiency' has public visibility [misc-non-private-member-variables-in-classes]
   58 |         float power_efficiency;        // Current power efficiency (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:59:7: warning: member variable 'power_limiting_enabled' has public visibility [misc-non-private-member-variables-in-classes]
   59 |         bool power_limiting_enabled;   // Whether automatic power limiting is enabled
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:60:8: warning: member variable 'swr' has public visibility [misc-non-private-member-variables-in-classes]
   60 |         float swr;                     // Standing Wave Ratio
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:61:8: warning: member variable 'temperature' has public visibility [misc-non-private-member-variables-in-classes]
   61 |         float temperature;             // Antenna temperature in Celsius
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:62:8: warning: member variable 'battery_level' has public visibility [misc-non-private-member-variables-in-classes]
   62 |         float battery_level;           // Battery level (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:64:2: warning: 'fgcom_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   64 |         fgcom_radio()  {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:9: warning: 'frequency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   40 |         frequency   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   65 |         frequency   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:9: warning: 'dialedFRQ' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   41 |         dialedFRQ   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |         dialedFRQ   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:67:9: warning: 'power_btn' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   42 |         power_btn   = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:9: warning: 'volts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   43 |         volts       = 12;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:23: warning: 12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   68 |         volts       = 12;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:69:9: warning: 'serviceable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   44 |         serviceable = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:70:9: warning: 'ptt' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   45 |         ptt         = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:71:9: warning: 'ptt_req' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   46 |         ptt_req     = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:72:9: warning: 'volume' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   47 |         volume      = 1.0;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:9: warning: 'pwr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   48 |         pwr         = 10;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:23: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   73 |         pwr         = 10;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:74:9: warning: 'operable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   49 |         operable    = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:9: warning: 'squelch' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   50 |         squelch     = 0.1;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:23: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   75 |         squelch     = 0.1;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:76:9: warning: 'rdfEnabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   51 |         rdfEnabled  = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:77:9: warning: 'channelWidth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   52 |         channelWidth = -1;   // let the selected radio model decide on defaults
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:78:9: warning: 'publish' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   53 |         publish     = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:9: warning: 'antenna_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |         antenna_type = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |         antenna_type = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:9: warning: 'frequency_band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   57 |         frequency_band = "amateur";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |         frequency_band = "amateur";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:9: warning: 'power_efficiency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |         power_efficiency = 0.8f;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |         power_efficiency = 0.8f;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:84:9: warning: 'power_limiting_enabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   59 |         power_limiting_enabled = true;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:9: warning: 'swr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   60 |         swr = 1.0f;
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:15: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   85 |         swr = 1.0f;
      |               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:9: warning: 'temperature' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   61 |         temperature = 25.0f;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   86 |         temperature = 25.0f;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:9: warning: 'battery_level' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   62 |         battery_level = 1.0f;
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   87 |         battery_level = 1.0f;
      |                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to padding; only needs 105 bytes but is using 304 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_amateur_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_amateur_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:93:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:94:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:95:17: warning: member variable 'grid_locator' has public visibility [misc-non-private-member-variables-in-classes]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:96:11: warning: member variable 'power_watts' has public visibility [misc-non-private-member-variables-in-classes]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:97:10: warning: member variable 'is_amateur' has public visibility [misc-non-private-member-variables-in-classes]
   97 |     bool is_amateur;            // Amateur radio flag
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:98:9: warning: member variable 'itu_region' has public visibility [misc-non-private-member-variables-in-classes]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:5: warning: 'fgcom_amateur_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:29: warning: initializer for base class 'fgcom_radio' is redundant [readability-redundant-member-init]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                     
      |                     {""}
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                     
      |                     {"USB"}
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
      |         ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |         mode = "USB";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:9: warning: 'grid_locator' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                             
      |                             {""}
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         grid_locator = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:104:9: warning: 'power_watts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |                      
      |                      {100.0}
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:105:9: warning: 'is_amateur' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   97 |     bool is_amateur;            // Amateur radio flag
      |                    
      |                    {false}
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:106:9: warning: 'itu_region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |                   
      |                   {1}
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
  106 |         itu_region = 1;  // Default to Region 1
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: warning: accessing fields in struct 'fgcom_radiowave_signal' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
  113 | struct fgcom_radiowave_signal {
      |        ^
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
  122 |     };
  123 | };
      |  
      |   __attribute__((aligned(16)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: note: use "__attribute__((aligned(16)))" to align struct 'fgcom_radiowave_signal' to 16 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:114:11: warning: member variable 'quality' has public visibility [misc-non-private-member-variables-in-classes]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:115:11: warning: member variable 'direction' has public visibility [misc-non-private-member-variables-in-classes]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:116:11: warning: member variable 'verticalAngle' has public visibility [misc-non-private-member-variables-in-classes]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:118:5: warning: 'fgcom_radiowave_signal' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  118 |     fgcom_radiowave_signal()  {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:119:9: warning: 'quality' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |                  
      |                  {-1}
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:120:9: warning: 'direction' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |                    
      |                    {-1}
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:121:9: warning: 'verticalAngle' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |                        
      |                        {-1}
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to padding; only needs 65 bytes but is using 72 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radiowave_freqConvRes'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radiowave_freqConvRes' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: constructor does not initialize these fields: isNumeric [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
      |                   
      |                   {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      | ~~~~ ^                                         
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:46: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: warning: destructor of 'FGCom_radiowaveModel' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
  148 | class FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: note: make it public and virtual
  148 | class FGCom_radiowaveModel {
      |       ^
  149 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:161:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     virtual std::string getType() = 0;  // pure-virtual: cannot be provided by the base class
      |             ~~~~~~~~~~~ ^
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:176:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) = 0;
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^
      |             auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:185:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     virtual std::string conv_chan2freq(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:194:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |     virtual std::string conv_freq2chan(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |             ~~~~~ ^
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:247:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |     virtual float getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz);
      |             ~~~~~ ^                                                                                     
      |             auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:256:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |     virtual bool isCompatible(FGCom_radiowaveModel *otherModel);
      |             ~~~~ ^                                             
      |             auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     virtual double getDistToHorizon(float h);
      |             ~~~~~~ ^                        
      |             auto                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:43: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  265 |     virtual double getDistToHorizon(float h);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |             ~~~~~~ ^                                                  
      |             auto                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:58: warning: parameter name 'hA' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:68: warning: parameter name 'hB' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:286:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  286 |     virtual double getSlantDistance(double surfacedist, double hah);
      |             ~~~~~~ ^                                               
      |             auto                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:296:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 |     virtual double degreeAboveHorizon(double surfacedist, double hah);
      |             ~~~~~~ ^                                                 
      |             auto                                                      -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:307:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     virtual double getDirection(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                               
      |             auto                                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:319:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  319 |     virtual double getSurfaceDistance(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                                     
      |             auto                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:338:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  338 |     static std::unique_ptr<FGCom_radiowaveModel> selectModel(std::string freq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |            auto                                                                -> std::unique_ptr<FGCom_radiowaveModel>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                               
      |            auto                                                         -> fgcom_radiowave_freqConvRes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef RADIO_MODEL_AMATEUR_H
      |         ^~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_AMATEUR_H
   19 | #define RADIO_MODEL_AMATEUR_H
      |         ~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_AMATEUR_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include "radio_model.h"
      | ^        ~~~~~~~~~~~~~~~
      |          "amateur_radio.h"
   22 | #include "amateur_radio.h"
      |          ~~~~~~~~~~~~~~~~~
      |          "audio.h"
   23 | #include "audio.h"
      |          ~~~~~~~~~
      |          "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:32:7: warning: destructor of 'FGCom_radiowaveModel_Amateur' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
   32 | class FGCom_radiowaveModel_Amateur : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:32:7: note: make it public and virtual
   32 | class FGCom_radiowaveModel_Amateur : public FGCom_radiowaveModel {
      |       ^
   33 | private:
   34 |     int itu_region;  // ITU region for this instance
   35 |     static FGCom_SolarDataProvider solar_provider;
   36 |     
   37 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:38:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
   38 |     FGCom_radiowaveModel_Amateur(int region = 1);
      |     ^
      |     explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:38:34: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   38 |     FGCom_radiowaveModel_Amateur(int region = 1);
      |                                  ^          ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:40:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   40 |     std::string getType();
      |                 ^        
      |                           override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:40:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   40 |     std::string getType();
      |     ~~~~~~~~~~~ ^        
      |     auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:41:10: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   41 |     bool isCompatible(FGCom_radiowaveModel *otherModel);
      |          ^                                             
      |                                                         override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:41:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   41 |     bool isCompatible(FGCom_radiowaveModel *otherModel);
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:42:28: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   42 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power);
      |                            ^                                                                                                 
      |                                                                                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:42:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                                                                 
      |     auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:43:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   43 |     std::string conv_chan2freq(std::string frq);
      |                 ^                              
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:43:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   43 |     std::string conv_chan2freq(std::string frq);
      |     ~~~~~~~~~~~ ^                              
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:44:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   44 |     std::string conv_freq2chan(std::string frq);
      |                 ^                              
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:44:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   44 |     std::string conv_freq2chan(std::string frq);
      |     ~~~~~~~~~~~ ^                              
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:45:11: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   45 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |           ^                                          
      |                                                       override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:45:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   45 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |     ~~~~~ ^                                          
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:45:35: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
   45 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:45:51: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
   45 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_amateur.h:46:10: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   46 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz);
      |          ^                                                                                                                                                   
      |                                                                                                                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef RADIO_MODEL_HF_H
      |         ^~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_HF_H
   19 | #define RADIO_MODEL_HF_H
      |         ~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_HF_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include "radio_model.h"
      | ^        ~~~~~~~~~~~~~~~
      |          "power_management.h"
   22 | #include "solar_data.h"
      |          ~~~~~~~~~~~~~~
      |          "radio_model.h"
   23 | #include "power_management.h"
      |          ~~~~~~~~~~~~~~~~~~~~
      |          "solar_data.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:32:7: warning: destructor of 'FGCom_radiowaveModel_HF' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
   32 | class FGCom_radiowaveModel_HF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:32:7: note: make it public and virtual
   32 | class FGCom_radiowaveModel_HF : public FGCom_radiowaveModel {
      |       ^
   33 | private:
   34 |     static FGCom_SolarDataProvider solar_provider;
   35 |     
   36 | protected:
   37 |     virtual float calcPowerDistance(float power, double slantDist);
   38 |     
   39 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:37:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   37 |     virtual float calcPowerDistance(float power, double slantDist);
      |             ~~~~~ ^                                               
      |             auto                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:40:25: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   40 |     virtual std::string getType();
      |     ~~~~~~~             ^        
      |                                   override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:40:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   40 |     virtual std::string getType();
      |             ~~~~~~~~~~~ ^        
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:41:25: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   41 |     virtual std::string conv_chan2freq(std::string frq);
      |     ~~~~~~~             ^                              
      |                                                         override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:41:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   41 |     virtual std::string conv_chan2freq(std::string frq);
      |             ~~~~~~~~~~~ ^                              
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:42:25: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   42 |     virtual std::string conv_freq2chan(std::string frq);
      |     ~~~~~~~             ^                              
      |                                                         override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:42:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 |     virtual std::string conv_freq2chan(std::string frq);
      |             ~~~~~~~~~~~ ^                              
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:43:19: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   43 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |     ~~~~~~~       ^                                          
      |                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:43:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   43 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |             ~~~~~ ^                                          
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:43:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
   43 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:43:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
   43 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:44:18: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   44 |     virtual void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz);
      |     ~~~~~~~      ^                                                                                                                                                   
      |                                                                                                                                                                       override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:45:36: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   45 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power);
      |     ~~~~~~~                        ^                                                                                                 
      |                                                                                                                                       override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.h:45:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   45 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power);
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^                                                                                                 
      |             auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef RADIO_MODEL_STRING_H
      |         ^~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_STRING_H
   19 | #define RADIO_MODEL_STRING_H
      |         ~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_STRING_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include "radio_model.h"
      | ^        ~~~~~~~~~~~~~~~
      |          "audio.h"
   22 | #include "radio_model_vhf.h"
      |          ~~~~~~~~~~~~~~~~~~~
      |          "radio_model.h"
   23 | #include "audio.h"
      |          ~~~~~~~~~
      |          "radio_model_vhf.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:30:7: warning: destructor of 'FGCom_radiowaveModel_String' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
   30 | class FGCom_radiowaveModel_String : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:30:7: note: make it public and virtual
   30 | class FGCom_radiowaveModel_String : public FGCom_radiowaveModel {
      |       ^
   31 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:32:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   32 |     std::string getType();
      |                 ^        
      |                           override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:32:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   32 |     std::string getType();
      |     ~~~~~~~~~~~ ^        
      |     auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:33:28: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   33 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power);
      |                            ^                                                                                                 
      |                                                                                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:33:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power);
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                                                                 
      |     auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:34:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   34 |     std::string conv_chan2freq(std::string frq);
      |                 ^                              
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:34:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   34 |     std::string conv_chan2freq(std::string frq);
      |     ~~~~~~~~~~~ ^                              
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:35:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   35 |     std::string conv_freq2chan(std::string frq);
      |                 ^                              
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:35:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   35 |     std::string conv_freq2chan(std::string frq);
      |     ~~~~~~~~~~~ ^                              
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:36:11: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   36 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |           ^                                          
      |                                                       override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:36:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   36 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |     ~~~~~ ^                                          
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:36:35: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
   36 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:36:51: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
   36 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2);
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_string.h:37:10: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   37 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz);
      |          ^                                                                                                                                                   
      |                                                                                                                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef RADIO_MODEL_UHF_H
      |         ^~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_UHF_H
   19 | #define RADIO_MODEL_UHF_H
      |         ~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_UHF_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include "radio_model.h"
      | ^        ~~~~~~~~~~~~~~~
      |          "antenna_ground_system.h"
   22 | #include "pattern_interpolation.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "antenna_pattern_mapping.h"
   23 | #include "antenna_ground_system.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "pattern_interpolation.h"
   24 | #include "antenna_pattern_mapping.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "propagation_physics.h"
   25 | #include "propagation_physics.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~
      |          "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:32:7: warning: class 'FGCom_radiowaveModel_UHF' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   32 | class FGCom_radiowaveModel_UHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:53:18: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   53 |     virtual void processAudioSamples(fgcom_radio lclRadio, float signalQuality, 
      |     ~~~~~~~      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:57:36: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   57 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1,
      |     ~~~~~~~                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:57:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   57 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1,
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^
      |             auto
   58 |                           double lat2, double lon2, float alt2, float power) override;
      |                                                                              -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:61:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   61 |     float calcPowerDistance(float power_watts, double distance_km, 
      |     ~~~~~ ^
      |     auto
   62 |                           double altitude_m, double frequency_mhz);
      |                                                                   
      |                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:65:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   65 |     virtual std::string getType() override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:65:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   65 |     virtual std::string getType() override;
      |             ~~~~~~~~~~~ ^
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:66:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   66 |     virtual std::string conv_chan2freq(std::string frq) override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:66:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   66 |     virtual std::string conv_chan2freq(std::string frq) override;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:67:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   67 |     virtual std::string conv_freq2chan(std::string frq) override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:67:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   67 |     virtual std::string conv_freq2chan(std::string frq) override;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:68:19: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   68 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |     ~~~~~~~       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:68:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |             ~~~~~ ^
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:68:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
   68 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:68:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
   68 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:71:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   71 |     float getAntennaGain(const std::string& antenna_name, int frequency_mhz, 
      |     ~~~~~ ^
      |     auto
   72 |                         double elevation_deg, double azimuth_deg, double altitude_m, 
   73 |                         int vehicle_type, int antenna_type);
      |                                                            
      |                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:76:5: warning: function 'getAvailableUHFPatterns' should be marked [[nodiscard]] [modernize-use-nodiscard]
   76 |     std::vector<std::string> getAvailableUHFPatterns() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:76:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   76 |     std::vector<std::string> getAvailableUHFPatterns() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                              
      |     auto                                                     -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:79:5: warning: function 'hasUHFPattern' should be marked [[nodiscard]] [modernize-use-nodiscard]
   79 |     bool hasUHFPattern(const std::string& pattern_name) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.h:79:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   79 |     bool hasUHFPattern(const std::string& pattern_name) const;
      |     ~~~~ ^                                                   
      |     auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef RADIO_MODEL_VHF_H
      |         ^~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_VHF_H
   19 | #define RADIO_MODEL_VHF_H
      |         ~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_VHF_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include "radio_model.h"
      | ^        ~~~~~~~~~~~~~~~
      |          "antenna_ground_system.h"
   22 | #include "pattern_interpolation.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "antenna_pattern_mapping.h"
   23 | #include "antenna_ground_system.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "atmospheric_ducting.h"
   24 | #include "antenna_pattern_mapping.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "enhanced_multipath.h"
   25 | #include "propagation_physics.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~
      |          "pattern_interpolation.h"
   26 | #include "atmospheric_ducting.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~
      |          "propagation_physics.h"
   27 | #include "enhanced_multipath.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~
      |          "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:34:7: warning: class 'FGCom_radiowaveModel_VHF' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   34 | class FGCom_radiowaveModel_VHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:70:18: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   70 |     virtual void processAudioSamples(fgcom_radio lclRadio, float signalQuality, 
      |     ~~~~~~~      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:74:36: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   74 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1,
      |     ~~~~~~~                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:74:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1,
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^
      |             auto
   75 |                           double lat2, double lon2, float alt2, float power) override;
      |                                                                              -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:78:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   78 |     float calcPowerDistance(float power_watts, double distance_km, 
      |     ~~~~~ ^
      |     auto
   79 |                           double altitude_m, double frequency_mhz);
      |                                                                   
      |                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:82:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   82 |     virtual std::string getType() override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:82:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |     virtual std::string getType() override;
      |             ~~~~~~~~~~~ ^
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:83:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   83 |     virtual std::string conv_chan2freq(std::string frq) override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:83:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   83 |     virtual std::string conv_chan2freq(std::string frq) override;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:84:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   84 |     virtual std::string conv_freq2chan(std::string frq) override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:84:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     virtual std::string conv_freq2chan(std::string frq) override;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:19: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |     ~~~~~~~       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |             ~~~~~ ^
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:88:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     float getAntennaGain(const std::string& antenna_name, int frequency_mhz, 
      |     ~~~~~ ^
      |     auto
   89 |                         double elevation_deg, double azimuth_deg, double altitude_m, 
   90 |                         int vehicle_type, int antenna_type);
      |                                                            
      |                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:93:5: warning: function 'getAvailableVHFPatterns' should be marked [[nodiscard]] [modernize-use-nodiscard]
   93 |     std::vector<std::string> getAvailableVHFPatterns() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:93:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     std::vector<std::string> getAvailableVHFPatterns() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                              
      |     auto                                                     -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:96:5: warning: function 'hasVHFPattern' should be marked [[nodiscard]] [modernize-use-nodiscard]
   96 |     bool hasVHFPattern(const std::string& pattern_name) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:96:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   96 |     bool hasVHFPattern(const std::string& pattern_name) const;
      |     ~~~~ ^                                                   
      |     auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_SOLAR_DATA_H
      |         ^~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_SOLAR_DATA_H
   19 | #define FGCOM_SOLAR_DATA_H
      |         ~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_SOLAR_DATA_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:22:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:23:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   24 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:24:1: warning: system include thread not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   24 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   25 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:25:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   25 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   26 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: warning: accessing fields in struct 'fgcom_solar_conditions' is inefficient due to padding; only needs 41 bytes but is using 48 bytes [altera-struct-pack-align]
   28 | struct fgcom_solar_conditions {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_solar_conditions'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: warning: accessing fields in struct 'fgcom_solar_conditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   28 | struct fgcom_solar_conditions {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: note: use "__attribute__((aligned(64)))" to align struct 'fgcom_solar_conditions' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:29:11: warning: member variable 'sfi' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     float sfi;                  // Solar Flux Index (10.7cm)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:30:11: warning: member variable 'k_index' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     float k_index;              // Geomagnetic K-index (0-9)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:31:11: warning: member variable 'a_index' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     float a_index;              // Planetary A-index
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:32:12: warning: member variable 'solar_zenith' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:33:10: warning: member variable 'is_day' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     bool is_day;                // Day/night flag
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:34:9: warning: member variable 'day_of_year' has public visibility [misc-non-private-member-variables-in-classes]
   34 |     int day_of_year;            // Day of year (1-366)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:35:12: warning: member variable 'solar_declination' has public visibility [misc-non-private-member-variables-in-classes]
   35 |     double solar_declination;   // Solar declination angle
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:36:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:38:5: warning: 'fgcom_solar_conditions' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   38 |     fgcom_solar_conditions() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:39:9: warning: 'sfi' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   29 |     float sfi;                  // Solar Flux Index (10.7cm)
      |              
      |              {70.0}
   30 |     float k_index;              // Geomagnetic K-index (0-9)
   31 |     float a_index;              // Planetary A-index
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:39:15: warning: 70.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   39 |         sfi = 70.0;             // Default quiet sun value
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:40:9: warning: 'k_index' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   30 |     float k_index;              // Geomagnetic K-index (0-9)
      |                  
      |                  {2.0}
   31 |     float a_index;              // Planetary A-index
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:40:19: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   40 |         k_index = 2.0;          // Default quiet conditions
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:41:9: warning: 'a_index' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   31 |     float a_index;              // Planetary A-index
      |                  
      |                  {7.0}
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:41:19: warning: 7.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   41 |         a_index = 7.0;          // Default quiet conditions
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:42:9: warning: 'solar_zenith' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
      |                        
      |                        {90.0}
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:42:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         solar_zenith = 90.0;    // Default to horizon
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:43:9: warning: 'is_day' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   33 |     bool is_day;                // Day/night flag
      |                
      |                {false}
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
   43 |         is_day = false;         // Default to night
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:44:9: warning: 'day_of_year' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   34 |     int day_of_year;            // Day of year (1-366)
      |                    
      |                    {1}
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
   43 |         is_day = false;         // Default to night
   44 |         day_of_year = 1;
      |         ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:45:9: warning: 'solar_declination' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   35 |     double solar_declination;   // Solar declination angle
      |                             
      |                             {0.0}
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
   43 |         is_day = false;         // Default to night
   44 |         day_of_year = 1;
   45 |         solar_declination = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:46:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:46:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:51:7: warning: class 'FGCom_SolarDataProvider' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   51 | class FGCom_SolarDataProvider {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:73:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     fgcom_solar_conditions getCurrentConditions();
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |     auto                                          -> fgcom_solar_conditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:74:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 |     bool updateFromNOAA();
      |     ~~~~ ^               
      |     auto                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:79:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   79 |     double calculateSolarZenith(double lat, double lon, const std::chrono::system_clock::time_point& time);
      |     ~~~~~~ ^                                                                                              
      |     auto                                                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:80:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     double calculateSolarDeclination(int day_of_year);
      |     ~~~~~~ ^                                         
      |     auto                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:81:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   81 |     bool isDayTime(double lat, double lon, const std::chrono::system_clock::time_point& time);
      |     ~~~~ ^                                                                                   
      |     auto                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:82:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |     int getDayOfYear(const std::chrono::system_clock::time_point& time);
      |     ~~~ ^                                                              
      |     auto                                                                -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:85:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     bool isDataValid();
      |     ~~~~ ^            
      |     auto               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:89:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   89 |     bool isFeatureEnabled(const std::string& feature_name);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:92:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   92 |     float getSolarFluxEffect(float frequency_mhz);
      |     ~~~~~ ^                                      
      |     auto                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:93:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     float getGeomagneticEffect(float k_index);
      |     ~~~~~ ^                                  
      |     auto                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:94:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     float getDayNightEffect(double solar_zenith, float frequency_mhz);
      |     ~~~~~ ^                                                          
      |     auto                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:99:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     bool fetchSolarFluxIndex();
      |     ~~~~ ^                    
      |     auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:100:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  100 |     bool fetchKIndex();
      |     ~~~~ ^            
      |     auto               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:101:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  101 |     bool fetchAIndex();
      |     ~~~~ ^            
      |     auto               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:105:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |     std::string makeHTTPRequest(const std::string& url);
      |     ~~~~~~~~~~~ ^                                      
      |     auto                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:106:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 |     bool parseSFIResponse(const std::string& json_data);
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:107:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 |     bool parseKIndexResponse(const std::string& json_data);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:108:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 |     bool parseAIndexResponse(const std::string& json_data);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:115:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     static float calculateSolarEffect(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  116 |                                     float frequency_mhz, 
  117 |                                     double distance_km,
  118 |                                     double solar_zenith);
      |                                                         
      |                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:121:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     static float calculateMUF(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  122 |                             double distance_km,
  123 |                             double solar_zenith);
      |                                                 
      |                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:126:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     static float calculateFOT(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  127 |                             double distance_km);
      |                                                
      |                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:130:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  130 |     static float calculateLUF(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  131 |                             double distance_km,
  132 |                             double solar_zenith);
      |                                                 
      |                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:135:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  135 |     static float calculateAbsorption(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  136 |                                    float frequency_mhz,
  137 |                                    double solar_zenith);
      |                                                        
      |                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:140:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     static float calculateSkipZone(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  141 |                                  float frequency_mhz,
  142 |                                  double distance_km);
      |                                                     
      |                                                      -> float
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:99:2: warning: delete called on 'FGCom_radiowaveModel' that is abstract but has non-virtual destructor [clang-diagnostic-delete-abstract-non-virtual-dtor]
   99 |         delete __ptr;
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:404:4: note: in instantiation of member function 'std::default_delete<FGCom_radiowaveModel>::operator()' requested here
  404 |           get_deleter()(std::move(__ptr));
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.cpp:86:20: note: in instantiation of member function 'std::unique_ptr<FGCom_radiowaveModel>::~unique_ptr' requested here
   86 |             return std::unique_ptr<FGCom_radiowaveModel>(new FGCom_radiowaveModel_VHF());
      |                    ^
