error: too many errors emitted, stopping now [clang-diagnostic-error]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:9:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
    9 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   10 | #include <random>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:10:1: warning: #includes are not sorted properly [llvm-include-order]
   10 | #include <random>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:10:1: warning: system include random not allowed [llvmlibc-restrict-system-libc-headers]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:10:1: warning: included header random is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:11:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   11 | #include <sstream>
      | ^~~~~~~~~~~~~~~~~~
   12 | #include <iomanip>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:12:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
   12 | #include <iomanip>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:12:1: warning: included header iomanip is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:13:1: warning: system include chrono not allowed [llvmlibc-restrict-system-libc-headers]
   13 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   14 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:14:1: warning: system include thread not allowed [llvmlibc-restrict-system-libc-headers]
   14 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   15 | #include <curl/curl.h>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:15:1: warning: system include curl/curl.h not allowed [llvmlibc-restrict-system-libc-headers]
   15 | #include <curl/curl.h>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:15:1: warning: included header curl.h is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:16:10: error: 'nlohmann/json.hpp' file not found [clang-diagnostic-error]
   16 | #include <nlohmann/json.hpp>
      |          ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:19:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
   10 | #include <random>
   11 | #include <sstream>
   12 | #include <iomanip>
   13 | #include <chrono>
   14 | #include <thread>
   15 | #include <curl/curl.h>
   16 | #include <nlohmann/json.hpp>
   17 | 
   18 | // Static member definitions
   19 | std::unique_ptr<FGCom_ClientWorkUnitCoordinator> FGCom_ClientWorkUnitCoordinator::instance = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:19:83: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   19 | std::unique_ptr<FGCom_ClientWorkUnitCoordinator> FGCom_ClientWorkUnitCoordinator::instance = nullptr;
      |                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:20:6: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   10 | #include <random>
   11 | #include <sstream>
   12 | #include <iomanip>
   13 | #include <chrono>
   14 | #include <thread>
   15 | #include <curl/curl.h>
   16 | #include <nlohmann/json.hpp>
   17 | 
   18 | // Static member definitions
   19 | std::unique_ptr<FGCom_ClientWorkUnitCoordinator> FGCom_ClientWorkUnitCoordinator::instance = nullptr;
   20 | std::mutex FGCom_ClientWorkUnitCoordinator::instance_mutex;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:20:45: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   20 | std::mutex FGCom_ClientWorkUnitCoordinator::instance_mutex;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:23:67: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   23 | FGCom_ClientWorkUnitCoordinator& FGCom_ClientWorkUnitCoordinator::getInstance() {
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:23:67: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   23 | FGCom_ClientWorkUnitCoordinator& FGCom_ClientWorkUnitCoordinator::getInstance() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                  ^
      | auto                                                                            -> FGCom_ClientWorkUnitCoordinator&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:24:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   24 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:24:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
   24 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:31:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   31 | void FGCom_ClientWorkUnitCoordinator::destroyInstance() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:32:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   32 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:40:1: warning: constructor does not initialize these fields: total_work_units_received, total_work_units_completed, total_work_units_failed, average_processing_time_ms, average_queue_wait_time_ms [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   40 | FGCom_ClientWorkUnitCoordinator::FGCom_ClientWorkUnitCoordinator()
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:40:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   40 | FGCom_ClientWorkUnitCoordinator::FGCom_ClientWorkUnitCoordinator()
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:46:37: warning: 5000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   46 |     , work_unit_request_interval_ms(5000)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:47:29: warning: 30000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   47 |     , heartbeat_interval_ms(30000)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:52:5: warning: 'total_work_units_received' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   52 |     total_work_units_received = 0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:52:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   52 |     total_work_units_received = 0;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:53:5: warning: 'total_work_units_completed' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   53 |     total_work_units_completed = 0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:53:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   53 |     total_work_units_completed = 0;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:54:5: warning: 'total_work_units_failed' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   54 |     total_work_units_failed = 0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:54:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   54 |     total_work_units_failed = 0;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:55:5: warning: 'average_processing_time_ms' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   55 |     average_processing_time_ms = 0.0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:55:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   55 |     average_processing_time_ms = 0.0;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:248:7: note: resolves to this declaration
  248 |       operator=(_Tp __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:56:5: warning: 'average_queue_wait_time_ms' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |     average_queue_wait_time_ms = 0.0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:56:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   56 |     average_queue_wait_time_ms = 0.0;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:248:7: note: resolves to this declaration
  248 |       operator=(_Tp __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:59:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   59 |     client_capability.client_id = "";
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:60:39: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     client_capability.max_memory_mb = 1024;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:66:36: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |     client_capability.active_units = 0;
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:67:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   67 |     client_capability.pending_units = 0;
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:68:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |     client_capability.memory_usage_mb = 0;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:69:47: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |     client_capability.cpu_utilization_percent = 0.0;
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:248:7: note: resolves to this declaration
  248 |       operator=(_Tp __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:70:47: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |     client_capability.gpu_utilization_percent = 0.0;
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:248:7: note: resolves to this declaration
  248 |       operator=(_Tp __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:74:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   74 | bool FGCom_ClientWorkUnitCoordinator::initialize(const std::string& server_url, const std::string& client_id) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:74:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 | bool FGCom_ClientWorkUnitCoordinator::initialize(const std::string& server_url, const std::string& client_id) {
      | ~~~~                                  ^
      | auto                                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:75:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   75 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:81:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |     this->server_url = server_url;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:82:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |     this->client_id = client_id;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:83:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |     client_capability.client_id = client_id;
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:87:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   87 |     workers_running = true;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:88:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   88 |     coordinator_running = true;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:90:76: warning: 'hardware_concurrency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |     int num_threads = std::min(max_concurrent_work_units, static_cast<int>(std::thread::hardware_concurrency()));
      |                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:217:5: note: resolves to this declaration
  217 |     hardware_concurrency() noexcept;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:91:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   91 |     for (int i = 0; i < num_threads; i++) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:91:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'num_threads' and may cause performance degradation [altera-id-dependent-backward-branch]
   91 |     for (int i = 0; i < num_threads; i++) {
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:90:5: note: inferred assignment of ID-dependent value from ID-dependent 
   90 |     int num_threads = std::min(max_concurrent_work_units, static_cast<int>(std::thread::hardware_concurrency()));
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:92:38: warning: 'workerThreadFunction' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   92 |         worker_threads.emplace_back(&FGCom_ClientWorkUnitCoordinator::workerThreadFunction, this);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:66:10: note: resolves to this declaration
   66 |     void workerThreadFunction();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:96:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   96 |     heartbeat_thread = std::thread(&FGCom_ClientWorkUnitCoordinator::heartbeatThreadFunction, this);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:183:13: note: resolves to this declaration
  183 |     thread& operator=(thread&& __t) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:96:37: warning: 'heartbeatThreadFunction' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   96 |     heartbeat_thread = std::thread(&FGCom_ClientWorkUnitCoordinator::heartbeatThreadFunction, this);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:67:10: note: resolves to this declaration
   67 |     void heartbeatThreadFunction();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:100:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  100 |         work_request_thread = std::thread(&FGCom_ClientWorkUnitCoordinator::workRequestThreadFunction, this);
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:183:13: note: resolves to this declaration
  183 |     thread& operator=(thread&& __t) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:100:44: warning: 'workRequestThreadFunction' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  100 |         work_request_thread = std::thread(&FGCom_ClientWorkUnitCoordinator::workRequestThreadFunction, this);
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:68:10: note: resolves to this declaration
   68 |     void workRequestThreadFunction();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:107:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  107 | void FGCom_ClientWorkUnitCoordinator::shutdown() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:113:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  113 |     workers_running = false;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:114:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |     coordinator_running = false;
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:138:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  138 | void FGCom_ClientWorkUnitCoordinator::setConfiguration(const std::map<std::string, std::string>& config) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:139:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  139 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:141:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  141 |     auto it = config.find("max_concurrent_work_units");
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:163:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  163 | void FGCom_ClientWorkUnitCoordinator::setClientCapability(const ClientWorkUnitCapability& capability) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:164:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  164 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:166:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |     client_capability.client_id = client_id;
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:170:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  170 | void FGCom_ClientWorkUnitCoordinator::updateCapability(const std::string& capability_type, const std::string& value) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:170:56: warning: 2 adjacent parameters of 'updateCapability' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  170 | void FGCom_ClientWorkUnitCoordinator::updateCapability(const std::string& capability_type, const std::string& value) {
      |                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:170:75: note: the first parameter in the range is 'capability_type'
  170 | void FGCom_ClientWorkUnitCoordinator::updateCapability(const std::string& capability_type, const std::string& value) {
      |                                                                           ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:170:111: note: the last parameter in the range is 'value'
  170 | void FGCom_ClientWorkUnitCoordinator::updateCapability(const std::string& capability_type, const std::string& value) {
      |                                                                                                               ^~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:171:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  171 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:174:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  174 |         client_capability.max_memory_mb = std::stoi(value);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:29: note: default parameter was declared here
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:174:43: warning: 'stoi' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  174 |         client_capability.max_memory_mb = std::stoi(value);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4120:3: note: resolves to this declaration
 4120 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:178:52: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  178 |         client_capability.network_bandwidth_mbps = std::stod(value);
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:178:52: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4150:29: note: default parameter was declared here
 4150 |   stod(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:178:52: warning: 'stod' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  178 |         client_capability.network_bandwidth_mbps = std::stod(value);
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4150:3: note: resolves to this declaration
 4150 |   stod(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:178:57: warning: no header providing "std::stod" is directly included [misc-include-cleaner]
   14 |         client_capability.network_bandwidth_mbps = std::stod(value);
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:180:51: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  180 |         client_capability.processing_latency_ms = std::stod(value);
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:180:51: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4150:29: note: default parameter was declared here
 4150 |   stod(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:180:51: warning: 'stod' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |         client_capability.processing_latency_ms = std::stod(value);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4150:3: note: resolves to this declaration
 4150 |   stod(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:184:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  184 | ClientWorkUnitCapability FGCom_ClientWorkUnitCoordinator::getClientCapability() const {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:184:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 | ClientWorkUnitCapability FGCom_ClientWorkUnitCoordinator::getClientCapability() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                                  ^
      | auto                                                                                  -> ClientWorkUnitCapability
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:190:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  190 | bool FGCom_ClientWorkUnitCoordinator::enableAutoWorkUnitRequests(bool enable) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:190:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  190 | bool FGCom_ClientWorkUnitCoordinator::enableAutoWorkUnitRequests(bool enable) {
      | ~~~~                                  ^
      | auto                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:191:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  191 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:196:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  196 | bool FGCom_ClientWorkUnitCoordinator::requestSpecificWorkUnitType(WorkUnitType type) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:196:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 | bool FGCom_ClientWorkUnitCoordinator::requestSpecificWorkUnitType(WorkUnitType type) {
      | ~~~~                                  ^
      | auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:196:39: warning: method 'requestSpecificWorkUnitType' can be made static [readability-convert-member-functions-to-static]
  196 | bool FGCom_ClientWorkUnitCoordinator::requestSpecificWorkUnitType(WorkUnitType type) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:196:67: warning: no header providing "WorkUnitType" is directly included [misc-include-cleaner]
    9 | bool FGCom_ClientWorkUnitCoordinator::requestSpecificWorkUnitType(WorkUnitType type) {
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:196:80: warning: parameter 'type' is unused [misc-unused-parameters]
  196 | bool FGCom_ClientWorkUnitCoordinator::requestSpecificWorkUnitType(WorkUnitType type) {
      |                                                                                ^~~~
      |                                                                                 /*type*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:202:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  202 | std::vector<std::string> FGCom_ClientWorkUnitCoordinator::getAssignedWorkUnits() {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:202:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:203:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  203 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:213:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  213 | std::vector<std::string> FGCom_ClientWorkUnitCoordinator::getProcessingWorkUnits() {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:213:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:214:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  214 |     std::lock_guard<std::mutex> lock(processing_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:224:1: warning: no header providing "WorkUnitStatus" is directly included [misc-include-cleaner]
  224 | WorkUnitStatus FGCom_ClientWorkUnitCoordinator::getWorkUnitStatus(const std::string& unit_id) {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:224:49: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  224 | WorkUnitStatus FGCom_ClientWorkUnitCoordinator::getWorkUnitStatus(const std::string& unit_id) {
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:224:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  224 | WorkUnitStatus FGCom_ClientWorkUnitCoordinator::getWorkUnitStatus(const std::string& unit_id) {
      | ~~~~~~~~~~~~~~                                  ^
      | auto                                                                                          -> WorkUnitStatus
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:225:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  225 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:227:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  227 |     auto it = assigned_work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:236:64: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  236 | std::map<std::string, double> FGCom_ClientWorkUnitCoordinator::getStatistics() {
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:236:64: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:250:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  250 | void FGCom_ClientWorkUnitCoordinator::resetStatistics() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:251:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  251 |     total_work_units_received = 0;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:252:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  252 |     total_work_units_completed = 0;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:253:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  253 |     total_work_units_failed = 0;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:371:7: note: resolves to this declaration
  371 |       operator=(__int_type __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:254:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  254 |     average_processing_time_ms = 0.0;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:248:7: note: resolves to this declaration
  248 |       operator=(_Tp __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:255:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  255 |     average_queue_wait_time_ms = 0.0;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:248:7: note: resolves to this declaration
  248 |       operator=(_Tp __i) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:258:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  258 | bool FGCom_ClientWorkUnitCoordinator::isHealthy() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:258:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 | bool FGCom_ClientWorkUnitCoordinator::isHealthy() {
      | ~~~~                                  ^
      | auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:262:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  262 | std::string FGCom_ClientWorkUnitCoordinator::getStatusReport() {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:262:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  262 | std::string FGCom_ClientWorkUnitCoordinator::getStatusReport() {
      | ~~~~~~~~~~~                                  ^
      | auto                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:263:23: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  263 |     std::stringstream ss;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:264:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  264 |     ss << "Client Work Unit Coordinator Status:\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:265:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  265 |     ss << "  Enabled: " << (coordinator_enabled ? "Yes" : "No") << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:265:25: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  265 |     ss << "  Enabled: " << (coordinator_enabled ? "Yes" : "No") << "\n";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:265:65: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  265 |     ss << "  Enabled: " << (coordinator_enabled ? "Yes" : "No") << "\n";
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:266:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  266 |     ss << "  Workers Running: " << (workers_running ? "Yes" : "No") << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:266:33: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  266 |     ss << "  Workers Running: " << (workers_running ? "Yes" : "No") << "\n";
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:266:69: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  266 |     ss << "  Workers Running: " << (workers_running ? "Yes" : "No") << "\n";
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:267:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  267 |     ss << "  Coordinator Running: " << (coordinator_running ? "Yes" : "No") << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:267:37: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  267 |     ss << "  Coordinator Running: " << (coordinator_running ? "Yes" : "No") << "\n";
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:267:77: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  267 |     ss << "  Coordinator Running: " << (coordinator_running ? "Yes" : "No") << "\n";
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:268:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |     ss << "  Auto Request Work Units: " << (auto_request_work_units ? "Yes" : "No") << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:268:41: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |     ss << "  Auto Request Work Units: " << (auto_request_work_units ? "Yes" : "No") << "\n";
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:268:85: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  268 |     ss << "  Auto Request Work Units: " << (auto_request_work_units ? "Yes" : "No") << "\n";
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:269:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     ss << "  Max Concurrent Units: " << max_concurrent_work_units << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:269:38: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     ss << "  Max Concurrent Units: " << max_concurrent_work_units << "\n";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
  191 |       operator<<(int __n);
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:269:67: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  269 |     ss << "  Max Concurrent Units: " << max_concurrent_work_units << "\n";
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:270:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  270 |     ss << "  Assigned Work Units: " << assigned_work_units.size() << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:270:37: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  270 |     ss << "  Assigned Work Units: " << assigned_work_units.size() << "\n";
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:270:67: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  270 |     ss << "  Assigned Work Units: " << assigned_work_units.size() << "\n";
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:271:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  271 |     ss << "  Processing Work Units: " << processing_futures.size() << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:271:39: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  271 |     ss << "  Processing Work Units: " << processing_futures.size() << "\n";
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:271:68: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  271 |     ss << "  Processing Work Units: " << processing_futures.size() << "\n";
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:272:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     ss << "  Total Received: " << total_work_units_received.load() << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:272:32: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     ss << "  Total Received: " << total_work_units_received.load() << "\n";
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:272:68: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     ss << "  Total Received: " << total_work_units_received.load() << "\n";
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:273:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  273 |     ss << "  Total Completed: " << total_work_units_completed.load() << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:273:33: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  273 |     ss << "  Total Completed: " << total_work_units_completed.load() << "\n";
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:273:70: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  273 |     ss << "  Total Completed: " << total_work_units_completed.load() << "\n";
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:274:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  274 |     ss << "  Total Failed: " << total_work_units_failed.load() << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:274:30: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  274 |     ss << "  Total Failed: " << total_work_units_failed.load() << "\n";
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:172:7: note: resolves to this declaration
  172 |       operator<<(unsigned long __n)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:274:64: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  274 |     ss << "  Total Failed: " << total_work_units_failed.load() << "\n";
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:280:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  280 | void FGCom_ClientWorkUnitCoordinator::cleanup() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:281:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  281 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:283:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  283 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:298:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  298 | void FGCom_ClientWorkUnitCoordinator::forceCleanup() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:299:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  299 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:317:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  317 | void FGCom_ClientWorkUnitCoordinator::workerThreadFunction() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:318:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  318 |     while (workers_running) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:319:9: warning: variable 'lock' of type 'std::unique_lock<std::mutex>' can be declared 'const' [misc-const-correctness]
  319 |         std::unique_lock<std::mutex> lock(processing_mutex);
      |         ^
      |                                      const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:319:14: warning: no header providing "std::unique_lock" is directly included [misc-include-cleaner]
  319 |         std::unique_lock<std::mutex> lock(processing_mutex);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:322:65: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  322 |         work_available.wait_for(lock, std::chrono::milliseconds(1000));
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:331:13: warning: variable 'work_lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  331 |             std::lock_guard<std::mutex> work_lock(work_units_mutex);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:354:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  354 | void FGCom_ClientWorkUnitCoordinator::heartbeatThreadFunction() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:355:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  355 |     while (coordinator_running) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:363:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  363 | void FGCom_ClientWorkUnitCoordinator::workRequestThreadFunction() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:364:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  364 |     while (coordinator_running && auto_request_work_units) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:364:12: warning: backward branch (while loop) is ID-dependent due to member reference to 'auto_request_work_units' and may cause performance degradation [altera-id-dependent-backward-branch]
  364 |     while (coordinator_running && auto_request_work_units) {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:33:5: note: inferred assignment of ID-dependent member from ID-dependent 
   33 |     bool auto_request_work_units;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:372:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  372 | bool FGCom_ClientWorkUnitCoordinator::requestWorkUnitsFromServer() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:372:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  372 | bool FGCom_ClientWorkUnitCoordinator::requestWorkUnitsFromServer() {
      | ~~~~                                  ^
      | auto                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:372:39: warning: method 'requestWorkUnitsFromServer' can be made static [readability-convert-member-functions-to-static]
  372 | bool FGCom_ClientWorkUnitCoordinator::requestWorkUnitsFromServer() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:378:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  378 | bool FGCom_ClientWorkUnitCoordinator::submitWorkUnitResult(const std::string& unit_id, 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:378:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  378 | bool FGCom_ClientWorkUnitCoordinator::submitWorkUnitResult(const std::string& unit_id, 
      | ~~~~                                  ^
      | auto
  379 |                                                           const std::vector<double>& result_data, 
  380 |                                                           bool success, 
  381 |                                                           const std::string& error_message) {
      |                                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:382:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  382 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:384:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  384 |     auto it = assigned_work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:389:5: warning: no header providing "WorkUnit" is directly included [misc-include-cleaner]
  389 |     WorkUnit& unit = it->second;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:392:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  392 |     unit.error_message = error_message;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:393:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  393 |     unit.completed_time = std::chrono::system_clock::now();
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:393:27: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  393 |     unit.completed_time = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:397:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  397 |         total_work_units_completed++;
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:400:32: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  400 |         total_work_units_failed++;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:406:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  406 | void FGCom_ClientWorkUnitCoordinator::processWorkUnit(const std::string& unit_id) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:407:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  407 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:409:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  409 |     auto it = assigned_work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:416:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  416 |     unit.started_time = std::chrono::system_clock::now();
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:416:25: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  416 |     unit.started_time = std::chrono::system_clock::now();
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:425:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  425 | std::vector<double> FGCom_ClientWorkUnitCoordinator::executeWorkUnit(const WorkUnit& unit) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:425:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:425:54: warning: method 'executeWorkUnit' can be made static [readability-convert-member-functions-to-static]
  425 | std::vector<double> FGCom_ClientWorkUnitCoordinator::executeWorkUnit(const WorkUnit& unit) {
      |                                                      ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:429:20: warning: 'processPropagationGrid' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  429 |             return FGCom_ClientWorkUnitProcessor::processPropagationGrid(
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:114:32: note: resolves to this declaration
  114 |     static std::vector<double> processPropagationGrid(
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:434:20: warning: 'processAntennaPattern' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  434 |             return FGCom_ClientWorkUnitProcessor::processAntennaPattern(
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:122:32: note: resolves to this declaration
  122 |     static std::vector<double> processAntennaPattern(
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:438:20: warning: 'processFrequencyOffset' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  438 |             return FGCom_ClientWorkUnitProcessor::processFrequencyOffset(
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:129:32: note: resolves to this declaration
  129 |     static std::vector<double> processFrequencyOffset(
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:442:20: warning: 'processAudio' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  442 |             return FGCom_ClientWorkUnitProcessor::processAudio(unit.input_data, unit.parameters);
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:136:32: note: resolves to this declaration
  136 |     static std::vector<double> processAudio(
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:449:20: warning: 'processSolarEffects' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  449 |             return FGCom_ClientWorkUnitProcessor::processSolarEffects(
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:149:32: note: resolves to this declaration
  149 |     static std::vector<double> processSolarEffects(
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:453:20: warning: 'processLightningEffects' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  453 |             return FGCom_ClientWorkUnitProcessor::processLightningEffects(
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:156:32: note: resolves to this declaration
  156 |     static std::vector<double> processLightningEffects(
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:461:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  461 | void FGCom_ClientWorkUnitCoordinator::updateClientCapabilities() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:466:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  466 | void FGCom_ClientWorkUnitCoordinator::handleWorkUnitTimeout(const std::string& unit_id) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:467:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  467 |     std::lock_guard<std::mutex> lock(work_units_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:469:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  469 |     auto it = assigned_work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:477:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  477 |         unit.error_message = "Processing timeout";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:478:32: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  478 |         total_work_units_failed++;
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:482:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  482 | void FGCom_ClientWorkUnitCoordinator::cleanupCompletedWorkUnits() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:483:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  483 |     std::lock_guard<std::mutex> lock(processing_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:498:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  498 | std::vector<double> FGCom_ClientWorkUnitProcessor::processPropagationGrid(
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:498:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:498:52: warning: method 'processPropagationGrid' can be made static [readability-convert-member-functions-to-static]
  498 | std::vector<double> FGCom_ClientWorkUnitProcessor::processPropagationGrid(
      |                                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:499:5: warning: 4 adjacent parameters of 'processPropagationGrid' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  499 |     const std::vector<double>& grid_points,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  500 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  501 |     double tx_power_watts,
      |     ~~~~~~~~~~~~~~~~~~~~~~
  502 |     const std::map<std::string, double>& parameters) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:499:32: note: the first parameter in the range is 'grid_points'
  499 |     const std::vector<double>& grid_points,
      |                                ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:502:42: note: the last parameter in the range is 'parameters'
  502 |     const std::map<std::string, double>& parameters) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:500:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  500 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:500:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:500:12: warning: parameter 'frequency_mhz' is unused [misc-unused-parameters]
  500 |     double frequency_mhz,
      |            ^~~~~~~~~~~~~
      |             /*frequency_mhz*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:501:12: warning: parameter 'tx_power_watts' is unused [misc-unused-parameters]
  501 |     double tx_power_watts,
      |            ^~~~~~~~~~~~~~
      |             /*tx_power_watts*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:507:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  507 |     for (size_t i = 0; i < grid_points.size(); i += 2) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:507:10: warning: no header providing "size_t" is directly included [misc-include-cleaner]
   10 |     for (size_t i = 0; i < grid_points.size(); i += 2) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:512:77: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  512 |             double signal_strength = 1.0 / (1.0 + (lat * lat + lon * lon) / 1000.0);
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:520:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  520 | std::vector<double> FGCom_ClientWorkUnitProcessor::processAntennaPattern(
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:520:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:520:52: warning: method 'processAntennaPattern' can be made static [readability-convert-member-functions-to-static]
  520 | std::vector<double> FGCom_ClientWorkUnitProcessor::processAntennaPattern(
      |                                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:521:5: warning: 3 adjacent parameters of 'processAntennaPattern' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  521 |     const std::vector<double>& antenna_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  522 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  523 |     const std::map<std::string, double>& parameters) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:521:32: note: the first parameter in the range is 'antenna_data'
  521 |     const std::vector<double>& antenna_data,
      |                                ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:523:42: note: the last parameter in the range is 'parameters'
  523 |     const std::map<std::string, double>& parameters) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:522:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  522 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:522:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:535:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  535 | std::vector<double> FGCom_ClientWorkUnitProcessor::processFrequencyOffset(
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:535:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:535:52: warning: method 'processFrequencyOffset' can be made static [readability-convert-member-functions-to-static]
  535 | std::vector<double> FGCom_ClientWorkUnitProcessor::processFrequencyOffset(
      |                                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:536:5: warning: 3 adjacent parameters of 'processFrequencyOffset' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  536 |     const std::vector<double>& audio_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  537 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  538 |     const std::map<std::string, double>& parameters) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:536:32: note: the first parameter in the range is 'audio_data'
  536 |     const std::vector<double>& audio_data,
      |                                ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:538:42: note: the last parameter in the range is 'parameters'
  538 |     const std::map<std::string, double>& parameters) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:537:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  537 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:537:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:550:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  550 | std::vector<double> FGCom_ClientWorkUnitProcessor::processAudio(
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:550:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:550:52: warning: method 'processAudio' can be made static [readability-convert-member-functions-to-static]
  550 | std::vector<double> FGCom_ClientWorkUnitProcessor::processAudio(
      |                                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:551:5: warning: 2 adjacent parameters of 'processAudio' of similar type ('const int &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  551 |     const std::vector<double>& audio_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  552 |     const std::map<std::string, double>& parameters) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:551:32: note: the first parameter in the range is 'audio_data'
  551 |     const std::vector<double>& audio_data,
      |                                ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:552:42: note: the last parameter in the range is 'parameters'
  552 |     const std::map<std::string, double>& parameters) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:559:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  559 | std::vector<double> FGCom_ClientWorkUnitProcessor::processBatchQSO(
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:559:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:559:52: warning: method 'processBatchQSO' can be made static [readability-convert-member-functions-to-static]
  559 | std::vector<double> FGCom_ClientWorkUnitProcessor::processBatchQSO(
      |                                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:560:5: warning: 3 adjacent parameters of 'processBatchQSO' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  560 |     const std::vector<std::vector<double>>& qso_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  561 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  562 |     const std::map<std::string, double>& parameters) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:560:45: note: the first parameter in the range is 'qso_data'
  560 |     const std::vector<std::vector<double>>& qso_data,
      |                                             ^~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:562:42: note: the last parameter in the range is 'parameters'
  562 |     const std::map<std::string, double>& parameters) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:561:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  561 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:561:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:561:12: warning: parameter 'frequency_mhz' is unused [misc-unused-parameters]
  561 |     double frequency_mhz,
      |            ^~~~~~~~~~~~~
      |             /*frequency_mhz*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:578:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  578 | std::vector<double> FGCom_ClientWorkUnitProcessor::processSolarEffects(
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:578:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:578:52: warning: method 'processSolarEffects' can be made static [readability-convert-member-functions-to-static]
  578 | std::vector<double> FGCom_ClientWorkUnitProcessor::processSolarEffects(
      |                                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:579:5: warning: 3 adjacent parameters of 'processSolarEffects' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  579 |     const std::vector<double>& solar_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  580 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  581 |     const std::map<std::string, double>& parameters) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:579:32: note: the first parameter in the range is 'solar_data'
  579 |     const std::vector<double>& solar_data,
      |                                ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:581:42: note: the last parameter in the range is 'parameters'
  581 |     const std::map<std::string, double>& parameters) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:580:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  580 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:580:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:593:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  593 | std::vector<double> FGCom_ClientWorkUnitProcessor::processLightningEffects(
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:593:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:593:52: warning: method 'processLightningEffects' can be made static [readability-convert-member-functions-to-static]
  593 | std::vector<double> FGCom_ClientWorkUnitProcessor::processLightningEffects(
      |                                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:594:5: warning: 3 adjacent parameters of 'processLightningEffects' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  594 |     const std::vector<double>& lightning_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  595 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  596 |     const std::map<std::string, double>& parameters) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:594:32: note: the first parameter in the range is 'lightning_data'
  594 |     const std::vector<double>& lightning_data,
      |                                ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:596:42: note: the last parameter in the range is 'parameters'
  596 |     const std::map<std::string, double>& parameters) {
      |                                          ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:595:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  595 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:595:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:609:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  609 | FGCom_ClientServerCommunicator::FGCom_ClientServerCommunicator(const std::string& server_url, const std::string& client_id)
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:609:64: warning: 2 adjacent parameters of 'FGCom_ClientServerCommunicator' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  609 | FGCom_ClientServerCommunicator::FGCom_ClientServerCommunicator(const std::string& server_url, const std::string& client_id)
      |                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:609:83: note: the first parameter in the range is 'server_url'
  609 | FGCom_ClientServerCommunicator::FGCom_ClientServerCommunicator(const std::string& server_url, const std::string& client_id)
      |                                                                                   ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:609:114: note: the last parameter in the range is 'client_id'
  609 | FGCom_ClientServerCommunicator::FGCom_ClientServerCommunicator(const std::string& server_url, const std::string& client_id)
      |                                                                                                                  ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:609:64: warning: pass by value and use std::move [modernize-pass-by-value]
   17 | FGCom_ClientServerCommunicator::FGCom_ClientServerCommunicator(const std::string& server_url, const std::string& client_id)
      |                                                                ^~~~~~~~~~~~~~~~~~
      |                                                                std::string 
   18 |     : server_url(server_url)
      |                            
      |                  std::move()
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:609:95: warning: pass by value and use std::move [modernize-pass-by-value]
  609 | FGCom_ClientServerCommunicator::FGCom_ClientServerCommunicator(const std::string& server_url, const std::string& client_id)
      |                                                                                               ^~~~~~~~~~~~~~~~~~
      |                                                                                               std::string 
  610 |     : server_url(server_url)
  611 |     , client_id(client_id)
      |                          
      |                 std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:613:29: warning: 5000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  613 |     , connection_timeout_ms(5000) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:615:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  615 |     last_heartbeat = std::chrono::system_clock::now();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:615:22: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  615 |     last_heartbeat = std::chrono::system_clock::now();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:618:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  618 | bool FGCom_ClientServerCommunicator::registerClient(const ClientWorkUnitCapability& capability) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:618:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  618 | bool FGCom_ClientServerCommunicator::registerClient(const ClientWorkUnitCapability& capability) {
      | ~~~~                                 ^
      | auto                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:618:38: warning: method 'registerClient' can be made static [readability-convert-member-functions-to-static]
  618 | bool FGCom_ClientServerCommunicator::registerClient(const ClientWorkUnitCapability& capability) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:618:85: warning: parameter 'capability' is unused [misc-unused-parameters]
  618 | bool FGCom_ClientServerCommunicator::registerClient(const ClientWorkUnitCapability& capability) {
      |                                                                                     ^~~~~~~~~~
      |                                                                                      /*capability*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:624:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  624 | bool FGCom_ClientServerCommunicator::unregisterClient() {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:624:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  624 | bool FGCom_ClientServerCommunicator::unregisterClient() {
      | ~~~~                                 ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:624:38: warning: method 'unregisterClient' can be made static [readability-convert-member-functions-to-static]
  624 | bool FGCom_ClientServerCommunicator::unregisterClient() {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:630:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  630 | bool FGCom_ClientServerCommunicator::updateClientCapability(const ClientWorkUnitCapability& capability) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:630:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  630 | bool FGCom_ClientServerCommunicator::updateClientCapability(const ClientWorkUnitCapability& capability) {
      | ~~~~                                 ^
      | auto                                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:630:38: warning: method 'updateClientCapability' can be made static [readability-convert-member-functions-to-static]
  630 | bool FGCom_ClientServerCommunicator::updateClientCapability(const ClientWorkUnitCapability& capability) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:630:93: warning: parameter 'capability' is unused [misc-unused-parameters]
  630 | bool FGCom_ClientServerCommunicator::updateClientCapability(const ClientWorkUnitCapability& capability) {
      |                                                                                             ^~~~~~~~~~
      |                                                                                              /*capability*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:636:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  636 | bool FGCom_ClientServerCommunicator::sendHeartbeat() {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:636:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  636 | bool FGCom_ClientServerCommunicator::sendHeartbeat() {
      | ~~~~                                 ^
      | auto                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:639:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  639 |     last_heartbeat = std::chrono::system_clock::now();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:639:22: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  639 |     last_heartbeat = std::chrono::system_clock::now();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:643:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  643 | std::vector<WorkUnit> FGCom_ClientServerCommunicator::requestWorkUnits(int max_units) {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:643:55: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:649:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  649 | bool FGCom_ClientServerCommunicator::submitWorkUnitResult(const std::string& unit_id, 
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:649:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  649 | bool FGCom_ClientServerCommunicator::submitWorkUnitResult(const std::string& unit_id, 
      | ~~~~                                 ^
      | auto
  650 |                                                          const std::vector<double>& result_data, 
  651 |                                                          bool success, 
  652 |                                                          const std::string& error_message) {
      |                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:649:38: warning: method 'submitWorkUnitResult' can be made static [readability-convert-member-functions-to-static]
  649 | bool FGCom_ClientServerCommunicator::submitWorkUnitResult(const std::string& unit_id, 
      |                                      ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:649:78: warning: parameter 'unit_id' is unused [misc-unused-parameters]
  649 | bool FGCom_ClientServerCommunicator::submitWorkUnitResult(const std::string& unit_id, 
      |                                                                              ^~~~~~~
      |                                                                               /*unit_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:651:63: warning: parameter 'success' is unused [misc-unused-parameters]
  651 |                                                          bool success, 
      |                                                               ^~~~~~~
      |                                                                /*success*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:652:77: warning: parameter 'error_message' is unused [misc-unused-parameters]
  652 |                                                          const std::string& error_message) {
      |                                                                             ^~~~~~~~~~~~~
      |                                                                              /*error_message*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:658:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  658 | bool FGCom_ClientServerCommunicator::getServerStatus() {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:658:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  658 | bool FGCom_ClientServerCommunicator::getServerStatus() {
      | ~~~~                                 ^
      | auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:658:38: warning: method 'getServerStatus' can be made static [readability-convert-member-functions-to-static]
  658 | bool FGCom_ClientServerCommunicator::getServerStatus() {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:664:63: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  664 | std::map<std::string, double> FGCom_ClientServerCommunicator::getServerStatistics() {
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:664:63: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:670:68: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  670 | std::map<std::string, std::string> FGCom_ClientServerCommunicator::getServerConfiguration() {
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:670:68: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:676:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  676 | bool FGCom_ClientServerCommunicator::isConnected() {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:676:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  676 | bool FGCom_ClientServerCommunicator::isConnected() {
      | ~~~~                                 ^
      | auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:677:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  677 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:682:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  682 | void FGCom_ClientServerCommunicator::setConnectionTimeout(int timeout_ms) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:686:45: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  686 | std::string FGCom_ClientServerCommunicator::getLastError() {
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:686:45: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  686 | std::string FGCom_ClientServerCommunicator::getLastError() {
      | ~~~~~~~~~~~                                 ^
      | auto                                                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:45: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:45: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      | ~~~~~~~~~~~                                 ^
      | auto                                                                                                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:45: warning: method 'makeHTTPRequest' can be made static [readability-convert-member-functions-to-static]
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:61: warning: 3 adjacent parameters of 'makeHTTPRequest' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:80: note: the first parameter in the range is 'endpoint'
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                                                                ^~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:136: note: the last parameter in the range is 'data'
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                                                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:80: warning: parameter 'endpoint' is unused [misc-unused-parameters]
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                                                                ^~~~~~~~
      |                                                                                 /*endpoint*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:109: warning: parameter 'method' is unused [misc-unused-parameters]
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                                                                                             ^~~~~~
      |                                                                                                              /*method*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:690:136: warning: parameter 'data' is unused [misc-unused-parameters]
  690 | std::string FGCom_ClientServerCommunicator::makeHTTPRequest(const std::string& endpoint, const std::string& method, const std::string& data) {
      |                                                                                                                                        ^~~~
      |                                                                                                                                         /*data*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:696:48: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  696 | nlohmann::json FGCom_ClientServerCommunicator::parseJSONResponse(const std::string& response) {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:696:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:702:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  702 | bool FGCom_ClientServerCommunicator::handleHTTPError(int status_code, const std::string& response) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:702:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  702 | bool FGCom_ClientServerCommunicator::handleHTTPError(int status_code, const std::string& response) {
      | ~~~~                                 ^
      | auto                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:702:38: warning: method 'handleHTTPError' can be made static [readability-convert-member-functions-to-static]
  702 | bool FGCom_ClientServerCommunicator::handleHTTPError(int status_code, const std::string& response) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:702:58: warning: parameter 'status_code' is unused [misc-unused-parameters]
  702 | bool FGCom_ClientServerCommunicator::handleHTTPError(int status_code, const std::string& response) {
      |                                                          ^~~~~~~~~~~
      |                                                           /*status_code*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:702:90: warning: parameter 'response' is unused [misc-unused-parameters]
  702 | bool FGCom_ClientServerCommunicator::handleHTTPError(int status_code, const std::string& response) {
      |                                                                                          ^~~~~~~~
      |                                                                                           /*response*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:709:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  709 | bool FGCom_WorkUnitResultAggregator::addPartialResult(const std::string& work_unit_id, 
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:709:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  709 | bool FGCom_WorkUnitResultAggregator::addPartialResult(const std::string& work_unit_id, 
      | ~~~~                                 ^
      | auto
  710 |                                                      const std::string& client_id, 
  711 |                                                      const std::vector<double>& result_data) {
      |                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:712:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  712 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:714:20: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     partial_results[work_unit_id] = result_data;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:715:25: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  715 |     contributing_clients[work_unit_id].push_back(client_id);
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:720:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  720 | std::vector<double> FGCom_WorkUnitResultAggregator::getAggregatedResult(const std::string& work_unit_id) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:720:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:721:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  721 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:723:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  723 |     auto it = partial_results.find(work_unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:731:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  731 | bool FGCom_WorkUnitResultAggregator::isResultComplete(const std::string& work_unit_id) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:731:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  731 | bool FGCom_WorkUnitResultAggregator::isResultComplete(const std::string& work_unit_id) {
      | ~~~~                                 ^
      | auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:732:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  732 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:734:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  734 |     auto it = contributing_clients.find(work_unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:744:58: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  744 | std::vector<std::string> FGCom_WorkUnitResultAggregator::getContributingClients(const std::string& work_unit_id) {
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:744:58: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:745:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  745 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:747:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  747 |     auto it = contributing_clients.find(work_unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:755:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  755 | bool FGCom_WorkUnitResultAggregator::validateResult(const std::string& work_unit_id, const std::vector<double>& expected_result) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:755:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  755 | bool FGCom_WorkUnitResultAggregator::validateResult(const std::string& work_unit_id, const std::vector<double>& expected_result) {
      | ~~~~                                 ^
      | auto                                                                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:756:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  756 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:758:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  758 |     auto it = partial_results.find(work_unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:769:24: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  769 |     double tolerance = 0.01; // 1% tolerance
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:770:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  770 |     for (size_t i = 0; i < actual_result.size(); i++) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:779:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  779 | double FGCom_WorkUnitResultAggregator::calculateResultConfidence(const std::string& work_unit_id) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:779:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  779 | double FGCom_WorkUnitResultAggregator::calculateResultConfidence(const std::string& work_unit_id) {
      | ~~~~~~                                 ^
      | auto                                                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:780:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  780 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:782:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  782 |     auto it = contributing_clients.find(work_unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:790:41: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  790 |     return std::min(1.0, client_count / 3.0); // Max confidence with 3+ clients
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:793:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  793 | void FGCom_WorkUnitResultAggregator::removeResult(const std::string& work_unit_id) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:794:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  794 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:800:38: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  800 | void FGCom_WorkUnitResultAggregator::cleanupOldResults(std::chrono::system_clock::time_point cutoff_time) {
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:800:94: warning: parameter 'cutoff_time' is unused [misc-unused-parameters]
  800 | void FGCom_WorkUnitResultAggregator::cleanupOldResults(std::chrono::system_clock::time_point cutoff_time) {
      |                                                                                              ^~~~~~~~~~~
      |                                                                                               /*cutoff_time*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.cpp:801:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  801 |     std::lock_guard<std::mutex> lock(results_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_CLIENT_WORK_UNIT_COORDINATOR_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_CLIENT_WORK_UNIT_COORDINATOR_H
    2 | #define FGCOM_CLIENT_WORK_UNIT_COORDINATOR_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_CLIENT_WORK_UNIT_COORDINATOR_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:5:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:7:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <map>
      | ^~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:10:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   11 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:11:1: warning: system include thread not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   12 | #include <queue>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:12:1: warning: system include queue not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <queue>
      | ^~~~~~~~~~~~~~~~
   13 | #include <condition_variable>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:13:1: warning: system include condition_variable not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <condition_variable>
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   14 | #include <cstdint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:14:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   15 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:15:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   15 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   16 | #include <unordered_set>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:16:1: warning: system include unordered_set not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   16 | #include <unordered_set>
      | ^~~~~~~~~~~~~~~~~~~~~~~~
   17 | #include <future>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:17:1: warning: system include future not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h [llvmlibc-restrict-system-libc-headers]
   17 | #include <future>
      | ^~~~~~~~~~~~~~~~~
   18 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:20:1: warning: #includes are not sorted properly [llvm-include-order]
   20 | #include "work_unit_distributor.h"
      | ^        ~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "gpu_types.h"
   21 | #include "gpu_types.h"
      |          ~~~~~~~~~~~~~
      |          "work_unit_distributor.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:32:10: warning: use default member initializer for 'coordinator_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   32 |     bool coordinator_enabled;
      |          ^                  
      |                             {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:33:10: warning: use default member initializer for 'auto_request_work_units' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   33 |     bool auto_request_work_units;
      |          ^                      
      |                                 {true}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:34:9: warning: use default member initializer for 'max_concurrent_work_units' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   34 |     int max_concurrent_work_units;
      |         ^                        
      |                                  {2}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:35:9: warning: use default member initializer for 'work_unit_request_interval_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   35 |     int work_unit_request_interval_ms;
      |         ^                            
      |                                      {5000}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:36:9: warning: use default member initializer for 'heartbeat_interval_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   36 |     int heartbeat_interval_ms;
      |         ^                    
      |                              {30000}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:69:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     bool requestWorkUnitsFromServer();
      |     ~~~~ ^                           
      |     auto                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:70:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   70 |     bool submitWorkUnitResult(const std::string& unit_id, const std::vector<double>& result_data, bool success, const std::string& error_message = "");
      |     ~~~~ ^                                                                                                                                            
      |     auto                                                                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:70:113: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   70 |     bool submitWorkUnitResult(const std::string& unit_id, const std::vector<double>& result_data, bool success, const std::string& error_message = "");
      |                                                                                                                 ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:70:148: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   70 |     bool submitWorkUnitResult(const std::string& unit_id, const std::vector<double>& result_data, bool success, const std::string& error_message = "");
      |                                                                                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:72:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   72 |     std::vector<double> executeWorkUnit(const WorkUnit& unit);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                    
      |     auto                                                      -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:79:45: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   79 |     static FGCom_ClientWorkUnitCoordinator& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                                           -> FGCom_ClientWorkUnitCoordinator&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:83:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   83 |     bool initialize(const std::string& server_url, const std::string& client_id);
      |     ~~~~ ^                                                                      
      |     auto                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:90:5: warning: function 'getClientCapability' should be marked [[nodiscard]] [modernize-use-nodiscard]
   90 |     ClientWorkUnitCapability getClientCapability() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:90:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   90 |     ClientWorkUnitCapability getClientCapability() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |     auto                                                 -> ClientWorkUnitCapability
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:93:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     bool enableAutoWorkUnitRequests(bool enable);
      |     ~~~~ ^                                      
      |     auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:94:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     bool requestSpecificWorkUnitType(WorkUnitType type);
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:95:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   95 |     std::vector<std::string> getAssignedWorkUnits();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |     auto                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:96:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   96 |     std::vector<std::string> getProcessingWorkUnits();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                       
      |     auto                                              -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:97:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   97 |     WorkUnitStatus getWorkUnitStatus(const std::string& unit_id);
      |     ~~~~~~~~~~~~~~ ^                                            
      |     auto                                                         -> WorkUnitStatus
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:100:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  100 |     std::map<std::string, double> getStatistics();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^              
      |     auto                                          -> std::map<std::string, double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:102:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  102 |     bool isHealthy();
      |     ~~~~ ^          
      |     auto             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:103:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |     std::string getStatusReport();
      |     ~~~~~~~~~~~ ^                
      |     auto                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:114:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     static std::vector<double> processPropagationGrid(
      |            ~~~~~~~~~~~~~~~~~~~ ^
      |            auto
  115 |         const std::vector<double>& grid_points,
  116 |         double frequency_mhz,
  117 |         double tx_power_watts,
  118 |         const std::map<std::string, double>& parameters
  119 |     );
      |      
      |       -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:122:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     static std::vector<double> processAntennaPattern(
      |            ~~~~~~~~~~~~~~~~~~~ ^
      |            auto
  123 |         const std::vector<double>& antenna_data,
  124 |         double frequency_mhz,
  125 |         const std::map<std::string, double>& parameters
  126 |     );
      |      
      |       -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:129:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     static std::vector<double> processFrequencyOffset(
      |            ~~~~~~~~~~~~~~~~~~~ ^
      |            auto
  130 |         const std::vector<double>& audio_data,
  131 |         double frequency_mhz,
  132 |         const std::map<std::string, double>& parameters
  133 |     );
      |      
      |       -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:136:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  136 |     static std::vector<double> processAudio(
      |            ~~~~~~~~~~~~~~~~~~~ ^
      |            auto
  137 |         const std::vector<double>& audio_data,
  138 |         const std::map<std::string, double>& parameters
  139 |     );
      |      
      |       -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:142:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     static std::vector<double> processBatchQSO(
      |            ~~~~~~~~~~~~~~~~~~~ ^
      |            auto
  143 |         const std::vector<std::vector<double>>& qso_data,
  144 |         double frequency_mhz,
  145 |         const std::map<std::string, double>& parameters
  146 |     );
      |      
      |       -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:149:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     static std::vector<double> processSolarEffects(
      |            ~~~~~~~~~~~~~~~~~~~ ^
      |            auto
  150 |         const std::vector<double>& solar_data,
  151 |         double frequency_mhz,
  152 |         const std::map<std::string, double>& parameters
  153 |     );
      |      
      |       -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:156:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     static std::vector<double> processLightningEffects(
      |            ~~~~~~~~~~~~~~~~~~~ ^
      |            auto
  157 |         const std::vector<double>& lightning_data,
  158 |         double frequency_mhz,
  159 |         const std::map<std::string, double>& parameters
  160 |     );
      |      
      |       -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:175:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     bool registerClient(const ClientWorkUnitCapability& capability);
      |     ~~~~ ^                                                         
      |     auto                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool unregisterClient();
      |     ~~~~ ^                 
      |     auto                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:177:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  177 |     bool updateClientCapability(const ClientWorkUnitCapability& capability);
      |     ~~~~ ^                                                                 
      |     auto                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:178:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  178 |     bool sendHeartbeat();
      |     ~~~~ ^              
      |     auto                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:181:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     std::vector<WorkUnit> requestWorkUnits(int max_units = 1);
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                                  
      |     auto                                                      -> std::vector<WorkUnit>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:181:44: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  181 |     std::vector<WorkUnit> requestWorkUnits(int max_units = 1);
      |                                            ^             ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:182:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     bool submitWorkUnitResult(const std::string& unit_id, const std::vector<double>& result_data, bool success, const std::string& error_message = "");
      |     ~~~~ ^                                                                                                                                            
      |     auto                                                                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:182:113: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  182 |     bool submitWorkUnitResult(const std::string& unit_id, const std::vector<double>& result_data, bool success, const std::string& error_message = "");
      |                                                                                                                 ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:182:148: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  182 |     bool submitWorkUnitResult(const std::string& unit_id, const std::vector<double>& result_data, bool success, const std::string& error_message = "");
      |                                                                                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:185:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     bool getServerStatus();
      |     ~~~~ ^                
      |     auto                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:186:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     std::map<std::string, double> getServerStatistics();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                    
      |     auto                                                -> std::map<std::string, double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:187:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     std::map<std::string, std::string> getServerConfiguration();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                       
      |     auto                                                        -> std::map<std::string, std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:190:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  190 |     bool isConnected();
      |     ~~~~ ^            
      |     auto               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:192:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     std::string getLastError();
      |     ~~~~~~~~~~~ ^             
      |     auto                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:196:9: warning: use default member initializer for 'connection_timeout_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  196 |     int connection_timeout_ms;
      |         ^                    
      |                              {5000}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:199:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  199 |     std::string makeHTTPRequest(const std::string& endpoint, const std::string& method = "GET", const std::string& data = "");
      |     ~~~~~~~~~~~ ^                                                                                                            
      |     auto                                                                                                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:199:62: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  199 |     std::string makeHTTPRequest(const std::string& endpoint, const std::string& method = "GET", const std::string& data = "");
      |                                                              ^                         ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:199:90: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  199 |     std::string makeHTTPRequest(const std::string& endpoint, const std::string& method = "GET", const std::string& data = "");
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:199:97: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  199 |     std::string makeHTTPRequest(const std::string& endpoint, const std::string& method = "GET", const std::string& data = "");
      |                                                                                                 ^                       ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:199:123: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  199 |     std::string makeHTTPRequest(const std::string& endpoint, const std::string& method = "GET", const std::string& data = "");
      |                                                                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:200:5: error: use of undeclared identifier 'nlohmann' [clang-diagnostic-error]
  200 |     nlohmann::json parseJSONResponse(const std::string& response);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:200:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  200 |     nlohmann::json parseJSONResponse(const std::string& response);
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:201:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     bool handleHTTPError(int status_code, const std::string& response);
      |     ~~~~ ^                                                            
      |     auto                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:213:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 |     bool addPartialResult(const std::string& work_unit_id, const std::string& client_id, const std::vector<double>& result_data);
      |     ~~~~ ^                                                                                                                      
      |     auto                                                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:214:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     std::vector<double> getAggregatedResult(const std::string& work_unit_id);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                   
      |     auto                                                                     -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:215:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     bool isResultComplete(const std::string& work_unit_id);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:216:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     std::vector<std::string> getContributingClients(const std::string& work_unit_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                      
      |     auto                                                                             -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:219:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     bool validateResult(const std::string& work_unit_id, const std::vector<double>& expected_result);
      |     ~~~~ ^                                                                                          
      |     auto                                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/client_work_unit_coordinator.h:220:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     double calculateResultConfidence(const std::string& work_unit_id);
      |     ~~~~~~ ^                                                         
      |     auto                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_GPU_TYPES_H
      |         ^~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_GPU_TYPES_H
    2 | #define FGCOM_GPU_TYPES_H
      |         ~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_GPU_TYPES_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:5:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:6:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <map>
      | ^~~~~~~~~~~~~~
    7 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:7:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    8 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:10:8: warning: accessing fields in struct 'AntennaGainPoint' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
   10 | struct AntennaGainPoint {
      |        ^
   11 |     float theta_deg;
   12 |     float phi_deg;
   13 |     float gain_dbi;
   14 |     float phase_deg;
   15 |     
   16 |     AntennaGainPoint() : theta_deg(0.0f), phi_deg(0.0f), gain_dbi(0.0f), phase_deg(0.0f) {}
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
   18 |         : theta_deg(t), phi_deg(p), gain_dbi(g), phase_deg(ph) {}
   19 | };
      |  
      |   __attribute__((aligned(16)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:10:8: note: use "__attribute__((aligned(16)))" to align struct 'AntennaGainPoint' to 16 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:11:11: warning: member variable 'theta_deg' has public visibility [misc-non-private-member-variables-in-classes]
   11 |     float theta_deg;
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:12:11: warning: member variable 'phi_deg' has public visibility [misc-non-private-member-variables-in-classes]
   12 |     float phi_deg;
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:13:11: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
   13 |     float gain_dbi;
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:14:11: warning: member variable 'phase_deg' has public visibility [misc-non-private-member-variables-in-classes]
   14 |     float phase_deg;
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:16:5: warning: 'AntennaGainPoint' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   16 |     AntennaGainPoint() : theta_deg(0.0f), phi_deg(0.0f), gain_dbi(0.0f), phase_deg(0.0f) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:16:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   16 |     AntennaGainPoint() : theta_deg(0.0f), phi_deg(0.0f), gain_dbi(0.0f), phase_deg(0.0f) {}
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:16:51: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   16 |     AntennaGainPoint() : theta_deg(0.0f), phi_deg(0.0f), gain_dbi(0.0f), phase_deg(0.0f) {}
      |                                                   ^  ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:16:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   16 |     AntennaGainPoint() : theta_deg(0.0f), phi_deg(0.0f), gain_dbi(0.0f), phase_deg(0.0f) {}
      |                                                                   ^  ~
      |                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:16:84: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   16 |     AntennaGainPoint() : theta_deg(0.0f), phi_deg(0.0f), gain_dbi(0.0f), phase_deg(0.0f) {}
      |                                                                                    ^  ~
      |                                                                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:5: warning: 'AntennaGainPoint' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:22: warning: 4 adjacent parameters of 'AntennaGainPoint' of similar type ('float') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:28: note: the first parameter in the range is 't'
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:55: note: the last parameter in the range is 'ph'
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |                                                       ^~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:28: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:37: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:46: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:17:55: warning: parameter name 'ph' is too short, expected at least 3 characters [readability-identifier-length]
   17 |     AntennaGainPoint(float t, float p, float g, float ph) 
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:21:8: warning: accessing fields in struct 'PropagationPath' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   21 | struct PropagationPath {
      |        ^
   22 |     double start_lat;
   23 |     double start_lon;
   24 |     double end_lat;
   25 |     double end_lon;
   26 |     float start_alt;
   27 |     float end_alt;
   28 |     float frequency_mhz;
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
   36 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:21:8: note: use "__attribute__((aligned(128)))" to align struct 'PropagationPath' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:22:12: warning: use default member initializer for 'start_lat' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   22 |     double start_lat;
      |            ^        
      |                     {0.0}
   23 |     double start_lon;
   24 |     double end_lat;
   25 |     double end_lon;
   26 |     float start_alt;
   27 |     float end_alt;
   28 |     float frequency_mhz;
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
      |                         ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:22:12: warning: member variable 'start_lat' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:23:12: warning: use default member initializer for 'start_lon' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   23 |     double start_lon;
      |            ^        
      |                     {0.0}
   24 |     double end_lat;
   25 |     double end_lon;
   26 |     float start_alt;
   27 |     float end_alt;
   28 |     float frequency_mhz;
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
      |                                         ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:23:12: warning: member variable 'start_lon' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:24:12: warning: use default member initializer for 'end_lat' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   24 |     double end_lat;
      |            ^      
      |                   {0.0}
   25 |     double end_lon;
   26 |     float start_alt;
   27 |     float end_alt;
   28 |     float frequency_mhz;
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
      |                                                         ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:24:12: warning: member variable 'end_lat' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:25:12: warning: use default member initializer for 'end_lon' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   25 |     double end_lon;
      |            ^      
      |                   {0.0}
   26 |     float start_alt;
   27 |     float end_alt;
   28 |     float frequency_mhz;
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
      |                                                                       ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:25:12: warning: member variable 'end_lon' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:26:11: warning: use default member initializer for 'start_alt' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   26 |     float start_alt;
      |           ^        
      |                    {0.0f}
   27 |     float end_alt;
   28 |     float frequency_mhz;
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                        ~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:26:11: warning: member variable 'start_alt' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:27:11: warning: use default member initializer for 'end_alt' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   27 |     float end_alt;
      |           ^      
      |                  {0.0f}
   28 |     float frequency_mhz;
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                                         ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:27:11: warning: member variable 'end_alt' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:28:11: warning: use default member initializer for 'frequency_mhz' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   28 |     float frequency_mhz;
      |           ^            
      |                        {14.0f}
   29 |     float power_watts;
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                                                        ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:28:11: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:29:11: warning: use default member initializer for 'power_watts' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   29 |     float power_watts;
      |           ^          
      |                      {100.0f}
   30 |     std::string antenna_type;
   31 |     std::string ground_type;
   32 |     std::string mode;
   33 |     
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                                                                              ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:29:11: warning: member variable 'power_watts' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:30:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     std::string antenna_type;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:31:17: warning: member variable 'ground_type' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     std::string ground_type;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:32:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     std::string mode;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:34:5: warning: 'PropagationPath' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   34 |     PropagationPath() : start_lat(0.0), start_lon(0.0), end_lat(0.0), end_lon(0.0),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:35:34: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                                  ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:35:49: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                                                 ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:35:70: warning: 14.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:35:70: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:35:90: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   35 |                        start_alt(0.0f), end_alt(0.0f), frequency_mhz(14.0f), power_watts(100.0f) {}
      |                                                                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:38:8: warning: accessing fields in struct 'QSOParameters' is inefficient due to padding; only needs 164 bytes but is using 168 bytes [altera-struct-pack-align]
   38 | struct QSOParameters {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:38:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'QSOParameters'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:38:8: warning: accessing fields in struct 'QSOParameters' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   38 | struct QSOParameters {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:38:8: note: use "__attribute__((aligned(128)))" to align struct 'QSOParameters' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:39:17: warning: member variable 'callsign' has public visibility [misc-non-private-member-variables-in-classes]
   39 |     std::string callsign;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:40:12: warning: use default member initializer for 'latitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   40 |     double latitude;
      |            ^       
      |                    {0.0}
   41 |     double longitude;
   42 |     float altitude;
   43 |     float frequency_mhz;
   44 |     float power_watts;
   45 |     std::string antenna_type;
   46 |     std::string mode;
   47 |     std::string band;
   48 |     std::chrono::system_clock::time_point timestamp;
   49 |     
   50 |     QSOParameters() : latitude(0.0), longitude(0.0), altitude(0.0f), 
      |                       ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:40:12: warning: member variable 'latitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:41:12: warning: use default member initializer for 'longitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   41 |     double longitude;
      |            ^        
      |                     {0.0}
   42 |     float altitude;
   43 |     float frequency_mhz;
   44 |     float power_watts;
   45 |     std::string antenna_type;
   46 |     std::string mode;
   47 |     std::string band;
   48 |     std::chrono::system_clock::time_point timestamp;
   49 |     
   50 |     QSOParameters() : latitude(0.0), longitude(0.0), altitude(0.0f), 
      |                                      ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:41:12: warning: member variable 'longitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:42:11: warning: use default member initializer for 'altitude' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   42 |     float altitude;
      |           ^       
      |                   {0.0f}
   43 |     float frequency_mhz;
   44 |     float power_watts;
   45 |     std::string antenna_type;
   46 |     std::string mode;
   47 |     std::string band;
   48 |     std::chrono::system_clock::time_point timestamp;
   49 |     
   50 |     QSOParameters() : latitude(0.0), longitude(0.0), altitude(0.0f), 
      |                                                      ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:42:11: warning: member variable 'altitude' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:43:11: warning: use default member initializer for 'frequency_mhz' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   43 |     float frequency_mhz;
      |           ^            
      |                        {14.0f}
   44 |     float power_watts;
   45 |     std::string antenna_type;
   46 |     std::string mode;
   47 |     std::string band;
   48 |     std::chrono::system_clock::time_point timestamp;
   49 |     
   50 |     QSOParameters() : latitude(0.0), longitude(0.0), altitude(0.0f), 
   51 |                      frequency_mhz(14.0f), power_watts(100.0f) {
      |                      ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:43:11: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:44:11: warning: use default member initializer for 'power_watts' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   44 |     float power_watts;
      |           ^          
      |                      {100.0f}
   45 |     std::string antenna_type;
   46 |     std::string mode;
   47 |     std::string band;
   48 |     std::chrono::system_clock::time_point timestamp;
   49 |     
   50 |     QSOParameters() : latitude(0.0), longitude(0.0), altitude(0.0f), 
   51 |                      frequency_mhz(14.0f), power_watts(100.0f) {
      |                                            ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:44:11: warning: member variable 'power_watts' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:45:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   45 |     std::string antenna_type;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:46:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   46 |     std::string mode;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:47:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   47 |     std::string band;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:48:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   48 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:50:5: warning: 'QSOParameters' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   50 |     QSOParameters() : latitude(0.0), longitude(0.0), altitude(0.0f), 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:50:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   50 |     QSOParameters() : latitude(0.0), longitude(0.0), altitude(0.0f), 
      |                                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:51:36: warning: 14.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |                      frequency_mhz(14.0f), power_watts(100.0f) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:51:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:51:56: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |                      frequency_mhz(14.0f), power_watts(100.0f) {
      |                                                        ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:52:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   52 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/gpu_types.h:52:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   52 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:10:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   10 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   11 | #include <random>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:11:1: warning: #includes are not sorted properly [llvm-include-order]
   11 | #include <random>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:11:1: warning: system include random not allowed [llvmlibc-restrict-system-libc-headers]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:11:1: warning: included header random is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:12:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   12 | #include <sstream>
      | ^~~~~~~~~~~~~~~~~~
   13 | #include <iomanip>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:13:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
   13 | #include <iomanip>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:13:1: warning: included header iomanip is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:14:1: warning: system include chrono not allowed [llvmlibc-restrict-system-libc-headers]
   14 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   15 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:15:1: warning: system include thread not allowed [llvmlibc-restrict-system-libc-headers]
   15 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   16 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:18:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
   18 | std::unique_ptr<FGCom_WorkUnitDistributor> FGCom_WorkUnitDistributor::instance = nullptr;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:18:6: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
   11 | #include <random>
   12 | #include <sstream>
   13 | #include <iomanip>
   14 | #include <chrono>
   15 | #include <thread>
   16 | 
   17 | // Static member definitions
   18 | std::unique_ptr<FGCom_WorkUnitDistributor> FGCom_WorkUnitDistributor::instance = nullptr;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:18:71: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   18 | std::unique_ptr<FGCom_WorkUnitDistributor> FGCom_WorkUnitDistributor::instance = nullptr;
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:19:6: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   11 | #include <random>
   12 | #include <sstream>
   13 | #include <iomanip>
   14 | #include <chrono>
   15 | #include <thread>
   16 | 
   17 | // Static member definitions
   18 | std::unique_ptr<FGCom_WorkUnitDistributor> FGCom_WorkUnitDistributor::instance = nullptr;
   19 | std::mutex FGCom_WorkUnitDistributor::instance_mutex;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:19:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   19 | std::mutex FGCom_WorkUnitDistributor::instance_mutex;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:22:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   22 | FGCom_WorkUnitDistributor& FGCom_WorkUnitDistributor::getInstance() {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:22:55: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   22 | FGCom_WorkUnitDistributor& FGCom_WorkUnitDistributor::getInstance() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                            ^
      | auto                                                                -> FGCom_WorkUnitDistributor&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:23:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   23 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:23:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
   23 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:25:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   25 |         instance = std::make_unique<FGCom_WorkUnitDistributor>();
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:25:20: warning: 'make_unique<FGCom_WorkUnitDistributor>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   25 |         instance = std::make_unique<FGCom_WorkUnitDistributor>();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:25:25: warning: no header providing "std::make_unique" is directly included [misc-include-cleaner]
   25 |         instance = std::make_unique<FGCom_WorkUnitDistributor>();
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:27:12: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   27 |     return *instance;
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:451:7: note: resolves to this declaration
  451 |       operator*() const noexcept(noexcept(*std::declval<pointer>()))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:30:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   30 | void FGCom_WorkUnitDistributor::destroyInstance() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:31:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   31 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:33:17: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   33 |         instance->shutdown();
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:34:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   34 |         instance.reset();
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:505:13: note: default parameter was declared here
  505 |       reset(pointer __p = pointer()) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:39:28: error: definition of implicitly declared default constructor [clang-diagnostic-error]
   39 | FGCom_WorkUnitDistributor::FGCom_WorkUnitDistributor() 
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:39:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:41:28: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   41 |     , max_concurrent_units(10)
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:42:22: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |     , max_queue_size(1000)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:43:23: warning: 30000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   43 |     , unit_timeout_ms(30000)
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:46:22: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   46 |     , retry_delay_ms(1000)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:47:7: error: member initializer 'workers_running' does not name a non-static data member or base class [clang-diagnostic-error]
   47 |     , workers_running(false) {
      |       ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:50:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   50 |     stats.total_units_created = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:51:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   51 |     stats.total_units_completed = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:52:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   52 |     stats.total_units_failed = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:53:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   53 |     stats.total_units_timeout = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:54:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   54 |     stats.average_processing_time_ms = 0.0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:55:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   55 |     stats.average_queue_wait_time_ms = 0.0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:56:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   56 |     stats.distribution_efficiency_percent = 0.0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:57:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   57 |     stats.pending_units_count = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:58:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   58 |     stats.processing_units_count = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:59:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   59 |     stats.completed_units_count = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:60:5: error: use of undeclared identifier 'stats' [clang-diagnostic-error]
   60 |     stats.failed_units_count = 0;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:64:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   64 | bool FGCom_WorkUnitDistributor::initialize() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:64:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   64 | bool FGCom_WorkUnitDistributor::initialize() {
      | ~~~~                            ^
      | auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:67:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   67 |     if (!distribution_enabled.compare_exchange_strong(expected, true)) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:159:8: note: default parameter was declared here
  159 |                             memory_order __m = memory_order_seq_cst) noexcept
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:73:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   73 |         work_unit_manager = std::make_unique<WorkUnitManager>();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:73:29: warning: 'make_unique<WorkUnitManager>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   73 |         work_unit_manager = std::make_unique<WorkUnitManager>();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:74:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   74 |         client_manager = std::make_unique<ClientManager>();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:74:26: warning: 'make_unique<ClientManager>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   74 |         client_manager = std::make_unique<ClientManager>();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:75:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |         queue_manager = std::make_unique<QueueManager>();
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:75:25: warning: 'make_unique<QueueManager>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |         queue_manager = std::make_unique<QueueManager>();
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:76:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   76 |         statistics_collector = std::make_unique<StatisticsCollector>();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:76:32: warning: 'make_unique<StatisticsCollector>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   76 |         statistics_collector = std::make_unique<StatisticsCollector>();
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:77:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   77 |         thread_manager = std::make_unique<ThreadManager>();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:77:26: warning: 'make_unique<ThreadManager>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   77 |         thread_manager = std::make_unique<ThreadManager>();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:80:27: warning: 'min<int>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   80 |         int num_threads = std::min(4, static_cast<int>(std::thread::hardware_concurrency()));
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:80:56: warning: 'hardware_concurrency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   80 |         int num_threads = std::min(4, static_cast<int>(std::thread::hardware_concurrency()));
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:217:5: note: resolves to this declaration
  217 |     hardware_concurrency() noexcept;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:85:28: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   85 |         if (!thread_manager->startWorkers(num_threads)) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:86:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |             distribution_enabled = false;
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:91:25: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
   11 |     } catch (const std::exception& e) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:93:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |         distribution_enabled = false;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:94:14: error: no member named 'cerr' in namespace 'std' [clang-diagnostic-error]
   94 |         std::cerr << "[WorkUnitDistributor] Initialization failed: " << e.what() << std::endl;
      |         ~~~~~^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:98:30: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   98 |         distribution_enabled = false;
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:99:14: error: no member named 'cerr' in namespace 'std' [clang-diagnostic-error]
   99 |         std::cerr << "[WorkUnitDistributor] Unknown exception during initialization" << std::endl;
      |         ~~~~~^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:104:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  104 | void FGCom_WorkUnitDistributor::shutdown() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:110:5: error: use of undeclared identifier 'workers_running' [clang-diagnostic-error]
  110 |     workers_running = false;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:111:5: error: use of undeclared identifier 'queue_condition' [clang-diagnostic-error]
  111 |     queue_condition.notify_all();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:113:25: error: use of undeclared identifier 'worker_threads' [clang-diagnostic-error]
  113 |     for (auto& thread : worker_threads) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:118:5: error: use of undeclared identifier 'worker_threads' [clang-diagnostic-error]
  118 |     worker_threads.clear();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:120:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  120 |     distribution_enabled = false;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:123:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  123 | void FGCom_WorkUnitDistributor::setConfiguration(const std::map<std::string, std::string>& config) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:123:61: warning: no header providing "std::map" is directly included [misc-include-cleaner]
   11 | void FGCom_WorkUnitDistributor::setConfiguration(const std::map<std::string, std::string>& config) {
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:123:70: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   15 | void FGCom_WorkUnitDistributor::setConfiguration(const std::map<std::string, std::string>& config) {
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:124:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:126:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  126 |     auto it = config.find("max_concurrent_units");
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:158:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  158 | std::string FGCom_WorkUnitDistributor::createWorkUnit(WorkUnitType type, 
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:158:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  158 | std::string FGCom_WorkUnitDistributor::createWorkUnit(WorkUnitType type, 
      | ~~~~~~~~~~~                            ^
      | auto
  159 |                                                      const std::vector<double>& input_data,
  160 |                                                      const std::map<std::string, double>& parameters) {
      |                                                                                                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:158:40: warning: method 'createWorkUnit' can be made const [readability-make-member-function-const]
  158 | std::string FGCom_WorkUnitDistributor::createWorkUnit(WorkUnitType type, 
      |                                        ^
  159 |                                                      const std::vector<double>& input_data,
  160 |                                                      const std::map<std::string, double>& parameters) {
      |                                                                                                       const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:159:54: warning: 2 adjacent parameters of 'createWorkUnit' of similar type ('const int &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  159 |                                                      const std::vector<double>& input_data,
      |                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  160 |                                                      const std::map<std::string, double>& parameters) {
      |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:159:81: note: the first parameter in the range is 'input_data'
  159 |                                                      const std::vector<double>& input_data,
      |                                                                                 ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:160:91: note: the last parameter in the range is 'parameters'
  160 |                                                      const std::map<std::string, double>& parameters) {
      |                                                                                           ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:161:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:164:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  164 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:166:23: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  166 |     std::stringstream ss;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:167:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |     ss << "unit_" << timestamp << "_" << std::hex << std::hash<std::string>{}(std::to_string(timestamp));
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:167:42: warning: 'hex' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |     ss << "unit_" << timestamp << "_" << std::hex << std::hash<std::string>{}(std::to_string(timestamp));
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/ios_base.h:1067:3: note: resolves to this declaration
 1067 |   hex(ios_base& __base)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:167:47: warning: no header providing "std::hex" is directly included [misc-include-cleaner]
   11 |     ss << "unit_" << timestamp << "_" << std::hex << std::hash<std::string>{}(std::to_string(timestamp));
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:172:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |     unit.unit_id = unit_id;
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:180:74: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  180 |     unit.memory_requirement_mb = (input_data.size() * sizeof(double)) / (1024 * 1024);
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:180:81: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  180 |     unit.memory_requirement_mb = (input_data.size() * sizeof(double)) / (1024 * 1024);
      |                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:183:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  183 |     unit.created_time = now;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:202:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  202 | bool FGCom_WorkUnitDistributor::cancelWorkUnit(const std::string& unit_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:202:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  202 | bool FGCom_WorkUnitDistributor::cancelWorkUnit(const std::string& unit_id) {
      | ~~~~                            ^
      | auto                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:202:33: warning: method 'cancelWorkUnit' can be made static [readability-convert-member-functions-to-static]
  202 | bool FGCom_WorkUnitDistributor::cancelWorkUnit(const std::string& unit_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:203:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:205:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  205 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:217:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  217 |     unit.error_message = "Cancelled by user";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:234:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  234 | WorkUnitStatus FGCom_WorkUnitDistributor::getWorkUnitStatus(const std::string& unit_id) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:234:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  234 | WorkUnitStatus FGCom_WorkUnitDistributor::getWorkUnitStatus(const std::string& unit_id) {
      | ~~~~~~~~~~~~~~                            ^
      | auto                                                                                    -> WorkUnitStatus
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:234:43: warning: method 'getWorkUnitStatus' can be made static [readability-convert-member-functions-to-static]
  234 | WorkUnitStatus FGCom_WorkUnitDistributor::getWorkUnitStatus(const std::string& unit_id) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:235:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  235 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:237:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  237 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:245:48: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  245 | std::vector<double> FGCom_WorkUnitDistributor::getWorkUnitResult(const std::string& unit_id) {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:245:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:245:48: warning: method 'getWorkUnitResult' can be made static [readability-convert-member-functions-to-static]
  245 | std::vector<double> FGCom_WorkUnitDistributor::getWorkUnitResult(const std::string& unit_id) {
      |                                                ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:246:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:248:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  248 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:256:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  256 | std::string FGCom_WorkUnitDistributor::getWorkUnitError(const std::string& unit_id) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:256:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 | std::string FGCom_WorkUnitDistributor::getWorkUnitError(const std::string& unit_id) {
      | ~~~~~~~~~~~                            ^
      | auto                                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:256:40: warning: method 'getWorkUnitError' can be made static [readability-convert-member-functions-to-static]
  256 | std::string FGCom_WorkUnitDistributor::getWorkUnitError(const std::string& unit_id) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:257:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  257 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:259:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  259 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:268:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  268 | bool FGCom_WorkUnitDistributor::registerClient(const std::string& client_id, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:268:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  268 | bool FGCom_WorkUnitDistributor::registerClient(const std::string& client_id, 
      | ~~~~                            ^
      | auto
  269 |                                               const ClientWorkUnitCapability& capability) {
      |                                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:268:33: warning: method 'registerClient' can be made static [readability-convert-member-functions-to-static]
  268 | bool FGCom_WorkUnitDistributor::registerClient(const std::string& client_id, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:270:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  270 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:278:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  278 | bool FGCom_WorkUnitDistributor::unregisterClient(const std::string& client_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:278:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  278 | bool FGCom_WorkUnitDistributor::unregisterClient(const std::string& client_id) {
      | ~~~~                            ^
      | auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:278:33: warning: method 'unregisterClient' can be made static [readability-convert-member-functions-to-static]
  278 | bool FGCom_WorkUnitDistributor::unregisterClient(const std::string& client_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:279:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  279 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:281:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  281 |     auto it = client_capabilities.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:305:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  305 | bool FGCom_WorkUnitDistributor::updateClientCapability(const std::string& client_id, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:305:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  305 | bool FGCom_WorkUnitDistributor::updateClientCapability(const std::string& client_id, 
      | ~~~~                            ^
      | auto
  306 |                                                       const ClientWorkUnitCapability& capability) {
      |                                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:305:33: warning: method 'updateClientCapability' can be made static [readability-convert-member-functions-to-static]
  305 | bool FGCom_WorkUnitDistributor::updateClientCapability(const std::string& client_id, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:307:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:309:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  309 |     auto it = client_capabilities.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:318:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  318 | std::vector<std::string> FGCom_WorkUnitDistributor::getAvailableClients() {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:318:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:318:53: warning: method 'getAvailableClients' can be made static [readability-convert-member-functions-to-static]
  318 | std::vector<std::string> FGCom_WorkUnitDistributor::getAvailableClients() {
      |                                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:319:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  319 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:331:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  331 | ClientWorkUnitCapability FGCom_WorkUnitDistributor::getClientCapability(const std::string& client_id) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:331:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  331 | ClientWorkUnitCapability FGCom_WorkUnitDistributor::getClientCapability(const std::string& client_id) {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                            ^
      | auto                                                                                                  -> ClientWorkUnitCapability
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:331:53: warning: method 'getClientCapability' can be made static [readability-convert-member-functions-to-static]
  331 | ClientWorkUnitCapability FGCom_WorkUnitDistributor::getClientCapability(const std::string& client_id) {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:332:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  332 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:334:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  334 |     auto it = client_capabilities.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:336:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  336 |         return ClientWorkUnitCapability(); // Return empty capability
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:343:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  343 | bool FGCom_WorkUnitDistributor::distributeWorkUnit(const std::string& unit_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:343:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  343 | bool FGCom_WorkUnitDistributor::distributeWorkUnit(const std::string& unit_id) {
      | ~~~~                            ^
      | auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:344:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  344 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:346:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  346 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:366:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  366 | bool FGCom_WorkUnitDistributor::processWorkUnitResult(const std::string& unit_id, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:366:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  366 | bool FGCom_WorkUnitDistributor::processWorkUnitResult(const std::string& unit_id, 
      | ~~~~                            ^
      | auto
  367 |                                                      const std::vector<double>& result_data,
  368 |                                                      bool success, 
  369 |                                                      const std::string& error_message) {
      |                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:370:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  370 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:372:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  372 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:386:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  386 |     unit.error_message = error_message;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:387:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  387 |     unit.completed_time = std::chrono::system_clock::now();
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:387:27: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  387 |     unit.completed_time = std::chrono::system_clock::now();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:426:1: warning: no header providing "size_t" is directly included [misc-include-cleaner]
   11 | size_t FGCom_WorkUnitDistributor::getPendingUnitsCount() {
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:426:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  426 | size_t FGCom_WorkUnitDistributor::getPendingUnitsCount() {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:426:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  426 | size_t FGCom_WorkUnitDistributor::getPendingUnitsCount() {
      | ~~~~~~                            ^
      | auto                                                     -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:430:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  430 | size_t FGCom_WorkUnitDistributor::getProcessingUnitsCount() {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:430:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  430 | size_t FGCom_WorkUnitDistributor::getProcessingUnitsCount() {
      | ~~~~~~                            ^
      | auto                                                        -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:434:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  434 | size_t FGCom_WorkUnitDistributor::getCompletedUnitsCount() {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:434:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  434 | size_t FGCom_WorkUnitDistributor::getCompletedUnitsCount() {
      | ~~~~~~                            ^
      | auto                                                       -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:438:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  438 | size_t FGCom_WorkUnitDistributor::getFailedUnitsCount() {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:438:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  438 | size_t FGCom_WorkUnitDistributor::getFailedUnitsCount() {
      | ~~~~~~                            ^
      | auto                                                    -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:442:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  442 | std::vector<std::string> FGCom_WorkUnitDistributor::getPendingUnits() {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:442:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:442:53: warning: method 'getPendingUnits' can be made static [readability-convert-member-functions-to-static]
  442 | std::vector<std::string> FGCom_WorkUnitDistributor::getPendingUnits() {
      |                                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:443:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  443 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:455:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  455 | std::vector<std::string> FGCom_WorkUnitDistributor::getProcessingUnits() {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:455:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:455:53: warning: method 'getProcessingUnits' can be made static [readability-convert-member-functions-to-static]
  455 | std::vector<std::string> FGCom_WorkUnitDistributor::getProcessingUnits() {
      |                                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:456:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  456 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:468:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  468 | std::vector<std::string> FGCom_WorkUnitDistributor::getCompletedUnits() {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:468:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:468:53: warning: method 'getCompletedUnits' can be made static [readability-convert-member-functions-to-static]
  468 | std::vector<std::string> FGCom_WorkUnitDistributor::getCompletedUnits() {
      |                                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:469:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  469 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:481:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  481 | std::vector<std::string> FGCom_WorkUnitDistributor::getFailedUnits() {
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:481:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:481:53: warning: method 'getFailedUnits' can be made static [readability-convert-member-functions-to-static]
  481 | std::vector<std::string> FGCom_WorkUnitDistributor::getFailedUnits() {
      |                                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:482:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  482 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:495:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  495 | WorkUnitDistributionStats FGCom_WorkUnitDistributor::getStatistics() {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:495:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  495 | WorkUnitDistributionStats FGCom_WorkUnitDistributor::getStatistics() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~                            ^
      | auto                                                                 -> WorkUnitDistributionStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:499:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  499 | void FGCom_WorkUnitDistributor::resetStatistics() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:516:58: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  516 | std::map<std::string, double> FGCom_WorkUnitDistributor::getClientPerformanceMetrics() {
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:516:58: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:516:58: warning: method 'getClientPerformanceMetrics' can be made static [readability-convert-member-functions-to-static]
  516 | std::map<std::string, double> FGCom_WorkUnitDistributor::getClientPerformanceMetrics() {
      |                                                          ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:517:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  517 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:541:61: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  541 | std::map<WorkUnitType, uint64_t> FGCom_WorkUnitDistributor::getWorkUnitTypeStatistics() {
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:541:61: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:541:61: warning: method 'getWorkUnitTypeStatistics' can be made static [readability-convert-member-functions-to-static]
  541 | std::map<WorkUnitType, uint64_t> FGCom_WorkUnitDistributor::getWorkUnitTypeStatistics() {
      |                                                             ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:542:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  542 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:553:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  553 | void FGCom_WorkUnitDistributor::cleanup() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:553:33: warning: method 'cleanup' can be made static [readability-convert-member-functions-to-static]
  553 | void FGCom_WorkUnitDistributor::cleanup() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:554:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  554 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:556:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  556 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:557:55: warning: 24 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  557 |     auto cleanup_threshold = now - std::chrono::hours(24); // Keep units for 24 hours
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:571:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  571 | void FGCom_WorkUnitDistributor::forceCleanup() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:571:33: warning: method 'forceCleanup' can be made static [readability-convert-member-functions-to-static]
  571 | void FGCom_WorkUnitDistributor::forceCleanup() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:572:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  572 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:589:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  589 | bool FGCom_WorkUnitDistributor::isHealthy() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:589:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  589 | bool FGCom_WorkUnitDistributor::isHealthy() {
      | ~~~~                            ^
      | auto                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:593:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  593 | std::string FGCom_WorkUnitDistributor::getStatusReport() {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:593:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  593 | std::string FGCom_WorkUnitDistributor::getStatusReport() {
      | ~~~~~~~~~~~                            ^
      | auto                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:594:23: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  594 |     std::stringstream ss;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:595:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  595 |     ss << "Work Unit Distributor Status:\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:596:8: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  596 |     ss << "  Enabled: " << (distribution_enabled ? "Yes" : "No") << "\n";
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:596:25: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  596 |     ss << "  Enabled: " << (distribution_enabled ? "Yes" : "No") << "\n";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:596:66: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  596 |     ss << "  Enabled: " << (distribution_enabled ? "Yes" : "No") << "\n";
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:292:7: note: resolves to this declaration
  292 |       operator<<(const void* __p)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:611:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  611 | void FGCom_WorkUnitDistributor::workerThreadFunction() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:613:14: warning: no header providing "std::unique_lock" is directly included [misc-include-cleaner]
  613 |         std::unique_lock<std::mutex> lock(queue_mutex);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:613:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  613 |         std::unique_lock<std::mutex> lock(queue_mutex);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |         auto                                           -> std::unique_lock<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:625:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  625 |             std::lock_guard<std::mutex> units_lock(units_mutex);
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                      
      |             auto                                                -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:627:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  627 |             while (!pending_units_queue.empty() && units_to_process.size() < max_concurrent_units) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:631:22: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  631 |                 auto it = work_units.find(unit_id);
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:651:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  651 | std::string FGCom_WorkUnitDistributor::selectOptimalClient(const WorkUnit& unit) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:651:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  651 | std::string FGCom_WorkUnitDistributor::selectOptimalClient(const WorkUnit& unit) {
      | ~~~~~~~~~~~                            ^
      | auto                                                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:651:40: warning: method 'selectOptimalClient' can be made static [readability-convert-member-functions-to-static]
  651 | std::string FGCom_WorkUnitDistributor::selectOptimalClient(const WorkUnit& unit) {
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:652:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  652 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:655:5: warning: variable 'best_score' of type 'double' can be declared 'const' [misc-const-correctness]
  655 |     double best_score = -1.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:689:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  689 | double FGCom_WorkUnitDistributor::calculateClientScore(const std::string& client_id, const WorkUnit& unit) {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:689:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  689 | double FGCom_WorkUnitDistributor::calculateClientScore(const std::string& client_id, const WorkUnit& unit) {
      | ~~~~~~                            ^
      | auto                                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:689:35: warning: method 'calculateClientScore' can be made static [readability-convert-member-functions-to-static]
  689 | double FGCom_WorkUnitDistributor::calculateClientScore(const std::string& client_id, const WorkUnit& unit) {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:690:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  690 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                            -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:692:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  692 |     auto it = client_capabilities.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:721:77: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  721 |     double latency_factor = 1.0 / (1.0 + capability.processing_latency_ms / 1000.0);
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:727:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  727 | bool FGCom_WorkUnitDistributor::assignWorkUnit(const std::string& unit_id, const std::string& client_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:727:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  727 | bool FGCom_WorkUnitDistributor::assignWorkUnit(const std::string& unit_id, const std::string& client_id) {
      | ~~~~                            ^
      | auto                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:727:33: warning: method 'assignWorkUnit' can be made static [readability-convert-member-functions-to-static]
  727 | bool FGCom_WorkUnitDistributor::assignWorkUnit(const std::string& unit_id, const std::string& client_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:727:48: warning: 2 adjacent parameters of 'assignWorkUnit' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  727 | bool FGCom_WorkUnitDistributor::assignWorkUnit(const std::string& unit_id, const std::string& client_id) {
      |                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:727:67: note: the first parameter in the range is 'unit_id'
  727 | bool FGCom_WorkUnitDistributor::assignWorkUnit(const std::string& unit_id, const std::string& client_id) {
      |                                                                   ^~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:727:95: note: the last parameter in the range is 'client_id'
  727 | bool FGCom_WorkUnitDistributor::assignWorkUnit(const std::string& unit_id, const std::string& client_id) {
      |                                                                                               ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:728:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  728 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:730:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  730 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:737:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  737 |     unit.assigned_client_id = client_id;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:738:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  738 |     unit.assigned_time = std::chrono::system_clock::now();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:738:26: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  738 |     unit.assigned_time = std::chrono::system_clock::now();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:750:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  750 | void FGCom_WorkUnitDistributor::processCompletedWorkUnit(const std::string& unit_id, bool success, const std::string& error_message) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:755:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  755 | void FGCom_WorkUnitDistributor::handleWorkUnitTimeout(const std::string& unit_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:755:33: warning: method 'handleWorkUnitTimeout' can be made static [readability-convert-member-functions-to-static]
  755 | void FGCom_WorkUnitDistributor::handleWorkUnitTimeout(const std::string& unit_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:756:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  756 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:758:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  758 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:766:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  766 |         unit.error_message = "Processing timeout";
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:782:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  782 | void FGCom_WorkUnitDistributor::retryFailedWorkUnit(const std::string& unit_id) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:783:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  783 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:785:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  785 |     auto it = work_units.find(unit_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:794:32: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  794 |         unit.next_retry_time = std::chrono::system_clock::now() + std::chrono::milliseconds(retry_delay_ms);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:805:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  805 | void FGCom_WorkUnitDistributor::cleanupCompletedUnits() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:810:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  810 | void FGCom_WorkUnitDistributor::checkTimeouts() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:810:33: warning: method 'checkTimeouts' can be made static [readability-convert-member-functions-to-static]
  810 | void FGCom_WorkUnitDistributor::checkTimeouts() {
      |                                 ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:811:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  811 |     std::lock_guard<std::mutex> lock(units_mutex);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                          -> std::lock_guard<std::mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:813:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  813 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:829:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  829 | std::string FGCom_WorkUnitFactory::createPropagationGridUnit(
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:829:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  829 | std::string FGCom_WorkUnitFactory::createPropagationGridUnit(
      | ~~~~~~~~~~~                        ^
      | auto
  830 |     const std::vector<double>& grid_points,
  831 |     double frequency_mhz,
  832 |     double tx_power_watts,
  833 |     const std::map<std::string, double>& propagation_params) {
      |                                                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:829:36: warning: method 'createPropagationGridUnit' can be made static [readability-convert-member-functions-to-static]
  829 | std::string FGCom_WorkUnitFactory::createPropagationGridUnit(
      |                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:830:5: warning: 4 adjacent parameters of 'createPropagationGridUnit' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  830 |     const std::vector<double>& grid_points,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  831 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  832 |     double tx_power_watts,
      |     ~~~~~~~~~~~~~~~~~~~~~~
  833 |     const std::map<std::string, double>& propagation_params) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:830:32: note: the first parameter in the range is 'grid_points'
  830 |     const std::vector<double>& grid_points,
      |                                ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:833:42: note: the last parameter in the range is 'propagation_params'
  833 |     const std::map<std::string, double>& propagation_params) {
      |                                          ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:831:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  831 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:831:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:835:25: warning: 'getInstance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  835 |     auto& distributor = FGCom_WorkUnitDistributor::getInstance();
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:22:55: note: resolves to this declaration
   22 | FGCom_WorkUnitDistributor& FGCom_WorkUnitDistributor::getInstance() {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:850:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  850 | std::string FGCom_WorkUnitFactory::createAntennaPatternUnit(
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:850:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  850 | std::string FGCom_WorkUnitFactory::createAntennaPatternUnit(
      | ~~~~~~~~~~~                        ^
      | auto
  851 |     const std::vector<double>& antenna_data,
  852 |     double frequency_mhz,
  853 |     const std::map<std::string, double>& antenna_params) {
      |                                                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:850:36: warning: method 'createAntennaPatternUnit' can be made static [readability-convert-member-functions-to-static]
  850 | std::string FGCom_WorkUnitFactory::createAntennaPatternUnit(
      |                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:851:5: warning: 3 adjacent parameters of 'createAntennaPatternUnit' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  851 |     const std::vector<double>& antenna_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  852 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  853 |     const std::map<std::string, double>& antenna_params) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:851:32: note: the first parameter in the range is 'antenna_data'
  851 |     const std::vector<double>& antenna_data,
      |                                ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:853:42: note: the last parameter in the range is 'antenna_params'
  853 |     const std::map<std::string, double>& antenna_params) {
      |                                          ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:852:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  852 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:852:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:855:25: warning: 'getInstance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  855 |     auto& distributor = FGCom_WorkUnitDistributor::getInstance();
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:22:55: note: resolves to this declaration
   22 | FGCom_WorkUnitDistributor& FGCom_WorkUnitDistributor::getInstance() {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:868:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  868 | std::string FGCom_WorkUnitFactory::createBatchQSOUnit(
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:868:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  868 | std::string FGCom_WorkUnitFactory::createBatchQSOUnit(
      | ~~~~~~~~~~~                        ^
      | auto
  869 |     const std::vector<std::vector<double>>& qso_data,
  870 |     double frequency_mhz,
  871 |     const std::map<std::string, double>& batch_params) {
      |                                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:868:36: warning: method 'createBatchQSOUnit' can be made static [readability-convert-member-functions-to-static]
  868 | std::string FGCom_WorkUnitFactory::createBatchQSOUnit(
      |                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:869:5: warning: 3 adjacent parameters of 'createBatchQSOUnit' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  869 |     const std::vector<std::vector<double>>& qso_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  870 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  871 |     const std::map<std::string, double>& batch_params) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:869:45: note: the first parameter in the range is 'qso_data'
  869 |     const std::vector<std::vector<double>>& qso_data,
      |                                             ^~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:871:42: note: the last parameter in the range is 'batch_params'
  871 |     const std::map<std::string, double>& batch_params) {
      |                                          ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:870:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  870 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:870:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:873:25: warning: 'getInstance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  873 |     auto& distributor = FGCom_WorkUnitDistributor::getInstance();
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:22:55: note: resolves to this declaration
   22 | FGCom_WorkUnitDistributor& FGCom_WorkUnitDistributor::getInstance() {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:890:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  890 | std::string FGCom_WorkUnitFactory::createSolarEffectsUnit(
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:890:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  890 | std::string FGCom_WorkUnitFactory::createSolarEffectsUnit(
      | ~~~~~~~~~~~                        ^
      | auto
  891 |     const std::vector<double>& solar_data,
  892 |     double frequency_mhz,
  893 |     const std::map<std::string, double>& solar_params) {
      |                                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:890:36: warning: method 'createSolarEffectsUnit' can be made static [readability-convert-member-functions-to-static]
  890 | std::string FGCom_WorkUnitFactory::createSolarEffectsUnit(
      |                                    ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:891:5: warning: 3 adjacent parameters of 'createSolarEffectsUnit' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  891 |     const std::vector<double>& solar_data,
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  892 |     double frequency_mhz,
      |     ~~~~~~~~~~~~~~~~~~~~~
  893 |     const std::map<std::string, double>& solar_params) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:891:32: note: the first parameter in the range is 'solar_data'
  891 |     const std::vector<double>& solar_data,
      |                                ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:893:42: note: the last parameter in the range is 'solar_params'
  893 |     const std::map<std::string, double>& solar_params) {
      |                                          ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:892:5: note: 'const int &' and 'double' parameters accept and bind the same kind of values
  892 |     double frequency_mhz,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:892:5: note: 'const int &' and 'double' may be implicitly converted: 'const int &' (as 'int') -> 'double', 'double' -> 'const int &' (as 'int')
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:895:25: warning: 'getInstance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  895 |     auto& distributor = FGCom_WorkUnitDistributor::getInstance();
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.cpp:22:55: note: resolves to this declaration
   22 | FGCom_WorkUnitDistributor& FGCom_WorkUnitDistributor::getInstance() {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_WORK_UNIT_DISTRIBUTOR_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_WORK_UNIT_DISTRIBUTOR_H
    2 | #define FGCOM_WORK_UNIT_DISTRIBUTOR_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_WORK_UNIT_DISTRIBUTOR_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:5:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:7:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <map>
      | ^~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:10:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   11 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:11:1: warning: system include thread not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   12 | #include <queue>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:12:1: warning: system include queue not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <queue>
      | ^~~~~~~~~~~~~~~~
   13 | #include <condition_variable>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:13:1: warning: system include condition_variable not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <condition_variable>
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   14 | #include <cstdint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:14:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   15 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:15:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
   15 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   16 | #include <unordered_set>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:16:1: warning: system include unordered_set not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h [llvmlibc-restrict-system-libc-headers]
   16 | #include <unordered_set>
      | ^~~~~~~~~~~~~~~~~~~~~~~~
   17 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:22:12: warning: enum 'WorkUnitType' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   22 | enum class WorkUnitType {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:33:12: warning: enum 'WorkUnitPriority' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   33 | enum class WorkUnitPriority {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:42:12: warning: enum 'WorkUnitStatus' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   42 | enum class WorkUnitStatus {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:52:8: warning: accessing fields in struct 'WorkUnit' is inefficient due to padding; only needs 339 bytes but is using 360 bytes [altera-struct-pack-align]
   52 | struct WorkUnit {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:52:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'WorkUnit'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:52:8: warning: accessing fields in struct 'WorkUnit' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   52 | struct WorkUnit {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:52:8: note: use "__attribute__((aligned(128)))" to align struct 'WorkUnit' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:52:8: warning: constructor does not initialize these fields: type, priority, status, data_size_bytes, max_processing_time_ms, memory_requirement_mb, requires_gpu, requires_double_precision, result_size_bytes, success, retry_count, max_retries [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   52 | struct WorkUnit {
      |        ^
   53 |     std::string unit_id;
   54 |     WorkUnitType type;
   55 |     WorkUnitPriority priority;
   56 |     WorkUnitStatus status;
   57 |     
   58 |     // Input data
   59 |     std::vector<double> input_data;
   60 |     std::map<std::string, double> parameters;
   61 |     size_t data_size_bytes;
      |                           
      |                           {}
   62 |     
   63 |     // Processing requirements
   64 |     std::string required_client_id;  // Specific client requirement
   65 |     std::vector<std::string> compatible_clients;  // Compatible clients
   66 |     int max_processing_time_ms;
      |                               
      |                               {}
   67 |     size_t memory_requirement_mb;
      |                                 
      |                                 {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:91:8: warning: accessing fields in struct 'ClientWorkUnitCapability' is inefficient due to padding; only needs 211 bytes but is using 216 bytes [altera-struct-pack-align]
   91 | struct ClientWorkUnitCapability {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:91:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ClientWorkUnitCapability'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:91:8: warning: accessing fields in struct 'ClientWorkUnitCapability' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   91 | struct ClientWorkUnitCapability {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:91:8: note: use "__attribute__((aligned(128)))" to align struct 'ClientWorkUnitCapability' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:91:8: warning: constructor does not initialize these fields: max_memory_mb, supports_gpu, supports_double_precision, network_bandwidth_mbps, processing_latency_ms, is_online, active_units, pending_units, memory_usage_mb, cpu_utilization_percent, gpu_utilization_percent [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   91 | struct ClientWorkUnitCapability {
      |        ^
   92 |     std::string client_id;
   93 |     std::vector<WorkUnitType> supported_types;
   94 |     std::map<WorkUnitType, int> max_concurrent_units;
   95 |     std::map<WorkUnitType, double> processing_speed_multiplier;
   96 |     size_t max_memory_mb;
      |                         
      |                         {}
   97 |     bool supports_gpu;
      |                      
      |                      {}
   98 |     bool supports_double_precision;
      |                                   
      |                                   {}
   99 |     float network_bandwidth_mbps;
      |                                 
      |                                 {}
  100 |     float processing_latency_ms;
      |                                
      |                                {}
  101 |     bool is_online;
      |                   
      |                   {}
  102 |     std::chrono::system_clock::time_point last_heartbeat;
  103 |     
  104 |     // Current load
  105 |     std::atomic<int> active_units;
      |                                  
      |                                  {}
  106 |     std::atomic<int> pending_units;
      |                                   
      |                                   {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:113:8: warning: accessing fields in struct 'WorkUnitDistributionStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  113 | struct WorkUnitDistributionStats {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:113:8: note: use "__attribute__((aligned(128)))" to align struct 'WorkUnitDistributionStats' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:141:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     bool createWorkUnit(const WorkUnit& unit);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:142:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     bool updateWorkUnitStatus(const std::string& unit_id, WorkUnitStatus status);
      |     ~~~~ ^                                                                      
      |     auto                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:143:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     WorkUnit getWorkUnit(const std::string& unit_id);
      |     ~~~~~~~~ ^                                      
      |     auto                                             -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:144:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     bool removeWorkUnit(const std::string& unit_id);
      |     ~~~~ ^                                         
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:145:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |     std::vector<std::string> getWorkUnitsByStatus(WorkUnitStatus status);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                          
      |     auto                                                                 -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:155:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     bool registerClient(const std::string& client_id, const ClientWorkUnitCapability& capability);
      |     ~~~~ ^                                                                                       
      |     auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:156:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     bool unregisterClient(const std::string& client_id);
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:157:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  157 |     bool updateClientCapability(const std::string& client_id, const ClientWorkUnitCapability& capability);
      |     ~~~~ ^                                                                                               
      |     auto                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:158:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  158 |     ClientWorkUnitCapability getClientCapability(const std::string& client_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                       -> ClientWorkUnitCapability
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:159:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     std::vector<std::string> getAvailableClients();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                    
      |     auto                                           -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:171:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     bool enqueueWorkUnit(const std::string& unit_id);
      |     ~~~~ ^                                          
      |     auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:172:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  172 |     std::string dequeueWorkUnit();
      |     ~~~~~~~~~~~ ^                
      |     auto                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:173:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     bool assignWorkUnitToClient(const std::string& unit_id, const std::string& client_id);
      |     ~~~~ ^                                                                               
      |     auto                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:174:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     std::vector<std::string> getClientAssignedUnits(const std::string& client_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                   
      |     auto                                                                          -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:175:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     size_t getQueueSize();
      |     ~~~~~~ ^             
      |     auto                  -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:191:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     WorkUnitDistributionStats getStatistics();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^              
      |     auto                                      -> WorkUnitDistributionStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:203:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     bool startWorkers(int num_threads);
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:205:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 |     bool areWorkersRunning();
      |     ~~~~ ^                  
      |     auto                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:224:9: warning: use default member initializer for 'max_concurrent_units' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  224 |     int max_concurrent_units;
      |         ^                   
      |                             {10}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:225:9: warning: use default member initializer for 'max_queue_size' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  225 |     int max_queue_size;
      |         ^             
      |                       {1000}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:226:9: warning: use default member initializer for 'unit_timeout_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  226 |     int unit_timeout_ms;
      |         ^              
      |                        {30000}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:227:10: warning: use default member initializer for 'enable_retry' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  227 |     bool enable_retry;
      |          ^           
      |                      {true}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:228:9: warning: use default member initializer for 'max_retries' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  228 |     int max_retries;
      |         ^          
      |                    {3}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:229:9: warning: use default member initializer for 'retry_delay_ms' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  229 |     int retry_delay_ms;
      |         ^             
      |                       {1000}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:233:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     std::string selectOptimalClient(const WorkUnit& unit);
      |     ~~~~~~~~~~~ ^                                        
      |     auto                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:234:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  234 |     double calculateClientScore(const std::string& client_id, const WorkUnit& unit);
      |     ~~~~~~ ^                                                                       
      |     auto                                                                            -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:235:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  235 |     bool assignWorkUnit(const std::string& unit_id, const std::string& client_id);
      |     ~~~~ ^                                                                       
      |     auto                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:236:77: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  236 |     void processCompletedWorkUnit(const std::string& unit_id, bool success, const std::string& error_message = "");
      |                                                                             ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:236:112: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  236 |     void processCompletedWorkUnit(const std::string& unit_id, bool success, const std::string& error_message = "");
      |                                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:243:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  243 |     static FGCom_WorkUnitDistributor& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                                     -> FGCom_WorkUnitDistributor&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:247:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |     bool initialize();
      |     ~~~~ ^           
      |     auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:252:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  252 |     std::string createWorkUnit(WorkUnitType type, const std::vector<double>& input_data, 
      |     ~~~~~~~~~~~ ^
      |     auto
  253 |                               const std::map<std::string, double>& parameters = {});
      |                                                                                    
      |                                                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:253:31: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  253 |                               const std::map<std::string, double>& parameters = {});
      |                               ^                                               ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:254:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  254 |     bool cancelWorkUnit(const std::string& unit_id);
      |     ~~~~ ^                                         
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:255:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  255 |     WorkUnitStatus getWorkUnitStatus(const std::string& unit_id);
      |     ~~~~~~~~~~~~~~ ^                                            
      |     auto                                                         -> WorkUnitStatus
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:256:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |     std::vector<double> getWorkUnitResult(const std::string& unit_id);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                            
      |     auto                                                              -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:257:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  257 |     std::string getWorkUnitError(const std::string& unit_id);
      |     ~~~~~~~~~~~ ^                                           
      |     auto                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:260:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  260 |     bool registerClient(const std::string& client_id, const ClientWorkUnitCapability& capability);
      |     ~~~~ ^                                                                                       
      |     auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:261:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  261 |     bool unregisterClient(const std::string& client_id);
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:262:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  262 |     bool updateClientCapability(const std::string& client_id, const ClientWorkUnitCapability& capability);
      |     ~~~~ ^                                                                                               
      |     auto                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:263:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  263 |     std::vector<std::string> getAvailableClients();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                    
      |     auto                                           -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:264:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 |     ClientWorkUnitCapability getClientCapability(const std::string& client_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                
      |     auto                                                                       -> ClientWorkUnitCapability
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:267:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  267 |     bool distributeWorkUnit(const std::string& unit_id);
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:268:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  268 |     bool processWorkUnitResult(const std::string& unit_id, const std::vector<double>& result_data, 
      |     ~~~~ ^
      |     auto
  269 |                               bool success, const std::string& error_message = "");
      |                                                                                   
      |                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:269:45: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  269 |                               bool success, const std::string& error_message = "");
      |                                             ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:269:80: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  269 |                               bool success, const std::string& error_message = "");
      |                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:272:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  272 |     size_t getPendingUnitsCount();
      |     ~~~~~~ ^                     
      |     auto                          -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:273:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  273 |     size_t getProcessingUnitsCount();
      |     ~~~~~~ ^                        
      |     auto                             -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:274:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  274 |     size_t getCompletedUnitsCount();
      |     ~~~~~~ ^                       
      |     auto                            -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:275:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  275 |     size_t getFailedUnitsCount();
      |     ~~~~~~ ^                    
      |     auto                         -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:276:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     std::vector<std::string> getPendingUnits();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                       -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:277:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  277 |     std::vector<std::string> getProcessingUnits();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                   
      |     auto                                          -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:278:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  278 |     std::vector<std::string> getCompletedUnits();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:279:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  279 |     std::vector<std::string> getFailedUnits();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                      -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:282:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  282 |     WorkUnitDistributionStats getStatistics();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^              
      |     auto                                      -> WorkUnitDistributionStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:284:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  284 |     std::map<std::string, double> getClientPerformanceMetrics();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |     auto                                                        -> std::map<std::string, double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:285:38: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  285 |     std::map<WorkUnitType, uint64_t> getWorkUnitTypeStatistics();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |     auto                                                         -> std::map<WorkUnitType, uint64_t>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:290:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  290 |     bool isHealthy();
      |     ~~~~ ^          
      |     auto             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:291:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  291 |     std::string getStatusReport();
      |     ~~~~~~~~~~~ ^                
      |     auto                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:297:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  297 |     static std::string createPropagationGridUnit(
      |            ~~~~~~~~~~~ ^
      |            auto
  298 |         const std::vector<double>& grid_points,
  299 |         double frequency_mhz,
  300 |         double tx_power_watts,
  301 |         const std::map<std::string, double>& propagation_params = {}
  302 |     );
      |      
      |       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:301:9: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  301 |         const std::map<std::string, double>& propagation_params = {}
      |         ^                                                       ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:304:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  304 |     static std::string createAntennaPatternUnit(
      |            ~~~~~~~~~~~ ^
      |            auto
  305 |         const std::vector<double>& antenna_data,
  306 |         double frequency_mhz,
  307 |         const std::map<std::string, double>& antenna_params = {}
  308 |     );
      |      
      |       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:307:9: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  307 |         const std::map<std::string, double>& antenna_params = {}
      |         ^                                                   ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:310:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  310 |     static std::string createBatchQSOUnit(
      |            ~~~~~~~~~~~ ^
      |            auto
  311 |         const std::vector<std::vector<double>>& qso_data,
  312 |         double frequency_mhz,
  313 |         const std::map<std::string, double>& batch_params = {}
  314 |     );
      |      
      |       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:313:9: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  313 |         const std::map<std::string, double>& batch_params = {}
      |         ^                                                 ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:316:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  316 |     static std::string createSolarEffectsUnit(
      |            ~~~~~~~~~~~ ^
      |            auto
  317 |         const std::vector<double>& solar_data,
  318 |         double frequency_mhz,
  319 |         const std::map<std::string, double>& solar_params = {}
  320 |     );
      |      
      |       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:319:9: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  319 |         const std::map<std::string, double>& solar_params = {}
      |         ^                                                 ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:10:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   10 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   11 | #include <random>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:11:1: warning: #includes are not sorted properly [llvm-include-order]
   11 | #include <random>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:11:1: warning: system include random not allowed [llvmlibc-restrict-system-libc-headers]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:11:1: warning: included header random is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:12:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   12 | #include <sstream>
      | ^~~~~~~~~~~~~~~~~~
   13 | #include <iomanip>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:13:1: warning: system include iomanip not allowed [llvmlibc-restrict-system-libc-headers]
   13 | #include <iomanip>
      | ^~~~~~~~~~~~~~~~~~
   14 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:14:1: warning: system include chrono not allowed [llvmlibc-restrict-system-libc-headers]
   14 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   15 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:15:1: warning: system include thread not allowed [llvmlibc-restrict-system-libc-headers]
   15 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   16 | #include <fstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:16:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
   16 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
   17 | #include <iostream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:17:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   17 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
   18 | #include <cstring>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:18:1: warning: system include cstring not allowed [llvmlibc-restrict-system-libc-headers]
   18 | #include <cstring>
      | ^~~~~~~~~~~~~~~~~~
   19 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:21:79: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   21 | std::unique_ptr<FGCom_WorkUnitSecurityManager> FGCom_WorkUnitSecurityManager::instance = nullptr;
      |                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:22:6: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   11 | #include <random>
   12 | #include <sstream>
   13 | #include <iomanip>
   14 | #include <chrono>
   15 | #include <thread>
   16 | #include <fstream>
   17 | #include <iostream>
   18 | #include <cstring>
   19 | 
   20 | // Static member definitions
   21 | std::unique_ptr<FGCom_WorkUnitSecurityManager> FGCom_WorkUnitSecurityManager::instance = nullptr;
   22 | std::mutex FGCom_WorkUnitSecurityManager::instance_mutex;
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:22:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   22 | std::mutex FGCom_WorkUnitSecurityManager::instance_mutex;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:25:63: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   25 | FGCom_WorkUnitSecurityManager& FGCom_WorkUnitSecurityManager::getInstance() {
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:25:63: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   25 | FGCom_WorkUnitSecurityManager& FGCom_WorkUnitSecurityManager::getInstance() {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto                                                                        -> FGCom_WorkUnitSecurityManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:26:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   26 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:26:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
   26 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:33:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   33 | void FGCom_WorkUnitSecurityManager::destroyInstance() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:34:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   34 |     std::lock_guard<std::mutex> lock(instance_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:42:1: warning: constructor does not initialize these fields: server_private_key, server_public_key, server_certificate, client_public_keys, client_certificates_x509 [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   42 | FGCom_WorkUnitSecurityManager::FGCom_WorkUnitSecurityManager()
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:42:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   42 | FGCom_WorkUnitSecurityManager::FGCom_WorkUnitSecurityManager()
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:60:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   60 | bool FGCom_WorkUnitSecurityManager::initialize(SecurityLevel security_level) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:60:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   60 | bool FGCom_WorkUnitSecurityManager::initialize(SecurityLevel security_level) {
      | ~~~~                                ^
      | auto                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:61:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   61 |     std::lock_guard<std::mutex> lock(security_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:84:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   84 | void FGCom_WorkUnitSecurityManager::shutdown() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:124:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  124 | void FGCom_WorkUnitSecurityManager::setSecurityLevel(SecurityLevel level) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:125:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  125 |     std::lock_guard<std::mutex> lock(security_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:129:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  129 | void FGCom_WorkUnitSecurityManager::setSecurityFeatures(bool encryption, bool signatures, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:131:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  131 |     std::lock_guard<std::mutex> lock(security_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:139:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  139 | bool FGCom_WorkUnitSecurityManager::registerClient(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:139:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 | bool FGCom_WorkUnitSecurityManager::registerClient(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  140 |                                                    const ClientSecurityProfile& profile) {
      |                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:139:63: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   15 | bool FGCom_WorkUnitSecurityManager::registerClient(const std::string& client_id, 
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:141:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  141 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:149:20: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  149 |     client_profiles[client_id] = profile;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:149:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  149 |     client_profiles[client_id] = profile;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:103:8: note: resolves to this declaration
  103 | struct ClientSecurityProfile {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:153:17: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         api_keys[client_id] = generateAPIKey(client_id);
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:153:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  153 |         api_keys[client_id] = generateAPIKey(client_id);
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:158:28: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |         client_certificates[client_id] = profile.certificate_fingerprint;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:170:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  170 | bool FGCom_WorkUnitSecurityManager::authenticateClient(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:170:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 | bool FGCom_WorkUnitSecurityManager::authenticateClient(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  171 |                                                       const std::string& auth_data, 
  172 |                                                       AuthenticationMethod method) {
      |                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:173:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  173 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:175:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  175 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:190:41: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  190 |     if (profile.failed_auth_attempts >= 5) {
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:191:20: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  191 |         auto now = std::chrono::system_clock::now();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:195:34: warning: 30 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  195 |         if (time_since_failure < 30) { // 30 minute lockout
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:219:29: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  219 |         profile.last_auth = std::chrono::system_clock::now();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:224:36: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |         profile.last_failed_auth = std::chrono::system_clock::now();
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:231:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  231 | bool FGCom_WorkUnitSecurityManager::authorizeClient(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:231:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  231 | bool FGCom_WorkUnitSecurityManager::authorizeClient(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  232 |                                                    const std::string& operation) {
      |                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:233:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  233 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:235:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  235 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:256:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  256 | bool FGCom_WorkUnitSecurityManager::revokeClientAccess(const std::string& client_id) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:256:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 | bool FGCom_WorkUnitSecurityManager::revokeClientAccess(const std::string& client_id) {
      | ~~~~                                ^
      | auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:257:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  257 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:259:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  259 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:272:54: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  272 | ClientSecurityProfile FGCom_WorkUnitSecurityManager::getClientProfile(const std::string& client_id) {
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:272:54: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  272 | ClientSecurityProfile FGCom_WorkUnitSecurityManager::getClientProfile(const std::string& client_id) {
      | ~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto                                                                                                -> ClientSecurityProfile
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:273:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  273 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:275:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  275 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:277:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  277 |         return ClientSecurityProfile(); // Return empty profile
      |                ^~~~~~~~~~~~~~~~~~~~~~~
      |                {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:283:57: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  283 | std::vector<std::string> FGCom_WorkUnitSecurityManager::getTrustedClients() {
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:283:57: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:284:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  284 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:296:57: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  296 | std::vector<std::string> FGCom_WorkUnitSecurityManager::getBlockedClients() {
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:296:57: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:297:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  297 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:310:47: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  310 | SecureWorkUnit FGCom_WorkUnitSecurityManager::createSecureWorkUnit(const WorkUnit& work_unit, 
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:310:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  310 | SecureWorkUnit FGCom_WorkUnitSecurityManager::createSecureWorkUnit(const WorkUnit& work_unit, 
      | ~~~~~~~~~~~~~~                                ^
      | auto
  311 |                                                                    const std::string& client_id) {
      |                                                                                                  -> SecureWorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:310:74: warning: no header providing "WorkUnit" is directly included [misc-include-cleaner]
   10 | SecureWorkUnit FGCom_WorkUnitSecurityManager::createSecureWorkUnit(const WorkUnit& work_unit, 
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:313:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  313 |     secure_work_unit.work_unit = work_unit;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:52:8: note: resolves to this declaration
   52 | struct WorkUnit {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:314:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     secure_work_unit.signature_time = std::chrono::system_clock::now();
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:314:39: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  314 |     secure_work_unit.signature_time = std::chrono::system_clock::now();
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:315:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  315 |     secure_work_unit.signer_client_id = client_id;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:321:44: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  321 |         secure_work_unit.digital_signature = generateDigitalSignature(work_unit, client_id);
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:326:41: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  326 |         secure_work_unit.encrypted_data = encryptWorkUnitData(work_unit, client_id);
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:330:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |     secure_work_unit.integrity_hash = FGCom_CryptographicUtils::calculateWorkUnitHash(work_unit);
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:330:39: warning: 'calculateWorkUnitHash' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  330 |     secure_work_unit.integrity_hash = FGCom_CryptographicUtils::calculateWorkUnitHash(work_unit);
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:349:24: note: resolves to this declaration
  349 |     static std::string calculateWorkUnitHash(const WorkUnit& work_unit);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:335:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  335 | WorkUnit FGCom_WorkUnitSecurityManager::extractWorkUnit(const SecureWorkUnit& secure_work_unit, 
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:335:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  335 | WorkUnit FGCom_WorkUnitSecurityManager::extractWorkUnit(const SecureWorkUnit& secure_work_unit, 
      | ~~~~~~~~                                ^
      | auto
  336 |                                                        const std::string& client_id) {
      |                                                                                      -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:339:20: warning: no header providing "std::runtime_error" is directly included [misc-include-cleaner]
   15 |         throw std::runtime_error("Invalid digital signature");
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:350:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  350 | bool FGCom_WorkUnitSecurityManager::validateWorkUnitIntegrity(const SecureWorkUnit& secure_work_unit) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:350:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  350 | bool FGCom_WorkUnitSecurityManager::validateWorkUnitIntegrity(const SecureWorkUnit& secure_work_unit) {
      | ~~~~                                ^
      | auto                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:357:5: warning: variable 'calculated_hash' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  357 |     std::string calculated_hash = FGCom_CryptographicUtils::calculateWorkUnitHash(secure_work_unit.work_unit);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:357:35: warning: 'calculateWorkUnitHash' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  357 |     std::string calculated_hash = FGCom_CryptographicUtils::calculateWorkUnitHash(secure_work_unit.work_unit);
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:349:24: note: resolves to this declaration
  349 |     static std::string calculateWorkUnitHash(const WorkUnit& work_unit);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:359:16: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
  358 |     if (calculated_hash != secure_work_unit.integrity_hash) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |     return !static_cast<bool>(calculated_hash != secure_work_unit.integrity_hash)
  359 |         return false;
      |         ~~~~~~~^~~~~~
  360 |     }
      |     ~
  361 |     
  362 |     return true;
      |     ~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:365:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  365 | bool FGCom_WorkUnitSecurityManager::validateWorkUnitAuthorization(const SecureWorkUnit& secure_work_unit, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:365:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  365 | bool FGCom_WorkUnitSecurityManager::validateWorkUnitAuthorization(const SecureWorkUnit& secure_work_unit, 
      | ~~~~                                ^
      | auto
  366 |                                                                  const std::string& client_id) {
      |                                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:369:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  369 |         auto it = std::find(secure_work_unit.allowed_recipients.begin(), 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:384:16: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
  383 |     if (profile.security_level < secure_work_unit.required_security_level) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |     return profile.security_level >= secure_work_unit.required_security_level
  384 |         return false;
      |         ~~~~~~~^~~~~~
  385 |     }
      |     ~
  386 |     
  387 |     return true;
      |     ~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:391:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  391 | bool FGCom_WorkUnitSecurityManager::validateResult(const ResultValidation& validation) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:391:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  391 | bool FGCom_WorkUnitSecurityManager::validateResult(const ResultValidation& validation) {
      | ~~~~                                ^
      | auto                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:391:37: warning: method 'validateResult' can be made const [readability-make-member-function-const]
  391 | bool FGCom_WorkUnitSecurityManager::validateResult(const ResultValidation& validation) {
      |                                     ^
      |                                                                                        const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:399:5: warning: variable 'calculated_hash' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  399 |     std::string calculated_hash = FGCom_CryptographicUtils::calculateSHA256(
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:399:35: warning: 'calculateSHA256' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  399 |     std::string calculated_hash = FGCom_CryptographicUtils::calculateSHA256(
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:347:24: note: resolves to this declaration
  347 |     static std::string calculateSHA256(const std::string& data);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:400:9: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  400 |         std::to_string(validation.result_data.size()));
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4204:3: note: resolves to this declaration
 4204 |   to_string(unsigned long __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:400:14: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  400 |         std::to_string(validation.result_data.size()));
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:402:16: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
  401 |     if (calculated_hash != validation.validation_hash) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |     return !static_cast<bool>(calculated_hash != validation.validation_hash)
  402 |         return false;
      |         ~~~~~~~^~~~~~
  403 |     }
      |     ~
  404 |     
  405 |     return true;
      |     ~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:408:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  408 | double FGCom_WorkUnitSecurityManager::calculateResultConfidence(const std::string& work_unit_id) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:408:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  408 | double FGCom_WorkUnitSecurityManager::calculateResultConfidence(const std::string& work_unit_id) {
      | ~~~~~~                                ^
      | auto                                                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:408:39: warning: method 'calculateResultConfidence' can be made static [readability-convert-member-functions-to-static]
  408 | double FGCom_WorkUnitSecurityManager::calculateResultConfidence(const std::string& work_unit_id) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:408:84: warning: parameter 'work_unit_id' is unused [misc-unused-parameters]
  408 | double FGCom_WorkUnitSecurityManager::calculateResultConfidence(const std::string& work_unit_id) {
      |                                                                                    ^~~~~~~~~~~~
      |                                                                                     /*work_unit_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:411:12: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  411 |     return 0.8; // 80% confidence
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:414:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  414 | bool FGCom_WorkUnitSecurityManager::addResultValidation(const std::string& work_unit_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:414:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  414 | bool FGCom_WorkUnitSecurityManager::addResultValidation(const std::string& work_unit_id, 
      | ~~~~                                ^
      | auto
  415 |                                                         const std::string& client_id, 
  416 |                                                         const std::vector<double>& result_data) {
      |                                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:414:37: warning: method 'addResultValidation' can be made static [readability-convert-member-functions-to-static]
  414 | bool FGCom_WorkUnitSecurityManager::addResultValidation(const std::string& work_unit_id, 
      |                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:414:57: warning: 2 adjacent parameters of 'addResultValidation' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  414 | bool FGCom_WorkUnitSecurityManager::addResultValidation(const std::string& work_unit_id, 
      |                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  415 |                                                         const std::string& client_id, 
      |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:414:76: note: the first parameter in the range is 'work_unit_id'
  414 | bool FGCom_WorkUnitSecurityManager::addResultValidation(const std::string& work_unit_id, 
      |                                                                            ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:415:76: note: the last parameter in the range is 'client_id'
  415 |                                                         const std::string& client_id, 
      |                                                                            ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:414:76: warning: parameter 'work_unit_id' is unused [misc-unused-parameters]
  414 | bool FGCom_WorkUnitSecurityManager::addResultValidation(const std::string& work_unit_id, 
      |                                                                            ^~~~~~~~~~~~
      |                                                                             /*work_unit_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:415:76: warning: parameter 'client_id' is unused [misc-unused-parameters]
  415 |                                                         const std::string& client_id, 
      |                                                                            ^~~~~~~~~
      |                                                                             /*client_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:422:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  422 | std::vector<double> FGCom_WorkUnitSecurityManager::getConsensusResult(const std::string& work_unit_id) {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:422:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:428:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  428 | bool FGCom_WorkUnitSecurityManager::isResultConsensusReached(const std::string& work_unit_id) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:428:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  428 | bool FGCom_WorkUnitSecurityManager::isResultConsensusReached(const std::string& work_unit_id) {
      | ~~~~                                ^
      | auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:428:37: warning: method 'isResultConsensusReached' can be made static [readability-convert-member-functions-to-static]
  428 | bool FGCom_WorkUnitSecurityManager::isResultConsensusReached(const std::string& work_unit_id) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:428:81: warning: parameter 'work_unit_id' is unused [misc-unused-parameters]
  428 | bool FGCom_WorkUnitSecurityManager::isResultConsensusReached(const std::string& work_unit_id) {
      |                                                                                 ^~~~~~~~~~~~
      |                                                                                  /*work_unit_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:435:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  435 | bool FGCom_WorkUnitSecurityManager::checkClientRateLimit(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:435:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  435 | bool FGCom_WorkUnitSecurityManager::checkClientRateLimit(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  436 |                                                         const std::string& operation) {
      |                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:435:58: warning: 2 adjacent parameters of 'checkClientRateLimit' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  435 | bool FGCom_WorkUnitSecurityManager::checkClientRateLimit(const std::string& client_id, 
      |                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  436 |                                                         const std::string& operation) {
      |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:435:77: note: the first parameter in the range is 'client_id'
  435 | bool FGCom_WorkUnitSecurityManager::checkClientRateLimit(const std::string& client_id, 
      |                                                                             ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:436:76: note: the last parameter in the range is 'operation'
  436 |                                                         const std::string& operation) {
      |                                                                            ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:441:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  441 |     std::lock_guard<std::mutex> lock(rate_limit_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:453:16: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  453 |     auto now = std::chrono::system_clock::now();
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:457:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  457 |     while (!queue.empty() && (now - queue.front()) > std::chrono::minutes(1)) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:462:25: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  462 |     if (queue.size() >= 10) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:471:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  471 | void FGCom_WorkUnitSecurityManager::updateClientUsage(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:471:55: warning: 2 adjacent parameters of 'updateClientUsage' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  471 | void FGCom_WorkUnitSecurityManager::updateClientUsage(const std::string& client_id, 
      |                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  472 |                                                       const std::string& operation) {
      |                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:471:74: note: the first parameter in the range is 'client_id'
  471 | void FGCom_WorkUnitSecurityManager::updateClientUsage(const std::string& client_id, 
      |                                                                          ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:472:74: note: the last parameter in the range is 'operation'
  472 |                                                       const std::string& operation) {
      |                                                                          ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:473:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  473 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:475:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  475 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:481:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  481 | void FGCom_WorkUnitSecurityManager::resetClientUsage(const std::string& client_id) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:482:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  482 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:484:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  484 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:490:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  490 | std::map<std::string, int> FGCom_WorkUnitSecurityManager::getClientUsage(const std::string& client_id) {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:490:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:491:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  491 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:493:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  493 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:502:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  502 | std::vector<SecurityEvent> FGCom_WorkUnitSecurityManager::getSecurityEvents(SecurityLevel min_severity) {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:502:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:503:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  503 |     std::lock_guard<std::mutex> lock(events_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:515:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  515 | std::vector<SecurityEvent> FGCom_WorkUnitSecurityManager::getClientSecurityEvents(const std::string& client_id) {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:515:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:516:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  516 |     std::lock_guard<std::mutex> lock(events_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:528:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  528 | void FGCom_WorkUnitSecurityManager::addSecurityEvent(const SecurityEvent& event) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:529:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  529 |     std::lock_guard<std::mutex> lock(events_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:533:34: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  533 |     if (security_events.size() > 1000) {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:534:82: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  534 |         security_events.erase(security_events.begin(), security_events.begin() + 100);
      |                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:538:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  538 | void FGCom_WorkUnitSecurityManager::clearSecurityEvents() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:539:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  539 |     std::lock_guard<std::mutex> lock(events_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:543:62: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  543 | std::map<std::string, double> FGCom_WorkUnitSecurityManager::getSecurityStatistics() {
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:543:62: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:544:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  544 |     std::lock_guard<std::mutex> lock(events_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:549:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  549 |     int low_events = 0, medium_events = 0, high_events = 0, critical_events = 0;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:568:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  568 | void FGCom_WorkUnitSecurityManager::cleanup() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:573:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  573 | bool FGCom_WorkUnitSecurityManager::isHealthy() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:573:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  573 | bool FGCom_WorkUnitSecurityManager::isHealthy() {
      | ~~~~                                ^
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:577:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  577 | std::string FGCom_WorkUnitSecurityManager::getSecurityReport() {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:577:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  577 | std::string FGCom_WorkUnitSecurityManager::getSecurityReport() {
      | ~~~~~~~~~~~                                ^
      | auto                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:578:23: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  578 |     std::stringstream ss;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:593:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  593 | std::string FGCom_WorkUnitSecurityManager::generateAPIKey(const std::string& client_id) {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:593:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  593 | std::string FGCom_WorkUnitSecurityManager::generateAPIKey(const std::string& client_id) {
      | ~~~~~~~~~~~                                ^
      | auto                                                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:593:44: warning: method 'generateAPIKey' can be made static [readability-convert-member-functions-to-static]
  593 | std::string FGCom_WorkUnitSecurityManager::generateAPIKey(const std::string& client_id) {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:593:78: warning: parameter 'client_id' is unused [misc-unused-parameters]
  593 | std::string FGCom_WorkUnitSecurityManager::generateAPIKey(const std::string& client_id) {
      |                                                                              ^~~~~~~~~
      |                                                                               /*client_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:594:12: warning: 'generateAPIKey' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  594 |     return FGCom_CryptographicUtils::generateAPIKey(32);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:369:24: note: resolves to this declaration
  369 |     static std::string generateAPIKey(size_t length = 32);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:594:53: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  594 |     return FGCom_CryptographicUtils::generateAPIKey(32);
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:597:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  597 | std::string FGCom_WorkUnitSecurityManager::generateJWTToken(const std::string& client_id, 
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:597:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  597 | std::string FGCom_WorkUnitSecurityManager::generateJWTToken(const std::string& client_id, 
      | ~~~~~~~~~~~                                ^
      | auto
  598 |                                                            const std::map<std::string, std::string>& claims) {
      |                                                                                                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:599:72: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  599 |     return FGCom_CryptographicUtils::createJWTToken(claims, jwt_secrets[client_id], 24);
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:599:85: warning: 24 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  599 |     return FGCom_CryptographicUtils::createJWTToken(claims, jwt_secrets[client_id], 24);
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:602:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  602 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& token, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:602:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  602 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& token, 
      | ~~~~                                ^
      | auto
  603 |                                                      std::map<std::string, std::string>& claims) {
      |                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:602:37: warning: method 'validateJWTToken' can be made static [readability-convert-member-functions-to-static]
  602 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& token, 
      |                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:602:73: warning: parameter 'token' is unused [misc-unused-parameters]
  602 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& token, 
      |                                                                         ^~~~~
      |                                                                          /*token*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:610:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  610 | void FGCom_WorkUnitSecurityManager::initializeSecurityKeys() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:610:37: warning: method 'initializeSecurityKeys' can be made static [readability-convert-member-functions-to-static]
  610 | void FGCom_WorkUnitSecurityManager::initializeSecurityKeys() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:618:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  618 | void FGCom_WorkUnitSecurityManager::loadServerCertificate() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:623:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  623 | void FGCom_WorkUnitSecurityManager::startSecurityMonitoring() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:628:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  628 |     monitoring_running = true;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:629:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  629 |     monitoring_thread = std::thread(&FGCom_WorkUnitSecurityManager::monitoringThreadFunction, this);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:183:13: note: resolves to this declaration
  183 |     thread& operator=(thread&& __t) noexcept
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:629:38: warning: 'monitoringThreadFunction' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  629 |     monitoring_thread = std::thread(&FGCom_WorkUnitSecurityManager::monitoringThreadFunction, this);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:200:10: note: resolves to this declaration
  200 |     void monitoringThreadFunction();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:632:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  632 | void FGCom_WorkUnitSecurityManager::stopSecurityMonitoring() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:637:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  637 |     monitoring_running = false;
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:79:5: note: resolves to this declaration
   79 |     operator=(bool __i) noexcept
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:643:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  643 | void FGCom_WorkUnitSecurityManager::monitoringThreadFunction() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:644:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  644 |     while (monitoring_running) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:648:58: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  648 |         std::this_thread::sleep_for(std::chrono::seconds(10));
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:652:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  652 | void FGCom_WorkUnitSecurityManager::processSecurityEvent(const SecurityEvent& event) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:657:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  657 | bool FGCom_WorkUnitSecurityManager::validateClientCertificate(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:657:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  657 | bool FGCom_WorkUnitSecurityManager::validateClientCertificate(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  658 |                                                               const std::string& certificate) {
      |                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:657:37: warning: method 'validateClientCertificate' can be made static [readability-convert-member-functions-to-static]
  657 | bool FGCom_WorkUnitSecurityManager::validateClientCertificate(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:657:63: warning: 2 adjacent parameters of 'validateClientCertificate' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  657 | bool FGCom_WorkUnitSecurityManager::validateClientCertificate(const std::string& client_id, 
      |                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  658 |                                                               const std::string& certificate) {
      |                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:657:82: note: the first parameter in the range is 'client_id'
  657 | bool FGCom_WorkUnitSecurityManager::validateClientCertificate(const std::string& client_id, 
      |                                                                                  ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:658:82: note: the last parameter in the range is 'certificate'
  658 |                                                               const std::string& certificate) {
      |                                                                                  ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:657:82: warning: parameter 'client_id' is unused [misc-unused-parameters]
  657 | bool FGCom_WorkUnitSecurityManager::validateClientCertificate(const std::string& client_id, 
      |                                                                                  ^~~~~~~~~
      |                                                                                   /*client_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:658:82: warning: parameter 'certificate' is unused [misc-unused-parameters]
  658 |                                                               const std::string& certificate) {
      |                                                                                  ^~~~~~~~~~~
      |                                                                                   /*certificate*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:664:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  664 | bool FGCom_WorkUnitSecurityManager::validateAPIKey(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:664:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  664 | bool FGCom_WorkUnitSecurityManager::validateAPIKey(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  665 |                                                    const std::string& api_key) {
      |                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:664:52: warning: 2 adjacent parameters of 'validateAPIKey' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  664 | bool FGCom_WorkUnitSecurityManager::validateAPIKey(const std::string& client_id, 
      |                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  665 |                                                    const std::string& api_key) {
      |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:664:71: note: the first parameter in the range is 'client_id'
  664 | bool FGCom_WorkUnitSecurityManager::validateAPIKey(const std::string& client_id, 
      |                                                                       ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:665:71: note: the last parameter in the range is 'api_key'
  665 |                                                    const std::string& api_key) {
      |                                                                       ^~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:666:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  666 |     auto it = api_keys.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:674:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  674 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:674:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  674 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  675 |                                                      const std::string& token) {
      |                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:674:37: warning: method 'validateJWTToken' can be made static [readability-convert-member-functions-to-static]
  674 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:674:54: warning: 2 adjacent parameters of 'validateJWTToken' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  674 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& client_id, 
      |                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  675 |                                                      const std::string& token) {
      |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:674:73: note: the first parameter in the range is 'client_id'
  674 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& client_id, 
      |                                                                         ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:675:73: note: the last parameter in the range is 'token'
  675 |                                                      const std::string& token) {
      |                                                                         ^~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:674:73: warning: parameter 'client_id' is unused [misc-unused-parameters]
  674 | bool FGCom_WorkUnitSecurityManager::validateJWTToken(const std::string& client_id, 
      |                                                                         ^~~~~~~~~
      |                                                                          /*client_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:675:73: warning: parameter 'token' is unused [misc-unused-parameters]
  675 |                                                      const std::string& token) {
      |                                                                         ^~~~~
      |                                                                          /*token*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:681:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  681 | std::string FGCom_WorkUnitSecurityManager::generateDigitalSignature(const WorkUnit& work_unit, 
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:681:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  681 | std::string FGCom_WorkUnitSecurityManager::generateDigitalSignature(const WorkUnit& work_unit, 
      | ~~~~~~~~~~~                                ^
      | auto
  682 |                                                                     const std::string& client_id) {
      |                                                                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:681:44: warning: method 'generateDigitalSignature' can be made static [readability-convert-member-functions-to-static]
  681 | std::string FGCom_WorkUnitSecurityManager::generateDigitalSignature(const WorkUnit& work_unit, 
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:681:85: warning: parameter 'work_unit' is unused [misc-unused-parameters]
  681 | std::string FGCom_WorkUnitSecurityManager::generateDigitalSignature(const WorkUnit& work_unit, 
      |                                                                                     ^~~~~~~~~
      |                                                                                      /*work_unit*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:688:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  688 | bool FGCom_WorkUnitSecurityManager::verifyDigitalSignature(const SecureWorkUnit& secure_work_unit) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:688:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  688 | bool FGCom_WorkUnitSecurityManager::verifyDigitalSignature(const SecureWorkUnit& secure_work_unit) {
      | ~~~~                                ^
      | auto                                                                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:688:37: warning: method 'verifyDigitalSignature' can be made static [readability-convert-member-functions-to-static]
  688 | bool FGCom_WorkUnitSecurityManager::verifyDigitalSignature(const SecureWorkUnit& secure_work_unit) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:688:82: warning: parameter 'secure_work_unit' is unused [misc-unused-parameters]
  688 | bool FGCom_WorkUnitSecurityManager::verifyDigitalSignature(const SecureWorkUnit& secure_work_unit) {
      |                                                                                  ^~~~~~~~~~~~~~~~
      |                                                                                   /*secure_work_unit*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:694:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  694 | std::string FGCom_WorkUnitSecurityManager::encryptWorkUnitData(const WorkUnit& work_unit, 
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:694:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  694 | std::string FGCom_WorkUnitSecurityManager::encryptWorkUnitData(const WorkUnit& work_unit, 
      | ~~~~~~~~~~~                                ^
      | auto
  695 |                                                                  const std::string& client_id) {
      |                                                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:694:44: warning: method 'encryptWorkUnitData' can be made static [readability-convert-member-functions-to-static]
  694 | std::string FGCom_WorkUnitSecurityManager::encryptWorkUnitData(const WorkUnit& work_unit, 
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:694:80: warning: parameter 'work_unit' is unused [misc-unused-parameters]
  694 | std::string FGCom_WorkUnitSecurityManager::encryptWorkUnitData(const WorkUnit& work_unit, 
      |                                                                                ^~~~~~~~~
      |                                                                                 /*work_unit*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:695:85: warning: parameter 'client_id' is unused [misc-unused-parameters]
  695 |                                                                  const std::string& client_id) {
      |                                                                                     ^~~~~~~~~
      |                                                                                      /*client_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:701:41: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  701 | WorkUnit FGCom_WorkUnitSecurityManager::decryptWorkUnitData(const std::string& encrypted_data, 
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:701:41: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  701 | WorkUnit FGCom_WorkUnitSecurityManager::decryptWorkUnitData(const std::string& encrypted_data, 
      | ~~~~~~~~                                ^
      | auto
  702 |                                                            const std::string& client_id) {
      |                                                                                          -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:701:41: warning: method 'decryptWorkUnitData' can be made static [readability-convert-member-functions-to-static]
  701 | WorkUnit FGCom_WorkUnitSecurityManager::decryptWorkUnitData(const std::string& encrypted_data, 
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:701:61: warning: 2 adjacent parameters of 'decryptWorkUnitData' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  701 | WorkUnit FGCom_WorkUnitSecurityManager::decryptWorkUnitData(const std::string& encrypted_data, 
      |                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  702 |                                                            const std::string& client_id) {
      |                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:701:80: note: the first parameter in the range is 'encrypted_data'
  701 | WorkUnit FGCom_WorkUnitSecurityManager::decryptWorkUnitData(const std::string& encrypted_data, 
      |                                                                                ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:702:79: note: the last parameter in the range is 'client_id'
  702 |                                                            const std::string& client_id) {
      |                                                                               ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:701:80: warning: parameter 'encrypted_data' is unused [misc-unused-parameters]
  701 | WorkUnit FGCom_WorkUnitSecurityManager::decryptWorkUnitData(const std::string& encrypted_data, 
      |                                                                                ^~~~~~~~~~~~~~
      |                                                                                 /*encrypted_data*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:702:79: warning: parameter 'client_id' is unused [misc-unused-parameters]
  702 |                                                            const std::string& client_id) {
      |                                                                               ^~~~~~~~~
      |                                                                                /*client_id*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:705:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  705 |     return WorkUnit();
      |            ^~~~~~~~~~
      |            {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:708:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  708 | bool FGCom_WorkUnitSecurityManager::checkRateLimit(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:708:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  708 | bool FGCom_WorkUnitSecurityManager::checkRateLimit(const std::string& client_id, 
      | ~~~~                                ^
      | auto
  709 |                                                    const std::string& operation) {
      |                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:713:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  713 | void FGCom_WorkUnitSecurityManager::updateClientReputation(const std::string& client_id, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:715:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  715 |     std::lock_guard<std::mutex> lock(clients_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:717:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  717 |     auto it = client_profiles.find(client_id);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:724:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  724 | void FGCom_WorkUnitSecurityManager::logSecurityEvent(const std::string& event_type, 
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:729:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  729 |     event.event_id = FGCom_CryptographicUtils::generateUUID();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:729:22: warning: 'generateUUID' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  729 |     event.event_id = FGCom_CryptographicUtils::generateUUID();
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:368:24: note: resolves to this declaration
  368 |     static std::string generateUUID();
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:730:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  730 |     event.event_type = event_type;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:731:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  731 |     event.client_id = client_id;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:732:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  732 |     event.description = description;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:734:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  734 |     event.timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:734:23: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  734 |     event.timestamp = std::chrono::system_clock::now();
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:741:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  741 | EVP_PKEY* FGCom_CryptographicUtils::generateRSAKeyPair(int key_size) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:741:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  741 | EVP_PKEY* FGCom_CryptographicUtils::generateRSAKeyPair(int key_size) {
      |         ~                           ^
      |         auto                                                         -> *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:741:37: warning: method 'generateRSAKeyPair' can be made static [readability-convert-member-functions-to-static]
  741 | EVP_PKEY* FGCom_CryptographicUtils::generateRSAKeyPair(int key_size) {
      |                                     ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:743:14: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  743 |     if (!ctx) return nullptr;
      |              ^               
      |               {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:765:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  765 | std::string FGCom_CryptographicUtils::exportPublicKeyPEM(EVP_PKEY* public_key) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:765:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  765 | std::string FGCom_CryptographicUtils::exportPublicKeyPEM(EVP_PKEY* public_key) {
      | ~~~~~~~~~~~                           ^
      | auto                                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:765:39: warning: method 'exportPublicKeyPEM' can be made static [readability-convert-member-functions-to-static]
  765 | std::string FGCom_CryptographicUtils::exportPublicKeyPEM(EVP_PKEY* public_key) {
      |                                       ^
      | static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:767:14: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  767 |     if (!bio) return "";
      |              ^          
      |               {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:774:11: warning: variable 'data' is not initialized [cppcoreguidelines-init-variables]
  774 |     char* data;
      |           ^   
      |                = nullptr
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:775:5: warning: consider replacing 'long' with 'int64' [google-runtime-int]
  775 |     long len = BIO_get_mem_data(bio, &data);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:776:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  776 |     std::string result(data, len);
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:620:6: note: default parameter was declared here
  620 |                    const _Alloc& __a = _Alloc())
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:782:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  782 | std::string FGCom_CryptographicUtils::generateAPIKey(size_t length) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:782:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  782 | std::string FGCom_CryptographicUtils::generateAPIKey(size_t length) {
      | ~~~~~~~~~~~                           ^
      | auto                                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:783:12: warning: 'generateRandomBytes' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  783 |     return generateRandomBytes(length);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:367:24: note: resolves to this declaration
  367 |     static std::string generateRandomBytes(size_t length);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:786:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  786 | std::string FGCom_CryptographicUtils::generateRandomBytes(size_t length) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:786:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  786 | std::string FGCom_CryptographicUtils::generateRandomBytes(size_t length) {
      | ~~~~~~~~~~~                           ^
      | auto                                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:800:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  800 | std::string FGCom_CryptographicUtils::generateUUID() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:800:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  800 | std::string FGCom_CryptographicUtils::generateUUID() {
      | ~~~~~~~~~~~                           ^
      | auto                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:801:12: warning: 'generateRandomBytes' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  801 |     return generateRandomBytes(16);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:786:39: note: resolves to this declaration
  786 | std::string FGCom_CryptographicUtils::generateRandomBytes(size_t length) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:801:32: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  801 |     return generateRandomBytes(16);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:804:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  804 | std::string FGCom_CryptographicUtils::calculateSHA256(const std::string& data) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:804:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  804 | std::string FGCom_CryptographicUtils::calculateSHA256(const std::string& data) {
      | ~~~~~~~~~~~                           ^
      | auto                                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:806:12: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  806 |     SHA256(reinterpret_cast<const unsigned char*>(data.c_str()), data.length(), hash);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:808:23: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  808 |     std::stringstream ss;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:809:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  809 |     for (int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:810:15: warning: 'hex' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  810 |         ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(hash[i]);
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/ios_base.h:1067:3: note: resolves to this declaration
 1067 |   hex(ios_base& __base)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:810:27: warning: 'setw' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  810 |         ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(hash[i]);
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/iomanip:227:3: note: resolves to this declaration
  227 |   setw(int __n)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:816:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  816 | std::string FGCom_CryptographicUtils::calculateWorkUnitHash(const WorkUnit& work_unit) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:816:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  816 | std::string FGCom_CryptographicUtils::calculateWorkUnitHash(const WorkUnit& work_unit) {
      | ~~~~~~~~~~~                           ^
      | auto                                                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:824:12: warning: 'calculateSHA256' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  824 |     return calculateSHA256(data);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:804:39: note: resolves to this declaration
  804 | std::string FGCom_CryptographicUtils::calculateSHA256(const std::string& data) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:828:1: warning: constructor does not initialize these fields: client_private_key, client_public_key, client_certificate [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  828 | FGCom_ClientSecurityCoordinator::FGCom_ClientSecurityCoordinator(const std::string& client_id, 
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:828:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  828 | FGCom_ClientSecurityCoordinator::FGCom_ClientSecurityCoordinator(const std::string& client_id, 
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:828:66: warning: 2 adjacent parameters of 'FGCom_ClientSecurityCoordinator' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  828 | FGCom_ClientSecurityCoordinator::FGCom_ClientSecurityCoordinator(const std::string& client_id, 
      |                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  829 |                                                                  const std::string& server_url)
      |                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:828:85: note: the first parameter in the range is 'client_id'
  828 | FGCom_ClientSecurityCoordinator::FGCom_ClientSecurityCoordinator(const std::string& client_id, 
      |                                                                                     ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:829:85: note: the last parameter in the range is 'server_url'
  829 |                                                                  const std::string& server_url)
      |                                                                                     ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:828:66: warning: pass by value and use std::move [modernize-pass-by-value]
   19 | FGCom_ClientSecurityCoordinator::FGCom_ClientSecurityCoordinator(const std::string& client_id, 
      |                                                                  ^~~~~~~~~~~~~~~~~~
      |                                                                  std::string 
   20 |                                                                  const std::string& server_url)
   21 |     : client_id(client_id)
      |                          
      |                 std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:829:66: warning: pass by value and use std::move [modernize-pass-by-value]
  829 |                                                                  const std::string& server_url)
      |                                                                  ^~~~~~~~~~~~~~~~~~
      |                                                                  std::string 
  830 |     : client_id(client_id)
  831 |     , server_url(server_url)
      |                            
      |                  std::move()
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:838:34: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  838 | FGCom_ClientSecurityCoordinator::~FGCom_ClientSecurityCoordinator() {
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:842:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  842 | bool FGCom_ClientSecurityCoordinator::initialize(SecurityLevel security_level) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:842:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  842 | bool FGCom_ClientSecurityCoordinator::initialize(SecurityLevel security_level) {
      | ~~~~                                  ^
      | auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:855:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  855 | void FGCom_ClientSecurityCoordinator::shutdown() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:874:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  874 | bool FGCom_ClientSecurityCoordinator::authenticateWithServer() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:874:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  874 | bool FGCom_ClientSecurityCoordinator::authenticateWithServer() {
      | ~~~~                                  ^
      | auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:874:39: warning: method 'authenticateWithServer' can be made static [readability-convert-member-functions-to-static]
  874 | bool FGCom_ClientSecurityCoordinator::authenticateWithServer() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:880:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  880 | bool FGCom_ClientSecurityCoordinator::registerWithServer(const ClientSecurityProfile& profile) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:880:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  880 | bool FGCom_ClientSecurityCoordinator::registerWithServer(const ClientSecurityProfile& profile) {
      | ~~~~                                  ^
      | auto                                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:880:39: warning: method 'registerWithServer' can be made static [readability-convert-member-functions-to-static]
  880 | bool FGCom_ClientSecurityCoordinator::registerWithServer(const ClientSecurityProfile& profile) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:880:87: warning: parameter 'profile' is unused [misc-unused-parameters]
  880 | bool FGCom_ClientSecurityCoordinator::registerWithServer(const ClientSecurityProfile& profile) {
      |                                                                                       ^~~~~~~
      |                                                                                        /*profile*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:886:49: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  886 | SecureWorkUnit FGCom_ClientSecurityCoordinator::createSecureWorkUnit(const WorkUnit& work_unit) {
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:886:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  886 | SecureWorkUnit FGCom_ClientSecurityCoordinator::createSecureWorkUnit(const WorkUnit& work_unit) {
      | ~~~~~~~~~~~~~~                                  ^
      | auto                                                                                            -> SecureWorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:888:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  888 |     secure_work_unit.work_unit = work_unit;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_distributor.h:52:8: note: resolves to this declaration
   52 | struct WorkUnit {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:889:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  889 |     secure_work_unit.signature_time = std::chrono::system_clock::now();
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:889:39: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  889 |     secure_work_unit.signature_time = std::chrono::system_clock::now();
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:890:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  890 |     secure_work_unit.signer_client_id = client_id;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:898:37: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  898 |     secure_work_unit.integrity_hash = FGCom_CryptographicUtils::calculateWorkUnitHash(work_unit);
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:898:39: warning: 'calculateWorkUnitHash' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  898 |     secure_work_unit.integrity_hash = FGCom_CryptographicUtils::calculateWorkUnitHash(work_unit);
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:816:39: note: resolves to this declaration
  816 | std::string FGCom_CryptographicUtils::calculateWorkUnitHash(const WorkUnit& work_unit) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:903:43: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  903 | WorkUnit FGCom_ClientSecurityCoordinator::extractSecureWorkUnit(const SecureWorkUnit& secure_work_unit) {
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:903:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  903 | WorkUnit FGCom_ClientSecurityCoordinator::extractSecureWorkUnit(const SecureWorkUnit& secure_work_unit) {
      | ~~~~~~~~                                  ^
      | auto                                                                                                    -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:912:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  912 | bool FGCom_ClientSecurityCoordinator::validateWorkUnitSignature(const SecureWorkUnit& secure_work_unit) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:912:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  912 | bool FGCom_ClientSecurityCoordinator::validateWorkUnitSignature(const SecureWorkUnit& secure_work_unit) {
      | ~~~~                                  ^
      | auto                                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:912:39: warning: method 'validateWorkUnitSignature' can be made static [readability-convert-member-functions-to-static]
  912 | bool FGCom_ClientSecurityCoordinator::validateWorkUnitSignature(const SecureWorkUnit& secure_work_unit) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:912:87: warning: parameter 'secure_work_unit' is unused [misc-unused-parameters]
  912 | bool FGCom_ClientSecurityCoordinator::validateWorkUnitSignature(const SecureWorkUnit& secure_work_unit) {
      |                                                                                       ^~~~~~~~~~~~~~~~
      |                                                                                        /*secure_work_unit*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:918:51: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  918 | ResultValidation FGCom_ClientSecurityCoordinator::createResultValidation(const std::string& work_unit_id, 
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:918:51: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  918 | ResultValidation FGCom_ClientSecurityCoordinator::createResultValidation(const std::string& work_unit_id, 
      | ~~~~~~~~~~~~~~~~                                  ^
      | auto
  919 |                                                                         const std::vector<double>& result_data) {
      |                                                                                                                 -> ResultValidation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:921:29: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  921 |     validation.work_unit_id = work_unit_id;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:922:26: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  922 |     validation.client_id = client_id;
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:924:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  924 |     validation.validation_time = std::chrono::system_clock::now();
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:924:34: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  924 |     validation.validation_time = std::chrono::system_clock::now();
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:933:32: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  933 |     validation.validation_hash = FGCom_CryptographicUtils::calculateSHA256(data);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:933:34: warning: 'calculateSHA256' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  933 |     validation.validation_hash = FGCom_CryptographicUtils::calculateSHA256(data);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:804:39: note: resolves to this declaration
  804 | std::string FGCom_CryptographicUtils::calculateSHA256(const std::string& data) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:938:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  938 | bool FGCom_ClientSecurityCoordinator::submitResultValidation(const ResultValidation& validation) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:938:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  938 | bool FGCom_ClientSecurityCoordinator::submitResultValidation(const ResultValidation& validation) {
      | ~~~~                                  ^
      | auto                                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:938:39: warning: method 'submitResultValidation' can be made static [readability-convert-member-functions-to-static]
  938 | bool FGCom_ClientSecurityCoordinator::submitResultValidation(const ResultValidation& validation) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:938:86: warning: parameter 'validation' is unused [misc-unused-parameters]
  938 | bool FGCom_ClientSecurityCoordinator::submitResultValidation(const ResultValidation& validation) {
      |                                                                                      ^~~~~~~~~~
      |                                                                                       /*validation*/
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:944:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  944 | void FGCom_ClientSecurityCoordinator::reportSecurityEvent(const std::string& event_type, 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:944:59: warning: 2 adjacent parameters of 'reportSecurityEvent' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  944 | void FGCom_ClientSecurityCoordinator::reportSecurityEvent(const std::string& event_type, 
      |                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  945 |                                                           const std::string& description) {
      |                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:944:78: note: the first parameter in the range is 'event_type'
  944 | void FGCom_ClientSecurityCoordinator::reportSecurityEvent(const std::string& event_type, 
      |                                                                              ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:945:78: note: the last parameter in the range is 'description'
  945 |                                                           const std::string& description) {
      |                                                                              ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:950:61: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  950 | std::vector<SecurityEvent> FGCom_ClientSecurityCoordinator::getSecurityEvents() {
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:950:61: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:956:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  956 | bool FGCom_ClientSecurityCoordinator::isAuthenticated() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:956:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  956 | bool FGCom_ClientSecurityCoordinator::isAuthenticated() {
      | ~~~~                                  ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:956:39: warning: method 'isAuthenticated' can be made const [readability-make-member-function-const]
  956 | bool FGCom_ClientSecurityCoordinator::isAuthenticated() {
      |                                       ^
      |                                                         const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:960:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  960 | std::string FGCom_ClientSecurityCoordinator::getClientID() {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:960:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  960 | std::string FGCom_ClientSecurityCoordinator::getClientID() {
      | ~~~~~~~~~~~                                  ^
      | auto                                                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:964:48: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  964 | SecurityLevel FGCom_ClientSecurityCoordinator::getSecurityLevel() {
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:964:48: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  964 | SecurityLevel FGCom_ClientSecurityCoordinator::getSecurityLevel() {
      | ~~~~~~~~~~~~~                                  ^
      | auto                                                              -> SecurityLevel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:968:46: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  968 | std::string FGCom_ClientSecurityCoordinator::getSecurityReport() {
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:968:46: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  968 | std::string FGCom_ClientSecurityCoordinator::getSecurityReport() {
      | ~~~~~~~~~~~                                  ^
      | auto                                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:969:23: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  969 |     std::stringstream ss;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:981:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  981 | FGCom_SecurityEventLogger::FGCom_SecurityEventLogger(const std::string& log_file_path)
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:981:54: warning: pass by value and use std::move [modernize-pass-by-value]
  981 | FGCom_SecurityEventLogger::FGCom_SecurityEventLogger(const std::string& log_file_path)
      |                                                      ^~~~~~~~~~~~~~~~~~
      |                                                      std::string 
  982 |     : log_file_path(log_file_path)
      |                                  
      |                     std::move(   )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:985:28: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
  985 | FGCom_SecurityEventLogger::~FGCom_SecurityEventLogger() {
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:985:28: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:989:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  989 | void FGCom_SecurityEventLogger::logEvent(const SecurityEvent& event) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:994:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  994 |     std::lock_guard<std::mutex> lock(log_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:998:23: warning: 'to_time_t' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  998 |         auto time_t = std::chrono::system_clock::to_time_t(event.timestamp);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1244:7: note: resolves to this declaration
 1244 |       to_time_t(const time_point& __t) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:999:35: warning: function is not thread safe [concurrency-mt-unsafe]
  999 |         log_file << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") << " "
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:999:35: warning: 'localtime' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/time.h:137:19: note: resolves to this declaration
  137 | extern struct tm *localtime (const time_t *__timer) __THROW;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:999:40: warning: no header providing "std::localtime" is directly included [misc-include-cleaner]
   11 |         log_file << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") << " "
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1006:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
 1006 | void FGCom_SecurityEventLogger::logEvent(const std::string& event_type, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1011:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1011 |     event.event_id = FGCom_CryptographicUtils::generateUUID();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1011:22: warning: 'generateUUID' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1011 |     event.event_id = FGCom_CryptographicUtils::generateUUID();
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:800:39: note: resolves to this declaration
  800 | std::string FGCom_CryptographicUtils::generateUUID() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1012:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1012 |     event.event_type = event_type;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1013:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1013 |     event.client_id = client_id;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1014:23: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1014 |     event.description = description;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1016:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1016 |     event.timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1016:23: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1016 |     event.timestamp = std::chrono::system_clock::now();
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1021:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
 1021 | void FGCom_SecurityEventLogger::enableLogging(bool enable) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1025:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
 1025 | void FGCom_SecurityEventLogger::setLogFile(const std::string& file_path) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1026:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
 1026 |     log_file_path = file_path;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1029:55: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
 1029 | std::vector<SecurityEvent> FGCom_SecurityEventLogger::readEvents(SecurityLevel min_severity) {
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1029:55: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1035:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
 1035 | void FGCom_SecurityEventLogger::clearLog() {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.cpp:1036:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
 1036 |     std::lock_guard<std::mutex> lock(log_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_WORK_UNIT_SECURITY_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_WORK_UNIT_SECURITY_H
    2 | #define FGCOM_WORK_UNIT_SECURITY_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_WORK_UNIT_SECURITY_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:5:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:7:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <map>
      | ^~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:10:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   11 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:11:1: warning: system include thread not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   12 | #include <queue>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:12:1: warning: system include queue not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <queue>
      | ^~~~~~~~~~~~~~~~
   13 | #include <condition_variable>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:13:1: warning: system include condition_variable not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <condition_variable>
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   14 | #include <cstdint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:14:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   15 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:15:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   15 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   16 | #include <unordered_set>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:16:1: warning: system include unordered_set not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   16 | #include <unordered_set>
      | ^~~~~~~~~~~~~~~~~~~~~~~~
   17 | #include <future>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:17:1: warning: system include future not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h [llvmlibc-restrict-system-libc-headers]
   17 | #include <future>
      | ^~~~~~~~~~~~~~~~~
   18 | // Secure OpenSSL wrapper to prevent direct usage
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:25:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   25 |         static bool initialize();
      |                ~~~~ ^           
      |                auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:27:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   27 |         static bool isInitialized();
      |                ~~~~ ^              
      |                auto                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:32:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   32 |         static bool generateBytes(unsigned char* buffer, size_t length);
      |                ~~~~ ^                                                  
      |                auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:33:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 |         static std::string generateSecureToken(size_t length);
      |                ~~~~~~~~~~~ ^                                 
      |                auto                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:38:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   38 |         static std::string sha256(const std::string& data);
      |                ~~~~~~~~~~~ ^                              
      |                auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:39:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   39 |         static std::string hmacSha256(const std::string& data, const std::string& key);
      |                ~~~~~~~~~~~ ^                                                          
      |                auto                                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:40:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   40 |         static bool verifyHash(const std::string& data, const std::string& hash);
      |                ~~~~ ^                                                           
      |                auto                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:45:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   45 |         static std::string encryptAES256(const std::string& data, const std::string& key);
      |                ~~~~~~~~~~~ ^                                                             
      |                auto                                                                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:46:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   46 |         static std::string decryptAES256(const std::string& encrypted_data, const std::string& key);
      |                ~~~~~~~~~~~ ^                                                                       
      |                auto                                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:47:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   47 |         static std::string generateAESKey();
      |                ~~~~~~~~~~~ ^               
      |                auto                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:49:1: warning: namespace 'SecureOpenSSL' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
   49 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:19:11: note: namespace 'SecureOpenSSL' starts here
   19 | namespace SecureOpenSSL {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:55:12: warning: enum 'SecurityLevel' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   55 | enum class SecurityLevel {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:63:12: warning: enum 'AuthenticationMethod' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   63 | enum class AuthenticationMethod {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:73:8: warning: accessing fields in struct 'AuthenticationData' is inefficient due to padding; only needs 160 bytes but is using 168 bytes [altera-struct-pack-align]
   73 | struct AuthenticationData {
      |        ^
   74 |     std::string client_id;
   75 |     std::string api_key_hash;
   76 |     std::string certificate_fingerprint;
   77 |     std::string public_key_pem;
   78 |     AuthenticationMethod auth_method;
   79 |     std::chrono::system_clock::time_point last_auth;
   80 |     std::chrono::system_clock::time_point created_time;
   81 |     int failed_auth_attempts;
   82 |     std::chrono::system_clock::time_point last_failed_auth;
   83 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:73:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AuthenticationData'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:73:8: warning: accessing fields in struct 'AuthenticationData' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   73 | struct AuthenticationData {
      |        ^
   74 |     std::string client_id;
   75 |     std::string api_key_hash;
   76 |     std::string certificate_fingerprint;
   77 |     std::string public_key_pem;
   78 |     AuthenticationMethod auth_method;
   79 |     std::chrono::system_clock::time_point last_auth;
   80 |     std::chrono::system_clock::time_point created_time;
   81 |     int failed_auth_attempts;
   82 |     std::chrono::system_clock::time_point last_failed_auth;
   83 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:73:8: note: use "__attribute__((aligned(128)))" to align struct 'AuthenticationData' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:73:8: warning: constructor does not initialize these fields: auth_method, failed_auth_attempts [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   73 | struct AuthenticationData {
      |        ^
   74 |     std::string client_id;
   75 |     std::string api_key_hash;
   76 |     std::string certificate_fingerprint;
   77 |     std::string public_key_pem;
   78 |     AuthenticationMethod auth_method;
   79 |     std::chrono::system_clock::time_point last_auth;
   80 |     std::chrono::system_clock::time_point created_time;
   81 |     int failed_auth_attempts;
      |                             
      |                             {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:86:8: warning: accessing fields in struct 'RateLimitingData' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   86 | struct RateLimitingData {
      |        ^
   87 |     std::map<std::string, int> rate_limits;
   88 |     std::map<std::string, int> current_usage;
   89 |     std::chrono::system_clock::time_point last_reset;
   90 |     std::chrono::system_clock::time_point next_reset;
   91 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:86:8: note: use "__attribute__((aligned(128)))" to align struct 'RateLimitingData' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:94:8: warning: accessing fields in struct 'ReputationData' is inefficient due to padding; only needs 52 bytes but is using 56 bytes [altera-struct-pack-align]
   94 | struct ReputationData {
      |        ^
   95 |     double reputation_score;
   96 |     std::vector<std::string> security_violations;
   97 |     std::chrono::system_clock::time_point last_violation;
   98 |     int violation_count;
   99 |     double trust_level;
  100 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:94:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ReputationData'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:94:8: warning: accessing fields in struct 'ReputationData' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   94 | struct ReputationData {
      |        ^
   95 |     double reputation_score;
   96 |     std::vector<std::string> security_violations;
   97 |     std::chrono::system_clock::time_point last_violation;
   98 |     int violation_count;
   99 |     double trust_level;
  100 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:94:8: note: use "__attribute__((aligned(64)))" to align struct 'ReputationData' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:94:8: warning: constructor does not initialize these fields: reputation_score, violation_count, trust_level [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   94 | struct ReputationData {
      |        ^
   95 |     double reputation_score;
      |                            
      |                            {}
   96 |     std::vector<std::string> security_violations;
   97 |     std::chrono::system_clock::time_point last_violation;
   98 |     int violation_count;
      |                        
      |                        {}
   99 |     double trust_level;
      |                       
      |                       {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:103:8: warning: accessing fields in struct 'ClientSecurityProfile' is inefficient due to padding; only needs 366 bytes but is using 368 bytes [altera-struct-pack-align]
  103 | struct ClientSecurityProfile {
      |        ^
  104 |     AuthenticationData auth_data;
  105 |     RateLimitingData rate_data;
  106 |     ReputationData reputation_data;
  107 |     SecurityLevel security_level;
  108 |     bool is_trusted;
  109 |     bool is_blocked;
  110 |     std::vector<std::string> allowed_work_unit_types;
  111 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:103:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ClientSecurityProfile'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:103:8: warning: accessing fields in struct 'ClientSecurityProfile' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  103 | struct ClientSecurityProfile {
      |        ^
  104 |     AuthenticationData auth_data;
  105 |     RateLimitingData rate_data;
  106 |     ReputationData reputation_data;
  107 |     SecurityLevel security_level;
  108 |     bool is_trusted;
  109 |     bool is_blocked;
  110 |     std::vector<std::string> allowed_work_unit_types;
  111 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:103:8: note: use "__attribute__((aligned(128)))" to align struct 'ClientSecurityProfile' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:103:8: warning: constructor does not initialize these fields: security_level, is_trusted, is_blocked [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  103 | struct ClientSecurityProfile {
      |        ^
  104 |     AuthenticationData auth_data;
  105 |     RateLimitingData rate_data;
  106 |     ReputationData reputation_data;
  107 |     SecurityLevel security_level;
  108 |     bool is_trusted;
      |                    
      |                    {}
  109 |     bool is_blocked;
      |                    
      |                    {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:114:8: warning: accessing fields in struct 'SecureWorkUnit' is inefficient due to padding; only needs 557 bytes but is using 568 bytes [altera-struct-pack-align]
  114 | struct SecureWorkUnit {
      |        ^
  115 |     WorkUnit work_unit;
  116 |     std::string digital_signature;
  117 |     std::string encryption_key_id;
  118 |     std::string integrity_hash;
  119 |     std::chrono::system_clock::time_point signature_time;
  120 |     std::string signer_client_id;
  121 |     SecurityLevel required_security_level;
  122 |     std::vector<std::string> allowed_recipients;
  123 |     bool is_encrypted;
  124 |     std::string encrypted_data;
  125 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:114:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'SecureWorkUnit'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:114:8: warning: accessing fields in struct 'SecureWorkUnit' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  114 | struct SecureWorkUnit {
      |        ^
  115 |     WorkUnit work_unit;
  116 |     std::string digital_signature;
  117 |     std::string encryption_key_id;
  118 |     std::string integrity_hash;
  119 |     std::chrono::system_clock::time_point signature_time;
  120 |     std::string signer_client_id;
  121 |     SecurityLevel required_security_level;
  122 |     std::vector<std::string> allowed_recipients;
  123 |     bool is_encrypted;
  124 |     std::string encrypted_data;
  125 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:114:8: note: use "__attribute__((aligned(128)))" to align struct 'SecureWorkUnit' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:114:8: warning: constructor does not initialize these fields: required_security_level, is_encrypted [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  114 | struct SecureWorkUnit {
      |        ^
  115 |     WorkUnit work_unit;
  116 |     std::string digital_signature;
  117 |     std::string encryption_key_id;
  118 |     std::string integrity_hash;
  119 |     std::chrono::system_clock::time_point signature_time;
  120 |     std::string signer_client_id;
  121 |     SecurityLevel required_security_level;
  122 |     std::vector<std::string> allowed_recipients;
  123 |     bool is_encrypted;
      |                      
      |                      {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:128:8: warning: accessing fields in struct 'ResultValidation' is inefficient due to padding; only needs 241 bytes but is using 248 bytes [altera-struct-pack-align]
  128 | struct ResultValidation {
      |        ^
  129 |     std::string work_unit_id;
  130 |     std::string client_id;
  131 |     std::vector<double> result_data;
  132 |     std::string result_signature;
  133 |     std::string validation_hash;
  134 |     bool is_validated;
  135 |     double confidence_score;
  136 |     std::chrono::system_clock::time_point validation_time;
  137 |     std::vector<std::string> validator_clients;
  138 |     std::map<std::string, double> consensus_scores;
  139 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:128:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ResultValidation'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:128:8: warning: accessing fields in struct 'ResultValidation' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  128 | struct ResultValidation {
      |        ^
  129 |     std::string work_unit_id;
  130 |     std::string client_id;
  131 |     std::vector<double> result_data;
  132 |     std::string result_signature;
  133 |     std::string validation_hash;
  134 |     bool is_validated;
  135 |     double confidence_score;
  136 |     std::chrono::system_clock::time_point validation_time;
  137 |     std::vector<std::string> validator_clients;
  138 |     std::map<std::string, double> consensus_scores;
  139 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:128:8: note: use "__attribute__((aligned(128)))" to align struct 'ResultValidation' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:128:8: warning: constructor does not initialize these fields: is_validated, confidence_score [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  128 | struct ResultValidation {
      |        ^
  129 |     std::string work_unit_id;
  130 |     std::string client_id;
  131 |     std::vector<double> result_data;
  132 |     std::string result_signature;
  133 |     std::string validation_hash;
  134 |     bool is_validated;
      |                      
      |                      {}
  135 |     double confidence_score;
      |                            
      |                            {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:142:8: warning: accessing fields in struct 'SecurityEvent' is inefficient due to padding; only needs 221 bytes but is using 232 bytes [altera-struct-pack-align]
  142 | struct SecurityEvent {
      |        ^
  143 |     std::string event_id;
  144 |     std::string event_type;
  145 |     std::string client_id;
  146 |     std::string description;
  147 |     SecurityLevel severity;
  148 |     std::chrono::system_clock::time_point timestamp;
  149 |     std::map<std::string, std::string> metadata;
  150 |     bool requires_action;
  151 |     std::string recommended_action;
  152 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:142:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'SecurityEvent'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:142:8: warning: accessing fields in struct 'SecurityEvent' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  142 | struct SecurityEvent {
      |        ^
  143 |     std::string event_id;
  144 |     std::string event_type;
  145 |     std::string client_id;
  146 |     std::string description;
  147 |     SecurityLevel severity;
  148 |     std::chrono::system_clock::time_point timestamp;
  149 |     std::map<std::string, std::string> metadata;
  150 |     bool requires_action;
  151 |     std::string recommended_action;
  152 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:142:8: note: use "__attribute__((aligned(128)))" to align struct 'SecurityEvent' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:142:8: warning: constructor does not initialize these fields: severity, requires_action [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  142 | struct SecurityEvent {
      |        ^
  143 |     std::string event_id;
  144 |     std::string event_type;
  145 |     std::string client_id;
  146 |     std::string description;
  147 |     SecurityLevel severity;
  148 |     std::chrono::system_clock::time_point timestamp;
  149 |     std::map<std::string, std::string> metadata;
  150 |     bool requires_action;
      |                         
      |                         {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:161:19: warning: use default member initializer for 'global_security_level' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  161 |     SecurityLevel global_security_level;
      |                   ^                    
      |                                        {SecurityLevel::MEDIUM}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:162:10: warning: use default member initializer for 'security_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  162 |     bool security_enabled;
      |          ^               
      |                          {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:163:10: warning: use default member initializer for 'encryption_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  163 |     bool encryption_enabled;
      |          ^                 
      |                            {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:164:10: warning: use default member initializer for 'signature_validation_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  164 |     bool signature_validation_enabled;
      |          ^                           
      |                                      {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:165:10: warning: use default member initializer for 'rate_limiting_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  165 |     bool rate_limiting_enabled;
      |          ^                    
      |                               {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:166:10: warning: use default member initializer for 'monitoring_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  166 |     bool monitoring_enabled;
      |          ^                 
      |                            {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:175:5: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  175 |     EVP_PKEY* server_private_key;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:176:5: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  176 |     EVP_PKEY* server_public_key;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:177:5: error: unknown type name 'X509' [clang-diagnostic-error]
  177 |     X509* server_certificate;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:178:27: error: use of undeclared identifier 'EVP_PKEY' [clang-diagnostic-error]
  178 |     std::map<std::string, EVP_PKEY*> client_public_keys;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:178:36: error: expected expression [clang-diagnostic-error]
  178 |     std::map<std::string, EVP_PKEY*> client_public_keys;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:179:27: error: use of undeclared identifier 'X509' [clang-diagnostic-error]
  179 |     std::map<std::string, X509*> client_certificates_x509;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:179:32: error: expected expression [clang-diagnostic-error]
  179 |     std::map<std::string, X509*> client_certificates_x509;
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:202:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  202 |     bool validateClientCertificate(const std::string& client_id, const std::string& certificate);
      |     ~~~~ ^                                                                                      
      |     auto                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:203:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     bool validateAPIKey(const std::string& client_id, const std::string& api_key);
      |     ~~~~ ^                                                                       
      |     auto                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:204:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     bool validateJWTToken(const std::string& client_id, const std::string& token);
      |     ~~~~ ^                                                                       
      |     auto                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:205:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 |     std::string generateDigitalSignature(const WorkUnit& work_unit, const std::string& client_id);
      |     ~~~~~~~~~~~ ^                                                                                
      |     auto                                                                                          -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:206:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  206 |     bool verifyDigitalSignature(const SecureWorkUnit& secure_work_unit);
      |     ~~~~ ^                                                             
      |     auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:207:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  207 |     std::string encryptWorkUnitData(const WorkUnit& work_unit, const std::string& client_id);
      |     ~~~~~~~~~~~ ^                                                                           
      |     auto                                                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:208:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     WorkUnit decryptWorkUnitData(const std::string& encrypted_data, const std::string& client_id);
      |     ~~~~~~~~ ^                                                                                   
      |     auto                                                                                          -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:209:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  209 |     bool checkRateLimit(const std::string& client_id, const std::string& operation);
      |     ~~~~ ^                                                                         
      |     auto                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:216:43: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     static FGCom_WorkUnitSecurityManager& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                                         -> FGCom_WorkUnitSecurityManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:220:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     bool initialize(SecurityLevel security_level = SecurityLevel::MEDIUM);
      |     ~~~~ ^                                                               
      |     auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:220:21: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  220 |     bool initialize(SecurityLevel security_level = SecurityLevel::MEDIUM);
      |                     ^                            ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:226:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  226 |     bool registerClient(const std::string& client_id, const ClientSecurityProfile& profile);
      |     ~~~~ ^                                                                                 
      |     auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:227:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     bool authenticateClient(const std::string& client_id, const std::string& auth_data, 
      |     ~~~~ ^
      |     auto
  228 |                           AuthenticationMethod method);
      |                                                       
      |                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:229:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     bool authorizeClient(const std::string& client_id, const std::string& operation);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:230:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  230 |     bool revokeClientAccess(const std::string& client_id);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:231:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  231 |     ClientSecurityProfile getClientProfile(const std::string& client_id);
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                                             
      |     auto                                                                 -> ClientSecurityProfile
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:232:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     std::vector<std::string> getTrustedClients();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:233:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     std::vector<std::string> getBlockedClients();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:236:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  236 |     SecureWorkUnit createSecureWorkUnit(const WorkUnit& work_unit, const std::string& client_id);
      |     ~~~~~~~~~~~~~~ ^                                                                            
      |     auto                                                                                         -> SecureWorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:237:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  237 |     WorkUnit extractWorkUnit(const SecureWorkUnit& secure_work_unit, const std::string& client_id);
      |     ~~~~~~~~ ^                                                                                    
      |     auto                                                                                           -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:238:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  238 |     bool validateWorkUnitIntegrity(const SecureWorkUnit& secure_work_unit);
      |     ~~~~ ^                                                                
      |     auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:239:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  239 |     bool validateWorkUnitAuthorization(const SecureWorkUnit& secure_work_unit, const std::string& client_id);
      |     ~~~~ ^                                                                                                  
      |     auto                                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:242:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  242 |     bool validateResult(const ResultValidation& validation);
      |     ~~~~ ^                                                 
      |     auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:243:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  243 |     double calculateResultConfidence(const std::string& work_unit_id);
      |     ~~~~~~ ^                                                         
      |     auto                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:244:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  244 |     bool addResultValidation(const std::string& work_unit_id, const std::string& client_id, 
      |     ~~~~ ^
      |     auto
  245 |                            const std::vector<double>& result_data);
      |                                                                   
      |                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:246:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 |     std::vector<double> getConsensusResult(const std::string& work_unit_id);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                  
      |     auto                                                                    -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:247:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |     bool isResultConsensusReached(const std::string& work_unit_id);
      |     ~~~~ ^                                                        
      |     auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:250:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  250 |     bool checkClientRateLimit(const std::string& client_id, const std::string& operation);
      |     ~~~~ ^                                                                               
      |     auto                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:253:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  253 |     std::map<std::string, int> getClientUsage(const std::string& client_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                           
      |     auto                                                                    -> std::map<std::string, int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:256:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |     std::vector<SecurityEvent> getSecurityEvents(SecurityLevel min_severity = SecurityLevel::LOW);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                 
      |     auto                                                                                          -> std::vector<SecurityEvent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:256:50: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  256 |     std::vector<SecurityEvent> getSecurityEvents(SecurityLevel min_severity = SecurityLevel::LOW);
      |                                                  ^                          ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:257:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  257 |     std::vector<SecurityEvent> getClientSecurityEvents(const std::string& client_id);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                    
      |     auto                                                                             -> std::vector<SecurityEvent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:260:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  260 |     std::map<std::string, double> getSecurityStatistics();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                      
      |     auto                                                  -> std::map<std::string, double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:264:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 |     bool isHealthy();
      |     ~~~~ ^          
      |     auto             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:265:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     std::string getSecurityReport();
      |     ~~~~~~~~~~~ ^                  
      |     auto                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:266:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  266 |     std::string generateAPIKey(const std::string& client_id);
      |     ~~~~~~~~~~~ ^                                           
      |     auto                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:267:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  267 |     std::string generateJWTToken(const std::string& client_id, const std::map<std::string, std::string>& claims);
      |     ~~~~~~~~~~~ ^                                                                                               
      |     auto                                                                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:268:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  268 |     bool validateJWTToken(const std::string& token, std::map<std::string, std::string>& claims);
      |     ~~~~ ^                                                                                     
      |     auto                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:272:7: warning: class 'FGCom_ClientSecurityCoordinator' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  272 | class FGCom_ClientSecurityCoordinator {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:280:19: warning: use default member initializer for 'security_level' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  280 |     SecurityLevel security_level;
      |                   ^             
      |                                 {SecurityLevel::MEDIUM}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:281:10: warning: use default member initializer for 'security_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  281 |     bool security_enabled;
      |          ^               
      |                          {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:284:5: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  284 |     EVP_PKEY* client_private_key;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:285:5: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  285 |     EVP_PKEY* client_public_key;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:286:5: error: unknown type name 'X509' [clang-diagnostic-error]
  286 |     X509* client_certificate;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:293:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  293 |     bool initialize(SecurityLevel security_level = SecurityLevel::MEDIUM);
      |     ~~~~ ^                                                               
      |     auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:293:21: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  293 |     bool initialize(SecurityLevel security_level = SecurityLevel::MEDIUM);
      |                     ^                            ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:297:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  297 |     bool authenticateWithServer();
      |     ~~~~ ^                       
      |     auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:298:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  298 |     bool registerWithServer(const ClientSecurityProfile& profile);
      |     ~~~~ ^                                                       
      |     auto                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:299:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  299 |     bool updateClientProfile(const ClientSecurityProfile& profile);
      |     ~~~~ ^                                                        
      |     auto                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:302:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  302 |     SecureWorkUnit createSecureWorkUnit(const WorkUnit& work_unit);
      |     ~~~~~~~~~~~~~~ ^                                              
      |     auto                                                           -> SecureWorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:303:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  303 |     WorkUnit extractSecureWorkUnit(const SecureWorkUnit& secure_work_unit);
      |     ~~~~~~~~ ^                                                            
      |     auto                                                                   -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:304:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  304 |     bool validateWorkUnitSignature(const SecureWorkUnit& secure_work_unit);
      |     ~~~~ ^                                                                
      |     auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:307:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     ResultValidation createResultValidation(const std::string& work_unit_id, 
      |     ~~~~~~~~~~~~~~~~ ^
      |     auto
  308 |                                           const std::vector<double>& result_data);
      |                                                                                  
      |                                                                                   -> ResultValidation
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:309:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  309 |     bool submitResultValidation(const ResultValidation& validation);
      |     ~~~~ ^                                                         
      |     auto                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:313:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  313 |     std::vector<SecurityEvent> getSecurityEvents();
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                  
      |     auto                                           -> std::vector<SecurityEvent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:316:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  316 |     bool isAuthenticated();
      |     ~~~~ ^                
      |     auto                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:317:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  317 |     std::string getClientID();
      |     ~~~~~~~~~~~ ^            
      |     auto                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:318:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  318 |     SecurityLevel getSecurityLevel();
      |     ~~~~~~~~~~~~~ ^                 
      |     auto                             -> SecurityLevel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:319:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  319 |     std::string getSecurityReport();
      |     ~~~~~~~~~~~ ^                  
      |     auto                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:326:12: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  326 |     static EVP_PKEY* generateRSAKeyPair(int key_size = 2048);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:326:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  326 |     static EVP_PKEY* generateRSAKeyPair(int key_size = 2048);
      |                    ~ ^                                      
      |                    auto                                      -> *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:326:41: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  326 |     static EVP_PKEY* generateRSAKeyPair(int key_size = 2048);
      |                                         ^            ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:326:56: warning: 2048 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  326 |     static EVP_PKEY* generateRSAKeyPair(int key_size = 2048);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:327:12: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  327 |     static EVP_PKEY* generateECKeyPair(int curve = NID_secp256r1);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:327:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  327 |     static EVP_PKEY* generateECKeyPair(int curve = NID_secp256r1);
      |                    ~ ^                                           
      |                    auto                                           -> *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:327:40: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  327 |     static EVP_PKEY* generateECKeyPair(int curve = NID_secp256r1);
      |                                        ^         ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:328:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  328 |     static std::string exportPublicKeyPEM(EVP_PKEY* public_key);
      |            ~~~~~~~~~~~ ^                                       
      |            auto                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:328:43: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  328 |     static std::string exportPublicKeyPEM(EVP_PKEY* public_key);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:329:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  329 |     static std::string exportPrivateKeyPEM(EVP_PKEY* private_key);
      |            ~~~~~~~~~~~ ^                                         
      |            auto                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:329:44: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  329 |     static std::string exportPrivateKeyPEM(EVP_PKEY* private_key);
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:330:12: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  330 |     static EVP_PKEY* importPublicKeyPEM(const std::string& pem_data);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:330:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  330 |     static EVP_PKEY* importPublicKeyPEM(const std::string& pem_data);
      |                    ~ ^                                              
      |                    auto                                              -> *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:331:12: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  331 |     static EVP_PKEY* importPrivateKeyPEM(const std::string& pem_data);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:331:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  331 |     static EVP_PKEY* importPrivateKeyPEM(const std::string& pem_data);
      |                    ~ ^                                               
      |                    auto                                               -> *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:334:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  334 |     static std::string signData(const std::string& data, EVP_PKEY* private_key);
      |            ~~~~~~~~~~~ ^                                                       
      |            auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:334:58: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  334 |     static std::string signData(const std::string& data, EVP_PKEY* private_key);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:335:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  335 |     static bool verifySignature(const std::string& data, const std::string& signature, EVP_PKEY* public_key);
      |            ~~~~ ^                                                                                           
      |            auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:335:88: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  335 |     static bool verifySignature(const std::string& data, const std::string& signature, EVP_PKEY* public_key);
      |                                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:336:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  336 |     static std::string signWorkUnit(const WorkUnit& work_unit, EVP_PKEY* private_key);
      |            ~~~~~~~~~~~ ^                                                             
      |            auto                                                                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:336:64: error: unknown type name 'EVP_PKEY' [clang-diagnostic-error]
  336 |     static std::string signWorkUnit(const WorkUnit& work_unit, EVP_PKEY* private_key);
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:337:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  337 |     static bool verifyWorkUnitSignature(const WorkUnit& work_unit, const std::string& signature, EVP_PKEY* public_key);
      |            ~~~~ ^                                                                                                     
      |            auto                                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:340:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  340 |     static std::string encryptData(const std::string& data, const std::string& key);
      |            ~~~~~~~~~~~ ^                                                           
      |            auto                                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:341:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  341 |     static std::string decryptData(const std::string& encrypted_data, const std::string& key);
      |            ~~~~~~~~~~~ ^                                                                     
      |            auto                                                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:342:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  342 |     static std::string generateEncryptionKey();
      |            ~~~~~~~~~~~ ^                      
      |            auto                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:343:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  343 |     static std::string encryptWorkUnit(const WorkUnit& work_unit, const std::string& key);
      |            ~~~~~~~~~~~ ^                                                                 
      |            auto                                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:344:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  344 |     static WorkUnit decryptWorkUnit(const std::string& encrypted_data, const std::string& key);
      |            ~~~~~~~~ ^                                                                         
      |            auto                                                                                -> WorkUnit
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:347:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  347 |     static std::string calculateSHA256(const std::string& data);
      |            ~~~~~~~~~~~ ^                                       
      |            auto                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:348:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  348 |     static std::string calculateHMAC(const std::string& data, const std::string& key);
      |            ~~~~~~~~~~~ ^                                                             
      |            auto                                                                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:349:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  349 |     static std::string calculateWorkUnitHash(const WorkUnit& work_unit);
      |            ~~~~~~~~~~~ ^                                               
      |            auto                                                         -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:350:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  350 |     static bool verifyWorkUnitHash(const WorkUnit& work_unit, const std::string& hash);
      |            ~~~~ ^                                                                     
      |            auto                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:353:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  353 |     static std::string createJWTToken(const std::map<std::string, std::string>& claims, 
      |            ~~~~~~~~~~~ ^
      |            auto
  354 |                                     const std::string& secret, int expiration_hours = 24);
      |                                                                                          
      |                                                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:354:64: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  354 |                                     const std::string& secret, int expiration_hours = 24);
      |                                                                ^                    ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:354:87: warning: 24 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  354 |                                     const std::string& secret, int expiration_hours = 24);
      |                                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:355:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  355 |     static bool validateJWTToken(const std::string& token, const std::string& secret, 
      |            ~~~~ ^
      |            auto
  356 |                                 std::map<std::string, std::string>& claims);
      |                                                                            
      |                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:357:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  357 |     static std::string extractJWTClaims(const std::string& token);
      |            ~~~~~~~~~~~ ^                                         
      |            auto                                                   -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:360:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  360 |     static X509* generateSelfSignedCertificate(EVP_PKEY* private_key, const std::string& common_name);
      |                ~ ^                                                                                   
      |                auto                                                                                   -> *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:361:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  361 |     static std::string exportCertificatePEM(X509* certificate);
      |            ~~~~~~~~~~~ ^                                      
      |            auto                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:362:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  362 |     static X509* importCertificatePEM(const std::string& pem_data);
      |                ~ ^                                                
      |                auto                                                -> *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:363:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  363 |     static bool validateCertificate(X509* certificate);
      |            ~~~~ ^                                     
      |            auto                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:364:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  364 |     static std::string getCertificateFingerprint(X509* certificate);
      |            ~~~~~~~~~~~ ^                                           
      |            auto                                                     -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:367:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  367 |     static std::string generateRandomBytes(size_t length);
      |            ~~~~~~~~~~~ ^                                 
      |            auto                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:368:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  368 |     static std::string generateUUID();
      |            ~~~~~~~~~~~ ^             
      |            auto                       -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:369:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  369 |     static std::string generateAPIKey(size_t length = 32);
      |            ~~~~~~~~~~~ ^                                 
      |            auto                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:369:39: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  369 |     static std::string generateAPIKey(size_t length = 32);
      |                                       ^             ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:369:55: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  369 |     static std::string generateAPIKey(size_t length = 32);
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:370:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  370 |     static std::string generateSecureToken(size_t length = 64);
      |            ~~~~~~~~~~~ ^                                      
      |            auto                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:370:44: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  370 |     static std::string generateSecureToken(size_t length = 64);
      |                                            ^             ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:370:60: warning: 64 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  370 |     static std::string generateSecureToken(size_t length = 64);
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:374:7: warning: class 'FGCom_SecurityEventLogger' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  374 | class FGCom_SecurityEventLogger {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:378:10: warning: use default member initializer for 'logging_enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  378 |     bool logging_enabled;
      |          ^              
      |                         {true}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:381:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
  381 |     FGCom_SecurityEventLogger(const std::string& log_file_path = "security_events.log");
      |     ^
      |     explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:381:31: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  381 |     FGCom_SecurityEventLogger(const std::string& log_file_path = "security_events.log");
      |                               ^                                ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:389:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  389 |     std::vector<SecurityEvent> readEvents(SecurityLevel min_severity = SecurityLevel::LOW);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/work_unit_security.h:389:43: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  389 |     std::vector<SecurityEvent> readEvents(SecurityLevel min_severity = SecurityLevel::LOW);
      |                                           ^                          ~~~~~~~~~~~~~~~~~~~~
