/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_ANTENNA_GROUND_SYSTEM_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_GROUND_SYSTEM_H
   19 | #define FGCOM_ANTENNA_GROUND_SYSTEM_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_GROUND_SYSTEM_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include <complex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:24:1: warning: system include complex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h [llvmlibc-restrict-system-libc-headers]
   24 | #include <complex>
      | ^~~~~~~~~~~~~~~~~~
   25 | #include "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: warning: accessing fields in struct 'GroundSystem' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   28 | struct GroundSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:28:8: note: use "__attribute__((aligned(128)))" to align struct 'GroundSystem' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:29:17: warning: member variable 'type' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     std::string type;               // "star_network", "copper_plate", "fuselage", "vehicle"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:30:11: warning: member variable 'conductivity' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     float conductivity;             // Ground conductivity in S/m
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:31:11: warning: member variable 'area_coverage' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     float area_coverage;           // Coverage area in square meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:32:10: warning: member variable 'is_saltwater' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     bool is_saltwater;             // Saltwater ground effects
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:33:11: warning: member variable 'depth' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     float depth;                   // Ground system depth in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:34:9: warning: member variable 'radial_count' has public visibility [misc-non-private-member-variables-in-classes]
   34 |     int radial_count;              // Number of radials (for star networks)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:35:11: warning: member variable 'radial_length' has public visibility [misc-non-private-member-variables-in-classes]
   35 |     float radial_length;           // Radial length in meters
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:36:11: warning: member variable 'ground_resistance' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     float ground_resistance;       // Ground resistance in ohms
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:37:17: warning: member variable 'material' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     std::string material;          // Ground system material
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:38:17: warning: member variable 'notes' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     std::string notes;             // Additional information
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:40:5: warning: 'GroundSystem' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   40 |     GroundSystem() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:41:9: warning: 'type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   29 |     std::string type;               // "star_network", "copper_plate", "fuselage", "vehicle"
      |                     
      |                     {"average"}
   30 |     float conductivity;             // Ground conductivity in S/m
   31 |     float area_coverage;           // Coverage area in square meters
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:41:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   41 |         type = "average";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:42:9: warning: 'conductivity' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   30 |     float conductivity;             // Ground conductivity in S/m
      |                       
      |                       {0.01}
   31 |     float area_coverage;           // Coverage area in square meters
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:42:24: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         conductivity = 0.01;       // Average soil conductivity
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:43:9: warning: 'area_coverage' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   31 |     float area_coverage;           // Coverage area in square meters
      |                        
      |                        {100.0}
   32 |     bool is_saltwater;             // Saltwater ground effects
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
      |         ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:44:9: warning: 'is_saltwater' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   32 |     bool is_saltwater;             // Saltwater ground effects
      |                      
      |                      {false}
   33 |     float depth;                   // Ground system depth in meters
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:45:9: warning: 'depth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   33 |     float depth;                   // Ground system depth in meters
      |                
      |                {0.1}
   34 |     int radial_count;              // Number of radials (for star networks)
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
      |         ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:45:17: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   45 |         depth = 0.1;               // 10cm burial depth
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:46:9: warning: 'radial_count' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   34 |     int radial_count;              // Number of radials (for star networks)
      |                     
      |                     {16}
   35 |     float radial_length;           // Radial length in meters
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:46:24: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   46 |         radial_count = 16;         // 16 radials default
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:47:9: warning: 'radial_length' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   35 |     float radial_length;           // Radial length in meters
      |                        
      |                        {10.0}
   36 |     float ground_resistance;       // Ground resistance in ohms
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:47:25: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   47 |         radial_length = 10.0;      // 10m radial length
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:48:9: warning: 'ground_resistance' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   36 |     float ground_resistance;       // Ground resistance in ohms
      |                            
      |                            {1.0}
   37 |     std::string material;          // Ground system material
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:49:9: warning: 'material' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   37 |     std::string material;          // Ground system material
      |                         
      |                         {"copper"}
   38 |     std::string notes;             // Additional information
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
   49 |         material = "copper";
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:49:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   49 |         material = "copper";
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:50:9: warning: 'notes' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   38 |     std::string notes;             // Additional information
      |                      
      |                      {""}
   39 |     
   40 |     GroundSystem() {
   41 |         type = "average";
   42 |         conductivity = 0.01;       // Average soil conductivity
   43 |         area_coverage = 100.0;     // 100 m² default
   44 |         is_saltwater = false;
   45 |         depth = 0.1;               // 10cm burial depth
   46 |         radial_count = 16;         // 16 radials default
   47 |         radial_length = 10.0;      // 10m radial length
   48 |         ground_resistance = 1.0;   // 1 ohm default
   49 |         material = "copper";
   50 |         notes = "";
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:50:15: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |         notes = "";
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: warning: accessing fields in struct 'AntennaPattern' is inefficient due to padding; only needs 213 bytes but is using 224 bytes [altera-struct-pack-align]
   55 | struct AntennaPattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: warning: accessing fields in struct 'AntennaPattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   55 | struct AntennaPattern {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:55:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPattern' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:56:17: warning: member variable 'antenna_name' has public visibility [misc-non-private-member-variables-in-classes]
   56 |     std::string antenna_name;      // Antenna model name
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:57:11: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   57 |     float frequency_mhz;           // Frequency in MHz
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:58:17: warning: member variable 'polarization' has public visibility [misc-non-private-member-variables-in-classes]
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:59:24: warning: member variable 'theta_angles' has public visibility [misc-non-private-member-variables-in-classes]
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:60:24: warning: member variable 'phi_angles' has public visibility [misc-non-private-member-variables-in-classes]
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:61:24: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:62:24: warning: member variable 'phase_deg' has public visibility [misc-non-private-member-variables-in-classes]
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:63:38: warning: member variable 'e_theta' has public visibility [misc-non-private-member-variables-in-classes]
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:64:38: warning: member variable 'e_phi' has public visibility [misc-non-private-member-variables-in-classes]
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:65:10: warning: member variable 'is_loaded' has public visibility [misc-non-private-member-variables-in-classes]
   65 |     bool is_loaded;                // Whether pattern data is loaded
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:67:5: warning: 'AntennaPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   67 |     AntennaPattern() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:68:9: warning: 'antenna_name' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |     std::string antenna_name;      // Antenna model name
      |                             
      |                             {""}
   57 |     float frequency_mhz;           // Frequency in MHz
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:68:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   68 |         antenna_name = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:69:9: warning: 'frequency_mhz' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   57 |     float frequency_mhz;           // Frequency in MHz
      |                        
      |                        {0.0}
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:70:9: warning: 'polarization' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |     std::string polarization;      // "vertical", "horizontal", "circular"
      |                             
      |                             {"vertical"}
   59 |     std::vector<float> theta_angles;  // Elevation angles (degrees)
   60 |     std::vector<float> phi_angles;    // Azimuth angles (degrees)
   61 |     std::vector<float> gain_dbi;      // Gain values in dBi
   62 |     std::vector<float> phase_deg;     // Phase values in degrees
   63 |     std::vector<std::complex<float>> e_theta;  // Theta component
   64 |     std::vector<std::complex<float>> e_phi;    // Phi component
   65 |     bool is_loaded;                // Whether pattern data is loaded
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
   70 |         polarization = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:70:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   70 |         polarization = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:71:9: warning: 'is_loaded' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   65 |     bool is_loaded;                // Whether pattern data is loaded
      |                   
      |                   {false}
   66 |     
   67 |     AntennaPattern() {
   68 |         antenna_name = "";
   69 |         frequency_mhz = 0.0;
   70 |         polarization = "vertical";
   71 |         is_loaded = false;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: warning: accessing fields in struct 'AntennaSystem' is inefficient due to padding; only needs 440 bytes but is using 448 bytes [altera-struct-pack-align]
   76 | struct AntennaSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaSystem'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: warning: accessing fields in struct 'AntennaSystem' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   76 | struct AntennaSystem {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:76:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaSystem' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:77:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   77 |     std::string antenna_type;      // "dipole", "yagi", "vertical", "whip", "custom"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:78:11: warning: member variable 'height_meters' has public visibility [misc-non-private-member-variables-in-classes]
   78 |     float height_meters;           // Antenna height above ground
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:79:11: warning: member variable 'azimuth_deg' has public visibility [misc-non-private-member-variables-in-classes]
   79 |     float azimuth_deg;             // Azimuth orientation
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:80:11: warning: member variable 'elevation_deg' has public visibility [misc-non-private-member-variables-in-classes]
   80 |     float elevation_deg;           // Elevation angle
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:81:18: warning: member variable 'ground_system' has public visibility [misc-non-private-member-variables-in-classes]
   81 |     GroundSystem ground_system;    // Ground system characteristics
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:82:20: warning: member variable 'pattern' has public visibility [misc-non-private-member-variables-in-classes]
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:83:17: warning: member variable 'pattern_file' has public visibility [misc-non-private-member-variables-in-classes]
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:84:11: warning: member variable 'efficiency' has public visibility [misc-non-private-member-variables-in-classes]
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:85:11: warning: member variable 'swr' has public visibility [misc-non-private-member-variables-in-classes]
   85 |     float swr;                     // Standing wave ratio
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:86:11: warning: member variable 'feedpoint_impedance' has public visibility [misc-non-private-member-variables-in-classes]
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:88:5: warning: 'AntennaSystem' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   88 |     AntennaSystem() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:89:9: warning: 'antenna_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   77 |     std::string antenna_type;      // "dipole", "yagi", "vertical", "whip", "custom"
      |                             
      |                             {"vertical"}
   78 |     float height_meters;           // Antenna height above ground
   79 |     float azimuth_deg;             // Azimuth orientation
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:89:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |         antenna_type = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:90:9: warning: 'height_meters' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   78 |     float height_meters;           // Antenna height above ground
      |                        
      |                        {10.0}
   79 |     float azimuth_deg;             // Azimuth orientation
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:90:25: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   90 |         height_meters = 10.0;      // 10m default height
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:91:9: warning: 'azimuth_deg' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   79 |     float azimuth_deg;             // Azimuth orientation
      |                      
      |                      {0.0}
   80 |     float elevation_deg;           // Elevation angle
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:92:9: warning: 'elevation_deg' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   80 |     float elevation_deg;           // Elevation angle
      |                        
      |                        {0.0}
   81 |     GroundSystem ground_system;    // Ground system characteristics
   82 |     AntennaPattern pattern;        // 4NEC2 pattern data
   83 |     std::string pattern_file;      // Path to 4NEC2 pattern file
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:93:9: warning: 'efficiency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   84 |     float efficiency;              // Antenna efficiency (0.0-1.0)
      |                     
      |                     {0.8}
   85 |     float swr;                     // Standing wave ratio
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:93:22: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   93 |         efficiency = 0.8;          // 80% efficiency
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:94:9: warning: 'swr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   85 |     float swr;                     // Standing wave ratio
      |              
      |              {1.5}
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
   94 |         swr = 1.5;                 // 1.5:1 SWR
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:94:15: warning: 1.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   94 |         swr = 1.5;                 // 1.5:1 SWR
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:95:9: warning: 'feedpoint_impedance' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   86 |     float feedpoint_impedance;     // Feedpoint impedance in ohms
      |                              
      |                              {50.0}
   87 |     
   88 |     AntennaSystem() {
   89 |         antenna_type = "vertical";
   90 |         height_meters = 10.0;      // 10m default height
   91 |         azimuth_deg = 0.0;         // North
   92 |         elevation_deg = 0.0;       // Horizontal
   93 |         efficiency = 0.8;          // 80% efficiency
   94 |         swr = 1.5;                 // 1.5:1 SWR
   95 |         feedpoint_impedance = 50.0; // 50 ohm impedance
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:95:31: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |         feedpoint_impedance = 50.0; // 50 ohm impedance
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:100:12: warning: enum 'GroundPerformance' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  100 | enum class GroundPerformance {
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:117:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     static bool initialize();
      |            ~~~~ ^           
      |            auto              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:121:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     static GroundSystem createGroundSystem(const std::string& type, float conductivity, float area);
      |            ~~~~~~~~~~~~ ^                                                                          
      |            auto                                                                                     -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:122:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     static GroundSystem getPredefinedGroundSystem(const std::string& name);
      |            ~~~~~~~~~~~~ ^                                                 
      |            auto                                                            -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:123:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     static std::vector<std::string> getAvailableGroundSystems();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |            auto                                                 -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:126:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     static GroundPerformance evaluateGroundPerformance(const GroundSystem& ground);
      |            ~~~~~~~~~~~~~~~~~ ^                                                    
      |            auto                                                                    -> GroundPerformance
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:127:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  127 |     static float calculateGroundLoss(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                   
      |            auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:128:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     static float calculateGroundResistance(const GroundSystem& ground);
      |            ~~~~~ ^                                                    
      |            auto                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:129:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     static float calculateGroundConductivity(const GroundSystem& ground);
      |            ~~~~~ ^                                                      
      |            auto                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:132:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 |     static GroundSystem createStarNetwork(int radials, float length, float conductivity);
      |            ~~~~~~~~~~~~ ^                                                               
      |            auto                                                                          -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:133:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  133 |     static float calculateStarNetworkResistance(int radials, float length, float conductivity);
      |            ~~~~~ ^                                                                            
      |            auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:134:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     static float calculateOptimalRadialLength(float frequency_mhz);
      |            ~~~~~ ^                                                
      |            auto                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:137:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     static GroundSystem createCopperPlate(float area, float conductivity, bool saltwater);
      |            ~~~~~~~~~~~~ ^                                                                
      |            auto                                                                           -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:138:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 |     static float calculatePlateResistance(float area, float conductivity);
      |            ~~~~~ ^                                                       
      |            auto                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:139:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 |     static float calculatePlateCapacitance(float area, float depth);
      |            ~~~~~ ^                                                 
      |            auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:142:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     static GroundSystem createFuselageGround(const std::string& vehicle_type, float area);
      |            ~~~~~~~~~~~~ ^                                                                
      |            auto                                                                           -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:143:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     static GroundSystem createAircraftFuselage(const std::string& aircraft_type);
      |            ~~~~~~~~~~~~ ^                                                       
      |            auto                                                                  -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:144:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     static GroundSystem createMaritimeVessel(const std::string& vessel_type, float hull_area);
      |            ~~~~~~~~~~~~ ^                                                                    
      |            auto                                                                               -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:145:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |     static float calculateFuselageResistance(float area, const std::string& material);
      |            ~~~~~ ^                                                                   
      |            auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:148:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     static bool loadAntennaPattern(const std::string& pattern_file);
      |            ~~~~ ^                                                  
      |            auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:149:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     static bool load4NEC2Pattern(const std::string& filename);
      |            ~~~~ ^                                            
      |            auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:150:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  150 |     static AntennaPattern getAntennaPattern(const std::string& antenna_name, float frequency_mhz);
      |            ~~~~~~~~~~~~~~ ^                                                                      
      |            auto                                                                                   -> AntennaPattern
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:151:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     static std::vector<std::string> getAvailablePatterns();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |            auto                                            -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:154:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |     static float getAntennaGain(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                    
      |            auto                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:155:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     static float getAntennaGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                   
      |            auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:156:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     static float calculateAntennaEfficiency(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                            
      |            auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:159:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     static float calculateDipoleGroundEffect(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                             
      |            auto                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:160:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     static float calculateHorizontalDipoleHeightEffect(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                              
      |            auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:161:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     static float calculateVerticalDipoleGroundEffect(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                                   
      |            auto                                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:164:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  164 |     static float calculateYagiGroundEffect(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                           
      |            auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:165:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     static float calculateYagiHeightEffect(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                  
      |            auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:166:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     static float calculateYagiPatternDistortion(float height_meters, float frequency_mhz);
      |            ~~~~~ ^                                                                       
      |            auto                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:169:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  169 |     static float calculateWhipEfficiency(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                         
      |            auto                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:170:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     static float calculateWhipGroundEffect(const GroundSystem& ground, float frequency_mhz);
      |            ~~~~~ ^                                                                         
      |            auto                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:171:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     static float calculateWhipImpedance(float length_meters, float frequency_mhz);
      |            ~~~~~ ^                                                               
      |            auto                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:174:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     static float calculateSystemGain(const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz);
      |            ~~~~~ ^                                                                                                             
      |            auto                                                                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:175:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     static float calculateSystemLoss(const AntennaSystem& antenna, float frequency_mhz);
      |            ~~~~~ ^                                                                     
      |            auto                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:176:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     static float calculateEffectiveRadiatedPower(float tx_power_watts, const AntennaSystem& antenna, float azimuth_deg, float elevation_deg, float frequency_mhz);
      |            ~~~~~ ^                                                                                                                                               
      |            auto                                                                                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:181:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     static bool parse4NEC2File(const std::string& filename, AntennaPattern& pattern);
      |            ~~~~ ^                                                                   
      |            auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:182:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     static float interpolatePattern(const AntennaPattern& pattern, float azimuth_deg, float elevation_deg);
      |            ~~~~~ ^                                                                                        
      |            auto                                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:183:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     static float calculateGroundReflectionCoefficient(const GroundSystem& ground, float frequency_mhz, float angle_deg);
      |            ~~~~~ ^                                                                                                     
      |            auto                                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:184:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     static float calculateGroundWaveAttenuation(const GroundSystem& ground, float frequency_mhz, float distance_km);
      |            ~~~~~ ^                                                                                                 
      |            auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:195:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  195 |     static bool loadConfig(const std::string& config_file);
      |            ~~~~ ^                                         
      |            auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:196:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |     static bool saveConfig(const std::string& config_file);
      |            ~~~~ ^                                         
      |            auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |            ~~~~~~~~~~~ ^                                                                            
      |            auto                                                                                      -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:63: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |                                                               ^                                ~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:197:98: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  197 |     static std::string getConfigValue(const std::string& key, const std::string& default_value = "");
      |                                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:201:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     static AntennaSystem getDefaultAntennaSystem();
      |            ~~~~~~~~~~~~~ ^                        
      |            auto                                    -> AntennaSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:202:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  202 |     static GroundSystem getDefaultGroundSystem();
      |            ~~~~~~~~~~~~ ^                       
      |            auto                                  -> GroundSystem
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:203:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     static std::string getPatternDirectory();
      |            ~~~~~~~~~~~ ^                    
      |            auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:204:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     static bool is4NEC2Enabled();
      |            ~~~~ ^               
      |            auto                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:205:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 |     static bool isGPUAccelerationEnabled();
      |            ~~~~ ^                         
      |            auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:208:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     static bool isMUFEnabled();
      |            ~~~~ ^             
      |            auto                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:209:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  209 |     static bool isSolarEffectsEnabled();
      |            ~~~~ ^                      
      |            auto                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:210:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  210 |     static bool isSeasonalVariationsEnabled();
      |            ~~~~ ^                            
      |            auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:211:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  211 |     static bool isPropagationCacheEnabled();
      |            ~~~~ ^                          
      |            auto                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:214:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     static bool isAmateurRadioEnabled();
      |            ~~~~ ^                      
      |            auto                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:215:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     static int getITURegion();
      |            ~~~ ^             
      |            auto               -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:216:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     static bool isStrictBandCompliance();
      |            ~~~~ ^                       
      |            auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:217:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  217 |     static float getDefaultPower();
      |            ~~~~~ ^                
      |            auto                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:218:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  218 |     static float getAntennaHeight();
      |            ~~~~~ ^                 
      |            auto                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:221:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     static std::string getNOAAAPIURL();
      |            ~~~~~~~~~~~ ^              
      |            auto                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:222:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 |     static int getUpdateInterval();
      |            ~~~ ^                  
      |            auto                    -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:223:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  223 |     static std::string getFallbackDataPath();
      |            ~~~~~~~~~~~ ^                    
      |            auto                              -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:227:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     static std::string trimString(const std::string& str);
      |            ~~~~~~~~~~~ ^                                 
      |            auto                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_ground_system.h:228:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     static std::vector<std::string> splitString(const std::string& str, char delimiter);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                  
      |            auto                                                                         -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_ANTENNA_PATTERN_MAPPING_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_PATTERN_MAPPING_H
    2 | #define FGCOM_ANTENNA_PATTERN_MAPPING_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ANTENNA_PATTERN_MAPPING_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:4:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:6:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:8:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
    9 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:9:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   10 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: warning: accessing fields in struct 'AntennaPatternInfo' is inefficient due to padding; only needs 150 bytes but is using 160 bytes [altera-struct-pack-align]
   18 | struct AntennaPatternInfo {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPatternInfo'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: warning: accessing fields in struct 'AntennaPatternInfo' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   18 | struct AntennaPatternInfo {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPatternInfo' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:19:17: warning: member variable 'antenna_name' has public visibility [misc-non-private-member-variables-in-classes]
   19 |     std::string antenna_name;      // Internal antenna identifier
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:20:17: warning: member variable 'pattern_file' has public visibility [misc-non-private-member-variables-in-classes]
   20 |     std::string pattern_file;     // Path to pattern file
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:21:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   21 |     double frequency_mhz;         // Operating frequency
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:22:17: warning: member variable 'vehicle_type' has public visibility [misc-non-private-member-variables-in-classes]
   22 |     std::string vehicle_type;     // Vehicle type (aircraft, ground, maritime)
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:23:17: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   23 |     std::string antenna_type;     // Antenna type (blade, whip, yagi, etc.)
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:24:10: warning: member variable 'is_loaded' has public visibility [misc-non-private-member-variables-in-classes]
   24 |     bool is_loaded;               // Whether pattern is currently loaded
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:27:9: warning: member variable 'roll_deg' has public visibility [misc-non-private-member-variables-in-classes]
   27 |     int roll_deg;                 // Roll angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:28:9: warning: member variable 'pitch_deg' has public visibility [misc-non-private-member-variables-in-classes]
   28 |     int pitch_deg;                // Pitch angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:29:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     int altitude_m;               // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:30:10: warning: member variable 'is_3d_pattern' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     bool is_3d_pattern;           // Whether this is a 3D attitude pattern
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:32:5: warning: 'AntennaPatternInfo' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   32 |     AntennaPatternInfo() : frequency_mhz(0.0), is_loaded(false), 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:5: warning: 'AntennaPatternInfo' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:24: warning: 2 adjacent parameters of 'AntennaPatternInfo' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:43: note: the first parameter in the range is 'name'
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:68: note: the last parameter in the range is 'file'
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:24: warning: pass by value and use std::move [modernize-pass-by-value]
    6 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~
      |                        std::string 
    7 |                       double freq, const std::string& vtype, const std::string& atype)
    8 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                            
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:34:49: warning: pass by value and use std::move [modernize-pass-by-value]
   34 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                 ^~~~~~~~~~~~~~~~~~
      |                                                 std::string 
   35 |                       double freq, const std::string& vtype, const std::string& atype)
   36 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                                                
      |                                            std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:35:36: warning: pass by value and use std::move [modernize-pass-by-value]
   35 |                       double freq, const std::string& vtype, const std::string& atype)
      |                                    ^~~~~~~~~~~~~~~~~~
      |                                    std::string 
   36 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   37 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                             
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:35:62: warning: pass by value and use std::move [modernize-pass-by-value]
   35 |                       double freq, const std::string& vtype, const std::string& atype)
      |                                                              ^~~~~~~~~~~~~~~~~~
      |                                                              std::string 
   36 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   37 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                                                  
      |                                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:5: warning: 'AntennaPatternInfo' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:24: warning: 2 adjacent parameters of 'AntennaPatternInfo' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:43: note: the first parameter in the range is 'name'
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:68: note: the last parameter in the range is 'file'
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:24: warning: pass by value and use std::move [modernize-pass-by-value]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                        ^~~~~~~~~~~~~~~~~~
      |                        std::string 
   40 |                       double freq, const std::string& vtype, const std::string& atype,
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                            
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:39:49: warning: pass by value and use std::move [modernize-pass-by-value]
   39 |     AntennaPatternInfo(const std::string& name, const std::string& file, 
      |                                                 ^~~~~~~~~~~~~~~~~~
      |                                                 std::string 
   40 |                       double freq, const std::string& vtype, const std::string& atype,
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
      |                                                
      |                                            std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:40:36: warning: pass by value and use std::move [modernize-pass-by-value]
   40 |                       double freq, const std::string& vtype, const std::string& atype,
      |                                    ^~~~~~~~~~~~~~~~~~
      |                                    std::string 
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   43 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                             
      |                        std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:40:62: warning: pass by value and use std::move [modernize-pass-by-value]
   40 |                       double freq, const std::string& vtype, const std::string& atype,
      |                                                              ^~~~~~~~~~~~~~~~~~
      |                                                              std::string 
   41 |                       int roll, int pitch, int alt)
   42 |         : antenna_name(name), pattern_file(file), frequency_mhz(freq), 
   43 |           vehicle_type(vtype), antenna_type(atype), is_loaded(false),
      |                                                  
      |                                             std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:41:23: warning: 3 adjacent parameters of 'AntennaPatternInfo' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   41 |                       int roll, int pitch, int alt)
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:41:27: note: the first parameter in the range is 'roll'
   41 |                       int roll, int pitch, int alt)
      |                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:41:48: note: the last parameter in the range is 'alt'
   41 |                       int roll, int pitch, int alt)
      |                                                ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:47:7: warning: class 'FGCom_AntennaPatternMapping' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   47 | class FGCom_AntennaPatternMapping {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:62:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   62 |     AntennaPatternInfo getVHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                   
      |     auto                                                                                    -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:65:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   65 |     AntennaPatternInfo getUHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                   
      |     auto                                                                                    -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:68:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |     std::vector<AntennaPatternInfo> getAvailableVHFPatterns(const std::string& vehicle_type);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                                     -> std::vector<AntennaPatternInfo>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:69:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     std::vector<AntennaPatternInfo> getAvailableUHFPatterns(const std::string& vehicle_type);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                                     -> std::vector<AntennaPatternInfo>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:72:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   72 |     bool hasVHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~ ^                                                                   
      |     auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:73:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     bool hasUHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~ ^                                                                   
      |     auto                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:76:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   76 |     bool loadPatternFromFile(const std::string& pattern_file, AntennaPatternInfo& info);
      |     ~~~~ ^                                                                             
      |     auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:79:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   79 |     AntennaPatternInfo getClosestVHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                          
      |     auto                                                                                           -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:80:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     AntennaPatternInfo getClosestUHFPattern(const std::string& vehicle_type, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                          
      |     auto                                                                                           -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:83:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   83 |     AntennaPatternInfo get3DAttitudePattern(const std::string& vehicle_type, double frequency_mhz, 
      |     ~~~~~~~~~~~~~~~~~~ ^
      |     auto
   84 |                                            int roll_deg, int pitch_deg, int altitude_m);
      |                                                                                        
      |                                                                                         -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:85:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     std::vector<AntennaPatternInfo> getAvailable3DPatterns(const std::string& vehicle_type, 
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   86 |                                                           double frequency_mhz, int altitude_m);
      |                                                                                                
      |                                                                                                 -> std::vector<AntennaPatternInfo>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:87:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 |     bool has3DAttitudePattern(const std::string& vehicle_type, double frequency_mhz, 
      |     ~~~~ ^
      |     auto
   88 |                              int roll_deg, int pitch_deg, int altitude_m);
      |                                                                          
      |                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:91:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |     std::string detectVehicleType(const std::string& vehicle_name);
      |     ~~~~~~~~~~~ ^                                                 
      |     auto                                                           -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:94:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     bool isVHFFrequency(double frequency_mhz);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:95:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   95 |     bool isUHFFrequency(double frequency_mhz);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:99:53: warning: variable 'g_antenna_pattern_mapping' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
   99 | extern std::unique_ptr<FGCom_AntennaPatternMapping> g_antenna_pattern_mapping;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:100:19: warning: variable 'g_antenna_mapping_mutex' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  100 | extern std::mutex g_antenna_mapping_mutex;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:101:26: warning: variable 'g_antenna_mapping_initialized' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  101 | extern std::atomic<bool> g_antenna_mapping_initialized;
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:104:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 | FGCom_AntennaPatternMapping* getAntennaPatternMapping();
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                         
      | auto                                                    -> FGCom_AntennaPatternMapping*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:107:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 | AntennaPatternInfo getAntennaPattern(const std::string& vehicle_type, double frequency_mhz);
      | ~~~~~~~~~~~~~~~~~~ ^                                                                       
      | auto                                                                                        -> AntennaPatternInfo
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:108:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 | bool loadAntennaPattern(const std::string& vehicle_type, double frequency_mhz);
      | ~~~~ ^                                                                        
      | auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:8:9: warning: header guard does not follow preferred style [llvm-header-guard]
    8 | #ifndef FGCOM_ATMOSPHERIC_DUCTING_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ATMOSPHERIC_DUCTING_H
    9 | #define FGCOM_ATMOSPHERIC_DUCTING_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ATMOSPHERIC_DUCTING_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:11:1: warning: #includes are not sorted properly [llvm-include-order]
   11 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:11:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   12 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:12:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <map>
      | ^~~~~~~~~~~~~~
   13 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:13:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   14 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:14:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   15 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:17:8: warning: accessing fields in struct 'DuctingAtmosphericConditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   17 | struct DuctingAtmosphericConditions {
      |        ^
   18 |     float temperature_celsius;
   19 |     float humidity_percent;
   20 |     float pressure_hpa;
   21 |     float wind_speed_ms;
   22 |     float wind_direction_deg;
   23 |     float altitude_m;
   24 |     std::chrono::system_clock::time_point timestamp;
   25 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:17:8: note: use "__attribute__((aligned(32)))" to align struct 'DuctingAtmosphericConditions' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:17:8: warning: constructor does not initialize these fields: temperature_celsius, humidity_percent, pressure_hpa, wind_speed_ms, wind_direction_deg, altitude_m [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   17 | struct DuctingAtmosphericConditions {
      |        ^
   18 |     float temperature_celsius;
      |                              
      |                              {}
   19 |     float humidity_percent;
      |                           
      |                           {}
   20 |     float pressure_hpa;
      |                       
      |                       {}
   21 |     float wind_speed_ms;
      |                        
      |                        {}
   22 |     float wind_direction_deg;
      |                             
      |                             {}
   23 |     float altitude_m;
      |                     
      |                     {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:28:8: warning: accessing fields in struct 'DuctingConditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   28 | struct DuctingConditions {
      |        ^
   29 |     bool ducting_present;
   30 |     float ducting_strength;  // 0.0 to 1.0
   31 |     float ducting_height_m;  // Height of ducting layer
   32 |     float ducting_thickness_m;  // Thickness of ducting layer
   33 |     float temperature_inversion_strength;  // Temperature gradient
   34 |     float humidity_gradient;  // Humidity gradient
   35 |     float wind_shear;  // Wind shear effect
   36 |     std::string ducting_type;  // "surface", "elevated", "multiple"
   37 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:28:8: note: use "__attribute__((aligned(64)))" to align struct 'DuctingConditions' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: warning: accessing fields in struct 'DuctingCalculationParams' is inefficient due to padding; only needs 27 bytes but is using 28 bytes [altera-struct-pack-align]
   40 | struct DuctingCalculationParams {
      |        ^
   41 |     float frequency_hz;
   42 |     float distance_km;
   43 |     float tx_altitude_m;
   44 |     float rx_altitude_m;
   45 |     float tx_power_watts;
   46 |     bool enable_temperature_inversion;
   47 |     bool enable_humidity_effects;
   48 |     bool enable_wind_shear;
   49 |     float minimum_ducting_strength;
   50 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'DuctingCalculationParams'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: warning: accessing fields in struct 'DuctingCalculationParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   40 | struct DuctingCalculationParams {
      |        ^
   41 |     float frequency_hz;
   42 |     float distance_km;
   43 |     float tx_altitude_m;
   44 |     float rx_altitude_m;
   45 |     float tx_power_watts;
   46 |     bool enable_temperature_inversion;
   47 |     bool enable_humidity_effects;
   48 |     bool enable_wind_shear;
   49 |     float minimum_ducting_strength;
   50 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:40:8: note: use "__attribute__((aligned(32)))" to align struct 'DuctingCalculationParams' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:53:7: warning: class 'FGCom_AtmosphericDucting' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   53 | class FGCom_AtmosphericDucting {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:61:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   61 |     float calculateTemperatureInversion(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                      
      |     auto                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:62:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   62 |     float calculateHumidityGradient(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:63:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   63 |     float calculateWindShear(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                           
      |     auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:64:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   64 |     float calculateDuctingHeight(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:65:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   65 |     float calculateDuctingThickness(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:68:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |     std::vector<DuctingAtmosphericConditions> generateAtmosphericProfile(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   69 |         double latitude, double longitude, double start_altitude, double end_altitude, int steps);
      |                                                                                                  
      |                                                                                                   -> std::vector<DuctingAtmosphericConditions>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:72:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   72 |     float calculateDuctingStrength(const DuctingConditions& conditions, const DuctingCalculationParams& params);
      |     ~~~~~ ^                                                                                                    
      |     auto                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:75:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   75 |     float calculateSignalEnhancement(const DuctingConditions& conditions, float frequency_hz, float distance_km);
      |     ~~~~~ ^                                                                                                     
      |     auto                                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:82:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |     DuctingConditions analyzeDuctingConditions(double latitude, double longitude, 
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
   83 |                                              double start_altitude, double end_altitude);
      |                                                                                         
      |                                                                                          -> DuctingConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:86:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   86 |     float calculateDuctingEffects(const DuctingConditions& conditions, 
      |     ~~~~~ ^
      |     auto
   87 |                                  const DuctingCalculationParams& params);
      |                                                                         
      |                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:91:47: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   91 |     void setWeatherCacheEnabled(bool enabled, float timeout_seconds = 300.0f);
      |                                               ^                     ~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:91:71: warning: 300.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   91 |     void setWeatherCacheEnabled(bool enabled, float timeout_seconds = 300.0f);
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:91:71: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:94:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     bool predictDuctingConditions(double latitude, double longitude, 
      |     ~~~~ ^
      |     auto
   95 |                                   const std::chrono::system_clock::time_point& time);
      |                                                                                     
      |                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:98:12: warning: accessing fields in struct 'DuctingStatistics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   98 |     struct DuctingStatistics {
      |            ^
   99 |         int total_analyses;
  100 |         int ducting_detected;
  101 |         float average_ducting_strength;
  102 |         float average_ducting_height;
  103 |         std::chrono::system_clock::time_point last_analysis;
  104 |     };
      |      
      |       __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:98:12: note: use "__attribute__((aligned(32)))" to align struct 'DuctingStatistics' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:106:5: warning: function 'getStatistics' should be marked [[nodiscard]] [modernize-use-nodiscard]
  106 |     DuctingStatistics getStatistics() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:106:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 |     DuctingStatistics getStatistics() const;
      |     ~~~~~~~~~~~~~~~~~ ^                    
      |     auto                                    -> DuctingStatistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:125:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     float calculateRefractionIndex(float temperature_celsius, float humidity_percent, float pressure_hpa);
      |     ~~~~~ ^                                                                                              
      |     auto                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:128:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     float calculateTemperatureGradient(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                     
      |     auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:131:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     float calculateHumidityGradient(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:134:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     float calculateWindShear(const std::vector<DuctingAtmosphericConditions>& profile);
      |     ~~~~~ ^                                                                           
      |     auto                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:137:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     float calculateDuctingProbability(const DuctingAtmosphericConditions& surface, 
      |     ~~~~~ ^
      |     auto
  138 |                                     const DuctingAtmosphericConditions& elevated);
      |                                                                                  
      |                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:141:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     float calculateSignalEnhancement(float ducting_strength, float frequency_hz, float distance_km);
      |     ~~~~~ ^                                                                                        
      |     auto                                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:144:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     bool validateDuctingAtmosphericConditions(const DuctingAtmosphericConditions& conditions);
      |     ~~~~ ^                                                                                   
      |     auto                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:145:1: warning: namespace 'AtmosphericDuctingUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  145 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/atmospheric_ducting.h:123:11: note: namespace 'AtmosphericDuctingUtils' starts here
  123 | namespace AtmosphericDuctingUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:17:9: warning: header guard does not follow preferred style [llvm-header-guard]
   17 | #ifndef FGCOM_AUDIO_H
      |         ^~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AUDIO_H
   18 | #define FGCOM_AUDIO_H
      |         ~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_AUDIO_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:19:1: warning: #includes are not sorted properly [llvm-include-order]
   19 | #include "mumble/PluginComponents_v_1_0_x.h"
      | ^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "frequency_offset.h"
   20 | #include "frequency_offset.h"
      |          ~~~~~~~~~~~~~~~~~~~~
      |          "mumble/PluginComponents_v_1_0_x.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:8:9: warning: header guard does not follow preferred style [llvm-header-guard]
    8 | #ifndef FGCOM_ENHANCED_MULTIPATH_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ENHANCED_MULTIPATH_H
    9 | #define FGCOM_ENHANCED_MULTIPATH_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_ENHANCED_MULTIPATH_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:11:1: warning: #includes are not sorted properly [llvm-include-order]
   11 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:11:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   12 | #include <complex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:12:1: warning: system include complex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   12 | #include <complex>
      | ^~~~~~~~~~~~~~~~~~
   13 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:13:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   13 | #include <map>
      | ^~~~~~~~~~~~~~
   14 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:14:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   14 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   15 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:15:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h [llvmlibc-restrict-system-libc-headers]
   15 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   16 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:18:8: warning: accessing fields in struct 'MultipathComponent' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   18 | struct MultipathComponent {
      |        ^
   19 |     float amplitude;
   20 |     float phase;
   21 |     float delay_ns;
   22 |     float doppler_shift_hz;
   23 |     float angle_of_arrival_deg;
   24 |     float angle_of_departure_deg;
   25 |     std::string component_type; // "direct", "reflected", "diffracted", "scattered"
   26 |     float power_db;
   27 |     float coherence_time_ms;
   28 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:18:8: note: use "__attribute__((aligned(64)))" to align struct 'MultipathComponent' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: warning: accessing fields in struct 'MultipathChannel' is inefficient due to padding; only needs 78 bytes but is using 80 bytes [altera-struct-pack-align]
   31 | struct MultipathChannel {
      |        ^
   32 |     std::vector<MultipathComponent> components;
   33 |     float total_power_db;
   34 |     float rms_delay_spread_ns;
   35 |     float coherence_bandwidth_hz;
   36 |     float coherence_time_ms;
   37 |     float doppler_spread_hz;
   38 |     bool is_wideband;
   39 |     bool is_fast_fading;
   40 |     std::string channel_type; // "rural", "urban", "indoor", "highway"
   41 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'MultipathChannel'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: warning: accessing fields in struct 'MultipathChannel' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   31 | struct MultipathChannel {
      |        ^
   32 |     std::vector<MultipathComponent> components;
   33 |     float total_power_db;
   34 |     float rms_delay_spread_ns;
   35 |     float coherence_bandwidth_hz;
   36 |     float coherence_time_ms;
   37 |     float doppler_spread_hz;
   38 |     bool is_wideband;
   39 |     bool is_fast_fading;
   40 |     std::string channel_type; // "rural", "urban", "indoor", "highway"
   41 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:31:8: note: use "__attribute__((aligned(128)))" to align struct 'MultipathChannel' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:44:8: warning: accessing fields in struct 'MultipathCalculationParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   44 | struct MultipathCalculationParams {
      |        ^
   45 |     float frequency_hz;
   46 |     float bandwidth_hz;
   47 |     float distance_km;
   48 |     float tx_altitude_m;
   49 |     float rx_altitude_m;
   50 |     float tx_power_watts;
   51 |     bool enable_ground_reflection;
   52 |     bool enable_building_scattering;
   53 |     bool enable_vegetation_effects;
   54 |     bool enable_vehicle_scattering;
   55 |     float terrain_roughness_m;
   56 |     float building_density;
   57 |     float vegetation_density;
   58 |     float vehicle_density;
   59 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:44:8: note: use "__attribute__((aligned(64)))" to align struct 'MultipathCalculationParams' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:62:8: warning: accessing fields in struct 'FadingStatistics' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   62 | struct FadingStatistics {
      |        ^
   63 |     float mean_power_db;
   64 |     float variance_db;
   65 |     float skewness;
   66 |     float kurtosis;
   67 |     float rms_delay_spread_ns;
   68 |     float coherence_bandwidth_hz;
   69 |     float coherence_time_ms;
   70 |     float doppler_spread_hz;
   71 |     int num_components;
   72 |     float k_factor_db; // Ricean K-factor
   73 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:62:8: note: use "__attribute__((aligned(64)))" to align struct 'FadingStatistics' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:76:7: warning: class 'FGCom_EnhancedMultipath' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   76 | class FGCom_EnhancedMultipath {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:84:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     std::vector<MultipathComponent> generateMultipathComponents(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                    
      |     auto                                                                                                  -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:85:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     std::string generateChannelId(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~ ^                                                          
      |     auto                                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:86:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   86 |     MultipathComponent generateDirectPath(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                           
      |     auto                                                                            -> MultipathComponent
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:87:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   87 |     MultipathComponent generateGroundReflection(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~ ^                                                                 
      |     auto                                                                                  -> MultipathComponent
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:88:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     std::vector<MultipathComponent> generateBuildingScattering(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                   
      |     auto                                                                                                 -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:89:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   89 |     std::vector<MultipathComponent> generateVegetationScattering(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                     
      |     auto                                                                                                   -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:90:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   90 |     std::vector<MultipathComponent> generateVehicleScattering(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                                                                  
      |     auto                                                                                                -> std::vector<MultipathComponent>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:93:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     MultipathChannel createMultipathChannel(const std::vector<MultipathComponent>& components);
      |     ~~~~~~~~~~~~~~~~ ^                                                                        
      |     auto                                                                                       -> MultipathChannel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:98:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   98 |     std::complex<float> calculateReceivedSignal(const MultipathChannel& channel, float time_ms);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                                      
      |     auto                                                                                        -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:99:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     float calculateSignalPower(const MultipathChannel& channel);
      |     ~~~~~ ^                                                    
      |     auto                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:100:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  100 |     float calculateSNR(const MultipathChannel& channel, float noise_power_db);
      |     ~~~~~ ^                                                                  
      |     auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:103:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |     float calculatePathLoss(const MultipathCalculationParams& params);
      |     ~~~~~ ^                                                          
      |     auto                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:104:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 |     float calculateShadowing(const MultipathCalculationParams& params);
      |     ~~~~~ ^                                                           
      |     auto                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:105:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |     float calculateFastFading(const MultipathChannel& channel, float time_ms);
      |     ~~~~~ ^                                                                  
      |     auto                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:112:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     MultipathChannel analyzeMultipathChannel(const MultipathCalculationParams& params);
      |     ~~~~~~~~~~~~~~~~ ^                                                                
      |     auto                                                                               -> MultipathChannel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:115:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     float calculateSignalQuality(const MultipathChannel& channel, float time_ms);
      |     ~~~~~ ^                                                                     
      |     auto                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:116:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  116 |     float calculateBitErrorRate(const MultipathChannel& channel, float snr_db);
      |     ~~~~~ ^                                                                   
      |     auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:117:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     float calculateThroughput(const MultipathChannel& channel, float snr_db);
      |     ~~~~~ ^                                                                 
      |     auto                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:120:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     FadingStatistics calculateFadingStatistics(const MultipathChannel& channel);
      |     ~~~~~~~~~~~~~~~~ ^                                                         
      |     auto                                                                        -> FadingStatistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:121:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     bool isFastFading(const MultipathChannel& channel);
      |     ~~~~ ^                                            
      |     auto                                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:122:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     bool isWidebandFading(const MultipathChannel& channel);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:125:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     MultipathChannel predictChannelEvolution(const MultipathChannel& current_channel, 
      |     ~~~~~~~~~~~~~~~~ ^
      |     auto
  126 |                                            float time_advance_ms);
      |                                                                  
      |                                                                   -> MultipathChannel
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:129:40: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  129 |     void setCacheEnabled(bool enabled, float timeout_seconds = 60.0f);
      |                                        ^                     ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:129:64: warning: 60.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  129 |     void setCacheEnabled(bool enabled, float timeout_seconds = 60.0f);
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:129:64: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:140:12: warning: accessing fields in struct 'MultipathStatistics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
  140 |     struct MultipathStatistics {
      |            ^
  141 |         int total_analyses;
  142 |         int fast_fading_detected;
  143 |         int wideband_fading_detected;
  144 |         float average_components;
  145 |         float average_delay_spread;
  146 |         std::chrono::system_clock::time_point last_analysis;
  147 |     };
      |      
      |       __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:140:12: note: use "__attribute__((aligned(32)))" to align struct 'MultipathStatistics' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:149:5: warning: function 'getStatistics' should be marked [[nodiscard]] [modernize-use-nodiscard]
  149 |     MultipathStatistics getStatistics() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:149:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     MultipathStatistics getStatistics() const;
      |     ~~~~~~~~~~~~~~~~~~~ ^                    
      |     auto                                      -> MultipathStatistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:163:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 |     float calculatePathLoss(float frequency_hz, float distance_km, float tx_altitude_m, float rx_altitude_m);
      |     ~~~~~ ^                                                                                                 
      |     auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:166:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     float calculateGroundReflectionCoefficient(float frequency_hz, float grazing_angle_deg, 
      |     ~~~~~ ^
      |     auto
  167 |                                              float ground_permittivity, float ground_conductivity);
      |                                                                                                   
      |                                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:170:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     float calculateBuildingScattering(float frequency_hz, float building_density, float distance_km);
      |     ~~~~~ ^                                                                                         
      |     auto                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:173:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     float calculateVegetationAttenuation(float frequency_hz, float vegetation_density, float path_length_km);
      |     ~~~~~ ^                                                                                                 
      |     auto                                                                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:176:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     float calculateVehicleScattering(float frequency_hz, float vehicle_density, float distance_km);
      |     ~~~~~ ^                                                                                       
      |     auto                                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:179:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  179 |     float calculateDopplerShift(float frequency_hz, float relative_velocity_ms, float angle_deg);
      |     ~~~~~ ^                                                                                     
      |     auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:182:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     float calculateDelaySpread(const std::vector<MultipathComponent>& components);
      |     ~~~~~ ^                                                                      
      |     auto                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:185:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     float calculateCoherenceBandwidth(float rms_delay_spread_ns);
      |     ~~~~~ ^                                                     
      |     auto                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:188:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 |     float calculateCoherenceTime(float doppler_spread_hz);
      |     ~~~~~ ^                                              
      |     auto                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:191:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     float generateRandomPhase();
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:194:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |     float generateRayleighAmplitude(float mean_power);
      |     ~~~~~ ^                                          
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:197:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  197 |     float generateRiceanAmplitude(float mean_power, float k_factor_db);
      |     ~~~~~ ^                                                           
      |     auto                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:200:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  200 |     bool validateMultipathParameters(const MultipathCalculationParams& params);
      |     ~~~~ ^                                                                    
      |     auto                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:201:1: warning: namespace 'EnhancedMultipathUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  201 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/enhanced_multipath.h:161:11: note: namespace 'EnhancedMultipathUtils' starts here
  161 | namespace EnhancedMultipathUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_FREQUENCY_OFFSET_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_FREQUENCY_OFFSET_H
    2 | #define FGCOM_FREQUENCY_OFFSET_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_FREQUENCY_OFFSET_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <complex>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:4:1: warning: system include complex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <complex>
      | ^~~~~~~~~~~~~~~~~~
    5 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:5:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:6:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:7:1: warning: system include cmath not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
    8 | #include <algorithm>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:8:1: warning: system include algorithm not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:10:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   11 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:11:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h [llvmlibc-restrict-system-libc-headers]
   11 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   12 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: warning: accessing fields in struct 'FrequencyOffsetConfig' is inefficient due to padding; only needs 32 bytes but is using 36 bytes [altera-struct-pack-align]
   14 | struct FrequencyOffsetConfig {
      |        ^
   15 |     bool enable_frequency_offset = true;
   16 |     bool enable_donald_duck_effect = true;
   17 |     bool enable_doppler_shift = true;
   18 |     bool enable_heterodyne_mixing = true;
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
   22 |     bool enable_analog_artifacts = true;  // Enable analog radio artifacts
   23 |     bool enable_digital_artifacts = false; // Enable digital radio artifacts
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
   25 |     int fft_size = 1024;                  // FFT size for processing
   26 |     bool enable_real_time_processing = true;
   27 |     bool enable_batch_processing = false;
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
   29 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FrequencyOffsetConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: warning: accessing fields in struct 'FrequencyOffsetConfig' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   14 | struct FrequencyOffsetConfig {
      |        ^
   15 |     bool enable_frequency_offset = true;
   16 |     bool enable_donald_duck_effect = true;
   17 |     bool enable_doppler_shift = true;
   18 |     bool enable_heterodyne_mixing = true;
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
   22 |     bool enable_analog_artifacts = true;  // Enable analog radio artifacts
   23 |     bool enable_digital_artifacts = false; // Enable digital radio artifacts
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
   25 |     int fft_size = 1024;                  // FFT size for processing
   26 |     bool enable_real_time_processing = true;
   27 |     bool enable_batch_processing = false;
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
   29 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:14:8: note: use "__attribute__((aligned(32)))" to align struct 'FrequencyOffsetConfig' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:19:27: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:19:27: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   19 |     float max_offset_hz = 1000.0f;        // Maximum frequency offset in Hz
      |                           ^     ~
      |                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:20:28: warning: 1000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:20:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   20 |     float min_offset_hz = -1000.0f;       // Minimum frequency offset in Hz
      |                            ^     ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:21:37: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:21:37: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   21 |     float offset_smoothing_factor = 0.1f; // Smoothing factor for offset changes
      |                                     ^  ~
      |                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:24:25: warning: 48000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:24:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   24 |     float sample_rate = 48000.0f;         // Audio sample rate
      |                         ^      ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:25:20: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   25 |     int fft_size = 1024;                  // FFT size for processing
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:28:35: warning: 10.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:28:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   28 |     float processing_latency_ms = 10.0f;  // Maximum processing latency
      |                                   ^   ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: warning: accessing fields in struct 'FrequencyOffsetStats' is inefficient due to padding; only needs 69 bytes but is using 80 bytes [altera-struct-pack-align]
   32 | struct FrequencyOffsetStats {
      |        ^
   33 |     float current_offset_hz;
   34 |     float average_offset_hz;
   35 |     float peak_offset_hz;
   36 |     float offset_variance;
   37 |     int total_offsets_applied;
   38 |     float processing_time_ms;
   39 |     float cpu_usage_percent;
   40 |     std::chrono::system_clock::time_point last_update;
   41 |     std::vector<float> offset_history;    // Recent offset history
   42 |     bool is_processing_active;
   43 |     int dropped_samples;
   44 |     int processed_samples;
   45 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FrequencyOffsetStats'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: warning: accessing fields in struct 'FrequencyOffsetStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   32 | struct FrequencyOffsetStats {
      |        ^
   33 |     float current_offset_hz;
   34 |     float average_offset_hz;
   35 |     float peak_offset_hz;
   36 |     float offset_variance;
   37 |     int total_offsets_applied;
   38 |     float processing_time_ms;
   39 |     float cpu_usage_percent;
   40 |     std::chrono::system_clock::time_point last_update;
   41 |     std::vector<float> offset_history;    // Recent offset history
   42 |     bool is_processing_active;
   43 |     int dropped_samples;
   44 |     int processed_samples;
   45 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:32:8: note: use "__attribute__((aligned(128)))" to align struct 'FrequencyOffsetStats' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: warning: accessing fields in struct 'DopplerShiftParams' is inefficient due to padding; only needs 17 bytes but is using 20 bytes [altera-struct-pack-align]
   48 | struct DopplerShiftParams {
      |        ^
   49 |     float relative_velocity_mps;          // Relative velocity in m/s
   50 |     float carrier_frequency_hz;           // Carrier frequency in Hz
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
   52 |     bool enable_relativistic_correction = true;
   53 |     float atmospheric_refraction_factor = 1.0003f;
   54 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'DopplerShiftParams'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: warning: accessing fields in struct 'DopplerShiftParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   48 | struct DopplerShiftParams {
      |        ^
   49 |     float relative_velocity_mps;          // Relative velocity in m/s
   50 |     float carrier_frequency_hz;           // Carrier frequency in Hz
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
   52 |     bool enable_relativistic_correction = true;
   53 |     float atmospheric_refraction_factor = 1.0003f;
   54 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:48:8: note: use "__attribute__((aligned(32)))" to align struct 'DopplerShiftParams' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:51:32: warning: 299792458.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:51:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |     float speed_of_light_mps = 299792458.0f; // Speed of light in m/s
      |                                ^          ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:53:43: warning: 1.0003f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   53 |     float atmospheric_refraction_factor = 1.0003f;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:53:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   53 |     float atmospheric_refraction_factor = 1.0003f;
      |                                           ^     ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: warning: accessing fields in struct 'HeterodyneMixingParams' is inefficient due to padding; only needs 18 bytes but is using 24 bytes [altera-struct-pack-align]
   57 | struct HeterodyneMixingParams {
      |        ^
   58 |     float local_oscillator_freq_hz;       // Local oscillator frequency
   59 |     float intermediate_freq_hz;           // Intermediate frequency
   60 |     bool enable_image_rejection = true;
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
   62 |     bool enable_phase_noise = true;
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
   64 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'HeterodyneMixingParams'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: warning: accessing fields in struct 'HeterodyneMixingParams' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   57 | struct HeterodyneMixingParams {
      |        ^
   58 |     float local_oscillator_freq_hz;       // Local oscillator frequency
   59 |     float intermediate_freq_hz;           // Intermediate frequency
   60 |     bool enable_image_rejection = true;
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
   62 |     bool enable_phase_noise = true;
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
   64 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:57:8: note: use "__attribute__((aligned(32)))" to align struct 'HeterodyneMixingParams' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:61:32: warning: 40.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:61:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   61 |     float image_rejection_db = 40.0f;     // Image rejection in dB
      |                                ^   ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:63:32: warning: 80.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:63:32: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   63 |     float phase_noise_db_hz = -80.0f;     // Phase noise in dB/Hz
      |                                ^   ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:101:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  101 |     static FGCom_FrequencyOffsetProcessor& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                                          -> FGCom_FrequencyOffsetProcessor&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:105:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |     bool applyFrequencyOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                         
      |     auto                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:106:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 |     bool applyDonaldDuckEffect(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:107:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 |     bool applyDopplerShift(float* audio_buffer, size_t samples, const DopplerShiftParams& params);
      |     ~~~~ ^                                                                                       
      |     auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:108:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 |     bool applyHeterodyneMixing(float* audio_buffer, size_t samples, const HeterodyneMixingParams& params);
      |     ~~~~ ^                                                                                               
      |     auto                                                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:111:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  111 |     bool applyComplexExponentialOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                                  
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:112:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     bool applyAnalyticSignalOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:113:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     bool applyFFTBasedOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                        
      |     auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:114:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     bool applyRealTimeOffset(float* audio_buffer, size_t samples, float offset_hz);
      |     ~~~~ ^                                                                        
      |     auto                                                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:117:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     std::complex<float>* createAnalyticSignal(const float* audio_buffer, size_t samples);
      |     ~~~~~~~~~~~~~~~~~~~~ ^                                                              
      |     auto                                                                                 -> std::complex<float>*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:120:61: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  120 |     void applyWindowFunction(float* buffer, size_t samples, const std::string& window_type = "hann");
      |                                                             ^                              ~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:120:94: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  120 |     void applyWindowFunction(float* buffer, size_t samples, const std::string& window_type = "hann");
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:123:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     bool initializeFFT(int fft_size);
      |     ~~~~ ^                          
      |     auto                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:124:58: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  124 |     void performFFT(std::complex<float>* data, int size, bool inverse = false);
      |                                                          ^            ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:130:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  130 |     FrequencyOffsetConfig getConfig() const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                    -> FrequencyOffsetConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:131:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     bool loadConfigFromFile(const std::string& config_file);
      |     ~~~~ ^                                                 
      |     auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:132:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  132 |     bool saveConfigToFile(const std::string& config_file) const;
      |     ~~~~ ^                                                     
      |     auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:136:24: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  136 |     DopplerShiftParams getDopplerParams() const;
      |     ~~~~~~~~~~~~~~~~~~ ^                       
      |     auto                                        -> DopplerShiftParams
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:137:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     float calculateDopplerShift(const DopplerShiftParams& params);
      |     ~~~~~ ^                                                      
      |     auto                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:138:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  138 |     bool updateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:142:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  142 |     HeterodyneMixingParams getHeterodyneParams() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                          
      |     auto                                               -> HeterodyneMixingParams
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:143:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     bool applyImageRejection(std::complex<float>* signal, size_t samples, float rejection_db);
      |     ~~~~ ^                                                                                   
      |     auto                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:144:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     bool applyPhaseNoise(std::complex<float>* signal, size_t samples, float noise_db_hz);
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:147:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     bool startRealTimeProcessing();
      |     ~~~~ ^                        
      |     auto                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool stopRealTimeProcessing();
      |     ~~~~ ^                       
      |     auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:149:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     bool isRealTimeProcessingActive() const;
      |     ~~~~ ^                                 
      |     auto                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:151:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     float getCurrentOffset() const;
      |     ~~~~~ ^                       
      |     auto                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:152:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  152 |     bool updateOffsetSmoothly(float target_offset_hz);
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:155:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     FrequencyOffsetStats getStats() const;
      |     ~~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                  -> FrequencyOffsetStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:158:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  158 |     bool isProcessingActive() const;
      |     ~~~~ ^                         
      |     auto                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:159:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     float getProcessingLatency() const;
      |     ~~~~~ ^                           
      |     auto                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:160:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     float getCPUUsage() const;
      |     ~~~~~ ^                  
      |     auto                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:163:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 |     bool setSampleRate(float sample_rate);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:164:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  164 |     float getSampleRate() const;
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:165:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     bool setFFTSize(int fft_size);
      |     ~~~~ ^                       
      |     auto                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:166:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     int getFFTSize() const;
      |     ~~~ ^                 
      |     auto                   -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool optimizeForLatency();
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:168:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  168 |     bool optimizeForQuality();
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:171:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  171 |     bool validateOffset(float offset_hz) const;
      |     ~~~~ ^                                    
      |     auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:172:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  172 |     bool validateSampleRate(float sample_rate) const;
      |     ~~~~ ^                                          
      |     auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:173:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     bool validateFFTSize(int fft_size) const;
      |     ~~~~ ^                                  
      |     auto                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:174:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     std::string getLastError() const;
      |     ~~~~~~~~~~~ ^                   
      |     auto                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:197:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  197 |     float calculateHannWindow(int n, int N);
      |     ~~~~~ ^                                
      |     auto                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:197:42: warning: parameter name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  197 |     float calculateHannWindow(int n, int N);
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:198:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 |     float calculateHammingWindow(int n, int N);
      |     ~~~~~ ^                                   
      |     auto                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:198:45: warning: parameter name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  198 |     float calculateHammingWindow(int n, int N);
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:199:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  199 |     float calculateBlackmanWindow(int n, int N);
      |     ~~~~~ ^                                    
      |     auto                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:199:46: warning: parameter name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  199 |     float calculateBlackmanWindow(int n, int N);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:213:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  213 |     float hzToRadians(float frequency_hz, float sample_rate);
      |     ~~~~~ ^                                                 
      |     auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:214:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     float radiansToHz(float radians, float sample_rate);
      |     ~~~~~ ^                                            
      |     auto                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:215:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  215 |     float normalizeFrequency(float frequency_hz, float sample_rate);
      |     ~~~~~ ^                                                        
      |     auto                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:216:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     float denormalizeFrequency(float normalized_freq, float sample_rate);
      |     ~~~~~ ^                                                             
      |     auto                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:219:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     std::complex<float> createComplexExponential(float frequency_hz, float time, float sample_rate);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                                          
      |     auto                                                                                            -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:220:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     std::complex<float> createComplexExponential(float frequency_hz, float time);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                         -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:221:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     float getMagnitude(const std::complex<float>& complex_num);
      |     ~~~~~ ^                                                   
      |     auto                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:222:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 |     float getPhase(const std::complex<float>& complex_num);
      |     ~~~~~ ^                                               
      |     auto                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:223:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  223 |     std::complex<float> fromMagnitudePhase(float magnitude, float phase);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                               
      |     auto                                                                 -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:226:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  226 |     float calculateSNR(const float* signal, size_t samples);
      |     ~~~~~ ^                                                
      |     auto                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:227:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     float calculateTHD(const float* signal, size_t samples, float fundamental_freq, float sample_rate);
      |     ~~~~~ ^                                                                                           
      |     auto                                                                                               -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:228:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     float calculateDynamicRange(const float* signal, size_t samples);
      |     ~~~~~ ^                                                         
      |     auto                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     bool detectClipping(const float* signal, size_t samples, float threshold = 0.95f);
      |     ~~~~ ^                                                                           
      |     auto                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:62: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  229 |     bool detectClipping(const float* signal, size_t samples, float threshold = 0.95f);
      |                                                              ^               ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:80: warning: 0.95f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  229 |     bool detectClipping(const float* signal, size_t samples, float threshold = 0.95f);
      |                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:229:80: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     float calculateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz, float speed_of_light_mps = 299792458.0f);
      |     ~~~~~ ^                                                                                                                      
      |     auto                                                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:90: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  232 |     float calculateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz, float speed_of_light_mps = 299792458.0f);
      |                                                                                          ^                        ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:117: warning: 299792458.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  232 |     float calculateDopplerShift(float relative_velocity_mps, float carrier_frequency_hz, float speed_of_light_mps = 299792458.0f);
      |                                                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:232:117: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:233:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     float calculateRelativisticDopplerShift(float relative_velocity_mps, float carrier_frequency_hz);
      |     ~~~~~ ^                                                                                         
      |     auto                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:234:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  234 |     float calculateAtmosphericRefractionCorrection(float elevation_angle_deg, float frequency_hz);
      |     ~~~~~ ^                                                                                      
      |     auto                                                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:237:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  237 |     std::complex<float> createLocalOscillator(float frequency_hz, float time, float sample_rate);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                                       
      |     auto                                                                                         -> std::complex<float>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:239:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  239 |     float calculateImageRejection(float if_freq, float rf_freq, float lo_freq);
      |     ~~~~~ ^                                                                   
      |     auto                                                                       -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:240:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  240 |     float calculatePhaseNoiseVariance(float phase_noise_db_hz, float bandwidth_hz);
      |     ~~~~~ ^                                                                       
      |     auto                                                                           -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:243:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  243 |     float calculateSpectralCentroid(const float* signal, size_t samples, float sample_rate);
      |     ~~~~~ ^                                                                                
      |     auto                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  244 |     float calculateSpectralRolloff(const float* signal, size_t samples, float sample_rate, float rolloff_percent = 0.85f);
      |     ~~~~~ ^                                                                                                              
      |     auto                                                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:92: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  244 |     float calculateSpectralRolloff(const float* signal, size_t samples, float sample_rate, float rolloff_percent = 0.85f);
      |                                                                                            ^                     ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:116: warning: 0.85f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  244 |     float calculateSpectralRolloff(const float* signal, size_t samples, float sample_rate, float rolloff_percent = 0.85f);
      |                                                                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:244:116: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:245:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  245 |     float calculateSpectralFlux(const float* signal, size_t samples, float sample_rate);
      |     ~~~~~ ^                                                                            
      |     auto                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:246:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  246 |     float calculateZeroCrossingRate(const float* signal, size_t samples);
      |     ~~~~~ ^                                                             
      |     auto                                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:250:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  250 |     float calculateWindowGain(const float* window, int size);
      |     ~~~~~ ^                                                 
      |     auto                                                     -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:252:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  252 |     std::string getAvailableWindowTypes();
      |     ~~~~~~~~~~~ ^                        
      |     auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:253:1: warning: namespace 'FrequencyOffsetUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  253 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/frequency_offset.h:211:11: note: namespace 'FrequencyOffsetUtils' starts here
  211 | namespace FrequencyOffsetUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:8:9: warning: header guard does not follow preferred style [llvm-header-guard]
    8 | #ifndef EXTERNAL_MUMBLE_PLUGINCOMPONENT_H_
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_MUMBLE_PLUGINCOMPONENTS_V_1_0_X_H
    9 | #define EXTERNAL_MUMBLE_PLUGINCOMPONENT_H_
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_MUMBLE_PLUGINCOMPONENTS_V_1_0_X_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:16:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h [llvmlibc-restrict-system-libc-headers]
   16 | #       include <string>
      | ^~~~~~~~~~~~~~~~~~~~~~~~
   17 | #endif
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:35:6: warning: enum 'Mumble_PluginFeature' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   35 | enum Mumble_PluginFeature {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:39:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
   39 |         MUMBLE_FEATURE_POSITIONAL = 1 << 0,
      |                                     ^ ~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:41:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
   41 |         MUMBLE_FEATURE_AUDIO = 1 << 1
      |                                ^ ~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:45:6: warning: enum 'Mumble_TalkingState' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   45 | enum Mumble_TalkingState {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:57:6: warning: enum 'Mumble_TransmissionMode' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   57 | enum Mumble_TransmissionMode { MUMBLE_TM_CONTINOUS, MUMBLE_TM_VOICE_ACTIVATION, MUMBLE_TM_PUSH_TO_TALK };
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:61:6: warning: enum 'Mumble_ErrorCode' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   61 | enum Mumble_ErrorCode {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:89:6: warning: enum 'Mumble_PositionalDataErrorCode' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   89 | enum Mumble_PositionalDataErrorCode {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:100:6: warning: enum 'Mumble_SettingsKey' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  100 | enum Mumble_SettingsKey {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:112:6: warning: enum 'Mumble_KeyCode' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::int16_t' (2 bytes) as the base type to reduce its size [performance-enum-size]
  112 | enum Mumble_KeyCode {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:183:2: warning: 'MUMBLE_KC_I' is confusable with 'MUMBLE_KC_1' [misc-confusable-identifiers]
  183 |         MUMBLE_KC_I                 = 'I',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:159:2: note: other declaration found here
  159 |         MUMBLE_KC_1                 = '1',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:189:2: warning: 'MUMBLE_KC_O' is confusable with 'MUMBLE_KC_0' [misc-confusable-identifiers]
  189 |         MUMBLE_KC_O                 = 'O',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:158:2: note: other declaration found here
  158 |         MUMBLE_KC_0                 = '0',
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:242:8: warning: accessing fields in struct 'MumbleVersion' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
  242 | struct MumbleVersion {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:242:8: note: use "__attribute__((aligned(16)))" to align struct 'MumbleVersion' to 16 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:243:10: warning: member variable 'major' has public visibility [misc-non-private-member-variables-in-classes]
  243 |         int32_t major;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:244:10: warning: member variable 'minor' has public visibility [misc-non-private-member-variables-in-classes]
  244 |         int32_t minor;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:245:10: warning: member variable 'patch' has public visibility [misc-non-private-member-variables-in-classes]
  245 |         int32_t patch;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:247:2: warning: overloading 'operator<' is disallowed [fuchsia-overloaded-operator]
  247 |         bool operator<(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:247:2: warning: 'operator<' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  247 |         bool operator<(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:247:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |         bool operator<(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:258:2: warning: overloading 'operator>' is disallowed [fuchsia-overloaded-operator]
  258 |         bool operator>(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:258:2: warning: 'operator>' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  258 |         bool operator>(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:258:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 |         bool operator>(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:269:2: warning: overloading 'operator>=' is disallowed [fuchsia-overloaded-operator]
  269 |         bool operator>=(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:269:2: warning: 'operator>=' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  269 |         bool operator>=(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:269:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  269 |         bool operator>=(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:280:2: warning: overloading 'operator<=' is disallowed [fuchsia-overloaded-operator]
  280 |         bool operator<=(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:280:2: warning: 'operator<=' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  280 |         bool operator<=(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:280:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  280 |         bool operator<=(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:291:2: warning: overloading 'operator==' is disallowed [fuchsia-overloaded-operator]
  291 |         bool operator==(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:291:2: warning: 'operator==' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  291 |         bool operator==(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:291:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  291 |         bool operator==(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:295:2: warning: overloading 'operator!=' is disallowed [fuchsia-overloaded-operator]
  295 |         bool operator!=(const MumbleVersion &other) const {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:295:2: warning: 'operator!=' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  295 |         bool operator!=(const MumbleVersion &other) const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:295:7: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  295 |         bool operator!=(const MumbleVersion &other) const {
      |         ~~~~ ^
      |         auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:299:2: warning: 'operator basic_string' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
  299 |         operator std::string() const {
      |         ^
      |         explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:299:2: warning: 'operator basic_string' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  299 |         operator std::string() const {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:27: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:29: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:57: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:59: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:76: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:300:78: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  300 |                 return std::string("v") + std::to_string(this->major) + std::string(".") + std::to_string(this->minor)
      |                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:7: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:26: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:301:28: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  301 |                            + std::string(".") + std::to_string(this->patch);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:321:1: warning: 'mumble_errorMessage' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  321 | inline const char *mumble_errorMessage(int16_t errorCode) {
      | ^
      | LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:321:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 | inline const char *mumble_errorMessage(int16_t errorCode) {
      |        ~~~~~~~~~~~~^
      |        auto                                               -> const char *
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: warning: accessing fields in struct 'MumbleStringWrapper' is inefficient due to padding; only needs 17 bytes but is using 24 bytes [altera-struct-pack-align]
  377 | struct MumbleStringWrapper {
      |        ^
  378 |         /// The pointer to the actual String data
  379 |         const char *data;
  380 |         /// The size of the pointed String data
  381 |         size_t size;
  382 |         /// Whether the wrapped String needs to be released
  383 |         /// after its usage. Instances for which this would be
  384 |         /// false: Static Strings, String literals
  385 |         bool needsReleasing;
  386 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'MumbleStringWrapper'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: warning: accessing fields in struct 'MumbleStringWrapper' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
  377 | struct MumbleStringWrapper {
      |        ^
  378 |         /// The pointer to the actual String data
  379 |         const char *data;
  380 |         /// The size of the pointed String data
  381 |         size_t size;
  382 |         /// Whether the wrapped String needs to be released
  383 |         /// after its usage. Instances for which this would be
  384 |         /// false: Static Strings, String literals
  385 |         bool needsReleasing;
  386 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:377:8: note: use "__attribute__((aligned(32)))" to align struct 'MumbleStringWrapper' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:389:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  389 | typedef enum Mumble_TalkingState mumble_talking_state_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_talking_state_t = enum Mumble_TalkingState
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:391:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  391 | typedef enum Mumble_TransmissionMode mumble_transmission_mode_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_transmission_mode_t = enum Mumble_TransmissionMode
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:393:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  393 | typedef struct MumbleVersion mumble_version_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_version_t = struct MumbleVersion
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:395:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  395 | typedef int32_t mumble_connection_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_connection_t = int32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:397:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  397 | typedef uint32_t mumble_userid_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_userid_t = uint32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:399:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  399 | typedef int32_t mumble_channelid_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_channelid_t = int32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:401:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  401 | typedef enum Mumble_ErrorCode mumble_error_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_error_t = enum Mumble_ErrorCode
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:403:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  403 | typedef uint32_t mumble_plugin_id_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_plugin_id_t = uint32_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:405:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  405 | typedef enum Mumble_SettingsKey mumble_settings_key_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_settings_key_t = enum Mumble_SettingsKey
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/mumble/PluginComponents_v_1_0_x.h:407:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
  407 | typedef enum Mumble_KeyCode mumble_keycode_t;
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      | using mumble_keycode_t = enum Mumble_KeyCode
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_PATTERN_INTERPOLATION_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PATTERN_INTERPOLATION_H
    2 | #define FGCOM_PATTERN_INTERPOLATION_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PATTERN_INTERPOLATION_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:5:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <map>
      | ^~~~~~~~~~~~~~
    6 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:6:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: warning: accessing fields in struct 'FGCom_RadiationPattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   10 | struct FGCom_RadiationPattern {
      |        ^
   11 |     double theta;           // Elevation angle (degrees)
   12 |     double phi;             // Azimuth angle (degrees)
   13 |     double gain_dbi;        // Gain in dBi
   14 |     double phase_deg;       // Phase in degrees
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
   16 |     
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
   19 |         : theta(t), phi(p), gain_dbi(g), phase_deg(ph), polarization(pol) {}
   20 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:10:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_RadiationPattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:11:12: warning: member variable 'theta' has public visibility [misc-non-private-member-variables-in-classes]
   11 |     double theta;           // Elevation angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:12:12: warning: member variable 'phi' has public visibility [misc-non-private-member-variables-in-classes]
   12 |     double phi;             // Azimuth angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:13:12: warning: member variable 'gain_dbi' has public visibility [misc-non-private-member-variables-in-classes]
   13 |     double gain_dbi;        // Gain in dBi
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:14:12: warning: member variable 'phase_deg' has public visibility [misc-non-private-member-variables-in-classes]
   14 |     double phase_deg;       // Phase in degrees
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:15:17: warning: member variable 'polarization' has public visibility [misc-non-private-member-variables-in-classes]
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:17:5: warning: 'FGCom_RadiationPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:17:77: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
      |                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:5: warning: 'FGCom_RadiationPattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:28: warning: 4 adjacent parameters of 'FGCom_RadiationPattern' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:35: note: the first parameter in the range is 't'
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:65: note: the last parameter in the range is 'ph'
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                 ^~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:35: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:45: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:55: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:65: warning: parameter name 'ph' is too short, expected at least 3 characters [readability-identifier-length]
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:18:69: warning: pass by value and use std::move [modernize-pass-by-value]
    4 | #include <vector>
    5 | #include <map>
    6 | #include <string>
    7 | #include <memory>
    8 | 
    9 | // 4NEC2 radiation pattern data structure
   10 | struct FGCom_RadiationPattern {
   11 |     double theta;           // Elevation angle (degrees)
   12 |     double phi;             // Azimuth angle (degrees)
   13 |     double gain_dbi;        // Gain in dBi
   14 |     double phase_deg;       // Phase in degrees
   15 |     std::string polarization; // "V" for vertical, "H" for horizontal
   16 |     
   17 |     FGCom_RadiationPattern() : theta(0), phi(0), gain_dbi(0), phase_deg(0), polarization("V") {}
   18 |     FGCom_RadiationPattern(double t, double p, double g, double ph, const std::string& pol)
      |                                                                     ^~~~~~~~~~~~~~~~~~
      |                                                                     std::string 
   19 |         : theta(t), phi(p), gain_dbi(g), phase_deg(ph), polarization(pol) {}
      |                                                                         
      |                                                                      std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: warning: accessing fields in struct 'FGCom_AttitudePattern' is inefficient due to padding; only needs 44 bytes but is using 48 bytes [altera-struct-pack-align]
   23 | struct FGCom_AttitudePattern {
      |        ^
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
   26 |     int altitude_m;          // Altitude in meters
   27 |     double frequency_mhz;   // Frequency in MHz
   28 |     std::vector<FGCom_RadiationPattern> patterns;
   29 |     
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
   32 |         : roll_deg(roll), pitch_deg(pitch), altitude_m(alt), frequency_mhz(freq) {}
   33 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FGCom_AttitudePattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: warning: accessing fields in struct 'FGCom_AttitudePattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   23 | struct FGCom_AttitudePattern {
      |        ^
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
   26 |     int altitude_m;          // Altitude in meters
   27 |     double frequency_mhz;   // Frequency in MHz
   28 |     std::vector<FGCom_RadiationPattern> patterns;
   29 |     
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
   32 |         : roll_deg(roll), pitch_deg(pitch), altitude_m(alt), frequency_mhz(freq) {}
   33 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:23:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_AttitudePattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:24:9: warning: member variable 'roll_deg' has public visibility [misc-non-private-member-variables-in-classes]
   24 |     int roll_deg;           // Roll angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:25:9: warning: member variable 'pitch_deg' has public visibility [misc-non-private-member-variables-in-classes]
   25 |     int pitch_deg;          // Pitch angle in degrees (-180 to +180)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:26:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   26 |     int altitude_m;          // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:27:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   27 |     double frequency_mhz;   // Frequency in MHz
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:28:41: warning: member variable 'patterns' has public visibility [misc-non-private-member-variables-in-classes]
   28 |     std::vector<FGCom_RadiationPattern> patterns;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:30:5: warning: 'FGCom_AttitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   30 |     FGCom_AttitudePattern() : roll_deg(0), pitch_deg(0), altitude_m(0), frequency_mhz(0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:5: warning: 'FGCom_AttitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:27: warning: 4 adjacent parameters of 'FGCom_AttitudePattern' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:31: note: the first parameter in the range is 'roll'
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                               ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:64: note: the last parameter in the range is 'freq'
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                                                                ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:31:57: note: 'int' and 'double' may be implicitly converted
   31 |     FGCom_AttitudePattern(int roll, int pitch, int alt, double freq) 
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: warning: accessing fields in struct 'FGCom_AltitudePattern' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
   36 | struct FGCom_AltitudePattern {
      |        ^
   37 |     int altitude_m;         // Altitude in meters
   38 |     double frequency_mhz;   // Frequency in MHz
   39 |     std::vector<FGCom_RadiationPattern> patterns;
   40 |     
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
   43 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FGCom_AltitudePattern'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: warning: accessing fields in struct 'FGCom_AltitudePattern' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   36 | struct FGCom_AltitudePattern {
      |        ^
   37 |     int altitude_m;         // Altitude in meters
   38 |     double frequency_mhz;   // Frequency in MHz
   39 |     std::vector<FGCom_RadiationPattern> patterns;
   40 |     
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
   43 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:36:8: note: use "__attribute__((aligned(64)))" to align struct 'FGCom_AltitudePattern' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:37:9: warning: member variable 'altitude_m' has public visibility [misc-non-private-member-variables-in-classes]
   37 |     int altitude_m;         // Altitude in meters
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:38:12: warning: member variable 'frequency_mhz' has public visibility [misc-non-private-member-variables-in-classes]
   38 |     double frequency_mhz;   // Frequency in MHz
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:39:41: warning: member variable 'patterns' has public visibility [misc-non-private-member-variables-in-classes]
   39 |     std::vector<FGCom_RadiationPattern> patterns;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:41:5: warning: 'FGCom_AltitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   41 |     FGCom_AltitudePattern() : altitude_m(0), frequency_mhz(0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:5: warning: 'FGCom_AltitudePattern' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:27: warning: 2 adjacent parameters of 'FGCom_AltitudePattern' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                           ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:31: note: the first parameter in the range is 'alt'
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                               ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:43: note: the last parameter in the range is 'freq'
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:42:36: note: 'int' and 'double' may be implicitly converted
   42 |     FGCom_AltitudePattern(int alt, double freq) : altitude_m(alt), frequency_mhz(freq) {}
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:46:7: warning: class 'FGCom_PatternInterpolation' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   46 | class FGCom_PatternInterpolation {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:69:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     bool load4NEC2Pattern(const std::string& filename, const std::string& antenna_name, 
      |     ~~~~ ^
      |     auto
   70 |                          int altitude_m, double frequency_mhz);
      |                                                               
      |                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:73:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     bool load3DAttitudePattern(const std::string& filename, const std::string& antenna_name,
      |     ~~~~ ^
      |     auto
   74 |                                int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                                                                                  
      |                                                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:77:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   77 |     bool loadAltitudePatterns(const std::string& antenna_name, const std::string& pattern_dir);
      |     ~~~~ ^                                                                                    
      |     auto                                                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:80:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     double getInterpolatedGain(const std::string& antenna_name, int altitude_m, 
      |     ~~~~~~ ^
      |     auto
   81 |                               double frequency_mhz, double theta_deg, double phi_deg);
      |                                                                                      
      |                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:84:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     double get3DAttitudeGain(const std::string& antenna_name, double theta, double phi,
      |     ~~~~~~ ^
      |     auto
   85 |                              int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                                                                                
      |                                                                                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:88:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     bool has3DAttitudePattern(const std::string& antenna_name);
      |     ~~~~ ^                                                    
      |     auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:91:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   91 |     double getBilinearInterpolatedGain(const std::string& antenna_name, int altitude_m,
      |     ~~~~~~ ^
      |     auto
   92 |                                       double frequency_mhz, double theta_deg, double phi_deg);
      |                                                                                              
      |                                                                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:95:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   95 |     const FGCom_AltitudePattern* getPatternAtAltitude(const std::string& antenna_name, 
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
   96 |                                                       int altitude_m, double frequency_mhz);
      |                                                                                            
      |                                                                                             -> const FGCom_AltitudePattern*
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:99:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     double getGroundEffectFactor(int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                          
      |     auto                                                               -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:102:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  102 |     double getMultipathFactor(int altitude_m, double frequency_mhz, double theta_deg);
      |     ~~~~~~ ^                                                                         
      |     auto                                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:105:12: warning: accessing fields in struct 'AltitudeCharacteristics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  105 |     struct AltitudeCharacteristics {
      |            ^
  106 |         double ground_effect_factor;    // 0.0 (free space) to 1.0 (full ground effects)
  107 |         double multipath_factor;        // Multipath interference strength
  108 |         double pattern_stability;       // Pattern stability (0.0 to 1.0)
  109 |         std::string dominant_mode;      // "ground_wave", "sky_wave", "mixed"
  110 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:105:12: note: use "__attribute__((aligned(64)))" to align struct 'AltitudeCharacteristics' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:112:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     AltitudeCharacteristics getAltitudeCharacteristics(int altitude_m, double frequency_mhz);
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^                                                               
      |     auto                                                                                     -> AltitudeCharacteristics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:115:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     bool isAntennaLoaded(const std::string& antenna_name);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:116:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  116 |     std::vector<int> getAvailableAltitudes(const std::string& antenna_name);
      |     ~~~~~~~~~~~~~~~~ ^                                                     
      |     auto                                                                    -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:117:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     std::vector<double> getAvailableFrequencies(const std::string& antenna_name);
      |     ~~~~~~~~~~~~~~~~~~~ ^                                                       
      |     auto                                                                         -> std::vector<double>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:120:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     double getMaximumGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:121:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     double getMinimumGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:122:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  122 |     double getAverageGain(const std::string& antenna_name, int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                                    
      |     auto                                                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:125:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     double calculateGroundReflectionCoefficient(int altitude_m, double frequency_mhz, 
      |     ~~~~~~ ^
      |     auto
  126 |                                                double theta_deg, double ground_conductivity);
      |                                                                                             
      |                                                                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:127:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  127 |     double calculatePathDifference(int altitude_m, double theta_deg);
      |     ~~~~~~ ^                                                        
      |     auto                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:128:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  128 |     double calculatePhaseDifference(double path_diff_m, double frequency_mhz);
      |     ~~~~~~ ^                                                                 
      |     auto                                                                      -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:131:56: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  131 |     void smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor = 0.1);
      |                                                        ^                       ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:131:82: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  131 |     void smoothPattern(FGCom_AltitudePattern& pattern, double smoothing_factor = 0.1);
      |                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:132:56: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  132 |     void filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold = -30.0);
      |                                                        ^                         ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:132:85: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  132 |     void filterPattern(FGCom_AltitudePattern& pattern, double min_gain_threshold = -30.0);
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |     ~~~~~~ ^                                                                      
      |     auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:37: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:48: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:59: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:70: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:136:81: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  136 |     double linearInterpolate(double x1, double y1, double x2, double y2, double x);
      |                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |     ~~~~~~ ^
      |     auto
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                                                                                  
      |                                                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:39: warning: parameter name 'x1' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:50: warning: parameter name 'y1' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:61: warning: parameter name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:137:72: warning: parameter name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  137 |     double bilinearInterpolate(double x1, double y1, double x2, double y2, 
      |                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:138:38: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:138:48: warning: parameter name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  138 |                               double x, double y, double q11, double q12, double q21, double q22);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:141:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     std::vector<FGCom_RadiationPattern*> findClosestPatterns(
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  142 |         const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count = 4);
      |                                                                                               
      |                                                                                                -> std::vector<FGCom_RadiationPattern*>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:142:81: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  142 |         const FGCom_AltitudePattern& pattern, double theta_deg, double phi_deg, int count = 4);
      |                                                                                 ^         ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:145:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  145 |     bool parse4NEC2File(const std::string& filename, FGCom_AltitudePattern& pattern);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool validatePattern(const FGCom_AltitudePattern& pattern);
      |     ~~~~ ^                                                    
      |     auto                                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: warning: accessing fields in struct 'PatternStats' is inefficient due to padding; only needs 36 bytes but is using 40 bytes [altera-struct-pack-align]
  151 |     struct PatternStats {
      |            ^
  152 |         double max_gain;
  153 |         double min_gain;
  154 |         double avg_gain;
  155 |         double std_dev;
  156 |         int total_points;
  157 |     };
      |      
      |       __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'PatternStats'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: warning: accessing fields in struct 'PatternStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  151 |     struct PatternStats {
      |            ^
  152 |         double max_gain;
  153 |         double min_gain;
  154 |         double avg_gain;
  155 |         double std_dev;
  156 |         int total_points;
  157 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:151:12: note: use "__attribute__((aligned(64)))" to align struct 'PatternStats' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:159:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     PatternStats calculatePatternStats(const FGCom_AltitudePattern& pattern);
      |     ~~~~~~~~~~~~ ^                                                          
      |     auto                                                                     -> PatternStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:163:52: warning: variable 'g_pattern_interpolation' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  163 | extern std::unique_ptr<FGCom_PatternInterpolation> g_pattern_interpolation;
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:168:10: warning: enum 'AltitudeCategory' uses a larger base type ('unsigned int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  168 |     enum AltitudeCategory {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:175:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     AltitudeCategory getAltitudeCategory(int altitude_m);
      |     ~~~~~~~~~~~~~~~~ ^                                  
      |     auto                                                 -> AltitudeCategory
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:178:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  178 |     int getRecommendedSamplingInterval(int altitude_m);
      |     ~~~ ^                                             
      |     auto                                               -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:181:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     bool isCriticalTransitionZone(int altitude_m);
      |     ~~~~ ^                                       
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:184:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     double getGroundEffectStrength(int altitude_m, double frequency_mhz);
      |     ~~~~~~ ^                                                            
      |     auto                                                                 -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:187:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     double calculateMultipathNullDepth(int altitude_m, double frequency_mhz, double theta_deg);
      |     ~~~~~~ ^                                                                                  
      |     auto                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:188:1: warning: namespace 'FGCom_AltitudeUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  188 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:166:11: note: namespace 'FGCom_AltitudeUtils' starts here
  166 | namespace FGCom_AltitudeUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:1:9: warning: header guard does not follow preferred style [llvm-header-guard]
    1 | #ifndef FGCOM_POWER_MANAGEMENT_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_POWER_MANAGEMENT_H
    2 | #define FGCOM_POWER_MANAGEMENT_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_POWER_MANAGEMENT_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:4:1: warning: #includes are not sorted properly [llvm-include-order]
    4 | #include <vector>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:4:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    4 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
    5 | #include <string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:5:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    5 | #include <string>
      | ^~~~~~~~~~~~~~~~~
    6 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:6:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    6 | #include <map>
      | ^~~~~~~~~~~~~~
    7 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:7:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    7 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
    8 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:8:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    8 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
    9 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:9:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
    9 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   10 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:10:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   11 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:13:8: warning: accessing fields in struct 'PowerLevels' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   13 | struct PowerLevels {
      |        ^
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
   15 |     int current_power;
   16 |     float power_efficiency;         // Antenna efficiency at current power
   17 |     bool power_limiting;            // Automatic power limiting for safety
   18 |     float max_safe_power;           // Maximum safe power for current antenna
   19 |     float regulatory_limit;         // Regulatory power limit for current band
   20 |     bool efficiency_optimization;   // Enable power efficiency optimization
   21 |     float battery_level;            // Current battery level (0.0-1.0)
   22 |     float power_consumption;        // Current power consumption in watts
   23 |     std::chrono::system_clock::time_point last_power_change;
   24 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:13:8: note: use "__attribute__((aligned(64)))" to align struct 'PowerLevels' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:42: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:46: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:51: warning: 150 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:56: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:61: warning: 250 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:66: warning: 300 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:71: warning: 350 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:76: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:81: warning: 450 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:86: warning: 500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:91: warning: 550 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:96: warning: 600 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:101: warning: 650 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:106: warning: 700 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:111: warning: 750 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:116: warning: 800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:121: warning: 850 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:126: warning: 900 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:131: warning: 950 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:14:136: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   14 |     std::vector<int> available_powers = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000};
      |                                                                                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: warning: accessing fields in struct 'AntennaPowerEfficiency' is inefficient due to padding; only needs 97 bytes but is using 104 bytes [altera-struct-pack-align]
   27 | struct AntennaPowerEfficiency {
      |        ^
   28 |     std::string antenna_type;
   29 |     std::map<int, float> efficiency_at_power;  // Power level -> efficiency (0.0-1.0)
   30 |     float max_efficient_power;                 // Power level with best efficiency
   31 |     float efficiency_threshold;                // Minimum efficiency threshold
   32 |     bool has_power_limiting;                   // Whether this antenna has power limiting
   33 |     float thermal_limit;                       // Thermal power limit in watts
   34 |     float swr_limit;                          // SWR limit for power limiting
   35 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'AntennaPowerEfficiency'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: warning: accessing fields in struct 'AntennaPowerEfficiency' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   27 | struct AntennaPowerEfficiency {
      |        ^
   28 |     std::string antenna_type;
   29 |     std::map<int, float> efficiency_at_power;  // Power level -> efficiency (0.0-1.0)
   30 |     float max_efficient_power;                 // Power level with best efficiency
   31 |     float efficiency_threshold;                // Minimum efficiency threshold
   32 |     bool has_power_limiting;                   // Whether this antenna has power limiting
   33 |     float thermal_limit;                       // Thermal power limit in watts
   34 |     float swr_limit;                          // SWR limit for power limiting
   35 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:27:8: note: use "__attribute__((aligned(128)))" to align struct 'AntennaPowerEfficiency' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: warning: accessing fields in struct 'RegulatoryPowerLimits' is inefficient due to padding; only needs 113 bytes but is using 120 bytes [altera-struct-pack-align]
   38 | struct RegulatoryPowerLimits {
      |        ^
   39 |     std::string band_name;
   40 |     float min_freq_mhz;
   41 |     float max_freq_mhz;
   42 |     float max_power_watts;
   43 |     std::string regulatory_body;  // FCC, ITU, etc.
   44 |     std::string license_type;     // Amateur, Commercial, Military, etc.
   45 |     bool requires_license;
   46 |     float power_density_limit;    // Power density limit in W/m²
   47 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'RegulatoryPowerLimits'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: warning: accessing fields in struct 'RegulatoryPowerLimits' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   38 | struct RegulatoryPowerLimits {
      |        ^
   39 |     std::string band_name;
   40 |     float min_freq_mhz;
   41 |     float max_freq_mhz;
   42 |     float max_power_watts;
   43 |     std::string regulatory_body;  // FCC, ITU, etc.
   44 |     std::string license_type;     // Amateur, Commercial, Military, etc.
   45 |     bool requires_license;
   46 |     float power_density_limit;    // Power density limit in W/m²
   47 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:38:8: note: use "__attribute__((aligned(128)))" to align struct 'RegulatoryPowerLimits' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:50:8: warning: accessing fields in struct 'PowerManagementConfig' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   50 | struct PowerManagementConfig {
      |        ^
   51 |     bool enable_automatic_power_limiting = true;
   52 |     bool enable_efficiency_optimization = true;
   53 |     bool enable_regulatory_compliance = true;
   54 |     bool enable_thermal_protection = true;
   55 |     bool enable_swr_protection = true;
   56 |     bool enable_battery_management = true;
   57 |     float default_efficiency_threshold = 0.7f;
   58 |     float thermal_shutdown_threshold = 0.9f;
   59 |     float swr_shutdown_threshold = 3.0f;
   60 |     float battery_low_threshold = 0.2f;
   61 |     int power_change_delay_ms = 100;  // Delay between power changes
   62 |     bool log_power_changes = true;
   63 |     bool enable_power_analytics = true;
   64 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:50:8: note: use "__attribute__((aligned(32)))" to align struct 'PowerManagementConfig' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:57:42: warning: 0.7f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   57 |     float default_efficiency_threshold = 0.7f;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:57:42: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   57 |     float default_efficiency_threshold = 0.7f;
      |                                          ^  ~
      |                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:58:40: warning: 0.9f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   58 |     float thermal_shutdown_threshold = 0.9f;
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:58:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   58 |     float thermal_shutdown_threshold = 0.9f;
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:59:36: warning: 3.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   59 |     float swr_shutdown_threshold = 3.0f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:59:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   59 |     float swr_shutdown_threshold = 3.0f;
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:60:35: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   60 |     float battery_low_threshold = 0.2f;
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:60:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   60 |     float battery_low_threshold = 0.2f;
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:61:33: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   61 |     int power_change_delay_ms = 100;  // Delay between power changes
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: warning: accessing fields in struct 'PowerManagementStats' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   67 | struct PowerManagementStats {
      |        ^
   68 |     int total_power_changes;
   69 |     float average_efficiency;
   70 |     float peak_power_used;
   71 |     float total_energy_consumed;
   72 |     std::chrono::system_clock::time_point last_reset;
   73 |     std::map<int, int> power_level_usage;  // Power level -> usage count
   74 |     float efficiency_vs_power_correlation;
   75 |     int thermal_shutdowns;
   76 |     int swr_shutdowns;
   77 |     int regulatory_violations;
   78 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:67:8: note: use "__attribute__((aligned(128)))" to align struct 'PowerManagementStats' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:107:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 |     static FGCom_PowerManager& getInstance();
      |            ~~~~~~~~~~~~~~~~~~~ ^            
      |            auto                              -> FGCom_PowerManager&
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:111:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  111 |     bool setPowerLevel(int power_watts);
      |     ~~~~ ^                             
      |     auto                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:112:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     int getCurrentPower() const;
      |     ~~~ ^                      
      |     auto                        -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:113:22: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     std::vector<int> getAvailablePowerLevels() const;
      |     ~~~~~~~~~~~~~~~~ ^                              
      |     auto                                             -> std::vector<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:114:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     bool isPowerLevelAvailable(int power_watts) const;
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:117:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     float calculatePowerEfficiency(int power_watts, const std::string& antenna_type) const;
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:118:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  118 |     float getCurrentPowerEfficiency() const;
      |     ~~~~~ ^                                
      |     auto                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:119:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 |     int getOptimalPowerLevel(const std::string& antenna_type) const;
      |     ~~~ ^                                                          
      |     auto                                                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:120:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     bool optimizePowerForEfficiency();
      |     ~~~~ ^                           
      |     auto                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:123:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  123 |     bool enablePowerLimiting(bool enable);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:124:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |     bool isPowerLimitingActive() const;
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:125:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     bool checkPowerLimits(int power_watts) const;
      |     ~~~~ ^                                      
      |     auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:126:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     bool applyPowerLimits(int requested_power, int& actual_power) const;
      |     ~~~~ ^                                                             
      |     auto                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:129:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  129 |     bool checkRegulatoryCompliance(int power_watts, const std::string& frequency_band) const;
      |     ~~~~ ^                                                                                  
      |     auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:130:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  130 |     float getRegulatoryPowerLimit(const std::string& frequency_band) const;
      |     ~~~~~ ^                                                               
      |     auto                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:131:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  131 |     bool isRegulatoryCompliant(int power_watts, const std::string& frequency_band) const;
      |     ~~~~ ^                                                                              
      |     auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:134:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  134 |     bool enableThermalProtection(bool enable);
      |     ~~~~ ^                                   
      |     auto                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:135:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  135 |     bool isThermalProtectionActive() const;
      |     ~~~~ ^                                
      |     auto                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:137:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  137 |     bool checkThermalLimits(int power_watts) const;
      |     ~~~~ ^                                        
      |     auto                                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:140:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     bool enableSWRProtection(bool enable);
      |     ~~~~ ^                               
      |     auto                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:141:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  141 |     bool isSWRProtectionActive() const;
      |     ~~~~ ^                            
      |     auto                               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:143:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  143 |     bool checkSWRLimits(int power_watts) const;
      |     ~~~~ ^                                    
      |     auto                                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:147:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     float getBatteryLevel() const;
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:148:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     bool isBatteryLow() const;
      |     ~~~~ ^                   
      |     auto                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:149:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  149 |     int getMaxPowerForBattery() const;
      |     ~~~ ^                            
      |     auto                              -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:153:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 |     std::string getCurrentAntenna() const;
      |     ~~~~~~~~~~~ ^                        
      |     auto                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:154:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |     bool loadAntennaEfficiencyData(const std::string& antenna_type, const AntennaPowerEfficiency& data);
      |     ~~~~ ^                                                                                             
      |     auto                                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:155:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     AntennaPowerEfficiency getAntennaEfficiencyData(const std::string& antenna_type) const;
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                                                              
      |     auto                                                                                   -> AntennaPowerEfficiency
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:159:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  159 |     std::string getCurrentFrequencyBand() const;
      |     ~~~~~~~~~~~ ^                              
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:160:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     bool loadRegulatoryLimits(const std::string& frequency_band, const RegulatoryPowerLimits& limits);
      |     ~~~~ ^                                                                                           
      |     auto                                                                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:161:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     RegulatoryPowerLimits getRegulatoryLimits(const std::string& frequency_band) const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                                                           
      |     auto                                                                               -> RegulatoryPowerLimits
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:165:27: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     PowerManagementConfig getConfig() const;
      |     ~~~~~~~~~~~~~~~~~~~~~ ^                
      |     auto                                    -> PowerManagementConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:166:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     bool loadConfigFromFile(const std::string& config_file);
      |     ~~~~ ^                                                 
      |     auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool saveConfigToFile(const std::string& config_file) const;
      |     ~~~~ ^                                                     
      |     auto                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:170:26: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  170 |     PowerManagementStats getStats() const;
      |     ~~~~~~~~~~~~~~~~~~~~ ^               
      |     auto                                  -> PowerManagementStats
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:173:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     bool isPowerAnalyticsEnabled() const;
      |     ~~~~ ^                              
      |     auto                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool canChangePower() const;
      |     ~~~~ ^                     
      |     auto                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:178:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  178 |     int getPowerChangeDelay() const;
      |     ~~~ ^                          
      |     auto                            -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:181:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  181 |     bool isSafeToTransmit(int power_watts) const;
      |     ~~~~ ^                                      
      |     auto                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:182:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     bool checkAllSafetyLimits(int power_watts) const;
      |     ~~~~ ^                                          
      |     auto                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:184:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     bool isEmergencyPowerDown() const;
      |     ~~~~ ^                           
      |     auto                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:187:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     int calculateOptimalPowerForRange(double distance_km, const std::string& antenna_type) const;
      |     ~~~ ^                                                                                       
      |     auto                                                                                         -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:188:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  188 |     int calculateOptimalPowerForSignalQuality(float target_quality, double distance_km, const std::string& antenna_type) const;
      |     ~~~ ^                                                                                                                     
      |     auto                                                                                                                       -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:189:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  189 |     float calculatePowerConsumption(int power_watts, const std::string& antenna_type) const;
      |     ~~~~~ ^                                                                                
      |     auto                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:192:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     float getEffectiveRadiatedPower(int tx_power_watts, const std::string& antenna_type, float azimuth_deg, float elevation_deg, float frequency_mhz) const;
      |     ~~~~~ ^                                                                                                                                                
      |     auto                                                                                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:193:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     float getPowerEfficiencyAtFrequency(int power_watts, const std::string& antenna_type, float frequency_mhz) const;
      |     ~~~~~ ^                                                                                                         
      |     auto                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:218:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  218 |     float wattsToDBm(float watts);
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:219:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     float dbmToWatts(float dbm);
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:220:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     float wattsToDBW(float watts);
      |     ~~~~~ ^                      
      |     auto                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:221:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  221 |     float dbwToWatts(float dbw);
      |     ~~~~~ ^                    
      |     auto                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:224:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  224 |     float calculatePowerDensity(float power_watts, float distance_meters);
      |     ~~~~~ ^                                                              
      |     auto                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:225:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  225 |     bool checkPowerDensityLimit(float power_watts, float distance_meters, float limit_w_per_m2);
      |     ~~~~ ^                                                                                     
      |     auto                                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:228:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     float calculateERP(float tx_power_watts, float antenna_gain_db, float system_loss_db);
      |     ~~~~~ ^                                                                              
      |     auto                                                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:229:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     float calculateEIRP(float tx_power_watts, float antenna_gain_db, float system_loss_db);
      |     ~~~~~ ^                                                                               
      |     auto                                                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:232:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     float calculateAntennaEfficiency(float power_watts, float swr, float temperature_celsius);
      |     ~~~~~ ^                                                                                  
      |     auto                                                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:233:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     float calculateSystemEfficiency(float tx_power_watts, float antenna_efficiency, float feedline_loss_db, float connector_loss_db);
      |     ~~~~~ ^                                                                                                                         
      |     auto                                                                                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:236:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  236 |     bool isAmateurRadioFrequency(float frequency_mhz);
      |     ~~~~ ^                                           
      |     auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:237:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  237 |     bool isCommercialFrequency(float frequency_mhz);
      |     ~~~~ ^                                         
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:238:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  238 |     bool isMilitaryFrequency(float frequency_mhz);
      |     ~~~~ ^                                       
      |     auto                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:239:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  239 |     std::string getRegulatoryBody(float frequency_mhz);
      |     ~~~~~~~~~~~ ^                                     
      |     auto                                               -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:240:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  240 |     std::string getLicenseType(float frequency_mhz);
      |     ~~~~~~~~~~~ ^                                  
      |     auto                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:241:1: warning: namespace 'PowerManagementUtils' not terminated with a closing comment [google-readability-namespace-comments,llvm-namespace-comment]
  241 | }
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:216:11: note: namespace 'PowerManagementUtils' starts here
  216 | namespace PowerManagementUtils {
      |           ^
note: cannot apply fix-it because an alias checker has suggested a different fix-it; please remove one of the checkers ('google-readability-namespace-comments', 'llvm-namespace-comment') or ensure they are both configured the same
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:7:9: warning: header guard does not follow preferred style [llvm-header-guard]
    7 | #ifndef PROPAGATION_PHYSICS_H
      |         ^~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PROPAGATION_PHYSICS_H
    8 | #define PROPAGATION_PHYSICS_H
      |         ~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_PROPAGATION_PHYSICS_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:10:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h [llvmlibc-restrict-system-libc-headers]
   10 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   11 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:13:8: warning: accessing fields in struct 'AtmosphericConditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   13 | struct AtmosphericConditions {
      |        ^
   14 |     double temperature_c;
   15 |     double humidity_percent;
   16 |     double rain_rate_mmh;
   17 |     double wind_speed_ms;
   18 |     double wind_direction_deg;
   19 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:13:8: note: use "__attribute__((aligned(64)))" to align struct 'AtmosphericConditions' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:24:34: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   24 |     static AtmosphericConditions getAtmosphericConditions(double latitude, double longitude, double altitude);
      |            ~~~~~~~~~~~~~~~~~~~~~ ^                                                                           
      |            auto                                                                                               -> AtmosphericConditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:27:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   27 |     static double calculateTotalPropagationLoss(
      |            ~~~~~~ ^
      |            auto
   28 |         double frequency_mhz,
   29 |         double distance_km,
   30 |         double tx_altitude_m,
   31 |         double rx_altitude_m,
   32 |         double tx_power_dbm,
   33 |         double rx_sensitivity_dbm,
   34 |         double atmospheric_loss_db,
   35 |         double terrain_loss_db
   36 |     );
      |      
      |       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:1:1: warning: header is missing header guard [llvm-header-guard]
    1 | /* 
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: #includes are not sorted properly [llvm-include-order]
   17 | #include <cstdint>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:17:1: warning: system include cstdint not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   17 | #include <cstdint>
      | ^~~~~~~~~~~~~~~~~~
   18 | #include <iostream> 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:18:1: warning: system include iostream not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   18 | #include <iostream> 
      | ^~~~~~~~~~~~~~~~~~~
   19 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:19:1: warning: system include cmath not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   19 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   20 | #include <regex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:20:1: warning: system include regex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h [llvmlibc-restrict-system-libc-headers]
   20 | #include <regex>
      | ^~~~~~~~~~~~~~~~
   21 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:34:9: warning: macro 'EARTH_RADIUS_CONST' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
   34 | #define EARTH_RADIUS_CONST 3.57  // earth radius factor constant for m/km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:1: warning: replace macro with enum [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      | ^~~~~~~
      |                          =
   36 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' defines an integral constant; prefer an enum instead [cppcoreguidelines-macro-to-enum,modernize-macro-to-enum]
   35 | #define EARTH_RADIUS_AVG   6371  // earth radius constant in km
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:35:9: warning: macro 'EARTH_RADIUS_AVG' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to padding; only needs 172 bytes but is using 192 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: warning: accessing fields in struct 'fgcom_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   39 | struct fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:39:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:40:15: warning: member variable 'frequency' has public visibility [misc-non-private-member-variables-in-classes]
   40 |         std::string  frequency; // tuned frequency (real carrier frequency)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:41:15: warning: member variable 'dialedFRQ' has public visibility [misc-non-private-member-variables-in-classes]
   41 |         std::string  dialedFRQ; // dialed frequency (aka "channel"; what was supplied from the COMn_FRQ= field)
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:42:8: warning: member variable 'power_btn' has public visibility [misc-non-private-member-variables-in-classes]
   42 |         bool  power_btn;     // true if switched on
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:43:8: warning: member variable 'volts' has public visibility [misc-non-private-member-variables-in-classes]
   43 |         float volts;         // how much electric power it has (>0 = on)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:44:8: warning: member variable 'serviceable' has public visibility [misc-non-private-member-variables-in-classes]
   44 |         bool  serviceable;   // false if broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:45:8: warning: member variable 'ptt' has public visibility [misc-non-private-member-variables-in-classes]
   45 |         bool  ptt;           // true if PTT is actually pushed (synced to remotes and used to determine reception)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:46:8: warning: member variable 'ptt_req' has public visibility [misc-non-private-member-variables-in-classes]
   46 |         bool  ptt_req;       // true if PTT is requested from client/udp
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:47:8: warning: member variable 'volume' has public visibility [misc-non-private-member-variables-in-classes]
   47 |         float volume;        // volume, 0.0->1.0
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:48:8: warning: member variable 'pwr' has public visibility [misc-non-private-member-variables-in-classes]
   48 |         float pwr;           // tx power in watts
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:49:8: warning: member variable 'operable' has public visibility [misc-non-private-member-variables-in-classes]
   49 |         bool  operable;      // false if switched off, not powered or broken
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:50:8: warning: member variable 'squelch' has public visibility [misc-non-private-member-variables-in-classes]
   50 |         float squelch;       // squelch setting (cutoff signal below this quality)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:51:8: warning: member variable 'rdfEnabled' has public visibility [misc-non-private-member-variables-in-classes]
   51 |         bool  rdfEnabled;    // if radio can receive RDF information
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:52:8: warning: member variable 'channelWidth' has public visibility [misc-non-private-member-variables-in-classes]
   52 |         float channelWidth;  // channel width in kHz
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:53:8: warning: member variable 'publish' has public visibility [misc-non-private-member-variables-in-classes]
   53 |         bool  publish;       // if set to false, radio will not be broadcast to other plugins (implies receive-only)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:56:14: warning: member variable 'antenna_type' has public visibility [misc-non-private-member-variables-in-classes]
   56 |         std::string antenna_type;      // Type of antenna (vertical, yagi, loop, etc.)
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:57:14: warning: member variable 'frequency_band' has public visibility [misc-non-private-member-variables-in-classes]
   57 |         std::string frequency_band;    // Frequency band for regulatory compliance
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:58:8: warning: member variable 'power_efficiency' has public visibility [misc-non-private-member-variables-in-classes]
   58 |         float power_efficiency;        // Current power efficiency (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:59:7: warning: member variable 'power_limiting_enabled' has public visibility [misc-non-private-member-variables-in-classes]
   59 |         bool power_limiting_enabled;   // Whether automatic power limiting is enabled
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:60:8: warning: member variable 'swr' has public visibility [misc-non-private-member-variables-in-classes]
   60 |         float swr;                     // Standing Wave Ratio
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:61:8: warning: member variable 'temperature' has public visibility [misc-non-private-member-variables-in-classes]
   61 |         float temperature;             // Antenna temperature in Celsius
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:62:8: warning: member variable 'battery_level' has public visibility [misc-non-private-member-variables-in-classes]
   62 |         float battery_level;           // Battery level (0.0-1.0)
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:64:2: warning: 'fgcom_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   64 |         fgcom_radio()  {
      |         ^
      |         LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:9: warning: 'frequency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   40 |         frequency   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:65:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   65 |         frequency   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:9: warning: 'dialedFRQ' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   41 |         dialedFRQ   = "";
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:66:21: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   66 |         dialedFRQ   = "";
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:67:9: warning: 'power_btn' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   42 |         power_btn   = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:9: warning: 'volts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   43 |         volts       = 12;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:68:23: warning: 12 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   68 |         volts       = 12;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:69:9: warning: 'serviceable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   44 |         serviceable = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:70:9: warning: 'ptt' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   45 |         ptt         = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:71:9: warning: 'ptt_req' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   46 |         ptt_req     = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:72:9: warning: 'volume' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   47 |         volume      = 1.0;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:9: warning: 'pwr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   48 |         pwr         = 10;
      |         ^~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:73:23: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   73 |         pwr         = 10;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:74:9: warning: 'operable' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   49 |         operable    = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:9: warning: 'squelch' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   50 |         squelch     = 0.1;
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:75:23: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   75 |         squelch     = 0.1;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:76:9: warning: 'rdfEnabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   51 |         rdfEnabled  = false;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:77:9: warning: 'channelWidth' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   52 |         channelWidth = -1;   // let the selected radio model decide on defaults
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:78:9: warning: 'publish' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   53 |         publish     = true;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:9: warning: 'antenna_type' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   56 |         antenna_type = "vertical";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:81:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |         antenna_type = "vertical";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:9: warning: 'frequency_band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   57 |         frequency_band = "amateur";
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:82:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   82 |         frequency_band = "amateur";
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:9: warning: 'power_efficiency' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   58 |         power_efficiency = 0.8f;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |         power_efficiency = 0.8f;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:83:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:84:9: warning: 'power_limiting_enabled' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   59 |         power_limiting_enabled = true;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:9: warning: 'swr' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   60 |         swr = 1.0f;
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:85:15: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   85 |         swr = 1.0f;
      |               ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:9: warning: 'temperature' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   61 |         temperature = 25.0f;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   86 |         temperature = 25.0f;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:86:23: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:9: warning: 'battery_level' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   62 |         battery_level = 1.0f;
      |         ^~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:87:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   87 |         battery_level = 1.0f;
      |                         ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to padding; only needs 105 bytes but is using 304 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_amateur_radio'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: warning: accessing fields in struct 'fgcom_amateur_radio' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   92 | struct fgcom_amateur_radio : public fgcom_radio {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:92:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_amateur_radio' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:93:17: warning: member variable 'band' has public visibility [misc-non-private-member-variables-in-classes]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:94:17: warning: member variable 'mode' has public visibility [misc-non-private-member-variables-in-classes]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:95:17: warning: member variable 'grid_locator' has public visibility [misc-non-private-member-variables-in-classes]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:96:11: warning: member variable 'power_watts' has public visibility [misc-non-private-member-variables-in-classes]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:97:10: warning: member variable 'is_amateur' has public visibility [misc-non-private-member-variables-in-classes]
   97 |     bool is_amateur;            // Amateur radio flag
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:98:9: warning: member variable 'itu_region' has public visibility [misc-non-private-member-variables-in-classes]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:5: warning: 'fgcom_amateur_radio' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:100:29: warning: initializer for base class 'fgcom_radio' is redundant [readability-redundant-member-init]
  100 |     fgcom_amateur_radio() : fgcom_radio() {
      |                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:9: warning: 'band' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   93 |     std::string band;           // "160m", "80m", "40m", "20m", etc.
      |                     
      |                     {""}
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
      |         ^~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:101:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  101 |         band = "";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:9: warning: 'mode' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   94 |     std::string mode;           // "CW", "LSB", "USB", "NFM", "AM"
      |                     
      |                     {"USB"}
   95 |     std::string grid_locator;   // Maidenhead grid square
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
      |         ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:102:14: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  102 |         mode = "USB";
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:9: warning: 'grid_locator' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   95 |     std::string grid_locator;   // Maidenhead grid square
      |                             
      |                             {""}
   96 |     float power_watts;          // Transmit power (50W-1000W)
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
      |         ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:103:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |         grid_locator = "";
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:104:9: warning: 'power_watts' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   96 |     float power_watts;          // Transmit power (50W-1000W)
      |                      
      |                      {100.0}
   97 |     bool is_amateur;            // Amateur radio flag
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:105:9: warning: 'is_amateur' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   97 |     bool is_amateur;            // Amateur radio flag
      |                    
      |                    {false}
   98 |     int itu_region;             // ITU Region (1, 2, 3)
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:106:9: warning: 'itu_region' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   98 |     int itu_region;             // ITU Region (1, 2, 3)
      |                   
      |                   {1}
   99 |     
  100 |     fgcom_amateur_radio() : fgcom_radio() {
  101 |         band = "";
  102 |         mode = "USB";
  103 |         grid_locator = "";
  104 |         power_watts = 100.0;
  105 |         is_amateur = false;
  106 |         itu_region = 1;  // Default to Region 1
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: warning: accessing fields in struct 'fgcom_radiowave_signal' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
  113 | struct fgcom_radiowave_signal {
      |        ^
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
  122 |     };
  123 | };
      |  
      |   __attribute__((aligned(16)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:113:8: note: use "__attribute__((aligned(16)))" to align struct 'fgcom_radiowave_signal' to 16 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:114:11: warning: member variable 'quality' has public visibility [misc-non-private-member-variables-in-classes]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:115:11: warning: member variable 'direction' has public visibility [misc-non-private-member-variables-in-classes]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:116:11: warning: member variable 'verticalAngle' has public visibility [misc-non-private-member-variables-in-classes]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:118:5: warning: 'fgcom_radiowave_signal' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  118 |     fgcom_radiowave_signal()  {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:119:9: warning: 'quality' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  114 |     float quality;        // 0.0=no signal, 1.0=perfect signal
      |                  
      |                  {-1}
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:120:9: warning: 'direction' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  115 |     float direction;      // 0.0=north, 90=east, 180=south, 270=west
      |                    
      |                    {-1}
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:121:9: warning: 'verticalAngle' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
  116 |     float verticalAngle;  // 0.0=straight, 90=above, -90=below
      |                        
      |                        {-1}
  117 |     
  118 |     fgcom_radiowave_signal()  {
  119 |         quality       = -1;
  120 |         direction     = -1;
  121 |         verticalAngle = -1;
      |         ^~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to padding; only needs 65 bytes but is using 72 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_radiowave_freqConvRes'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: warning: accessing fields in struct 'fgcom_radiowave_freqConvRes' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  127 | struct fgcom_radiowave_freqConvRes {
      |        ^
  128 |     std::string prefix;    // extracted prefix
  129 |     std::string frequency; // extracted and converted frequency
  130 |     bool isNumeric;        // tells if frequency is a valid numeric
  131 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:127:8: note: use "__attribute__((aligned(128)))" to align struct 'fgcom_radiowave_freqConvRes' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:6: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      | ~~~~ ^                                         
      | auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:139:46: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  139 | bool fgcom_radio_updateOperable(fgcom_radio &r);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: warning: destructor of 'FGCom_radiowaveModel' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
  148 | class FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:148:7: note: make it public and virtual
  148 | class FGCom_radiowaveModel {
      |       ^
  149 | public:
      |        
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:161:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     virtual std::string getType() = 0;  // pure-virtual: cannot be provided by the base class
      |             ~~~~~~~~~~~ ^
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:176:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) = 0;
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^
      |             auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:185:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  185 |     virtual std::string conv_chan2freq(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:194:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |     virtual std::string conv_freq2chan(std::string frq) = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |             ~~~~~ ^
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:208:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  208 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) = 0;
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:247:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  247 |     virtual float getChannelAlignment(float frq1_real, float frq2_real, float width_kHz, float core_kHz);
      |             ~~~~~ ^                                                                                     
      |             auto                                                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:256:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  256 |     virtual bool isCompatible(FGCom_radiowaveModel *otherModel);
      |             ~~~~ ^                                             
      |             auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     virtual double getDistToHorizon(float h);
      |             ~~~~~~ ^                        
      |             auto                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:265:43: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  265 |     virtual double getDistToHorizon(float h);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |             ~~~~~~ ^                                                  
      |             auto                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:58: warning: parameter name 'hA' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:276:68: warning: parameter name 'hB' is too short, expected at least 3 characters [readability-identifier-length]
  276 |     virtual double heightAboveHorizon(double dist, float hA, float hB);
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:286:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  286 |     virtual double getSlantDistance(double surfacedist, double hah);
      |             ~~~~~~ ^                                               
      |             auto                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:296:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 |     virtual double degreeAboveHorizon(double surfacedist, double hah);
      |             ~~~~~~ ^                                                 
      |             auto                                                      -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:307:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     virtual double getDirection(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                               
      |             auto                                                                    -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:319:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  319 |     virtual double getSurfaceDistance(double lat1, double lon1, double lat2, double lon2);
      |             ~~~~~~ ^                                                                     
      |             auto                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:338:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  338 |     static std::unique_ptr<FGCom_radiowaveModel> selectModel(std::string freq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                            
      |            auto                                                                -> std::unique_ptr<FGCom_radiowaveModel>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                               
      |            auto                                                         -> fgcom_radiowave_freqConvRes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:17:1: warning: #includes are not sorted properly [llvm-include-order]
   17 | #include <iostream> 
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:17:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:17:1: warning: included header iostream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:18:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   18 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   19 | #include <regex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:19:1: warning: system include regex not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <regex>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:19:1: warning: included header regex is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:21:1: warning: included header audio.h is not used directly [misc-include-cleaner]
   21 | #include "audio.h"
      | ^~~~~~~~~~~~~~~~~~
   22 | #include "solar_data.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:32:7: warning: destructor of 'FGCom_radiowaveModel_HF' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
   32 | class FGCom_radiowaveModel_HF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:32:7: note: make it public and virtual
   32 | class FGCom_radiowaveModel_HF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:32:7: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   32 | class FGCom_radiowaveModel_HF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:45:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   45 |     virtual float calcPowerDistance(float power, double slantDist) {
      |             ~~~~~ ^
      |             auto                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:45:37: warning: 2 adjacent parameters of 'calcPowerDistance' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
   45 |     virtual float calcPowerDistance(float power, double slantDist) {
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:45:43: note: the first parameter in the range is 'power'
   45 |     virtual float calcPowerDistance(float power, double slantDist) {
      |                                           ^~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:45:57: note: the last parameter in the range is 'slantDist'
   45 |     virtual float calcPowerDistance(float power, double slantDist) {
      |                                                         ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:45:50: note: 'float' and 'double' may be implicitly converted
   45 |     virtual float calcPowerDistance(float power, double slantDist) {
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:47:31: warning: 'getInstance' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   47 |         auto& power_manager = FGCom_PowerManager::getInstance();
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/power_management.h:107:32: note: resolves to this declaration
  107 |     static FGCom_PowerManager& getInstance();
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:61:9: warning: variable 'wr' of type 'float' can be declared 'const' [misc-const-correctness]
   61 |         float wr = effective_power * 1000; // gives maximum range in km for the effective power
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:61:15: warning: variable name 'wr' is too short, expected at least 3 characters [readability-identifier-length]
   61 |         float wr = effective_power * 1000; // gives maximum range in km for the effective power
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:61:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   61 |         float wr = effective_power * 1000; // gives maximum range in km for the effective power
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:62:15: warning: variable name 'sq' is too short, expected at least 3 characters [readability-identifier-length]
   62 |         float sq = (-1/wr*pow(slantDist,2)+100)/100;
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:62:20: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
   62 |         float sq = (-1/wr*pow(slantDist,2)+100)/100;
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:62:44: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   62 |         float sq = (-1/wr*pow(slantDist,2)+100)/100;
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:62:49: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   62 |         float sq = (-1/wr*pow(slantDist,2)+100)/100;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:71:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   71 |     float calcSkywavePropagation(double distance, const fgcom_solar_conditions& solar, double solar_zenith) {
      |     ~~~~~ ^
      |     auto                                                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:71:11: warning: method 'calcSkywavePropagation' can be made static [readability-convert-member-functions-to-static]
   71 |     float calcSkywavePropagation(double distance, const fgcom_solar_conditions& solar, double solar_zenith) {
      |           ^
      |     static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:72:32: warning: 0.7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   72 |         float skywave_factor = 0.7; // Base skywave efficiency
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:75:33: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
   75 |         float distance_factor = 1.0f - (distance / 10000.0f); // Reduce efficiency with distance
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:75:33: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   75 |         float distance_factor = 1.0f - (distance / 10000.0f); // Reduce efficiency with distance
      |                                 ^  ~
      |                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:75:52: warning: 10000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   75 |         float distance_factor = 1.0f - (distance / 10000.0f); // Reduce efficiency with distance
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:75:52: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   75 |         float distance_factor = 1.0f - (distance / 10000.0f); // Reduce efficiency with distance
      |                                                    ^      ~
      |                                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:76:31: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   76 |         if (distance_factor < 0.1f) distance_factor = 0.1f;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:76:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   76 |         if (distance_factor < 0.1f) distance_factor = 0.1f;
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:76:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   76 |         if (distance_factor < 0.1f) distance_factor = 0.1f;
      |                                    ^                       
      |                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:76:55: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   76 |         if (distance_factor < 0.1f) distance_factor = 0.1f;
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:76:55: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   76 |         if (distance_factor < 0.1f) distance_factor = 0.1f;
      |                                                       ^  ~
      |                                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:80:9: warning: variable 'sfi_effect' of type 'float' can be declared 'const' [misc-const-correctness]
   80 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.3;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:80:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
   80 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.3;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:80:41: warning: 70.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   80 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.3;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:80:57: warning: 0.3 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   80 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.3;
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:84:29: warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   84 |         if (solar.k_index > 4.0) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:85:31: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
   85 |             skywave_factor *= (1.0 - (solar.k_index - 4.0) / 5.0 * 0.5);
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:85:55: warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   85 |             skywave_factor *= (1.0 - (solar.k_index - 4.0) / 5.0 * 0.5);
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:85:62: warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   85 |             skywave_factor *= (1.0 - (solar.k_index - 4.0) / 5.0 * 0.5);
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:85:68: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   85 |             skywave_factor *= (1.0 - (solar.k_index - 4.0) / 5.0 * 0.5);
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:89:28: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   89 |         if (solar_zenith < 90.0) { // Daytime
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:90:31: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   90 |             skywave_factor *= 0.8; // D-layer absorption
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:92:31: warning: 1.2 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   92 |             skywave_factor *= 1.2; // Better propagation
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:16: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   95 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:21: warning: no header providing "std::max" is directly included [misc-include-cleaner]
   17 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:25: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   95 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:31: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   95 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:36: warning: no header providing "std::min" is directly included [misc-include-cleaner]
   95 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:40: warning: 1.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   95 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:95:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   95 |         return std::max(0.1f, std::min(1.5f, skywave_factor));
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:99:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     float calcLineOfSightPropagation(double distance, const fgcom_solar_conditions& solar, double solar_zenith) {
      |     ~~~~~ ^
      |     auto                                                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:99:11: warning: method 'calcLineOfSightPropagation' can be made static [readability-convert-member-functions-to-static]
   99 |     float calcLineOfSightPropagation(double distance, const fgcom_solar_conditions& solar, double solar_zenith) {
      |           ^
      |     static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:103:38: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  103 |         float distance_attenuation = 1.0f - (distance / 5000.0f); // LOS degrades with distance
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:103:38: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  103 |         float distance_attenuation = 1.0f - (distance / 5000.0f); // LOS degrades with distance
      |                                      ^  ~
      |                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:103:57: warning: 5000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  103 |         float distance_attenuation = 1.0f - (distance / 5000.0f); // LOS degrades with distance
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:103:57: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  103 |         float distance_attenuation = 1.0f - (distance / 5000.0f); // LOS degrades with distance
      |                                                         ^     ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:104:36: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  104 |         if (distance_attenuation < 0.2f) distance_attenuation = 0.2f;
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:104:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  104 |         if (distance_attenuation < 0.2f) distance_attenuation = 0.2f;
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:104:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  104 |         if (distance_attenuation < 0.2f) distance_attenuation = 0.2f;
      |                                         ^                            
      |                                          {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:104:65: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  104 |         if (distance_attenuation < 0.2f) distance_attenuation = 0.2f;
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:104:65: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  104 |         if (distance_attenuation < 0.2f) distance_attenuation = 0.2f;
      |                                                                 ^  ~
      |                                                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:108:9: warning: variable 'zenith_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  108 |         float zenith_effect = 1.0f - (solar_zenith / 90.0f) * 0.2f; // Better conditions at lower zenith
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:108:31: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  108 |         float zenith_effect = 1.0f - (solar_zenith / 90.0f) * 0.2f; // Better conditions at lower zenith
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:108:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  108 |         float zenith_effect = 1.0f - (solar_zenith / 90.0f) * 0.2f; // Better conditions at lower zenith
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:108:54: warning: 90.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  108 |         float zenith_effect = 1.0f - (solar_zenith / 90.0f) * 0.2f; // Better conditions at lower zenith
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:108:54: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  108 |         float zenith_effect = 1.0f - (solar_zenith / 90.0f) * 0.2f; // Better conditions at lower zenith
      |                                                      ^   ~
      |                                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:108:63: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  108 |         float zenith_effect = 1.0f - (solar_zenith / 90.0f) * 0.2f; // Better conditions at lower zenith
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:108:63: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  108 |         float zenith_effect = 1.0f - (solar_zenith / 90.0f) * 0.2f; // Better conditions at lower zenith
      |                                                               ^  ~
      |                                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:112:9: warning: variable 'sfi_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  112 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.1;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:112:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  112 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.1;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:112:41: warning: 70.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  112 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.1;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:112:57: warning: 0.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  112 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.1;
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:116:29: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  116 |         if (solar.k_index > 6.0) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:117:27: warning: 0.95 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  117 |             los_factor *= 0.95; // Slight degradation
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:120:16: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  120 |         return std::max(0.8f, std::min(1.2f, los_factor));
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:120:25: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  120 |         return std::max(0.8f, std::min(1.2f, los_factor));
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:120:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  120 |         return std::max(0.8f, std::min(1.2f, los_factor));
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:120:31: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  120 |         return std::max(0.8f, std::min(1.2f, los_factor));
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:120:40: warning: 1.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  120 |         return std::max(0.8f, std::min(1.2f, los_factor));
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:120:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  120 |         return std::max(0.8f, std::min(1.2f, los_factor));
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:124:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 |     float calcSolarEffects(const fgcom_solar_conditions& solar, double solar_zenith, double distance) {
      |     ~~~~~ ^
      |     auto                                                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:124:11: warning: method 'calcSolarEffects' can be made static [readability-convert-member-functions-to-static]
  124 |     float calcSolarEffects(const fgcom_solar_conditions& solar, double solar_zenith, double distance) {
      |           ^
      |     static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:124:65: warning: 2 adjacent parameters of 'calcSolarEffects' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  124 |     float calcSolarEffects(const fgcom_solar_conditions& solar, double solar_zenith, double distance) {
      |                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:124:72: note: the first parameter in the range is 'solar_zenith'
  124 |     float calcSolarEffects(const fgcom_solar_conditions& solar, double solar_zenith, double distance) {
      |                                                                        ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:124:93: note: the last parameter in the range is 'distance'
  124 |     float calcSolarEffects(const fgcom_solar_conditions& solar, double solar_zenith, double distance) {
      |                                                                                             ^~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:128:9: warning: variable 'sfi_effect' of type 'float' can be declared 'const' [misc-const-correctness]
  128 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.2;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:128:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  128 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.2;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:128:41: warning: 70.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  128 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.2;
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:128:57: warning: 0.2 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  128 |         float sfi_effect = (solar.sfi - 70.0) / 100.0 * 0.2;
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:132:29: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  132 |         if (solar.k_index > 2.0) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:133:23: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  133 |             effect *= (1.0 - (solar.k_index - 2.0) / 7.0 * 0.3);
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:133:47: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  133 |             effect *= (1.0 - (solar.k_index - 2.0) / 7.0 * 0.3);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:133:54: warning: 7.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  133 |             effect *= (1.0 - (solar.k_index - 2.0) / 7.0 * 0.3);
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:133:60: warning: 0.3 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  133 |             effect *= (1.0 - (solar.k_index - 2.0) / 7.0 * 0.3);
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:137:28: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  137 |         if (solar_zenith < 90.0) { // Daytime
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:138:23: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |             effect *= 0.9; // Slight degradation due to D-layer
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:140:23: warning: 1.1 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  140 |             effect *= 1.1; // Better propagation
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:144:24: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  144 |         if (distance > 1000.0) { // Long distance
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:145:23: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  145 |             effect *= (1.0 + sfi_effect * 0.5); // Solar flux more important for long distance
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:145:43: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  145 |             effect *= (1.0 + sfi_effect * 0.5); // Solar flux more important for long distance
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:148:16: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |         return std::max(0.3f, std::min(2.0f, effect));
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:148:25: warning: 0.3f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  148 |         return std::max(0.3f, std::min(2.0f, effect));
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:148:25: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  148 |         return std::max(0.3f, std::min(2.0f, effect));
      |                         ^  ~
      |                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:148:31: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |         return std::max(0.3f, std::min(2.0f, effect));
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:148:40: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  148 |         return std::max(0.3f, std::min(2.0f, effect));
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:148:40: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  148 |         return std::max(0.3f, std::min(2.0f, effect));
      |                                        ^  ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:154:10: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   20 |     std::string getType() {  return "HF";  }
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:154:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  154 |     std::string getType() {  return "HF";  }
      |                 ^
      |                           override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:154:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  154 |     std::string getType() {  return "HF";  }
      |     ~~~~~~~~~~~ ^
      |     auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:154:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  154 |     std::string getType() {  return "HF";  }
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:156:10: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  156 |     bool isCompatible(FGCom_radiowaveModel *otherModel) {
      |          ^
      |                                                         override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:156:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     bool isCompatible(FGCom_radiowaveModel *otherModel) {
      |     ~~~~ ^
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:157:38: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  157 |         return otherModel->getType() != "STRING";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:28: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                            ^
      |                                                                                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:51: warning: 2 adjacent parameters of 'getSignal' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:58: note: the first parameter in the range is 'lon1'
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                          ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:70: note: the last parameter in the range is 'alt1'
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                      ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:64: note: 'double' and 'float' may be implicitly converted
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:89: warning: 3 adjacent parameters of 'getSignal' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:96: note: the first parameter in the range is 'lon2'
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                                ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:120: note: the last parameter in the range is 'power'
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                                                        ^~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:162:102: note: 'double' and 'float' may be implicitly converted
  162 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:164:26: warning: 0.85 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  164 |         signal.quality = 0.85; // Base signal quality; but we will degrade that using the model below
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:167:9: warning: variable 'dist' of type 'double' can be declared 'const' [misc-const-correctness]
  167 |         double dist = this->getSurfaceDistance(lat1, lon1, lat2, lon2);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:171:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  171 |         if (signal.quality <= 0.0) signal.quality = 0.0; // in case signal strength got negative, that means we are out of range (too less tx-power)
      |                                   ^                                                                                                                 
      |                                    {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:174:9: warning: variable 'solar' of type 'fgcom_solar_conditions' can be declared 'const' [misc-const-correctness]
  174 |         fgcom_solar_conditions solar = solar_provider.getCurrentConditions();
      |         ^
      |                                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:177:9: warning: variable 'mid_lat' of type 'double' can be declared 'const' [misc-const-correctness]
  177 |         double mid_lat = (lat1 + lat2) / 2.0;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:177:42: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  177 |         double mid_lat = (lat1 + lat2) / 2.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:178:9: warning: variable 'mid_lon' of type 'double' can be declared 'const' [misc-const-correctness]
  178 |         double mid_lon = (lon1 + lon2) / 2.0;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:178:42: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  178 |         double mid_lon = (lon1 + lon2) / 2.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:179:9: warning: variable 'solar_zenith' of type 'double' can be declared 'const' [misc-const-correctness]
  179 |         double solar_zenith = solar_provider.calculateSolarZenith(mid_lat, mid_lon, std::chrono::system_clock::now());
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:179:85: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  179 |         double solar_zenith = solar_provider.calculateSolarZenith(mid_lat, mid_lon, std::chrono::system_clock::now());
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:179:98: warning: no header providing "std::chrono::system_clock" is directly included [misc-include-cleaner]
   17 |         double solar_zenith = solar_provider.calculateSolarZenith(mid_lat, mid_lon, std::chrono::system_clock::now());
      |                                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:182:9: warning: variable 'heightAboveHorizon' of type 'double' can be declared 'const' [misc-const-correctness]
  182 |         double heightAboveHorizon = this->heightAboveHorizon(dist, alt1, alt2);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:195:26: warning: 'max<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  195 |         signal.quality = std::max(0.0f, std::min(1.0f, signal.quality));
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:195:35: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  195 |         signal.quality = std::max(0.0f, std::min(1.0f, signal.quality));
      |                                   ^  ~
      |                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:195:41: warning: 'min<float>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  195 |         signal.quality = std::max(0.0f, std::min(1.0f, signal.quality));
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:195:50: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  195 |         signal.quality = std::max(0.0f, std::min(1.0f, signal.quality));
      |                                                  ^  ~
      |                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:198:32: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  198 |         signal.direction     = this->getDirection(lat1, lon1, lat2, lon2);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:199:32: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  199 |         signal.verticalAngle = this->degreeAboveHorizon(dist, alt2-alt1);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:205:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  205 |     std::string conv_chan2freq(std::string frq) {
      |                 ^
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:205:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  205 |     std::string conv_chan2freq(std::string frq) {
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:209:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  209 |     std::string conv_freq2chan(std::string frq) {
      |                 ^
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:209:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  209 |     std::string conv_freq2chan(std::string frq) {
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:214:11: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  214 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |           ^
      |                                                       override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:214:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  214 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |     ~~~~~ ^
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:214:35: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  214 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:214:51: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  214 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:215:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  215 |         if (r1.ptt)       return 0.0; // Half-duplex!
      |                    ^                                 
      |                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:216:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  216 |         if (!r1.operable) return 0.0; // stop if radio is inoperable
      |                          ^                                          
      |                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:223:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  223 |         if (width_kHz <= 0) width_kHz = 3.0;   // Standard 3kHz channel spacing for HF SSB
      |                            ^                                                              
      |                             {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:223:41: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  223 |         if (width_kHz <= 0) width_kHz = 3.0;   // Standard 3kHz channel spacing for HF SSB
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:224:9: warning: variable 'channel_core' of type 'float' can be declared 'const' [misc-const-correctness]
  224 |         float channel_core = width_kHz / 3.0;  // Channel core is 1/3 of channel width for HF
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:224:30: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  224 |         float channel_core = width_kHz / 3.0;  // Channel core is 1/3 of channel width for HF
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:224:42: warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  224 |         float channel_core = width_kHz / 3.0;  // Channel core is 1/3 of channel width for HF
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:230:13: warning: variable 'frq1_p' of type 'fgcom_radiowave_freqConvRes' can be declared 'const' [misc-const-correctness]
  230 |             fgcom_radiowave_freqConvRes frq1_p = FGCom_radiowaveModel::splitFreqString(r1.frequency);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:230:50: warning: 'splitFreqString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  230 |             fgcom_radiowave_freqConvRes frq1_p = FGCom_radiowaveModel::splitFreqString(r1.frequency);
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: note: resolves to this declaration
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:231:13: warning: variable 'frq2_p' of type 'fgcom_radiowave_freqConvRes' can be declared 'const' [misc-const-correctness]
  231 |             fgcom_radiowave_freqConvRes frq2_p = FGCom_radiowaveModel::splitFreqString(r2.frequency);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:231:50: warning: 'splitFreqString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  231 |             fgcom_radiowave_freqConvRes frq2_p = FGCom_radiowaveModel::splitFreqString(r2.frequency);
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: note: resolves to this declaration
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:234:17: warning: variable 'frq1_f' of type 'float' can be declared 'const' [misc-const-correctness]
  234 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                 ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:234:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  234 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:234:32: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  234 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:234:37: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
  234 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:235:17: warning: variable 'frq2_f' of type 'float' can be declared 'const' [misc-const-correctness]
  235 |                 float frq2_f = std::stof(frq2_p.frequency);
      |                 ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:235:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  235 |                 float frq2_f = std::stof(frq2_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:235:32: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  235 |                 float frq2_f = std::stof(frq2_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:238:15: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  238 |             } else {
      |               ^~~~~~
  239 |                 // not numeric: return default
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  240 |                 return filter;
      |                 ~~~~~~~~~~~~~~
  241 |             }
      |             ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:242:29: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
   17 |         } catch (const std::exception& e) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:10: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  252 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |          ^
      |                                                                                                                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:91: warning: no header providing "uint32_t" is directly included [misc-include-cleaner]
   17 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:113: warning: 2 adjacent parameters of 'processAudioSamples' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  252 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:122: note: the first parameter in the range is 'channelCount'
  252 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                          ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:145: note: the last parameter in the range is 'sampleRateHz'
  252 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                                 ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:113: note: 
  252 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:136: note: 'uint16_t' and 'uint32_t' may be implicitly converted: 'uint16_t' (as 'unsigned short') -> 'uint32_t' (as 'unsigned int'), 'uint32_t' (as 'unsigned int') -> 'uint16_t' (as 'unsigned short')
  252 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:252:113: warning: no header providing "uint16_t" is directly included [misc-include-cleaner]
  252 |     void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:254:9: warning: missing username/bug in TODO [google-readability-todo]
  254 |         // TODO: Fix VHF class usage - temporarily commented out
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         // TODO(haaken): Fix VHF class usage - temporarily commented out
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:259:9: warning: variable 'volume_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  259 |         float volume_factor = lclRadio.volume / 100.0f; // Use radio volume
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:259:49: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  259 |         float volume_factor = lclRadio.volume / 100.0f; // Use radio volume
      |                                                 ^    ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:260:9: warning: variable 'sample_rate_factor' of type 'float' can be declared 'const' [misc-const-correctness]
  260 |         float sample_rate_factor = 48000.0f / sampleRateHz; // Normalize to 48kHz reference
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:260:36: warning: 48000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  260 |         float sample_rate_factor = 48000.0f / sampleRateHz; // Normalize to 48kHz reference
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:260:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  260 |         float sample_rate_factor = 48000.0f / sampleRateHz; // Normalize to 48kHz reference
      |                                    ^      ~
      |                                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:260:47: warning: narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  260 |         float sample_rate_factor = 48000.0f / sampleRateHz; // Normalize to 48kHz reference
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:263:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  263 |         for (uint32_t i = 0; i < sampleCount * channelCount; i++) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:264:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  264 |             outputPCM[i] *= signalQuality * volume_factor * sample_rate_factor;
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:270:1: warning: static objects are disallowed; if possible, use a constexpr constructor instead [fuchsia-statically-constructed-objects]
  270 | FGCom_SolarDataProvider FGCom_radiowaveModel_HF::solar_provider;
      | ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:270:50: warning: initialization of 'solar_provider' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
  270 | FGCom_SolarDataProvider FGCom_radiowaveModel_HF::solar_provider;
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:69:5: note: possibly throwing constructor declared here
   69 |     FGCom_SolarDataProvider();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_hf.cpp:270:50: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  270 | FGCom_SolarDataProvider FGCom_radiowaveModel_HF::solar_provider;
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:17:1: warning: #includes are not sorted properly [llvm-include-order]
   17 | #include <iostream> 
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:17:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   17 | #include <iostream> 
      | ^~~~~~~~~~~~~~~~~~~
   18 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:18:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   18 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   19 | #include <regex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:19:1: warning: system include regex not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <regex>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:19:1: warning: included header regex is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:21:1: warning: included header audio.h is not used directly [misc-include-cleaner]
   21 | #include "audio.h"
      | ^~~~~~~~~~~~~~~~~~
   22 | #include "pattern_interpolation.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:32:7: warning: class 'FGCom_radiowaveModel_UHF' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   32 | class FGCom_radiowaveModel_UHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:32:7: warning: destructor of 'FGCom_radiowaveModel_UHF' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:32:7: note: make it public and virtual
   32 | class FGCom_radiowaveModel_UHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:32:7: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   32 | class FGCom_radiowaveModel_UHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:35:10: warning: no header providing "std::unique_ptr" is directly included [misc-include-cleaner]
   19 |     std::unique_ptr<FGCom_PatternInterpolation> uhf_pattern_interpolation;
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:37:10: warning: use default member initializer for 'uhf_patterns_initialized' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   37 |     bool uhf_patterns_initialized;
      |          ^                       
      |                                  {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:41:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   41 |         if (uhf_patterns_initialized) return;
      |                                      ^       
      |                                       {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:43:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   43 |         uhf_pattern_interpolation = std::make_unique<FGCom_PatternInterpolation>();
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:43:37: warning: 'make_unique<FGCom_PatternInterpolation>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   43 |         uhf_pattern_interpolation = std::make_unique<FGCom_PatternInterpolation>();
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:43:42: warning: no header providing "std::make_unique" is directly included [misc-include-cleaner]
   43 |         uhf_pattern_interpolation = std::make_unique<FGCom_PatternInterpolation>();
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:44:28: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   44 |         uhf_antenna_system = std::make_unique<FGCom_AntennaGroundSystem>();
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:44:30: warning: 'make_unique<FGCom_AntennaGroundSystem>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   44 |         uhf_antenna_system = std::make_unique<FGCom_AntennaGroundSystem>();
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:64:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   64 |             g_antenna_pattern_mapping = std::make_unique<FGCom_AntennaPatternMapping>();
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:64:41: warning: 'make_unique<FGCom_AntennaPatternMapping>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   64 |             g_antenna_pattern_mapping = std::make_unique<FGCom_AntennaPatternMapping>();
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:68:9: warning: variable 'uhf_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
   68 |         std::vector<AntennaPatternInfo> uhf_patterns = 
      |         ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:68:14: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
   20 |         std::vector<AntennaPatternInfo> uhf_patterns = 
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:69:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |             g_antenna_pattern_mapping->getAvailableUHFPatterns("ground_station");
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:69:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   69 |             g_antenna_pattern_mapping->getAvailableUHFPatterns("ground_station");
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:71:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   71 |         for (const auto& pattern_info : uhf_patterns) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:71:39: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   71 |         for (const auto& pattern_info : uhf_patterns) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:71:39: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   71 |         for (const auto& pattern_info : uhf_patterns) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:71:39: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   71 |         for (const auto& pattern_info : uhf_patterns) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:72:42: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   72 |             if (uhf_pattern_interpolation->load4NEC2Pattern(
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:75:27: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |                 std::cout << "Loaded UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:75:53: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |                 std::cout << "Loaded UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:75:82: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |                 std::cout << "Loaded UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:75:85: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   75 |                 std::cout << "Loaded UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:75:85: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   75 |                 std::cout << "Loaded UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                     ^~~~~~~~~
      |                                                                                     '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:82:9: warning: variable 'default_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
   82 |         std::vector<AntennaPatternInfo> default_patterns = 
      |         ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:83:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   83 |             g_antenna_pattern_mapping->getAvailableUHFPatterns("default");
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:83:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   83 |             g_antenna_pattern_mapping->getAvailableUHFPatterns("default");
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:85:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   85 |         for (const auto& pattern_info : default_patterns) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:85:39: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   85 |         for (const auto& pattern_info : default_patterns) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:85:39: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   85 |         for (const auto& pattern_info : default_patterns) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:85:39: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   85 |         for (const auto& pattern_info : default_patterns) {
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:86:42: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   86 |             if (uhf_pattern_interpolation->load4NEC2Pattern(
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:89:27: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |                 std::cout << "Loaded civilian UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:89:62: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |                 std::cout << "Loaded civilian UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:89:91: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |                 std::cout << "Loaded civilian UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:89:94: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   89 |                 std::cout << "Loaded civilian UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:89:94: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |                 std::cout << "Loaded civilian UHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                              ^~~~~~~~~
      |                                                                                              '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:95:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   95 |     double getUHFGain(const std::string& antenna_name, int altitude_m, 
      |     ~~~~~~ ^
      |     auto
   96 |                      double frequency_mhz, double theta_deg, double phi_deg,
   97 |                      int roll_deg = 0, int pitch_deg = 0) {
      |                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:97:22: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   97 |                      int roll_deg = 0, int pitch_deg = 0) {
      |                      ^            ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:97:40: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   97 |                      int roll_deg = 0, int pitch_deg = 0) {
      |                                        ^             ~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:107:38: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  107 |         if (uhf_pattern_interpolation->has3DAttitudePattern(antenna_name)) {
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:108:45: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  108 |             return uhf_pattern_interpolation->get3DAttitudeGain(
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:114:41: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |         return uhf_pattern_interpolation->getInterpolatedGain(
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:119:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  119 |     std::string getUHFAntennaName(const std::string& vehicle_type, double frequency_mhz) {
      |     ~~~~~~~~~~~ ^
      |     auto                                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:119:17: warning: method 'getUHFAntennaName' can be made static [readability-convert-member-functions-to-static]
  119 |     std::string getUHFAntennaName(const std::string& vehicle_type, double frequency_mhz) {
      |                 ^
      |     static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:121:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  121 |             g_antenna_pattern_mapping = std::make_unique<FGCom_AntennaPatternMapping>();
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:121:41: warning: 'make_unique<FGCom_AntennaPatternMapping>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  121 |             g_antenna_pattern_mapping = std::make_unique<FGCom_AntennaPatternMapping>();
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:125:68: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  125 |         AntennaPatternInfo pattern_info = g_antenna_pattern_mapping->getUHFPattern(vehicle_type, frequency_mhz);
      |                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:132:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  132 |         pattern_info = g_antenna_pattern_mapping->getClosestUHFPattern(vehicle_type, frequency_mhz);
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/antenna_pattern_mapping.h:18:8: note: resolves to this declaration
   18 | struct AntennaPatternInfo {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:132:49: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  132 |         pattern_info = g_antenna_pattern_mapping->getClosestUHFPattern(vehicle_type, frequency_mhz);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:138:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  138 |         return "default_uhf";
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:160:19: warning: default arguments on virtual or override methods are prohibited [google-default-arguments]
  160 |     virtual float calcPowerDistance(float power, double slantDist, double frequency_mhz = 400.0, 
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:160:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  160 |     virtual float calcPowerDistance(float power, double slantDist, double frequency_mhz = 400.0, 
      |             ~~~~~ ^
      |             auto
  161 |                                    double altitude_m = 1000.0, double antenna_height_m = 10.0) {
      |                                                                                                -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:160:68: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  160 |     virtual float calcPowerDistance(float power, double slantDist, double frequency_mhz = 400.0, 
      |                                                                    ^                    ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:160:91: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  160 |     virtual float calcPowerDistance(float power, double slantDist, double frequency_mhz = 400.0, 
      |                                                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:161:36: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  161 |                                    double altitude_m = 1000.0, double antenna_height_m = 10.0) {
      |                                    ^                 ~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:161:56: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  161 |                                    double altitude_m = 1000.0, double antenna_height_m = 10.0) {
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:161:64: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  161 |                                    double altitude_m = 1000.0, double antenna_height_m = 10.0) {
      |                                                                ^                       ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:161:90: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  161 |                                    double altitude_m = 1000.0, double antenna_height_m = 10.0) {
      |                                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:167:27: warning: 'getAtmosphericConditions' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |         auto conditions = FGCom_PropagationPhysics::getAtmosphericConditions(0.0, 0.0, altitude_m);
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:24:34: note: resolves to this declaration
   24 |     static AtmosphericConditions getAtmosphericConditions(double latitude, double longitude, double altitude);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:170:9: warning: variable 'total_loss_db' of type 'double' can be declared 'const' [misc-const-correctness]
  170 |         double total_loss_db = FGCom_PropagationPhysics::calculateTotalPropagationLoss(
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:170:32: warning: 'calculateTotalPropagationLoss' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  170 |         double total_loss_db = FGCom_PropagationPhysics::calculateTotalPropagationLoss(
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:27:19: note: resolves to this declaration
   27 |     static double calculateTotalPropagationLoss(
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:170:32: warning: 1st argument 'slantDist' (passed to 'frequency_mhz') looks like it might be swapped with the 2nd, 'frequency_mhz' (passed to 'distance_km') [readability-suspicious-call-argument]
  170 |         double total_loss_db = FGCom_PropagationPhysics::calculateTotalPropagationLoss(
      |                                ^
  171 |             slantDist, frequency_mhz, altitude_m, antenna_height_m,
      |             ~~~~~~~~~  ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/propagation_physics.h:27:19: note: in the call to 'calculateTotalPropagationLoss', declared here
   27 |     static double calculateTotalPropagationLoss(
      |                   ^
   28 |         double frequency_mhz,
      |                ~~~~~~~~~~~~~
   29 |         double distance_km,
      |                ~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:178:9: warning: variable 'power_dbm' of type 'double' can be declared 'const' [misc-const-correctness]
  178 |         double power_dbm = 10.0 * log10(power * 1000.0);  // Convert watts to dBm
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:178:28: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  178 |         double power_dbm = 10.0 * log10(power * 1000.0);  // Convert watts to dBm
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:178:49: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  178 |         double power_dbm = 10.0 * log10(power * 1000.0);  // Convert watts to dBm
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:181:9: warning: variable 'received_power_dbm' of type 'double' can be declared 'const' [misc-const-correctness]
  181 |         double received_power_dbm = power_dbm - total_loss_db;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:185:9: warning: variable 'sensitivity_dbm' of type 'double' can be declared 'const' [misc-const-correctness]
  185 |         double sensitivity_dbm = -110.0;  // Better sensitivity at UHF
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:185:35: warning: 110.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  185 |         double sensitivity_dbm = -110.0;  // Better sensitivity at UHF
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:186:9: warning: variable 'max_signal_dbm' of type 'double' can be declared 'const' [misc-const-correctness]
  186 |         double max_signal_dbm = 0.0;  // 0 dBm is very strong signal
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:188:9: warning: variable 'signal_quality' of type 'double' can be declared 'const' [misc-const-correctness]
  188 |         double signal_quality = std::max(0.0, std::min(1.0, 
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:188:33: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  188 |         double signal_quality = std::max(0.0, std::min(1.0, 
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:188:38: warning: no header providing "std::max" is directly included [misc-include-cleaner]
   17 |         double signal_quality = std::max(0.0, std::min(1.0, 
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:188:47: warning: 'min<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  188 |         double signal_quality = std::max(0.0, std::min(1.0, 
      |                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:188:52: warning: no header providing "std::min" is directly included [misc-include-cleaner]
  188 |         double signal_quality = std::max(0.0, std::min(1.0, 
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:195:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  195 |     virtual float calcPowerDistance(float power, double slantDist) {
      |             ~~~~~ ^
      |             auto                                                   -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:196:52: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  196 |         return calcPowerDistance(power, slantDist, 400.0, 1000.0, 10.0);
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:196:59: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  196 |         return calcPowerDistance(power, slantDist, 400.0, 1000.0, 10.0);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:196:67: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  196 |         return calcPowerDistance(power, slantDist, 400.0, 1000.0, 10.0);
      |                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:209:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  209 |     std::string getType() {  return "UHF";  }
      |                 ^
      |                           override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:209:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  209 |     std::string getType() {  return "UHF";  }
      |     ~~~~~~~~~~~ ^
      |     auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:209:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  209 |     std::string getType() {  return "UHF";  }
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:211:10: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  211 |     bool isCompatible(FGCom_radiowaveModel *otherModel) {
      |          ^
      |                                                         override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:211:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  211 |     bool isCompatible(FGCom_radiowaveModel *otherModel) {
      |     ~~~~ ^
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:212:38: warning: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  212 |         return otherModel->getType() != "STRING";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3815:5: note: resolves to this declaration
 3815 |     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:216:18: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  216 |     virtual void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |     ~~~~~~~      ^
      |                                                                                                                                                                       override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:216:99: warning: no header providing "uint32_t" is directly included [misc-include-cleaner]
   17 |     virtual void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:216:121: warning: no header providing "uint16_t" is directly included [misc-include-cleaner]
  216 |     virtual void processAudioSamples(fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:218:33: warning: 8000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  218 |         processAudioSamples_UHF(8000, 12000, 0.1f, 0.8f, lclRadio, signalQuality, outputPCM, sampleCount, channelCount, sampleRateHz);
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:218:39: warning: 12000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  218 |         processAudioSamples_UHF(8000, 12000, 0.1f, 0.8f, lclRadio, signalQuality, outputPCM, sampleCount, channelCount, sampleRateHz);
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:218:46: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  218 |         processAudioSamples_UHF(8000, 12000, 0.1f, 0.8f, lclRadio, signalQuality, outputPCM, sampleCount, channelCount, sampleRateHz);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:218:46: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  218 |         processAudioSamples_UHF(8000, 12000, 0.1f, 0.8f, lclRadio, signalQuality, outputPCM, sampleCount, channelCount, sampleRateHz);
      |                                              ^  ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:218:52: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  218 |         processAudioSamples_UHF(8000, 12000, 0.1f, 0.8f, lclRadio, signalQuality, outputPCM, sampleCount, channelCount, sampleRateHz);
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:218:52: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  218 |         processAudioSamples_UHF(8000, 12000, 0.1f, 0.8f, lclRadio, signalQuality, outputPCM, sampleCount, channelCount, sampleRateHz);
      |                                                    ^  ~
      |                                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:10: warning: method 'processAudioSamples_UHF' can be made static [readability-convert-member-functions-to-static]
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |          ^
      |     static 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:55: warning: 2 adjacent parameters of 'processAudioSamples_UHF' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:59: note: the first parameter in the range is 'lowpass_cutoff'
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                           ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:81: note: the last parameter in the range is 'minimumNoiseVolume'
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                 ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:75: note: 'int' and 'float' may be implicitly converted
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:139: warning: the parameter 'lclRadio' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                           ^
      |                                                                                                                               const      &
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:210: warning: 2 adjacent parameters of 'processAudioSamples_UHF' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:219: note: the first parameter in the range is 'channelCount'
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                                                                                                           ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:242: note: the last parameter in the range is 'sampleRateHz'
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                                                                                                                                  ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:210: note: 
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                                                                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:222:233: note: 'uint16_t' and 'uint32_t' may be implicitly converted: 'uint16_t' (as 'unsigned short') -> 'uint32_t' (as 'unsigned int'), 'uint32_t' (as 'unsigned int') -> 'uint16_t' (as 'unsigned short')
  222 |     void processAudioSamples_UHF(int highpass_cutoff, int lowpass_cutoff, float minimumNoiseVolume, float maximumNoiseVolume, fgcom_radio lclRadio, float signalQuality, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz) {
      |                                                                                                                                                                                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:227:31: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  227 |         float filter_factor = (highpass_cutoff + lowpass_cutoff) / 2000.0f; // Normalize filter frequencies
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:227:68: warning: 2000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  227 |         float filter_factor = (highpass_cutoff + lowpass_cutoff) / 2000.0f; // Normalize filter frequencies
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:227:68: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  227 |         float filter_factor = (highpass_cutoff + lowpass_cutoff) / 2000.0f; // Normalize filter frequencies
      |                                                                    ^     ~
      |                                                                          F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:228:29: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  228 |         if (filter_factor > 1.0f) filter_factor = 1.0f;
      |                             ^  ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:228:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  228 |         if (filter_factor > 1.0f) filter_factor = 1.0f;
      |                                  ^                     
      |                                   {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:228:51: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  228 |         if (filter_factor > 1.0f) filter_factor = 1.0f;
      |                                                   ^  ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:230:15: warning: variable 'noiseVolume' is not initialized [cppcoreguidelines-init-variables]
   17 |         float noiseVolume;
      |               ^          
      |                           = NAN
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:231:15: warning: variable 'signalVolume' is not initialized [cppcoreguidelines-init-variables]
  231 |         float signalVolume;
      |               ^           
      |                            = NAN
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:234:29: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  234 |         if (signalQuality > 0.8f) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:234:29: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  234 |         if (signalQuality > 0.8f) {
      |                             ^  ~
      |                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:237:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  237 |             signalVolume = 1.0f;
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:238:36: warning: 0.3f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  238 |         } else if (signalQuality > 0.3f) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:238:36: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  238 |         } else if (signalQuality > 0.3f) {
      |                                    ^  ~
      |                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:240:93: warning: 0.8f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  240 |             noiseVolume = minimumNoiseVolume + (maximumNoiseVolume - minimumNoiseVolume) * (0.8f - signalQuality) * 0.5f;
      |                                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:240:93: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  240 |             noiseVolume = minimumNoiseVolume + (maximumNoiseVolume - minimumNoiseVolume) * (0.8f - signalQuality) * 0.5f;
      |                                                                                             ^  ~
      |                                                                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:240:117: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  240 |             noiseVolume = minimumNoiseVolume + (maximumNoiseVolume - minimumNoiseVolume) * (0.8f - signalQuality) * 0.5f;
      |                                                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:240:117: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  240 |             noiseVolume = minimumNoiseVolume + (maximumNoiseVolume - minimumNoiseVolume) * (0.8f - signalQuality) * 0.5f;
      |                                                                                                                     ^  ~
      |                                                                                                                        F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:245:44: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |             signalVolume = signalQuality * 0.5f; // Reduce signal volume for weak signals
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:245:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  245 |             signalVolume = signalQuality * 0.5f; // Reduce signal volume for weak signals
      |                                            ^  ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:250:9: warning: variable 'radio_volume' of type 'float' can be declared 'const' [misc-const-correctness]
  250 |         float radio_volume = lclRadio.volume / 100.0f;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:250:48: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  250 |         float radio_volume = lclRadio.volume / 100.0f;
      |                                                ^    ~
      |                                                     F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:251:9: warning: variable 'sample_rate_normalization' of type 'float' can be declared 'const' [misc-const-correctness]
  251 |         float sample_rate_normalization = 48000.0f / sampleRateHz;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:251:43: warning: 48000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  251 |         float sample_rate_normalization = 48000.0f / sampleRateHz;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:251:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  251 |         float sample_rate_normalization = 48000.0f / sampleRateHz;
      |                                           ^      ~
      |                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:251:54: warning: narrowing conversion from 'uint32_t' (aka 'unsigned int') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  251 |         float sample_rate_normalization = 48000.0f / sampleRateHz;
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:253:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  253 |         for (uint32_t i = 0; i < sampleCount * channelCount; i++) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:255:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  255 |             outputPCM[i] *= signalVolume * radio_volume * filter_factor * sample_rate_normalization;
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:258:31: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  258 |             if (noiseVolume > 0.0f) {
      |                               ^  ~
      |                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:17: warning: variable 'noise' of type 'float' can be declared 'const' [misc-const-correctness]
  259 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                 ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:32: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  259 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                                ^~~~~~~
      |                                static_cast<float>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:39: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
  259 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:39: warning: function is not thread safe [concurrency-mt-unsafe]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:39: warning: 'rand' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/stdlib.h:573:12: note: resolves to this declaration
  573 | extern int rand (void) __THROW;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:39: warning: no header providing "rand" is directly included [misc-include-cleaner]
   17 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:48: warning: no header providing "RAND_MAX" is directly included [misc-include-cleaner]
  259 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:60: warning: 2.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  259 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:60: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  259 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                                                            ^  ~
      |                                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:259:67: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  259 |                 float noise = ((float)rand() / RAND_MAX) * 2.0f - 1.0f; // -1 to 1
      |                                                                   ^  ~
      |                                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:260:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  260 |                 outputPCM[i] += noise * noiseVolume;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:28: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                            ^
      |                                                                                                                               override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                                                                                      -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:51: warning: 2 adjacent parameters of 'getSignal' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:58: note: the first parameter in the range is 'lon1'
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                          ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:70: note: the last parameter in the range is 'alt1'
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                      ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:64: note: 'double' and 'float' may be implicitly converted
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:89: warning: 3 adjacent parameters of 'getSignal' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:96: note: the first parameter in the range is 'lon2'
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                                ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:120: note: the last parameter in the range is 'power'
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                                                        ^~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:266:102: note: 'double' and 'float' may be implicitly converted
  266 |     fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1, double lat2, double lon2, float alt2, float power) {
      |                                                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:270:9: warning: variable 'radiodist' of type 'double' can be declared 'const' [misc-const-correctness]
  270 |         double radiodist = this->getDistToHorizon(alt1) + this->getDistToHorizon(alt2);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:273:9: warning: variable 'dist' of type 'double' can be declared 'const' [misc-const-correctness]
  273 |         double dist = this->getSurfaceDistance(lat1, lon1, lat2, lon2);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:276:9: warning: variable 'heightAboveHorizon' of type 'double' can be declared 'const' [misc-const-correctness]
  276 |         double heightAboveHorizon = this->heightAboveHorizon(dist, alt1, alt2);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:277:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  277 |         if (heightAboveHorizon < 0) return signal;  // no, they cant, bail out without signal.
      |                                    ^                                                          
      |                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:280:9: warning: variable 'slantDist' of type 'double' can be declared 'const' [misc-const-correctness]
  280 |         double slantDist = this->getSlantDistance(dist, heightAboveHorizon-alt1);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:283:9: warning: variable 'frequency_mhz' of type 'double' can be declared 'const' [misc-const-correctness]
  283 |         double frequency_mhz = 400.0;  // Default UHF frequency - could be extracted from radio
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:283:32: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  283 |         double frequency_mhz = 400.0;  // Default UHF frequency - could be extracted from radio
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:284:9: warning: variable 'antenna_height_m' of type 'double' can be declared 'const' [misc-const-correctness]
  284 |         double antenna_height_m = 10.0;  // Default antenna height - could be vehicle-specific
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:284:35: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  284 |         double antenna_height_m = 10.0;  // Default antenna height - could be vehicle-specific
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:286:15: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  286 |         float ss = this->calcPowerDistance(power, slantDist, frequency_mhz, alt1, antenna_height_m);
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:287:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  287 |         if (ss <= 0.0) return signal; // in case signal strength got negative, that means we are out of range (too less tx-power)
      |                       ^                                                                                                          
      |                        {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:292:13: warning: variable 'theta_deg' of type 'double' can be declared 'const' [misc-const-correctness]
  292 |             double theta_deg = this->degreeAboveHorizon(dist, alt2-alt1);  // Elevation angle
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:293:13: warning: variable 'phi_deg' of type 'double' can be declared 'const' [misc-const-correctness]
  293 |             double phi_deg = this->getDirection(lat1, lon1, lat2, lon2);   // Azimuth angle
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:296:13: warning: variable 'frequency_mhz' of type 'double' can be declared 'const' [misc-const-correctness]
  296 |             double frequency_mhz = 400.0; // Default UHF frequency
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:296:36: warning: 400.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  296 |             double frequency_mhz = 400.0; // Default UHF frequency
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:299:13: warning: variable 'antenna_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  299 |             std::string antenna_name = getUHFAntennaName("default", frequency_mhz);
      |             ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:299:58: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  299 |             std::string antenna_name = getUHFAntennaName("default", frequency_mhz);
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:302:13: warning: variable 'antenna_gain_db' of type 'double' can be declared 'const' [misc-const-correctness]
  302 |             double antenna_gain_db = getUHFGain(antenna_name, (int)alt1, frequency_mhz, theta_deg, phi_deg);
      |             ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:302:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  302 |             double antenna_gain_db = getUHFGain(antenna_name, (int)alt1, frequency_mhz, theta_deg, phi_deg);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:97:22: note: default parameter was declared here
   97 |                      int roll_deg = 0, int pitch_deg = 0) {
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:302:63: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  302 |             double antenna_gain_db = getUHFGain(antenna_name, (int)alt1, frequency_mhz, theta_deg, phi_deg);
      |                                                               ^~~~~    
      |                                                               static_cast<int>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:305:36: warning: 999.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  305 |             if (antenna_gain_db > -999.0) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:307:17: warning: variable 'antenna_gain_linear' of type 'double' can be declared 'const' [misc-const-correctness]
  307 |                 double antenna_gain_linear = pow(10.0, antenna_gain_db / 10.0);
      |                 ^
      |                        const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:307:50: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  307 |                 double antenna_gain_linear = pow(10.0, antenna_gain_db / 10.0);
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:307:74: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  307 |                 double antenna_gain_linear = pow(10.0, antenna_gain_db / 10.0);
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:308:23: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  308 |                 ss *= antenna_gain_linear;
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:311:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  311 |                 if (ss > 1.0) ss = 1.0;
      |                              ^         
      |                               {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:313:11: warning: empty catch statements hide issues; to handle exceptions appropriately, consider re-throwing, handling, or avoiding catch altogether [bugprone-empty-catch]
  313 |         } catch (const std::exception& e) {
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:313:29: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
   17 |         } catch (const std::exception& e) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:319:9: warning: variable 'usedRange' of type 'float' can be declared 'const' [misc-const-correctness]
  319 |         float usedRange = slantDist/radiodist;
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:319:27: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  319 |         float usedRange = slantDist/radiodist;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:320:9: warning: variable 'usedRange_cutoffPct' of type 'float' can be declared 'const' [misc-const-correctness]
  320 |         float usedRange_cutoffPct = 0.9; // at which percent of used radio horizon we start to cut off
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:320:37: warning: 0.9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  320 |         float usedRange_cutoffPct = 0.9; // at which percent of used radio horizon we start to cut off
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:322:13: warning: variable 'loss' of type 'float' can be declared 'const' [misc-const-correctness]
  322 |             float loss    = (usedRange - usedRange_cutoffPct) * 10; //convert to percent range: 0.9=0%  0.95=0.5(50%)  1.0=1.0(100%)
      |             ^
      |                   const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:322:65: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  322 |             float loss    = (usedRange - usedRange_cutoffPct) * 10; //convert to percent range: 0.9=0%  0.95=0.5(50%)  1.0=1.0(100%)
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:328:32: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  328 |         signal.direction     = this->getDirection(lat1, lon1, lat2, lon2);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:329:32: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  329 |         signal.verticalAngle = this->degreeAboveHorizon(dist, alt2-alt1);
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:335:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  335 |     std::string conv_chan2freq(std::string frq) {
      |                 ^
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:335:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  335 |     std::string conv_chan2freq(std::string frq) {
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:339:17: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  339 |     std::string conv_freq2chan(std::string frq) {
      |                 ^
      |                                                 override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:339:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  339 |     std::string conv_freq2chan(std::string frq) {
      |     ~~~~~~~~~~~ ^
      |     auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:344:11: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
  344 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |           ^
      |                                                       override
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:344:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  344 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |     ~~~~~ ^
      |     auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:344:35: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  344 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:344:51: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  344 |     float getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:345:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  345 |         if (r1.ptt)       return 0.0; // Half-duplex!
      |                    ^                                 
      |                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:346:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  346 |         if (!r1.operable) return 0.0; // stop if radio is inoperable
      |                          ^                                          
      |                           {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:352:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  352 |         if (width_kHz <= 0) width_kHz = 25.0;  // Standard 25kHz channel spacing for UHF
      |                            ^                                                            
      |                             {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:352:41: warning: 25.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  352 |         if (width_kHz <= 0) width_kHz = 25.0;  // Standard 25kHz channel spacing for UHF
      |                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:353:9: warning: variable 'channel_core' of type 'float' can be declared 'const' [misc-const-correctness]
  353 |         float channel_core = width_kHz / 2.0;   // Channel core is half the channel width
      |         ^
      |               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:353:30: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  353 |         float channel_core = width_kHz / 2.0;   // Channel core is half the channel width
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:353:42: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  353 |         float channel_core = width_kHz / 2.0;   // Channel core is half the channel width
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:359:13: warning: variable 'frq1_p' of type 'fgcom_radiowave_freqConvRes' can be declared 'const' [misc-const-correctness]
  359 |             fgcom_radiowave_freqConvRes frq1_p = FGCom_radiowaveModel::splitFreqString(r1.frequency);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:359:50: warning: 'splitFreqString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  359 |             fgcom_radiowave_freqConvRes frq1_p = FGCom_radiowaveModel::splitFreqString(r1.frequency);
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: note: resolves to this declaration
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:360:13: warning: variable 'frq2_p' of type 'fgcom_radiowave_freqConvRes' can be declared 'const' [misc-const-correctness]
  360 |             fgcom_radiowave_freqConvRes frq2_p = FGCom_radiowaveModel::splitFreqString(r2.frequency);
      |             ^
      |                                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:360:50: warning: 'splitFreqString' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  360 |             fgcom_radiowave_freqConvRes frq2_p = FGCom_radiowaveModel::splitFreqString(r2.frequency);
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model.h:361:40: note: resolves to this declaration
  361 |     static fgcom_radiowave_freqConvRes splitFreqString(std::string frq);
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:363:17: warning: variable 'frq1_f' of type 'float' can be declared 'const' [misc-const-correctness]
  363 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                 ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:363:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  363 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:363:32: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  363 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:363:37: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
   20 |                 float frq1_f = std::stof(frq1_p.frequency);
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:364:17: warning: variable 'frq2_f' of type 'float' can be declared 'const' [misc-const-correctness]
  364 |                 float frq2_f = std::stof(frq2_p.frequency);
      |                 ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:364:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  364 |                 float frq2_f = std::stof(frq2_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:364:32: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  364 |                 float frq2_f = std::stof(frq2_p.frequency);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_uhf.cpp:367:15: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  367 |             } else {
      |               ^~~~~~
  368 |                 // not numeric: return default
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  369 |                 return filter;
      |                 ~~~~~~~~~~~~~~
  370 |             }
      |             ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:17:1: warning: #includes are not sorted properly [llvm-include-order]
   17 | #include <iostream> 
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:17:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   17 | #include <iostream> 
      | ^~~~~~~~~~~~~~~~~~~
   18 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:18:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   18 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   19 | #include <regex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:19:1: warning: system include regex not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <regex>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:19:1: warning: included header regex is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:24:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   24 | FGCom_radiowaveModel_VHF::FGCom_radiowaveModel_VHF() 
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:29:27: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
   29 | FGCom_radiowaveModel_VHF::~FGCom_radiowaveModel_VHF() {
      |                           ^                           ~
      |                                                       = default;
   30 | }
      | ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:29:27: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:33:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   33 | void FGCom_radiowaveModel_VHF::initializePatterns() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:34:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   34 |     if (patterns_initialized) return;
      |                              ^       
      |                               {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:36:27: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   36 |     pattern_interpolation = std::make_unique<FGCom_PatternInterpolation>();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:36:29: warning: 'make_unique<FGCom_PatternInterpolation>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   36 |     pattern_interpolation = std::make_unique<FGCom_PatternInterpolation>();
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:36:34: warning: no header providing "std::make_unique" is directly included [misc-include-cleaner]
   19 |     pattern_interpolation = std::make_unique<FGCom_PatternInterpolation>();
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:36:46: warning: no header providing "FGCom_PatternInterpolation" is directly included [misc-include-cleaner]
   22 | 
   23 | // Constructor
   24 | FGCom_radiowaveModel_VHF::FGCom_radiowaveModel_VHF() 
   25 |     : patterns_initialized(false), ducting_initialized(false), multipath_initialized(false) {
   26 | }
   27 | 
   28 | // Destructor
   29 | FGCom_radiowaveModel_VHF::~FGCom_radiowaveModel_VHF() {
   30 | }
   31 | 
   32 | // Initialize antenna patterns for VHF frequencies
   33 | void FGCom_radiowaveModel_VHF::initializePatterns() {
   34 |     if (patterns_initialized) return;
   35 |     
   36 |     pattern_interpolation = std::make_unique<FGCom_PatternInterpolation>();
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:37:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   37 |     antenna_system = std::make_unique<FGCom_AntennaGroundSystem>();
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:37:22: warning: 'make_unique<FGCom_AntennaGroundSystem>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   37 |     antenna_system = std::make_unique<FGCom_AntennaGroundSystem>();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:37:39: warning: no header providing "FGCom_AntennaGroundSystem" is directly included [misc-include-cleaner]
   21 |     antenna_system = std::make_unique<FGCom_AntennaGroundSystem>();
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:46:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   46 | void FGCom_radiowaveModel_VHF::initializeDucting() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:47:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   47 |     if (ducting_initialized) return;
      |                             ^       
      |                              {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:49:25: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   49 |     atmospheric_ducting = std::make_unique<FGCom_AtmosphericDucting>();
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:49:27: warning: 'make_unique<FGCom_AtmosphericDucting>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   49 |     atmospheric_ducting = std::make_unique<FGCom_AtmosphericDucting>();
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:49:44: warning: no header providing "FGCom_AtmosphericDucting" is directly included [misc-include-cleaner]
   21 |     atmospheric_ducting = std::make_unique<FGCom_AtmosphericDucting>();
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:50:24: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   50 |     atmospheric_ducting->setMinimumDuctingStrength(0.3f);
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:50:52: warning: 0.3f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   50 |     atmospheric_ducting->setMinimumDuctingStrength(0.3f);
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:50:52: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   50 |     atmospheric_ducting->setMinimumDuctingStrength(0.3f);
      |                                                    ^  ~
      |                                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:51:24: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   51 |     atmospheric_ducting->setDuctingHeightRange(50.0f, 2000.0f);
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:51:48: warning: 50.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     atmospheric_ducting->setDuctingHeightRange(50.0f, 2000.0f);
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:51:48: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |     atmospheric_ducting->setDuctingHeightRange(50.0f, 2000.0f);
      |                                                ^   ~
      |                                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:51:55: warning: 2000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   51 |     atmospheric_ducting->setDuctingHeightRange(50.0f, 2000.0f);
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:51:55: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   51 |     atmospheric_ducting->setDuctingHeightRange(50.0f, 2000.0f);
      |                                                       ^     ~
      |                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:52:24: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   52 |     atmospheric_ducting->setTemperatureInversionThreshold(0.5f);
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:52:59: warning: 0.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   52 |     atmospheric_ducting->setTemperatureInversionThreshold(0.5f);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:52:59: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   52 |     atmospheric_ducting->setTemperatureInversionThreshold(0.5f);
      |                                                           ^  ~
      |                                                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:58:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   58 | void FGCom_radiowaveModel_VHF::initializeMultipath() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:59:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
   59 |     if (multipath_initialized) return;
      |                               ^       
      |                                {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:61:24: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   61 |     enhanced_multipath = std::make_unique<FGCom_EnhancedMultipath>();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:61:26: warning: 'make_unique<FGCom_EnhancedMultipath>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   61 |     enhanced_multipath = std::make_unique<FGCom_EnhancedMultipath>();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:61:43: warning: no header providing "FGCom_EnhancedMultipath" is directly included [misc-include-cleaner]
   22 |     enhanced_multipath = std::make_unique<FGCom_EnhancedMultipath>();
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:62:23: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   62 |     enhanced_multipath->setTerrainRoughness(1.0f);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:62:45: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   62 |     enhanced_multipath->setTerrainRoughness(1.0f);
      |                                             ^  ~
      |                                                F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:63:23: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   63 |     enhanced_multipath->setBuildingDensity(0.1f);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:63:44: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   63 |     enhanced_multipath->setBuildingDensity(0.1f);
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:63:44: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   63 |     enhanced_multipath->setBuildingDensity(0.1f);
      |                                            ^  ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:64:23: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   64 |     enhanced_multipath->setVegetationDensity(0.2f);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:64:46: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   64 |     enhanced_multipath->setVegetationDensity(0.2f);
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:64:46: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   64 |     enhanced_multipath->setVegetationDensity(0.2f);
      |                                              ^  ~
      |                                                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:65:23: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   65 |     enhanced_multipath->setVehicleDensity(0.05f);
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:65:43: warning: 0.05f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   65 |     enhanced_multipath->setVehicleDensity(0.05f);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:65:43: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
   65 |     enhanced_multipath->setVehicleDensity(0.05f);
      |                                           ^   ~
      |                                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:71:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   71 | void FGCom_radiowaveModel_VHF::loadVHFAntennaPatterns() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:82:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   82 | void FGCom_radiowaveModel_VHF::loadAircraftVHFPatterns() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:84:10: warning: no header providing "g_antenna_pattern_mapping" is directly included [misc-include-cleaner]
   21 |     if (!g_antenna_pattern_mapping) {
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:85:35: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   85 |         g_antenna_pattern_mapping = std::make_unique<FGCom_AntennaPatternMapping>();
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:414:19: note: resolves to this declaration
  414 |       unique_ptr& operator=(unique_ptr&&) = default;
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:85:37: warning: 'make_unique<FGCom_AntennaPatternMapping>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   85 |         g_antenna_pattern_mapping = std::make_unique<FGCom_AntennaPatternMapping>();
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:1069:5: note: resolves to this declaration
 1069 |     make_unique(_Args&&... __args)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:85:54: warning: no header providing "FGCom_AntennaPatternMapping" is directly included [misc-include-cleaner]
   85 |         g_antenna_pattern_mapping = std::make_unique<FGCom_AntennaPatternMapping>();
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:89:5: warning: variable 'aircraft_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
   89 |     std::vector<AntennaPatternInfo> aircraft_patterns = 
      |     ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:89:10: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
   20 |     std::vector<AntennaPatternInfo> aircraft_patterns = 
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:89:17: warning: no header providing "AntennaPatternInfo" is directly included [misc-include-cleaner]
   89 |     std::vector<AntennaPatternInfo> aircraft_patterns = 
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:90:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   90 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("aircraft");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:90:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   90 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("aircraft");
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:92:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   92 |     for (const auto& pattern_info : aircraft_patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:92:35: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   92 |     for (const auto& pattern_info : aircraft_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:92:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   92 |     for (const auto& pattern_info : aircraft_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:92:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   92 |     for (const auto& pattern_info : aircraft_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:93:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   93 |         if (pattern_interpolation->load4NEC2Pattern(
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:96:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   96 |             std::cout << "Loaded aircraft VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:96:58: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   96 |             std::cout << "Loaded aircraft VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:96:87: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   96 |             std::cout << "Loaded aircraft VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:96:90: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   96 |             std::cout << "Loaded aircraft VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:96:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |             std::cout << "Loaded aircraft VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                          ^~~~~~~~~
      |                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:104:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  104 | void FGCom_radiowaveModel_VHF::loadAircraft3DAttitudePatterns() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:106:5: warning: variable 'aircraft_frequencies' of type 'std::vector<double>' can be declared 'const' [misc-const-correctness]
  106 |     std::vector<double> aircraft_frequencies = {125.0, 144.0, 150.0, 160.0};
      |     ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:106:48: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  106 |     std::vector<double> aircraft_frequencies = {125.0, 144.0, 150.0, 160.0};
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:106:49: warning: 125.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |     std::vector<double> aircraft_frequencies = {125.0, 144.0, 150.0, 160.0};
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:106:56: warning: 144.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |     std::vector<double> aircraft_frequencies = {125.0, 144.0, 150.0, 160.0};
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:106:63: warning: 150.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |     std::vector<double> aircraft_frequencies = {125.0, 144.0, 150.0, 160.0};
      |                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:106:70: warning: 160.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |     std::vector<double> aircraft_frequencies = {125.0, 144.0, 150.0, 160.0};
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:107:5: warning: variable 'altitudes' of type 'std::vector<int>' can be declared 'const' [misc-const-correctness]
  107 |     std::vector<int> altitudes = {0, 1000, 3000, 5000, 10000};
      |     ^
      |                      const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:107:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  107 |     std::vector<int> altitudes = {0, 1000, 3000, 5000, 10000};
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:679:7: note: default parameter was declared here
  679 |              const allocator_type& __a = allocator_type())
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:107:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  107 |     std::vector<int> altitudes = {0, 1000, 3000, 5000, 10000};
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:107:44: warning: 3000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  107 |     std::vector<int> altitudes = {0, 1000, 3000, 5000, 10000};
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:107:50: warning: 5000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  107 |     std::vector<int> altitudes = {0, 1000, 3000, 5000, 10000};
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:107:56: warning: 10000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  107 |     std::vector<int> altitudes = {0, 1000, 3000, 5000, 10000};
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:109:10: warning: variable 'freq' of type 'double' can be declared 'const' [misc-const-correctness]
  109 |     for (double freq : aircraft_frequencies) {
      |          ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:109:22: warning: 'operator!=<double *, std::vector<double>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  109 |     for (double freq : aircraft_frequencies) {
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:109:22: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  109 |     for (double freq : aircraft_frequencies) {
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:109:22: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  109 |     for (double freq : aircraft_frequencies) {
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:110:14: warning: variable 'alt' of type 'int' can be declared 'const' [misc-const-correctness]
  110 |         for (int alt : altitudes) {
      |              ^
      |                  const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:110:22: warning: 'operator!=<int *, std::vector<int>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  110 |         for (int alt : altitudes) {
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:110:22: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  110 |         for (int alt : altitudes) {
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:110:22: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  110 |         for (int alt : altitudes) {
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:111:13: warning: variable 'attitude_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
  111 |             std::vector<AntennaPatternInfo> attitude_patterns = 
      |             ^
      |                                             const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:112:42: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  112 |                 g_antenna_pattern_mapping->getAvailable3DPatterns("aircraft", freq, alt);
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:112:67: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  112 |                 g_antenna_pattern_mapping->getAvailable3DPatterns("aircraft", freq, alt);
      |                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:114:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  114 |             for (const auto& pattern_info : attitude_patterns) {
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:114:43: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |             for (const auto& pattern_info : attitude_patterns) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:114:43: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |             for (const auto& pattern_info : attitude_patterns) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:114:43: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  114 |             for (const auto& pattern_info : attitude_patterns) {
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:115:42: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  115 |                 if (pattern_interpolation->load3DAttitudePattern(
      |                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:118:31: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  118 |                     std::cout << "Loaded aircraft 3D attitude pattern: " << pattern_info.antenna_name << std::endl;
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:118:74: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  118 |                     std::cout << "Loaded aircraft 3D attitude pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:118:103: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  118 |                     std::cout << "Loaded aircraft 3D attitude pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:118:106: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  118 |                     std::cout << "Loaded aircraft 3D attitude pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:118:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  118 |                     std::cout << "Loaded aircraft 3D attitude pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:125:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  125 | void FGCom_radiowaveModel_VHF::loadGroundVehicleVHFPatterns() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:127:5: warning: variable 'ground_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
  127 |     std::vector<AntennaPatternInfo> ground_patterns = 
      |     ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:128:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  128 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("ground_vehicle");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:128:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  128 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("ground_vehicle");
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:130:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  130 |     for (const auto& pattern_info : ground_patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:130:35: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  130 |     for (const auto& pattern_info : ground_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:130:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  130 |     for (const auto& pattern_info : ground_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:130:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  130 |     for (const auto& pattern_info : ground_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:131:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  131 |         if (pattern_interpolation->load4NEC2Pattern(
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:134:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |             std::cout << "Loaded ground vehicle VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:134:64: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |             std::cout << "Loaded ground vehicle VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:134:93: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |             std::cout << "Loaded ground vehicle VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:134:96: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  134 |             std::cout << "Loaded ground vehicle VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:134:96: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  134 |             std::cout << "Loaded ground vehicle VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                                ^~~~~~~~~
      |                                                                                                '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:139:5: warning: variable 'handheld_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
  139 |     std::vector<AntennaPatternInfo> handheld_patterns = 
      |     ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:140:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  140 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("handheld");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:140:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  140 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("handheld");
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:142:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  142 |     for (const auto& pattern_info : handheld_patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:142:35: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  142 |     for (const auto& pattern_info : handheld_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:142:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  142 |     for (const auto& pattern_info : handheld_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:142:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  142 |     for (const auto& pattern_info : handheld_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:143:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  143 |         if (pattern_interpolation->load4NEC2Pattern(
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:146:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  146 |             std::cout << "Loaded handheld VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:146:58: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  146 |             std::cout << "Loaded handheld VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:146:87: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  146 |             std::cout << "Loaded handheld VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:146:90: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  146 |             std::cout << "Loaded handheld VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:146:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  146 |             std::cout << "Loaded handheld VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                          ^~~~~~~~~
      |                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:151:5: warning: variable 'base_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
  151 |     std::vector<AntennaPatternInfo> base_patterns = 
      |     ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:152:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  152 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("base_station");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:152:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  152 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("base_station");
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:154:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  154 |     for (const auto& pattern_info : base_patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:154:35: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  154 |     for (const auto& pattern_info : base_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:154:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  154 |     for (const auto& pattern_info : base_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:154:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  154 |     for (const auto& pattern_info : base_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:155:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  155 |         if (pattern_interpolation->load4NEC2Pattern(
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:158:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |             std::cout << "Loaded base station VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:158:62: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |             std::cout << "Loaded base station VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:158:91: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |             std::cout << "Loaded base station VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:158:94: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  158 |             std::cout << "Loaded base station VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:158:94: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  158 |             std::cout << "Loaded base station VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                              ^~~~~~~~~
      |                                                                                              '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:163:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  163 | void FGCom_radiowaveModel_VHF::loadMaritimeVHFPatterns() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:165:5: warning: variable 'maritime_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
  165 |     std::vector<AntennaPatternInfo> maritime_patterns = 
      |     ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:166:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("maritime");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:166:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  166 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("maritime");
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:168:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  168 |     for (const auto& pattern_info : maritime_patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:168:35: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  168 |     for (const auto& pattern_info : maritime_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:168:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  168 |     for (const auto& pattern_info : maritime_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:168:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  168 |     for (const auto& pattern_info : maritime_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:169:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  169 |         if (pattern_interpolation->load4NEC2Pattern(
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:172:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |             std::cout << "Loaded maritime VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:172:58: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |             std::cout << "Loaded maritime VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:172:87: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |             std::cout << "Loaded maritime VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:172:90: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |             std::cout << "Loaded maritime VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:172:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  172 |             std::cout << "Loaded maritime VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                          ^~~~~~~~~
      |                                                                                          '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:177:5: warning: variable 'ship_patterns' of type 'std::vector<AntennaPatternInfo>' can be declared 'const' [misc-const-correctness]
  177 |     std::vector<AntennaPatternInfo> ship_patterns = 
      |     ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:178:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  178 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("ship");
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:178:60: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  178 |         g_antenna_pattern_mapping->getAvailableVHFPatterns("ship");
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:180:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  180 |     for (const auto& pattern_info : ship_patterns) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:180:35: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     for (const auto& pattern_info : ship_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:180:35: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     for (const auto& pattern_info : ship_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:180:35: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  180 |     for (const auto& pattern_info : ship_patterns) {
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:181:34: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |         if (pattern_interpolation->load4NEC2Pattern(
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:184:23: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  184 |             std::cout << "Loaded ship VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:184:54: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  184 |             std::cout << "Loaded ship VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:184:83: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  184 |             std::cout << "Loaded ship VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:184:86: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  184 |             std::cout << "Loaded ship VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:184:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  184 |             std::cout << "Loaded ship VHF pattern: " << pattern_info.antenna_name << std::endl;
      |                                                                                      ^~~~~~~~~
      |                                                                                      '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:190:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  190 | float FGCom_radiowaveModel_VHF::getAntennaGain(const std::string& antenna_name, int frequency_mhz, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:190:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  190 | float FGCom_radiowaveModel_VHF::getAntennaGain(const std::string& antenna_name, int frequency_mhz, 
      | ~~~~~                           ^
      | auto
  191 |                         double elevation_deg, double azimuth_deg, double altitude_m, 
  192 |                         int vehicle_type, int antenna_type) {
      |                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:198:16: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  198 |         return 0.0f; // No pattern system available
      |                ^  ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:202:30: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  202 |     if (pattern_interpolation->has3DAttitudePattern(antenna_name)) {
      |                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:204:16: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  204 |         return pattern_interpolation->get3DAttitudeGain(
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:204:37: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  204 |         return pattern_interpolation->get3DAttitudeGain(
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:204:39: warning: 4th argument 'frequency_mhz' (passed to 'roll_deg') looks like it might be swapped with the 7th, 'altitude_m' (passed to 'frequency_mhz') [readability-suspicious-call-argument]
  204 |         return pattern_interpolation->get3DAttitudeGain(
      |                                       ^
  205 |             antenna_name, elevation_deg, azimuth_deg, frequency_mhz, 
      |                                                       ~~~~~~~~~~~~~
  206 |             vehicle_type, antenna_type, altitude_m);
      |                                         ~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:84:12: note: in the call to 'get3DAttitudeGain', declared here
   84 |     double get3DAttitudeGain(const std::string& antenna_name, double theta, double phi,
      |            ^
   85 |                              int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                  ~~~~~~~~                                        ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:204:39: warning: 6th argument 'antenna_type' (passed to 'altitude_m') looks like it might be swapped with the 7th, 'altitude_m' (passed to 'frequency_mhz') [readability-suspicious-call-argument]
  204 |         return pattern_interpolation->get3DAttitudeGain(
      |                                       ^
  205 |             antenna_name, elevation_deg, azimuth_deg, frequency_mhz, 
  206 |             vehicle_type, antenna_type, altitude_m);
      |                           ~~~~~~~~~~~~  ~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:84:12: note: in the call to 'get3DAttitudeGain', declared here
   84 |     double get3DAttitudeGain(const std::string& antenna_name, double theta, double phi,
      |            ^
   85 |                              int roll_deg, int pitch_deg, int altitude_m, double frequency_mhz);
      |                                                               ~~~~~~~~~~         ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:210:12: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  210 |     return pattern_interpolation->getInterpolatedGain(
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:210:33: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  210 |     return pattern_interpolation->getInterpolatedGain(
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:210:35: warning: 2nd argument 'frequency_mhz' (passed to 'altitude_m') looks like it might be swapped with the 3rd, 'elevation_deg' (passed to 'frequency_mhz') [readability-suspicious-call-argument]
  210 |     return pattern_interpolation->getInterpolatedGain(
      |                                   ^
  211 |         antenna_name, frequency_mhz, elevation_deg, azimuth_deg, altitude_m);
      |                       ~~~~~~~~~~~~~  ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:80:12: note: in the call to 'getInterpolatedGain', declared here
   80 |     double getInterpolatedGain(const std::string& antenna_name, int altitude_m, 
      |            ^                                                        ~~~~~~~~~~
   81 |                               double frequency_mhz, double theta_deg, double phi_deg);
      |                                      ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:210:35: warning: 2nd argument 'frequency_mhz' (passed to 'altitude_m') looks like it might be swapped with the 5th, 'altitude_m' (passed to 'phi_deg') [readability-suspicious-call-argument]
  210 |     return pattern_interpolation->getInterpolatedGain(
      |                                   ^
  211 |         antenna_name, frequency_mhz, elevation_deg, azimuth_deg, altitude_m);
      |                       ~~~~~~~~~~~~~                              ~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/pattern_interpolation.h:80:12: note: in the call to 'getInterpolatedGain', declared here
   80 |     double getInterpolatedGain(const std::string& antenna_name, int altitude_m, 
      |            ^                                                        ~~~~~~~~~~
   81 |                               double frequency_mhz, double theta_deg, double phi_deg);
      |                                                                              ~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:215:52: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  215 | std::vector<std::string> FGCom_radiowaveModel_VHF::getAvailableVHFPatterns() const {
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:215:52: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:215:52: warning: method 'getAvailableVHFPatterns' can be made static [readability-convert-member-functions-to-static]
  215 | std::vector<std::string> FGCom_radiowaveModel_VHF::getAvailableVHFPatterns() const {
      |                                                    ^                         ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:219:59: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  219 |         auto aircraft_patterns = g_antenna_pattern_mapping->getAvailableVHFPatterns("aircraft");
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:219:85: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  219 |         auto aircraft_patterns = g_antenna_pattern_mapping->getAvailableVHFPatterns("aircraft");
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:220:57: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  220 |         auto ground_patterns = g_antenna_pattern_mapping->getAvailableVHFPatterns("ground_vehicle");
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:220:83: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  220 |         auto ground_patterns = g_antenna_pattern_mapping->getAvailableVHFPatterns("ground_vehicle");
      |                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:221:59: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  221 |         auto maritime_patterns = g_antenna_pattern_mapping->getAvailableVHFPatterns("maritime");
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:221:85: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  221 |         auto maritime_patterns = g_antenna_pattern_mapping->getAvailableVHFPatterns("maritime");
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:223:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  223 |         for (const auto& pattern : aircraft_patterns) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:223:34: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |         for (const auto& pattern : aircraft_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:223:34: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |         for (const auto& pattern : aircraft_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:223:34: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  223 |         for (const auto& pattern : aircraft_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:226:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  226 |         for (const auto& pattern : ground_patterns) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:226:34: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |         for (const auto& pattern : ground_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:226:34: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |         for (const auto& pattern : ground_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:226:34: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  226 |         for (const auto& pattern : ground_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:229:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  229 |         for (const auto& pattern : maritime_patterns) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:229:34: warning: 'operator!=<AntennaPatternInfo *, std::vector<AntennaPatternInfo>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |         for (const auto& pattern : maritime_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:229:34: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |         for (const auto& pattern : maritime_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:229:34: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  229 |         for (const auto& pattern : maritime_patterns) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:237:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  237 | bool FGCom_radiowaveModel_VHF::hasVHFPattern(const std::string& pattern_name) const {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:237:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  237 | bool FGCom_radiowaveModel_VHF::hasVHFPattern(const std::string& pattern_name) const {
      | ~~~~                           ^
      | auto                                                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:238:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  238 |     if (!g_antenna_pattern_mapping) return false;
      |                                    ^             
      |                                     {
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:241:12: warning: 'find<__gnu_cxx::__normal_iterator<std::basic_string<char> *, std::vector<std::basic_string<char>>>, std::basic_string<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  241 |     return std::find(patterns.begin(), patterns.end(), pattern_name) != patterns.end();
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algo.h:3889:5: note: resolves to this declaration
 3889 |     find(_InputIterator __first, _InputIterator __last,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:241:17: warning: no header providing "std::find" is directly included [misc-include-cleaner]
   17 |     return std::find(patterns.begin(), patterns.end(), pattern_name) != patterns.end();
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:241:70: warning: 'operator!=<std::basic_string<char> *, std::vector<std::basic_string<char>>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  241 |     return std::find(patterns.begin(), patterns.end(), pattern_name) != patterns.end();
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:245:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  245 | void FGCom_radiowaveModel_VHF::processAudioSamples(fgcom_radio lclRadio, float signalQuality, 
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:246:54: warning: no header providing "uint32_t" is directly included [misc-include-cleaner]
   17 |                                    float* outputPCM, uint32_t sampleCount, 
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:247:36: warning: no header providing "uint16_t" is directly included [misc-include-cleaner]
  247 |                                    uint16_t channelCount, uint32_t sampleRateHz) {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:250:5: warning: variable 'highpass_cutoff' of type 'int' can be declared 'const' [misc-const-correctness]
  250 |     int highpass_cutoff = 3000 + (int)((1.0f - signalQuality) * 2000.0f);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:250:27: warning: 3000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  250 |     int highpass_cutoff = 3000 + (int)((1.0f - signalQuality) * 2000.0f);
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:250:34: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  250 |     int highpass_cutoff = 3000 + (int)((1.0f - signalQuality) * 2000.0f);
      |                                  ^~~~~
      |                                  static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:250:41: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  250 |     int highpass_cutoff = 3000 + (int)((1.0f - signalQuality) * 2000.0f);
      |                                         ^  ~
      |                                            F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:250:65: warning: 2000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  250 |     int highpass_cutoff = 3000 + (int)((1.0f - signalQuality) * 2000.0f);
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:250:65: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  250 |     int highpass_cutoff = 3000 + (int)((1.0f - signalQuality) * 2000.0f);
      |                                                                 ^     ~
      |                                                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:251:5: warning: variable 'lowpass_cutoff' of type 'int' can be declared 'const' [misc-const-correctness]
  251 |     int lowpass_cutoff = 8000 + (int)(signalQuality * 4000.0f);
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:251:26: warning: 8000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  251 |     int lowpass_cutoff = 8000 + (int)(signalQuality * 4000.0f);
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:251:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  251 |     int lowpass_cutoff = 8000 + (int)(signalQuality * 4000.0f);
      |                                 ^~~~~
      |                                 static_cast<int>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:251:55: warning: 4000.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  251 |     int lowpass_cutoff = 8000 + (int)(signalQuality * 4000.0f);
      |                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:251:55: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  251 |     int lowpass_cutoff = 8000 + (int)(signalQuality * 4000.0f);
      |                                                       ^     ~
      |                                                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:254:62: warning: 0.05f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     processAudioSamples_VHF(highpass_cutoff, lowpass_cutoff, 0.05f, 0.45f, 
      |                                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:254:62: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  254 |     processAudioSamples_VHF(highpass_cutoff, lowpass_cutoff, 0.05f, 0.45f, 
      |                                                              ^   ~
      |                                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:254:69: warning: 0.45f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  254 |     processAudioSamples_VHF(highpass_cutoff, lowpass_cutoff, 0.05f, 0.45f, 
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:254:69: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  254 |     processAudioSamples_VHF(highpass_cutoff, lowpass_cutoff, 0.05f, 0.45f, 
      |                                                                     ^   ~
      |                                                                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:258:50: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  258 | fgcom_radiowave_signal FGCom_radiowaveModel_VHF::getSignal(double lat1, double lon1, float alt1, 
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:258:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 | fgcom_radiowave_signal FGCom_radiowaveModel_VHF::getSignal(double lat1, double lon1, float alt1, 
      | ~~~~~~~~~~~~~~~~~~~~~~                           ^
      | auto
  259 |                                                           double lat2, double lon2, float alt2, 
  260 |                                                           float power) {
      |                                                                        -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:258:86: warning: 2 adjacent parameters of 'getSignal' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  258 | fgcom_radiowave_signal FGCom_radiowaveModel_VHF::getSignal(double lat1, double lon1, float alt1, 
      |                                                                                      ^~~~~~~~~~~
  259 |                                                           double lat2, double lon2, float alt2, 
      |                                                           ~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:258:92: note: the first parameter in the range is 'alt1'
  258 | fgcom_radiowave_signal FGCom_radiowaveModel_VHF::getSignal(double lat1, double lon1, float alt1, 
      |                                                                                            ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:259:66: note: the last parameter in the range is 'lat2'
  259 |                                                           double lat2, double lon2, float alt2, 
      |                                                                  ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:259:59: note: 'float' and 'double' may be implicitly converted
  259 |                                                           double lat2, double lon2, float alt2, 
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:259:72: warning: 3 adjacent parameters of 'getSignal' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  259 |                                                           double lat2, double lon2, float alt2, 
      |                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~
  260 |                                                           float power) {
      |                                                           ~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:259:79: note: the first parameter in the range is 'lon2'
  259 |                                                           double lat2, double lon2, float alt2, 
      |                                                                               ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:260:65: note: the last parameter in the range is 'power'
  260 |                                                           float power) {
      |                                                                 ^~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:259:85: note: 'double' and 'float' may be implicitly converted
  259 |                                                           double lat2, double lon2, float alt2, 
      |                                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:262:22: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  262 |     signal.quality = 0.0f;
      |                      ^  ~
      |                         F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:263:24: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  263 |     signal.direction = 0.0f;
      |                        ^  ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:264:28: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  264 |     signal.verticalAngle = 0.0f;
      |                            ^  ~
      |                               F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:267:5: warning: variable 'radiodist' of type 'double' can be declared 'const' [misc-const-correctness]
  267 |     double radiodist = getDistToHorizon(alt1) + getDistToHorizon(alt2);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:268:5: warning: variable 'dist' of type 'double' can be declared 'const' [misc-const-correctness]
  268 |     double dist = getSurfaceDistance(lat1, lon1, lat2, lon2);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:272:26: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  272 |         signal.quality = 0.0f;
      |                          ^  ~
      |                             F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:276:5: warning: variable 'height_above_horizon' of type 'double' can be declared 'const' [misc-const-correctness]
  276 |     double height_above_horizon = heightAboveHorizon(dist, alt1, alt2);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:277:5: warning: variable 'slantDist' of type 'double' can be declared 'const' [misc-const-correctness]
  277 |     double slantDist = getSlantDistance(dist, height_above_horizon-alt1);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:280:5: warning: variable 'ss' of type 'float' can be declared 'const' [misc-const-correctness]
  280 |     float ss = calcPowerDistance(power, slantDist, alt1, 150.0);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:280:11: warning: variable name 'ss' is too short, expected at least 3 characters [readability-identifier-length]
  280 |     float ss = calcPowerDistance(power, slantDist, alt1, 150.0);
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:280:58: warning: 150.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  280 |     float ss = calcPowerDistance(power, slantDist, alt1, 150.0);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:284:14: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  284 |     if (ss > 0.0f) {
      |              ^  ~
      |                 F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:285:9: warning: variable 'theta_deg' of type 'double' can be declared 'const' [misc-const-correctness]
  285 |         double theta_deg = degreeAboveHorizon(dist, alt2-alt1);  // Elevation angle
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:286:9: warning: variable 'phi_deg' of type 'double' can be declared 'const' [misc-const-correctness]
  286 |         double phi_deg = getDirection(lat1, lon1, lat2, lon2);   // Azimuth angle
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:296:13: warning: variable 'ducting' of type 'DuctingConditions' can be declared 'const' [misc-const-correctness]
  296 |             DuctingConditions ducting = atmospheric_ducting->analyzeDuctingConditions(
      |             ^
      |                               const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:296:13: warning: no header providing "DuctingConditions" is directly included [misc-include-cleaner]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:296:60: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  296 |             DuctingConditions ducting = atmospheric_ducting->analyzeDuctingConditions(
      |                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:300:17: warning: uninitialized record type: 'ducting_params' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  300 |                 DuctingCalculationParams ducting_params;
      |                 ^                                      
      |                                                        {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:300:17: warning: no header providing "DuctingCalculationParams" is directly included [misc-include-cleaner]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:301:47: warning: 150.0e6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  301 |                 ducting_params.frequency_hz = 150.0e6;
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:302:46: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  302 |                 ducting_params.distance_km = dist;
      |                                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:306:17: warning: variable 'ducting_enhancement' of type 'float' can be declared 'const' [misc-const-correctness]
  306 |                 float ducting_enhancement = atmospheric_ducting->calculateDuctingEffects(
      |                 ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:306:64: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  306 |                 float ducting_enhancement = atmospheric_ducting->calculateDuctingEffects(
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:318:13: warning: uninitialized record type: 'multipath_params' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  318 |             MultipathCalculationParams multipath_params;
      |             ^                                          
      |                                                        {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:318:13: warning: no header providing "MultipathCalculationParams" is directly included [misc-include-cleaner]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:319:45: warning: 150.0e6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  319 |             multipath_params.frequency_hz = 150.0e6;
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:320:44: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  320 |             multipath_params.distance_km = dist;
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:323:52: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  323 |             multipath_params.terrain_roughness_m = 1.0f;
      |                                                    ^  ~
      |                                                       F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:324:49: warning: 0.1f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  324 |             multipath_params.building_density = 0.1f;
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:324:49: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  324 |             multipath_params.building_density = 0.1f;
      |                                                 ^  ~
      |                                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:325:51: warning: 0.2f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  325 |             multipath_params.vegetation_density = 0.2f;
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:325:51: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  325 |             multipath_params.vegetation_density = 0.2f;
      |                                                   ^  ~
      |                                                      F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:326:48: warning: 0.05f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  326 |             multipath_params.vehicle_density = 0.05f;
      |                                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:326:48: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  326 |             multipath_params.vehicle_density = 0.05f;
      |                                                ^   ~
      |                                                    F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:328:13: warning: variable 'channel' of type 'MultipathChannel' can be declared 'const' [misc-const-correctness]
  328 |             MultipathChannel channel = enhanced_multipath->analyzeMultipathChannel(multipath_params);
      |             ^
      |                              const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:328:13: warning: no header providing "MultipathChannel" is directly included [misc-include-cleaner]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:328:58: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  328 |             MultipathChannel channel = enhanced_multipath->analyzeMultipathChannel(multipath_params);
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:329:13: warning: variable 'multipath_quality' of type 'float' can be declared 'const' [misc-const-correctness]
  329 |             float multipath_quality = enhanced_multipath->calculateSignalQuality(channel, signal.quality);
      |             ^
      |                   const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:329:57: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  329 |             float multipath_quality = enhanced_multipath->calculateSignalQuality(channel, signal.quality);
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/unique_ptr.h:460:7: note: resolves to this declaration
  460 |       operator->() const noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:335:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  335 |     signal.direction     = getDirection(lat1, lon1, lat2, lon2);
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:336:28: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  336 |     signal.verticalAngle = degreeAboveHorizon(dist, alt2-alt1);
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:341:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  341 | float FGCom_radiowaveModel_VHF::calcPowerDistance(float power_watts, double distance_km, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:341:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  341 | float FGCom_radiowaveModel_VHF::calcPowerDistance(float power_watts, double distance_km, 
      | ~~~~~                           ^
      | auto
  342 |                                   double altitude_m, double frequency_mhz) {
      |                                                                            -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:341:33: warning: method 'calcPowerDistance' can be made static [readability-convert-member-functions-to-static]
  341 | float FGCom_radiowaveModel_VHF::calcPowerDistance(float power_watts, double distance_km, 
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:341:70: warning: 3 adjacent parameters of 'calcPowerDistance' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  341 | float FGCom_radiowaveModel_VHF::calcPowerDistance(float power_watts, double distance_km, 
      |                                                                      ^~~~~~~~~~~~~~~~~~~
  342 |                                   double altitude_m, double frequency_mhz) {
      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:341:77: note: the first parameter in the range is 'distance_km'
  341 | float FGCom_radiowaveModel_VHF::calcPowerDistance(float power_watts, double distance_km, 
      |                                                                             ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:342:61: note: the last parameter in the range is 'frequency_mhz'
  342 |                                   double altitude_m, double frequency_mhz) {
      |                                                             ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:346:16: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  346 |         return 0.0f;
      |                ^  ~
      |                   F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:350:5: warning: variable 'wavelength' of type 'double' can be declared 'const' [misc-const-correctness]
  350 |     double wavelength = 300.0 / frequency_mhz; // Wavelength in meters
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:350:25: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  350 |     double wavelength = 300.0 / frequency_mhz; // Wavelength in meters
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:351:5: warning: variable 'free_space_loss' of type 'double' can be declared 'const' [misc-const-correctness]
  351 |     double free_space_loss = 20.0 * log10(4.0 * M_PI * distance_km * 1000.0 / wavelength);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:351:30: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  351 |     double free_space_loss = 20.0 * log10(4.0 * M_PI * distance_km * 1000.0 / wavelength);
      |                              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:351:43: warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  351 |     double free_space_loss = 20.0 * log10(4.0 * M_PI * distance_km * 1000.0 / wavelength);
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:351:49: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
   19 |     double free_space_loss = 20.0 * log10(4.0 * M_PI * distance_km * 1000.0 / wavelength);
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:351:70: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  351 |     double free_space_loss = 20.0 * log10(4.0 * M_PI * distance_km * 1000.0 / wavelength);
      |                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:354:5: warning: variable 'atmospheric_loss' of type 'double' can be declared 'const' [misc-const-correctness]
  354 |     double atmospheric_loss = 0.01 * distance_km;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:354:31: warning: 0.01 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  354 |     double atmospheric_loss = 0.01 * distance_km;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:357:5: warning: variable 'total_loss_db' of type 'double' can be declared 'const' [misc-const-correctness]
  357 |     double total_loss_db = free_space_loss + atmospheric_loss;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:360:5: warning: variable 'total_loss_linear' of type 'double' can be declared 'const' [misc-const-correctness]
  360 |     double total_loss_linear = pow(10.0, -total_loss_db / 10.0);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:360:36: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  360 |     double total_loss_linear = pow(10.0, -total_loss_db / 10.0);
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:360:59: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  360 |     double total_loss_linear = pow(10.0, -total_loss_db / 10.0);
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:363:5: warning: variable 'received_power_watts' of type 'double' can be declared 'const' [misc-const-correctness]
  363 |     double received_power_watts = power_watts * total_loss_linear;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:366:5: warning: variable 'signal_quality' of type 'float' can be declared 'const' [misc-const-correctness]
  366 |     float signal_quality = (float)std::min(1.0, std::max(0.0, received_power_watts / power_watts));
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:366:28: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  366 |     float signal_quality = (float)std::min(1.0, std::max(0.0, received_power_watts / power_watts));
      |                            ^~~~~~~                                                                
      |                            static_cast<float>(                                                    )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:366:35: warning: 'min<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  366 |     float signal_quality = (float)std::min(1.0, std::max(0.0, received_power_watts / power_watts));
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:366:40: warning: no header providing "std::min" is directly included [misc-include-cleaner]
  366 |     float signal_quality = (float)std::min(1.0, std::max(0.0, received_power_watts / power_watts));
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:366:49: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  366 |     float signal_quality = (float)std::min(1.0, std::max(0.0, received_power_watts / power_watts));
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:366:54: warning: no header providing "std::max" is directly included [misc-include-cleaner]
  366 |     float signal_quality = (float)std::min(1.0, std::max(0.0, received_power_watts / power_watts));
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:372:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  372 | std::string FGCom_radiowaveModel_VHF::getType() {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:372:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  372 | std::string FGCom_radiowaveModel_VHF::getType() {
      | ~~~~~~~~~~~                           ^
      | auto                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:373:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  373 |     return "VHF";
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:376:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  376 | std::string FGCom_radiowaveModel_VHF::conv_chan2freq(std::string frq) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:376:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  376 | std::string FGCom_radiowaveModel_VHF::conv_chan2freq(std::string frq) {
      | ~~~~~~~~~~~                           ^
      | auto                                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:381:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  381 | std::string FGCom_radiowaveModel_VHF::conv_freq2chan(std::string frq) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:381:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  381 | std::string FGCom_radiowaveModel_VHF::conv_freq2chan(std::string frq) {
      | ~~~~~~~~~~~                           ^
      | auto                                                                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:386:33: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  386 | float FGCom_radiowaveModel_VHF::getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:386:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  386 | float FGCom_radiowaveModel_VHF::getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      | ~~~~~                           ^
      | auto                                                                        -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:386:57: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  386 | float FGCom_radiowaveModel_VHF::getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:386:73: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  386 | float FGCom_radiowaveModel_VHF::getFrqMatch(fgcom_radio r1, fgcom_radio r2) {
      |                                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:388:5: warning: variable 'frq1_f' of type 'float' can be declared 'const' [misc-const-correctness]
  388 |     float frq1_f = std::stof(r1.frequency);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:388:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  388 |     float frq1_f = std::stof(r1.frequency);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:388:20: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  388 |     float frq1_f = std::stof(r1.frequency);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:388:25: warning: no header providing "std::stof" is directly included [misc-include-cleaner]
   20 |     float frq1_f = std::stof(r1.frequency);
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:389:5: warning: variable 'frq2_f' of type 'float' can be declared 'const' [misc-const-correctness]
  389 |     float frq2_f = std::stof(r2.frequency);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:389:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  389 |     float frq2_f = std::stof(r2.frequency);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:29: note: default parameter was declared here
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:389:20: warning: 'stof' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  389 |     float frq2_f = std::stof(r2.frequency);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4146:3: note: resolves to this declaration
 4146 |   stof(const string& __str, size_t* __idx = 0)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:391:5: warning: variable 'width_kHz' of type 'float' can be declared 'const' [misc-const-correctness]
  391 |     float width_kHz = 25.0f; // VHF channel width
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:391:23: warning: 25.0f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  391 |     float width_kHz = 25.0f; // VHF channel width
      |                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:391:23: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  391 |     float width_kHz = 25.0f; // VHF channel width
      |                       ^   ~
      |                           F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:392:5: warning: variable 'channel_core' of type 'float' can be declared 'const' [misc-const-correctness]
  392 |     float channel_core = 12.5f; // VHF channel core
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:392:26: warning: 12.5f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  392 |     float channel_core = 12.5f; // VHF channel core
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:392:26: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  392 |     float channel_core = 12.5f; // VHF channel core
      |                          ^   ~
      |                              F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:394:5: warning: variable 'filter' of type 'float' can be declared 'const' [misc-const-correctness]
  394 |     float filter = getChannelAlignment(frq1_f, frq2_f, width_kHz, channel_core);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:400:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  400 | void FGCom_radiowaveModel_VHF::processAudioSamples_VHF(int highpass_cutoff, int lowpass_cutoff, 
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:400:32: warning: method 'processAudioSamples_VHF' can be made static [readability-convert-member-functions-to-static]
  400 | void FGCom_radiowaveModel_VHF::processAudioSamples_VHF(int highpass_cutoff, int lowpass_cutoff, 
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:400:77: warning: 2 adjacent parameters of 'processAudioSamples_VHF' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
  400 | void FGCom_radiowaveModel_VHF::processAudioSamples_VHF(int highpass_cutoff, int lowpass_cutoff, 
      |                                                                             ^~~~~~~~~~~~~~~~~~~
  401 |                                                        float minimumNoiseVolume, float maximumNoiseVolume, 
      |                                                        ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:400:81: note: the first parameter in the range is 'lowpass_cutoff'
  400 | void FGCom_radiowaveModel_VHF::processAudioSamples_VHF(int highpass_cutoff, int lowpass_cutoff, 
      |                                                                                 ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:401:62: note: the last parameter in the range is 'minimumNoiseVolume'
  401 |                                                        float minimumNoiseVolume, float maximumNoiseVolume, 
      |                                                              ^~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:401:56: note: 'int' and 'float' may be implicitly converted
  401 |                                                        float minimumNoiseVolume, float maximumNoiseVolume, 
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:402:68: warning: the parameter 'lclRadio' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  402 |                                                        fgcom_radio lclRadio, float signalQuality, 
      |                                                                    ^
      |                                                        const      &
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:406:5: warning: 'fgcom_audio_makeMono' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  406 |     fgcom_audio_makeMono(outputPCM, sampleCount, channelCount);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:51:6: note: resolves to this declaration
   51 | void fgcom_audio_makeMono(float *outputPCM, uint32_t sampleCount, uint16_t channelCount);
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:409:5: warning: 'fgcom_audio_filter' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  409 |     fgcom_audio_filter(highpass_cutoff, lowpass_cutoff, outputPCM, sampleCount, channelCount, sampleRateHz);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:59:6: note: resolves to this declaration
   59 | void fgcom_audio_filter(int highpass_cutoff, int lowpass_cutoff, float *outputPCM, uint32_t sampleCount, uint16_t channelCount, uint32_t sampleRateHz);
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:412:5: warning: 'fgcom_audio_applyVolume' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  412 |     fgcom_audio_applyVolume(lclRadio.volume, outputPCM, sampleCount, channelCount);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:45:6: note: resolves to this declaration
   45 | void fgcom_audio_applyVolume(float volume, float *outputPCM, uint32_t sampleCount, uint16_t channelCount);
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:415:5: warning: variable 'noise_level' of type 'float' can be declared 'const' [misc-const-correctness]
  415 |     float noise_level = minimumNoiseVolume + (1.0f - signalQuality) * (maximumNoiseVolume - minimumNoiseVolume);
      |     ^
      |           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:415:47: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
  415 |     float noise_level = minimumNoiseVolume + (1.0f - signalQuality) * (maximumNoiseVolume - minimumNoiseVolume);
      |                                               ^  ~
      |                                                  F
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:416:5: warning: 'fgcom_audio_addNoise' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  416 |     fgcom_audio_addNoise(noise_level, outputPCM, sampleCount, channelCount);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:27:6: note: resolves to this declaration
   27 | void fgcom_audio_addNoise(float noiseVolume, float *outputPCM, uint32_t sampleCount, uint16_t channelCount);
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:419:5: warning: 'fgcom_audio_applySignalQualityDegradation' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  419 |     fgcom_audio_applySignalQualityDegradation(outputPCM, sampleCount, channelCount, signalQuality);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:37:6: note: resolves to this declaration
   37 | void fgcom_audio_applySignalQualityDegradation(float *outputPCM, uint32_t sampleCount, uint16_t channelCount, float dropoutProbability);
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.cpp:422:5: warning: 'fgcom_audio_applyVolume' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  422 |     fgcom_audio_applyVolume(signalQuality, outputPCM, sampleCount, channelCount);
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/audio.h:45:6: note: resolves to this declaration
   45 | void fgcom_audio_applyVolume(float volume, float *outputPCM, uint32_t sampleCount, uint16_t channelCount);
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef RADIO_MODEL_VHF_H
      |         ^~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_VHF_H
   19 | #define RADIO_MODEL_VHF_H
      |         ~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_RADIO_MODEL_VHF_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include "radio_model.h"
      | ^        ~~~~~~~~~~~~~~~
      |          "antenna_ground_system.h"
   22 | #include "pattern_interpolation.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "antenna_pattern_mapping.h"
   23 | #include "antenna_ground_system.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "atmospheric_ducting.h"
   24 | #include "antenna_pattern_mapping.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |          "enhanced_multipath.h"
   25 | #include "propagation_physics.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~
      |          "pattern_interpolation.h"
   26 | #include "atmospheric_ducting.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~~
      |          "propagation_physics.h"
   27 | #include "enhanced_multipath.h"
      |          ~~~~~~~~~~~~~~~~~~~~~~
      |          "radio_model.h"
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:34:7: warning: class 'FGCom_radiowaveModel_VHF' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   34 | class FGCom_radiowaveModel_VHF : public FGCom_radiowaveModel {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:39:10: warning: use default member initializer for 'patterns_initialized' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   39 |     bool patterns_initialized;
      |          ^                   
      |                              {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:43:10: warning: use default member initializer for 'ducting_initialized' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   43 |     bool ducting_initialized;
      |          ^                  
      |                             {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:47:10: warning: use default member initializer for 'multipath_initialized' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   47 |     bool multipath_initialized;
      |          ^                    
      |                               {false}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:70:18: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   70 |     virtual void processAudioSamples(fgcom_radio lclRadio, float signalQuality, 
      |     ~~~~~~~      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:74:36: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   74 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1,
      |     ~~~~~~~                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:74:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 |     virtual fgcom_radiowave_signal getSignal(double lat1, double lon1, float alt1,
      |             ~~~~~~~~~~~~~~~~~~~~~~ ^
      |             auto
   75 |                           double lat2, double lon2, float alt2, float power) override;
      |                                                                              -> fgcom_radiowave_signal
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:78:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   78 |     float calcPowerDistance(float power_watts, double distance_km, 
      |     ~~~~~ ^
      |     auto
   79 |                           double altitude_m, double frequency_mhz);
      |                                                                   
      |                                                                    -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:82:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   82 |     virtual std::string getType() override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:82:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |     virtual std::string getType() override;
      |             ~~~~~~~~~~~ ^
      |             auto                  -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:83:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   83 |     virtual std::string conv_chan2freq(std::string frq) override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:83:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   83 |     virtual std::string conv_chan2freq(std::string frq) override;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:84:25: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   84 |     virtual std::string conv_freq2chan(std::string frq) override;
      |     ~~~~~~~             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:84:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     virtual std::string conv_freq2chan(std::string frq) override;
      |             ~~~~~~~~~~~ ^
      |             auto                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:19: warning: 'virtual' is redundant since the function is already declared 'override' [cppcoreguidelines-explicit-virtual-functions,hicpp-use-override,modernize-use-override]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |     ~~~~~~~       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |             ~~~~~ ^
      |             auto                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:43: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:85:59: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
   85 |     virtual float getFrqMatch(fgcom_radio r1, fgcom_radio r2) override;
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:88:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   88 |     float getAntennaGain(const std::string& antenna_name, int frequency_mhz, 
      |     ~~~~~ ^
      |     auto
   89 |                         double elevation_deg, double azimuth_deg, double altitude_m, 
   90 |                         int vehicle_type, int antenna_type);
      |                                                            
      |                                                             -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:93:5: warning: function 'getAvailableVHFPatterns' should be marked [[nodiscard]] [modernize-use-nodiscard]
   93 |     std::vector<std::string> getAvailableVHFPatterns() const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:93:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     std::vector<std::string> getAvailableVHFPatterns() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                              
      |     auto                                                     -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:96:5: warning: function 'hasVHFPattern' should be marked [[nodiscard]] [modernize-use-nodiscard]
   96 |     bool hasVHFPattern(const std::string& pattern_name) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/radio_model_vhf.h:96:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   96 |     bool hasVHFPattern(const std::string& pattern_name) const;
      |     ~~~~ ^                                                   
      |     auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_SOLAR_DATA_H
      |         ^~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_SOLAR_DATA_H
   19 | #define FGCOM_SOLAR_DATA_H
      |         ~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_SOLAR_DATA_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:22:1: warning: system include chrono not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <chrono>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:23:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   24 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:24:1: warning: system include thread not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   24 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   25 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:25:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h [llvmlibc-restrict-system-libc-headers]
   25 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   26 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: warning: accessing fields in struct 'fgcom_solar_conditions' is inefficient due to padding; only needs 41 bytes but is using 48 bytes [altera-struct-pack-align]
   28 | struct fgcom_solar_conditions {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'fgcom_solar_conditions'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: warning: accessing fields in struct 'fgcom_solar_conditions' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   28 | struct fgcom_solar_conditions {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:28:8: note: use "__attribute__((aligned(64)))" to align struct 'fgcom_solar_conditions' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:29:11: warning: member variable 'sfi' has public visibility [misc-non-private-member-variables-in-classes]
   29 |     float sfi;                  // Solar Flux Index (10.7cm)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:30:11: warning: member variable 'k_index' has public visibility [misc-non-private-member-variables-in-classes]
   30 |     float k_index;              // Geomagnetic K-index (0-9)
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:31:11: warning: member variable 'a_index' has public visibility [misc-non-private-member-variables-in-classes]
   31 |     float a_index;              // Planetary A-index
      |           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:32:12: warning: member variable 'solar_zenith' has public visibility [misc-non-private-member-variables-in-classes]
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:33:10: warning: member variable 'is_day' has public visibility [misc-non-private-member-variables-in-classes]
   33 |     bool is_day;                // Day/night flag
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:34:9: warning: member variable 'day_of_year' has public visibility [misc-non-private-member-variables-in-classes]
   34 |     int day_of_year;            // Day of year (1-366)
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:35:12: warning: member variable 'solar_declination' has public visibility [misc-non-private-member-variables-in-classes]
   35 |     double solar_declination;   // Solar declination angle
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:36:43: warning: member variable 'timestamp' has public visibility [misc-non-private-member-variables-in-classes]
   36 |     std::chrono::system_clock::time_point timestamp;
      |                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:38:5: warning: 'fgcom_solar_conditions' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   38 |     fgcom_solar_conditions() {
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:39:9: warning: 'sfi' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   29 |     float sfi;                  // Solar Flux Index (10.7cm)
      |              
      |              {70.0}
   30 |     float k_index;              // Geomagnetic K-index (0-9)
   31 |     float a_index;              // Planetary A-index
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
      |         ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:39:15: warning: 70.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   39 |         sfi = 70.0;             // Default quiet sun value
      |               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:40:9: warning: 'k_index' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   30 |     float k_index;              // Geomagnetic K-index (0-9)
      |                  
      |                  {2.0}
   31 |     float a_index;              // Planetary A-index
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:40:19: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   40 |         k_index = 2.0;          // Default quiet conditions
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:41:9: warning: 'a_index' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   31 |     float a_index;              // Planetary A-index
      |                  
      |                  {7.0}
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
      |         ^~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:41:19: warning: 7.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   41 |         a_index = 7.0;          // Default quiet conditions
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:42:9: warning: 'solar_zenith' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   32 |     double solar_zenith;        // Solar zenith angle (degrees)
      |                        
      |                        {90.0}
   33 |     bool is_day;                // Day/night flag
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
      |         ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:42:24: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         solar_zenith = 90.0;    // Default to horizon
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:43:9: warning: 'is_day' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   33 |     bool is_day;                // Day/night flag
      |                
      |                {false}
   34 |     int day_of_year;            // Day of year (1-366)
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
   43 |         is_day = false;         // Default to night
      |         ^~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:44:9: warning: 'day_of_year' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   34 |     int day_of_year;            // Day of year (1-366)
      |                    
      |                    {1}
   35 |     double solar_declination;   // Solar declination angle
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
   43 |         is_day = false;         // Default to night
   44 |         day_of_year = 1;
      |         ^~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:45:9: warning: 'solar_declination' should be initialized in an in-class default member initializer [cppcoreguidelines-prefer-member-initializer]
   35 |     double solar_declination;   // Solar declination angle
      |                             
      |                             {0.0}
   36 |     std::chrono::system_clock::time_point timestamp;
   37 |     
   38 |     fgcom_solar_conditions() {
   39 |         sfi = 70.0;             // Default quiet sun value
   40 |         k_index = 2.0;          // Default quiet conditions
   41 |         a_index = 7.0;          // Default quiet conditions
   42 |         solar_zenith = 90.0;    // Default to horizon
   43 |         is_day = false;         // Default to night
   44 |         day_of_year = 1;
   45 |         solar_declination = 0.0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:46:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |         timestamp = std::chrono::system_clock::now();
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:922:13: note: resolves to this declaration
  922 |       class time_point
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:46:21: warning: 'now' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   46 |         timestamp = std::chrono::system_clock::now();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/chrono.h:1239:7: note: resolves to this declaration
 1239 |       now() noexcept;
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:51:7: warning: class 'FGCom_SolarDataProvider' defines a destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   51 | class FGCom_SolarDataProvider {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:73:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     fgcom_solar_conditions getCurrentConditions();
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^                     
      |     auto                                          -> fgcom_solar_conditions
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:74:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   74 |     bool updateFromNOAA();
      |     ~~~~ ^               
      |     auto                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:79:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   79 |     double calculateSolarZenith(double lat, double lon, const std::chrono::system_clock::time_point& time);
      |     ~~~~~~ ^                                                                                              
      |     auto                                                                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:80:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   80 |     double calculateSolarDeclination(int day_of_year);
      |     ~~~~~~ ^                                         
      |     auto                                              -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:81:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   81 |     bool isDayTime(double lat, double lon, const std::chrono::system_clock::time_point& time);
      |     ~~~~ ^                                                                                   
      |     auto                                                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:82:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   82 |     int getDayOfYear(const std::chrono::system_clock::time_point& time);
      |     ~~~ ^                                                              
      |     auto                                                                -> int
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:85:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   85 |     bool isDataValid();
      |     ~~~~ ^            
      |     auto               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:89:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   89 |     bool isFeatureEnabled(const std::string& feature_name);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:92:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   92 |     float getSolarFluxEffect(float frequency_mhz);
      |     ~~~~~ ^                                      
      |     auto                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:93:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   93 |     float getGeomagneticEffect(float k_index);
      |     ~~~~~ ^                                  
      |     auto                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:94:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   94 |     float getDayNightEffect(double solar_zenith, float frequency_mhz);
      |     ~~~~~ ^                                                          
      |     auto                                                              -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:99:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   99 |     bool fetchSolarFluxIndex();
      |     ~~~~ ^                    
      |     auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:100:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  100 |     bool fetchKIndex();
      |     ~~~~ ^            
      |     auto               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:101:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  101 |     bool fetchAIndex();
      |     ~~~~ ^            
      |     auto               -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:105:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  105 |     std::string makeHTTPRequest(const std::string& url);
      |     ~~~~~~~~~~~ ^                                      
      |     auto                                                -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:106:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  106 |     bool parseSFIResponse(const std::string& json_data);
      |     ~~~~ ^                                             
      |     auto                                                -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:107:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  107 |     bool parseKIndexResponse(const std::string& json_data);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:108:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  108 |     bool parseAIndexResponse(const std::string& json_data);
      |     ~~~~ ^                                                
      |     auto                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:115:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  115 |     static float calculateSolarEffect(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  116 |                                     float frequency_mhz, 
  117 |                                     double distance_km,
  118 |                                     double solar_zenith);
      |                                                         
      |                                                          -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:121:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     static float calculateMUF(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  122 |                             double distance_km,
  123 |                             double solar_zenith);
      |                                                 
      |                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:126:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     static float calculateFOT(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  127 |                             double distance_km);
      |                                                
      |                                                 -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:130:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  130 |     static float calculateLUF(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  131 |                             double distance_km,
  132 |                             double solar_zenith);
      |                                                 
      |                                                  -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:135:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  135 |     static float calculateAbsorption(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  136 |                                    float frequency_mhz,
  137 |                                    double solar_zenith);
      |                                                        
      |                                                         -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/solar_data.h:140:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  140 |     static float calculateSkipZone(const fgcom_solar_conditions& conditions, 
      |            ~~~~~ ^
      |            auto
  141 |                                  float frequency_mhz,
  142 |                                  double distance_km);
      |                                                     
      |                                                      -> float
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:19:1: warning: #includes are not sorted properly [llvm-include-order]
   19 | #include <iostream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:19:1: warning: system include iostream not allowed [llvmlibc-restrict-system-libc-headers]
   19 | #include <iostream>
      | ^~~~~~~~~~~~~~~~~~~
   20 | #include <fstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:20:1: warning: system include fstream not allowed [llvmlibc-restrict-system-libc-headers]
   20 | #include <fstream>
      | ^~~~~~~~~~~~~~~~~~
   21 | #include <sstream>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:21:1: warning: system include sstream not allowed [llvmlibc-restrict-system-libc-headers]
   21 | #include <sstream>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:21:1: warning: included header sstream is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:22:1: warning: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers]
   22 | #include <algorithm>
      | ^~~~~~~~~~~~~~~~~~~~
   23 | #include <cmath>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:23:1: warning: system include cmath not allowed [llvmlibc-restrict-system-libc-headers]
   23 | #include <cmath>
      | ^~~~~~~~~~~~~~~~
   24 | #include <filesystem>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:24:1: warning: system include filesystem not allowed [llvmlibc-restrict-system-libc-headers]
   24 | #include <filesystem>
      | ^~~~~~~~~~~~~~~~~~~~~
   25 | #include <chrono>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:25:1: warning: system include chrono not allowed [llvmlibc-restrict-system-libc-headers]
   25 | #include <chrono>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:25:1: warning: included header chrono is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:26:1: warning: system include queue not allowed [llvmlibc-restrict-system-libc-headers]
   26 | #include <queue>
      | ^~~~~~~~~~~~~~~~
   27 | #include <condition_variable>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:27:1: warning: system include condition_variable not allowed [llvmlibc-restrict-system-libc-headers]
   27 | #include <condition_variable>
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   28 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:28:1: warning: system include thread not allowed [llvmlibc-restrict-system-libc-headers]
   28 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   29 | #include <future>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:29:1: warning: system include future not allowed [llvmlibc-restrict-system-libc-headers]
   29 | #include <future>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:29:1: warning: included header future is not used directly [misc-include-cleaner]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:25: warning: no header providing "size_t" is directly included [misc-include-cleaner]
   19 | #include <iostream>
   20 | #include <fstream>
   21 | #include <sstream>
   22 | #include <algorithm>
   23 | #include <cmath>
   24 | #include <filesystem>
   25 | #include <chrono>
   26 | #include <queue>
   27 | #include <condition_variable>
   28 | #include <thread>
   29 | #include <future>
   30 | // #include <curl/curl.h>  // CURL not available, using alternative implementation
   31 | 
   32 | // Helper function for CURL downloads
   33 | // This function is used when CURL is available, but may be unused in current build
   34 | [[maybe_unused]] static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
      |                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   34 | [[maybe_unused]] static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:32: warning: function 'WriteCallback' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:34:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   34 | [[maybe_unused]] static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
      |                         ~~~~~~ ^
      |                         auto                                                                         -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:35:5: warning: variable 'total_size' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
   35 |     size_t total_size = size * nmemb;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:36:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
   36 |     std::ofstream* file = static_cast<std::ofstream*>(userp);
      |     ^~~~~~~~~~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:37:47: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'streamsize' (aka 'long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
   37 |     file->write(static_cast<char*>(contents), total_size);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:45:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   45 | FGCom_TerrainElevationManager::FGCom_TerrainElevationManager() 
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:50:32: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   50 | FGCom_TerrainElevationManager::~FGCom_TerrainElevationManager() {
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:54:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   54 | bool FGCom_TerrainElevationManager::initialize(const TerrainElevationConfig& config) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:54:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   54 | bool FGCom_TerrainElevationManager::initialize(const TerrainElevationConfig& config) {
      | ~~~~                                ^
      | auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:55:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   55 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:55:10: warning: no header providing "std::lock_guard" is directly included [misc-include-cleaner]
   21 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:55:26: warning: no header providing "std::mutex" is directly included [misc-include-cleaner]
   55 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:57:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   57 |     if (initialized.load()) {
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:61:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   61 |     this->config = config;
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: resolves to this declaration
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:64:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   64 |         initialized.store(true);
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:69:10: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   69 |     if (!std::filesystem::exists(config.data_path)) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:69:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   69 |     if (!std::filesystem::exists(config.data_path)) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:71:13: warning: 'create_directories' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   71 |             std::filesystem::create_directories(config.data_path);
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:87:8: note: resolves to this declaration
   87 |   bool create_directories(const path& __p);
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:71:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   71 |             std::filesystem::create_directories(config.data_path);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:72:29: warning: no header providing "std::exception" is directly included [misc-include-cleaner]
   19 |         } catch (const std::exception& e) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:73:62: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   73 |             setLastError("Failed to create data directory: " + std::string(e.what()));
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:73:64: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   73 |             setLastError("Failed to create data directory: " + std::string(e.what()));
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:73:69: warning: no header providing "std::string" is directly included [misc-include-cleaner]
   28 |             setLastError("Failed to create data directory: " + std::string(e.what()));
      |                                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:79:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   79 |     workers_running.store(true);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:80:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
   80 |     for (size_t i = 0; i < std::thread::hardware_concurrency(); ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:80:28: warning: 'hardware_concurrency' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   80 |     for (size_t i = 0; i < std::thread::hardware_concurrency(); ++i) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:217:5: note: resolves to this declaration
  217 |     hardware_concurrency() noexcept;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:81:38: warning: 'workerThread' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
   81 |         worker_threads.emplace_back(&FGCom_TerrainElevationManager::workerThread, this);
      |                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:236:10: note: resolves to this declaration
  236 |     void workerThread();
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:84:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   84 |     initialized.store(true);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:88:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
   88 | void FGCom_TerrainElevationManager::shutdown() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:89:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   89 |     if (!initialized.load()) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:94:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   94 |     shutdown_requested.store(true);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:98:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
   98 |         std::lock_guard<std::mutex> lock(task_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  103 |     for (auto& thread : worker_threads) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:23: warning: 'operator!=<std::thread *, std::vector<std::thread>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     for (auto& thread : worker_threads) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:23: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     for (auto& thread : worker_threads) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:103:23: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  103 |     for (auto& thread : worker_threads) {
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:109:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  109 |     workers_running.store(false);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:116:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  116 |     initialized.store(false);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:119:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  119 | void FGCom_TerrainElevationManager::setConfig(const TerrainElevationConfig& config) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:120:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  120 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:121:18: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  121 |     this->config = config;
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: resolves to this declaration
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:124:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  124 | double FGCom_TerrainElevationManager::getElevation(double latitude, double longitude) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:124:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  124 | double FGCom_TerrainElevationManager::getElevation(double latitude, double longitude) {
      | ~~~~~~                                ^
      | auto                                                                                  -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:125:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  125 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:129:5: warning: variable 'tile_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  129 |     std::string tile_name = getTileName(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:133:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  133 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:134:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  134 |         auto it = tile_cache.find(tile_name);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:135:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |         if (it != tile_cache.end() && it->second.loaded) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:135:41: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  135 |         if (it != tile_cache.end() && it->second.loaded) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:136:23: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  136 |             cache_hits++;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:137:43: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  137 |             return interpolateElevation(it->second, latitude, longitude);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:141:17: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  141 |     cache_misses++;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:145:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  145 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:146:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  146 |         auto it = tile_cache.find(tile_name);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:147:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |         if (it != tile_cache.end() && it->second.loaded) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:147:41: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  147 |         if (it != tile_cache.end() && it->second.loaded) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:148:43: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  148 |             return interpolateElevation(it->second, latitude, longitude);
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:155:47: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  155 | TerrainProfile FGCom_TerrainElevationManager::getTerrainProfile(double lat1, double lon1, 
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:155:47: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 | TerrainProfile FGCom_TerrainElevationManager::getTerrainProfile(double lat1, double lon1, 
      | ~~~~~~~~~~~~~~                                ^
      | auto
  156 |                                                                double lat2, double lon2, 
  157 |                                                                double resolution_m) {
      |                                                                                     -> TerrainProfile
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:160:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  160 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:5: warning: variable 'cache_key' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:29: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:34: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:50: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:58: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:79: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:165:85: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  165 |     std::string cache_key = std::to_string(lat1) + "," + std::to_string(lon1) + "," +
      |                                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:28: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:55: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:57: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:78: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:166:84: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  166 |                            std::to_string(lat2) + "," + std::to_string(lon2) + "," +
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:167:28: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  167 |                            std::to_string(resolution_m);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4251:3: note: resolves to this declaration
 4251 |   to_string(double __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:170:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  170 |         std::lock_guard<std::mutex> lock(cache_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:171:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  171 |         auto it = profile_cache.find(cache_key);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:172:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  172 |         if (it != profile_cache.end()) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:173:23: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  173 |             cache_hits++;
      |                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:174:22: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  174 |             return it->second;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:178:17: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  178 |     cache_misses++;
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:181:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  181 |     profile.points = generateProfilePoints(lat1, lon1, lat2, lon2, resolution_m);
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:766:7: note: resolves to this declaration
  766 |       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:189:45: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  189 |     profile.max_elevation_m = profile.points[0].elevation_m;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:190:45: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  190 |     profile.min_elevation_m = profile.points[0].elevation_m;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  192 |     for (const auto& point : profile.points) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:28: warning: 'operator!=<TerrainPoint *, std::vector<TerrainPoint>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  192 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  192 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:192:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  192 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:194:35: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  194 |         profile.max_elevation_m = std::max(profile.max_elevation_m, point.elevation_m);
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:195:35: warning: 'min<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  195 |         profile.min_elevation_m = std::min(profile.min_elevation_m, point.elevation_m);
      |                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:233:5: note: resolves to this declaration
  233 |     min(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:198:51: warning: narrowing conversion from 'size_type' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  198 |     profile.average_elevation_m = sum_elevation / profile.points.size();
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:206:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  206 |     for (size_t i = 0; i < profile.points.size(); ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:207:43: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  207 |         const auto& point = profile.points[i];
      |                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:208:9: warning: variable 'expected_elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  208 |         double expected_elevation = profile.points[0].elevation_m + 
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:208:51: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  208 |         double expected_elevation = profile.points[0].elevation_m + 
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:209:64: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  209 |             (profile.points.back().elevation_m - profile.points[0].elevation_m) * 
      |                                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_vector.h:1126:7: note: resolves to this declaration
 1126 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:212:54: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  212 |         if (point.elevation_m > expected_elevation + 10.0) { // 10m threshold
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:223:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  223 |         std::lock_guard<std::mutex> lock(cache_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:224:22: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |         profile_cache[cache_key] = profile;
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:224:34: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  224 |         profile_cache[cache_key] = profile;
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: note: resolves to this declaration
   54 | struct TerrainProfile {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:225:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  225 |         profiles_calculated++;
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:50: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      | ~~~~~~~~~~~~~~~~~                                ^
      | auto
  232 |                                                                    double lat2, double lon2, double alt2,
  233 |                                                                    double frequency_mhz) {
      |                                                                                          -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:82: warning: 2 adjacent parameters of 'analyzeObstruction' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:89: note: the first parameter in the range is 'lon1'
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                                                         ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:231:102: note: the last parameter in the range is 'alt1'
  231 | ObstructionResult FGCom_TerrainElevationManager::analyzeObstruction(double lat1, double lon1, double alt1,
      |                                                                                                      ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:232:81: warning: 2 adjacent parameters of 'analyzeObstruction' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  232 |                                                                    double lat2, double lon2, double alt2,
      |                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:232:88: note: the first parameter in the range is 'lon2'
  232 |                                                                    double lat2, double lon2, double alt2,
      |                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:232:101: note: the last parameter in the range is 'alt2'
  232 |                                                                    double lat2, double lon2, double alt2,
      |                                                                                                     ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:236:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  236 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:241:5: warning: variable 'profile' of type 'TerrainProfile' can be declared 'const' [misc-const-correctness]
  241 |     TerrainProfile profile = getTerrainProfile(lat1, lon1, lat2, lon2, config.terrain_resolution_m);
      |     ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:253:12: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  253 |     result = analyzer.analyzeObstruction(profile, alt1, alt2, frequency_mhz);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: note: resolves to this declaration
   70 | struct ObstructionResult {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:258:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  258 | bool FGCom_TerrainElevationManager::loadASTERGDEMTile(double latitude, double longitude) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:258:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  258 | bool FGCom_TerrainElevationManager::loadASTERGDEMTile(double latitude, double longitude) {
      | ~~~~                                ^
      | auto                                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:259:5: warning: variable 'tile_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  259 |     std::string tile_name = getTileName(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:263:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  263 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:264:14: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  264 |         auto it = tile_cache.find(tile_name);
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:265:16: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  265 |         if (it != tile_cache.end() && it->second.loaded) {
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
  320 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:265:41: warning: 'operator->' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  265 |         if (it != tile_cache.end() && it->second.loaded) {
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:281:7: note: resolves to this declaration
  281 |       operator->() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:272:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     tile.filename = tile_name + ".tif";
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:272:31: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  272 |     tile.filename = tile_name + ".tif";
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:277:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  277 |     tile.file_path = config.data_path + "/" + tile.filename;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:277:39: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  277 |     tile.file_path = config.data_path + "/" + tile.filename;
      |                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:277:45: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  277 |     tile.file_path = config.data_path + "/" + tile.filename;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:282:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  282 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:283:19: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  283 |         tile_cache[tile_name] = tile;
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:283:31: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  283 |         tile_cache[tile_name] = tile;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: resolves to this declaration
  102 | struct ASTERGDEMTile {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:284:21: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  284 |         tiles_loaded++;
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:293:17: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  293 |                 std::lock_guard<std::mutex> lock(tile_mutex);
      |                 ^
      |                                             const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:294:27: warning: 'operator[]' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  294 |                 tile_cache[tile_name] = tile;
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
  504 |       operator[](const key_type& __k)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:294:39: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  294 |                 tile_cache[tile_name] = tile;
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: resolves to this declaration
  102 | struct ASTERGDEMTile {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:295:29: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  295 |                 tiles_loaded++;
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:385:7: note: resolves to this declaration
  385 |       operator++(int) noexcept
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:304:6: warning: no header providing "std::vector" is directly included [misc-include-cleaner]
   30 | std::vector<ASTERGDEMTile> FGCom_TerrainElevationManager::getAvailableTiles() const {
      |      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:304:59: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  304 | std::vector<ASTERGDEMTile> FGCom_TerrainElevationManager::getAvailableTiles() const {
      |                                                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:304:59: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  304 | std::vector<ASTERGDEMTile> FGCom_TerrainElevationManager::getAvailableTiles() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto                                                                                -> std::vector<ASTERGDEMTile>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:307:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  307 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  308 |     for (const auto& pair : tile_cache) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:27: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     for (const auto& pair : tile_cache) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
  401 |       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:27: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     for (const auto& pair : tile_cache) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
  358 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:308:27: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  308 |     for (const auto& pair : tile_cache) {
      |                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
  366 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:309:9: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  308 |     for (const auto& pair : tile_cache) {
  309 |         tiles.push_back(pair.second);
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:311:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  311 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:316:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  316 | bool FGCom_TerrainElevationManager::downloadASTERGDEMTile(const std::string& tile_name) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:316:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  316 | bool FGCom_TerrainElevationManager::downloadASTERGDEMTile(const std::string& tile_name) {
      | ~~~~                                ^
      | auto                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:316:37: warning: method 'downloadASTERGDEMTile' can be made const [readability-make-member-function-const]
  316 | bool FGCom_TerrainElevationManager::downloadASTERGDEMTile(const std::string& tile_name) {
      |                                     ^
      |                                                                                         const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:50: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:50: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      | ~~~~~~~~~~~~~~~~~                                ^
      | auto
  322 |                                                                       double lat2, double lon2, double alt2,
  323 |                                                                       double frequency_mhz) {
      |                                                                                             -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:84: warning: 2 adjacent parameters of 'calculateFresnelZone' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:91: note: the first parameter in the range is 'lon1'
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:321:104: note: the last parameter in the range is 'alt1'
  321 | FresnelZoneResult FGCom_TerrainElevationManager::calculateFresnelZone(double lat1, double lon1, double alt1,
      |                                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:322:84: warning: 2 adjacent parameters of 'calculateFresnelZone' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  322 |                                                                       double lat2, double lon2, double alt2,
      |                                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:322:91: note: the first parameter in the range is 'lon2'
  322 |                                                                       double lat2, double lon2, double alt2,
      |                                                                                           ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:322:104: note: the last parameter in the range is 'alt2'
  322 |                                                                       double lat2, double lon2, double alt2,
      |                                                                                                        ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:326:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  326 |     if (!config.enabled || !initialized.load()) {
      |                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:331:5: warning: variable 'profile' of type 'TerrainProfile' can be declared 'const' [misc-const-correctness]
  331 |     TerrainProfile profile = getTerrainProfile(lat1, lon1, lat2, lon2, config.terrain_resolution_m);
      |     ^
      |                    const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:343:12: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  343 |     result = analyzer.calculateFresnelZone(profile, alt1, alt2, frequency_mhz);
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: note: resolves to this declaration
   88 | struct FresnelZoneResult {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:348:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  348 | double FGCom_TerrainElevationManager::calculateDiffractionLoss(double obstruction_height_m, 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:348:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  348 | double FGCom_TerrainElevationManager::calculateDiffractionLoss(double obstruction_height_m, 
      | ~~~~~~                                ^
      | auto
  349 |                                                               double distance_km,
  350 |                                                               double frequency_mhz) {
      |                                                                                     -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:348:39: warning: method 'calculateDiffractionLoss' can be made const [readability-make-member-function-const]
  348 | double FGCom_TerrainElevationManager::calculateDiffractionLoss(double obstruction_height_m, 
      |                                       ^
  349 |                                                               double distance_km,
  350 |                                                               double frequency_mhz) {
      |                                                                                     const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:363:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  363 | void FGCom_TerrainElevationManager::clearCache() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:364:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  364 |     std::lock_guard<std::mutex> lock(tile_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:366:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  366 |     tiles_loaded.store(0);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:473:29: note: default parameter was declared here
  473 |       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:369:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  369 | void FGCom_TerrainElevationManager::clearProfileCache() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:370:5: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  370 |     std::lock_guard<std::mutex> lock(cache_mutex);
      |     ^
      |                                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:372:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  372 |     profiles_calculated.store(0);
      |     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:473:29: note: default parameter was declared here
  473 |       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:375:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  375 | size_t FGCom_TerrainElevationManager::getCacheSize() const {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:375:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  375 | size_t FGCom_TerrainElevationManager::getCacheSize() const {
      | ~~~~~~                                ^
      | auto                                                       -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:376:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  376 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:377:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  377 |     size_t size = tile_cache.size();
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:378:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  378 |     const_cast<FGCom_TerrainElevationManager*>(this)->tile_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:382:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  382 | size_t FGCom_TerrainElevationManager::getProfileCacheSize() const {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:382:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  382 | size_t FGCom_TerrainElevationManager::getProfileCacheSize() const {
      | ~~~~~~                                ^
      | auto                                                              -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:383:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  383 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:384:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  384 |     size_t size = profile_cache.size();
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:385:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  385 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:389:74: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  389 | FGCom_TerrainElevationManager::Statistics FGCom_TerrainElevationManager::getStatistics() const {
      |                                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:389:74: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  389 | FGCom_TerrainElevationManager::Statistics FGCom_TerrainElevationManager::getStatistics() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto                                                                                           -> FGCom_TerrainElevationManager::Statistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:390:5: warning: uninitialized record type: 'stats' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
  390 |     Statistics stats;
      |     ^               
      |                     {}
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:391:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  391 |     stats.tiles_loaded = tiles_loaded.load();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:392:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  392 |     stats.profiles_calculated = profiles_calculated.load();
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:393:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  393 |     stats.cache_hits = cache_hits.load();
      |                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:394:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  394 |     stats.cache_misses = cache_misses.load();
      |                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/atomic_base.h:498:12: note: default parameter was declared here
  498 |       load(memory_order __m = memory_order_seq_cst) const noexcept
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:396:5: warning: variable 'total_requests' of type 'size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
  396 |     size_t total_requests = stats.cache_hits + stats.cache_misses;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:397:49: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  397 |     stats.cache_hit_rate = total_requests > 0 ? (double)stats.cache_hits / total_requests : 0.0;
      |                                                 ^~~~~~~~
      |                                                 static_cast<double>(    )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:397:76: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  397 |     stats.cache_hit_rate = total_requests > 0 ? (double)stats.cache_hits / total_requests : 0.0;
      |                                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: warning: performing an implicit widening conversion to type 'unsigned long' of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: note: make conversion explicit to silence this warning
   19 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^~~~~~~~~~~
      |                                                                               static_cast<unsigned long>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: note: perform multiplication in a wider type
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^~~~
      |                                                                               static_cast<long>( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:79: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:401:86: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  401 |                            getProfileCacheSize() * sizeof(TerrainProfile)) / (1024 * 1024);
      |                                                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:406:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  406 | std::string FGCom_TerrainElevationManager::getLastError() const {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:406:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  406 | std::string FGCom_TerrainElevationManager::getLastError() const {
      | ~~~~~~~~~~~                                ^
      | auto                                                            -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:407:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  407 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:409:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  409 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:413:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  413 | void FGCom_TerrainElevationManager::setLastError(const std::string& error) const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:414:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  414 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.lock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:415:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  415 |     const_cast<FGCom_TerrainElevationManager*>(this)->last_error = error;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:415:66: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  415 |     const_cast<FGCom_TerrainElevationManager*>(this)->last_error = error;
      |                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:416:5: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  416 |     const_cast<FGCom_TerrainElevationManager*>(this)->cache_mutex.unlock();
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:420:44: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  420 | std::string FGCom_TerrainElevationManager::getTileName(double latitude, double longitude) const {
      |                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:420:44: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:420:44: warning: method 'getTileName' can be made static [readability-convert-member-functions-to-static]
  420 | std::string FGCom_TerrainElevationManager::getTileName(double latitude, double longitude) const {
      |                                            ^                                              ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:421:5: warning: variable 'lat_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  421 |     int lat_tile = static_cast<int>(std::floor(latitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:422:5: warning: variable 'lon_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  422 |     int lon_tile = static_cast<int>(std::floor(longitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:5: warning: variable 'lat_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:56: warning: no header providing "std::to_string" is directly included [misc-include-cleaner]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:424:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  424 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:5: warning: variable 'lon_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:425:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  425 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:427:20: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  427 |     return lat_str + lon_str;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3553:5: note: resolves to this declaration
 3553 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:430:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  430 | bool FGCom_TerrainElevationManager::loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:430:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  430 | bool FGCom_TerrainElevationManager::loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile) {
      | ~~~~                                ^
      | auto                                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:430:37: warning: method 'loadTileFromFile' can be made const [readability-make-member-function-const]
  430 | bool FGCom_TerrainElevationManager::loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile) {
      |                                     ^
      |                                                                                                         const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:431:10: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  431 |     if (!std::filesystem::exists(tile_path)) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:431:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  431 |     if (!std::filesystem::exists(tile_path)) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:439:32: warning: 'file_size' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  439 |         tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:150:13: note: resolves to this declaration
  150 |   uintmax_t file_size(const path& __p);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:439:59: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  439 |         tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:442:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  442 |         setLastError("Failed to load tile from file: " + std::string(e.what()));
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:442:58: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  442 |         setLastError("Failed to load tile from file: " + std::string(e.what()));
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:39: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      | ~~~~~~                                ^
      | auto                                                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:39: warning: method 'interpolateElevation' can be made static [readability-convert-member-functions-to-static]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:87: warning: 2 adjacent parameters of 'interpolateElevation' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                                                                       ^~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:94: note: the first parameter in the range is 'lat'
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                                                                              ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:447:106: note: the last parameter in the range is 'lon'
  447 | double FGCom_TerrainElevationManager::interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon) {
      |                                                                                                          ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:455:5: warning: variable 'lat_frac' of type 'double' can be declared 'const' [misc-const-correctness]
  455 |     double lat_frac = lat - tile.min_lat;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:456:5: warning: variable 'lon_frac' of type 'double' can be declared 'const' [misc-const-correctness]
  456 |     double lon_frac = lon - tile.min_lon;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:459:20: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  459 |     return 100.0 + 50.0 * std::sin(lat_frac * M_PI) * std::cos(lon_frac * M_PI);
      |                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:459:47: warning: no header providing "M_PI" is directly included [misc-include-cleaner]
   21 |     return 100.0 + 50.0 * std::sin(lat_frac * M_PI) * std::cos(lon_frac * M_PI);
      |                                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:58: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:58: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      | ~~~~~~~~~~~~~~~~~~~~~~~~~                                ^
      | auto
  463 |                                                                              double lat2, double lon2, 
  464 |                                                                              double resolution_m) {
      |                                                                                                   -> std::vector<TerrainPoint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:80: warning: 2 adjacent parameters of 'generateProfilePoints' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:87: note: the first parameter in the range is 'lat1'
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                                                       ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:462:100: note: the last parameter in the range is 'lon1'
  462 | std::vector<TerrainPoint> FGCom_TerrainElevationManager::generateProfilePoints(double lat1, double lon1, 
      |                                                                                                    ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:463:78: warning: 3 adjacent parameters of 'generateProfilePoints' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  463 |                                                                              double lat2, double lon2, 
      |                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~
  464 |                                                                              double resolution_m) {
      |                                                                              ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:463:85: note: the first parameter in the range is 'lat2'
  463 |                                                                              double lat2, double lon2, 
      |                                                                                     ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:464:85: note: the last parameter in the range is 'resolution_m'
  464 |                                                                              double resolution_m) {
      |                                                                                     ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:472:5: warning: variable 'dlat' of type 'double' can be declared 'const' [misc-const-correctness]
  472 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:472:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  472 |     double dlat = (lat2 - lat1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:473:5: warning: variable 'dlon' of type 'double' can be declared 'const' [misc-const-correctness]
  473 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:473:42: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  473 |     double dlon = (lon2 - lon1) * M_PI / 180.0;
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:474:5: warning: variable 'a' of type 'double' can be declared 'const' [misc-const-correctness]
  474 |     double a = std::sin(dlat/2) * std::sin(dlat/2) + 
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:474:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  474 |     double a = std::sin(dlat/2) * std::sin(dlat/2) + 
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:475:39: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  475 |                std::cos(lat1 * M_PI / 180.0) * std::cos(lat2 * M_PI / 180.0) * 
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:475:71: warning: 180.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  475 |                std::cos(lat1 * M_PI / 180.0) * std::cos(lat2 * M_PI / 180.0) * 
      |                                                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:477:5: warning: variable 'c' of type 'double' can be declared 'const' [misc-const-correctness]
  477 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:477:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  477 |     double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1-a));
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:478:19: warning: 6371.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  478 |     distance_km = 6371.0 * c; // Earth radius in km
      |                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:481:5: warning: variable 'num_points' of type 'int' can be declared 'const' [misc-const-correctness]
  481 |     int num_points = static_cast<int>(distance_km * 1000.0 / resolution_m) + 1;
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:481:53: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  481 |     int num_points = static_cast<int>(distance_km * 1000.0 / resolution_m) + 1;
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:483:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  483 |     for (int i = 0; i < num_points; ++i) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:483:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'num_points' and may cause performance degradation [altera-id-dependent-backward-branch]
  483 |     for (int i = 0; i < num_points; ++i) {
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:481:5: note: inferred assignment of ID-dependent value from ID-dependent 
  481 |     int num_points = static_cast<int>(distance_km * 1000.0 / resolution_m) + 1;
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:484:9: warning: variable 'fraction' of type 'double' can be declared 'const' [misc-const-correctness]
  484 |         double fraction = static_cast<double>(i) / (num_points - 1);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:485:9: warning: variable 'lat' of type 'double' can be declared 'const' [misc-const-correctness]
  485 |         double lat = lat1 + (lat2 - lat1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:486:9: warning: variable 'lon' of type 'double' can be declared 'const' [misc-const-correctness]
  486 |         double lon = lon1 + (lon2 - lon1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:487:9: warning: variable 'dist' of type 'double' can be declared 'const' [misc-const-correctness]
  487 |         double dist = distance_km * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:489:9: warning: variable 'elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  489 |         double elevation = getElevation(lat, lon);
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:497:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  497 | bool FGCom_TerrainElevationManager::isPointInTile(const ASTERGDEMTile& tile, double lat, double lon) const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:497:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:497:37: warning: method 'isPointInTile' can be made static [readability-convert-member-functions-to-static]
  497 | bool FGCom_TerrainElevationManager::isPointInTile(const ASTERGDEMTile& tile, double lat, double lon) const {
      |                                     ^                                                                ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:502:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  502 | void FGCom_TerrainElevationManager::workerThread() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:503:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  503 |     while (workers_running.load()) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:503:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  503 |     while (workers_running.load()) {
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:504:14: warning: no header providing "std::function" is directly included [misc-include-cleaner]
   19 |         std::function<void()> task;
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:507:18: warning: no header providing "std::unique_lock" is directly included [misc-include-cleaner]
  507 |             std::unique_lock<std::mutex> lock(task_mutex);
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:508:72: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  508 |             task_cv.wait(lock, [this] { return !task_queue.empty() || !workers_running.load(); });
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:510:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  510 |             if (!workers_running.load()) {
      |                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:515:22: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  515 |                 task = task_queue.front();
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:469:7: note: resolves to this declaration
  469 |       operator=(const function& __x)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:522:21: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  522 |                 task();
      |                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:587:7: note: resolves to this declaration
  587 |       operator()(_ArgTypes... __args) const
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:524:50: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  524 |                 logError("Worker thread error: " + std::string(e.what()));
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:524:52: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  524 |                 logError("Worker thread error: " + std::string(e.what()));
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:530:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  530 | void FGCom_TerrainElevationManager::submitTask(std::function<void()> task) {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:530:70: warning: the parameter 'task' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  530 | void FGCom_TerrainElevationManager::submitTask(std::function<void()> task) {
      |                                                                      ^
      |                                                const                &
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:531:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  531 |     if (workers_running.load()) {
      |         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:532:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  532 |         std::lock_guard<std::mutex> lock(task_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:538:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  538 | void FGCom_TerrainElevationManager::evictOldCacheEntries() {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:541:9: warning: variable 'lock' of type 'std::lock_guard<std::mutex>' can be declared 'const' [misc-const-correctness]
  541 |         std::lock_guard<std::mutex> lock(tile_mutex);
      |         ^
      |                                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:542:56: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  542 |         if (tile_cache.size() > config.cache_size_mb / 10) { // Rough estimate
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:543:18: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
  543 |             auto it = tile_cache.begin();
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:549:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  549 | bool FGCom_TerrainElevationManager::isCacheFull() const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:549:37: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  549 | bool FGCom_TerrainElevationManager::isCacheFull() const {
      | ~~~~                                ^
      | auto                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:550:52: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  550 |     return getCacheSize() > config.cache_size_mb / 10; // Rough estimate
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:553:37: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  553 | void FGCom_TerrainElevationManager::logError(const std::string& error) const {
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:53: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:62: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:65: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:554:65: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  554 |     std::cerr << "[FGCom_TerrainElevationManager] " << error << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:24: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:46: warning: 2 adjacent parameters of 'FGCom_ASTERGDEMLoader' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:65: note: the first parameter in the range is 'data_path'
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                                                 ^~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:95: note: the last parameter in the range is 'download_url'
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                                                                               ^~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:46: warning: pass by value and use std::move [modernize-pass-by-value]
   30 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                              ^~~~~~~~~~~~~~~~~~
      |                                              std::string 
   31 |     : data_path(data_path), download_url(download_url), download_enabled(true) {
      |                          
      |                 std::move( )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:562:76: warning: pass by value and use std::move [modernize-pass-by-value]
  562 | FGCom_ASTERGDEMLoader::FGCom_ASTERGDEMLoader(const std::string& data_path, const std::string& download_url)
      |                                                                            ^~~~~~~~~~~~~~~~~~
      |                                                                            std::string 
  563 |     : data_path(data_path), download_url(download_url), download_enabled(true) {
      |                                                      
      |                                          std::move(  )
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:566:24: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default,modernize-use-equals-default]
  566 | FGCom_ASTERGDEMLoader::~FGCom_ASTERGDEMLoader() {
      |                        ^                        ~
      |                                                 = default;
  567 | }
      | ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:566:24: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  569 | bool FGCom_ASTERGDEMLoader::loadTile(double latitude, double longitude, ASTERGDEMTile& tile) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: warning: function 'loadTile' is within a recursive call chain [misc-no-recursion]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: note: example recursive call chain, starting from function 'loadTile'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:576:24: note: Frame #1: function 'loadTile' calls function 'loadTile' here:
  576 |                 return loadTile(latitude, longitude, tile);
      |                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:576:24: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:569:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  569 | bool FGCom_ASTERGDEMLoader::loadTile(double latitude, double longitude, ASTERGDEMTile& tile) {
      | ~~~~                        ^
      | auto                                                                                         -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:570:5: warning: variable 'tile_path' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  570 |     std::string tile_path = getTilePath(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:572:10: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  572 |     if (!std::filesystem::exists(tile_path)) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:572:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  572 |     if (!std::filesystem::exists(tile_path)) {
      |                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:573:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  573 |         if (download_enabled.load()) {
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:574:13: warning: variable 'tile_name' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  574 |             std::string tile_name = getTileFilename(latitude, longitude);
      |             ^
      |                         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:583:19: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  583 |     tile.filename = getTileFilename(latitude, longitude);
      |                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:588:20: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  588 |     tile.file_path = tile_path;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:590:28: warning: 'file_size' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  590 |     tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:150:13: note: resolves to this declaration
  150 |   uintmax_t file_size(const path& __p);
      |             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:590:55: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  590 |     tile.file_size_bytes = std::filesystem::file_size(tile_path);
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:595:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  595 | bool FGCom_ASTERGDEMLoader::downloadTile(const std::string& tile_name) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:595:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  595 | bool FGCom_ASTERGDEMLoader::downloadTile(const std::string& tile_name) {
      | ~~~~                        ^
      | auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:596:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  596 |     if (!download_enabled.load()) {
      |          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:600:5: warning: variable 'url' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  600 |     std::string url = constructDownloadURL(tile_name);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:5: warning: variable 'filepath' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:38: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:44: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:601:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  601 |     std::string filepath = data_path + "/" + tile_name + ".tif";
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:606:49: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  606 | std::vector<std::string> FGCom_ASTERGDEMLoader::getAvailableTiles() const {
      |                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:606:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  606 | std::vector<std::string> FGCom_ASTERGDEMLoader::getAvailableTiles() const {
      | ~~~~~~~~~~~~~~~~~~~~~~~~                        ^
      | auto                                                                      -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'begin' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:484:3: note: resolves to this declaration
  484 |   begin(directory_iterator __iter) noexcept
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'end' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:489:3: note: resolves to this declaration
  489 |   end(directory_iterator) noexcept
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'operator!=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:460:5: note: resolves to this declaration
  460 |     operator!=(const directory_iterator& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:431:28: note: resolves to this declaration
  431 |     const directory_entry& operator*() const noexcept;
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:32: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_dir.h:433:28: note: resolves to this declaration
  433 |     directory_iterator&    operator++();
      |                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:610:70: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  610 |         for (const auto& entry : std::filesystem::directory_iterator(data_path)) {
      |                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:611:69: warning: 'operator==' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  611 |             if (entry.is_regular_file() && entry.path().extension() == ".tif") {
      |                                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:560:17: note: resolves to this declaration
  560 |     friend bool operator==(const path& __lhs, const path& __rhs) noexcept
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:611:72: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  611 |             if (entry.is_regular_file() && entry.path().extension() == ".tif") {
      |                                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:616:53: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  616 |         logError("Failed to list available tiles: " + std::string(e.what()));
      |                                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:616:55: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  616 |         logError("Failed to list available tiles: " + std::string(e.what()));
      |                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:622:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  622 | bool FGCom_ASTERGDEMLoader::isTileAvailable(double latitude, double longitude) const {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:622:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  622 | bool FGCom_ASTERGDEMLoader::isTileAvailable(double latitude, double longitude) const {
      | ~~~~                        ^
      | auto                                                                                 -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:623:5: warning: variable 'tile_path' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  623 |     std::string tile_path = getTilePath(latitude, longitude);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:624:12: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  624 |     return std::filesystem::exists(tile_path);
      |            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:624:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  624 |     return std::filesystem::exists(tile_path);
      |                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:627:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  627 | std::string FGCom_ASTERGDEMLoader::getTilePath(double latitude, double longitude) const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:627:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  627 | std::string FGCom_ASTERGDEMLoader::getTilePath(double latitude, double longitude) const {
      | ~~~~~~~~~~~                        ^
      | auto                                                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:628:22: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  628 |     return data_path + "/" + getTileFilename(latitude, longitude);
      |                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:628:28: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  628 |     return data_path + "/" + getTileFilename(latitude, longitude);
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3651:5: note: resolves to this declaration
 3651 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:631:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  631 | std::string FGCom_ASTERGDEMLoader::getTileFilename(double latitude, double longitude) const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:631:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:631:36: warning: method 'getTileFilename' can be made static [readability-convert-member-functions-to-static]
  631 | std::string FGCom_ASTERGDEMLoader::getTileFilename(double latitude, double longitude) const {
      |                                    ^                                                  ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:632:5: warning: variable 'lat_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  632 |     int lat_tile = static_cast<int>(std::floor(latitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:633:5: warning: variable 'lon_tile' of type 'int' can be declared 'const' [misc-const-correctness]
  633 |     int lon_tile = static_cast<int>(std::floor(longitude));
      |     ^
      |         const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:5: warning: variable 'lat_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:635:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  635 |     std::string lat_str = (lat_tile >= 0) ? "N" + std::to_string(lat_tile) : "S" + std::to_string(-lat_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:5: warning: variable 'lon_str' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:49: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:51: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:636:84: warning: 'to_string' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  636 |     std::string lon_str = (lon_tile >= 0) ? "E" + std::to_string(lon_tile) : "W" + std::to_string(-lon_tile);
      |                                                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4162:3: note: resolves to this declaration
 4162 |   to_string(int __val)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:638:20: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  638 |     return lat_str + lon_str;
      |                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3553:5: note: resolves to this declaration
 3553 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:641:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  641 | bool FGCom_ASTERGDEMLoader::createDataDirectory() {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:641:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  641 | bool FGCom_ASTERGDEMLoader::createDataDirectory() {
      | ~~~~                        ^
      | auto                                              -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:643:14: warning: 'exists' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  643 |         if (!std::filesystem::exists(data_path)) {
      |              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:133:3: note: resolves to this declaration
  133 |   exists(const path& __p)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:643:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  643 |         if (!std::filesystem::exists(data_path)) {
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:644:13: warning: 'create_directories' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  644 |             std::filesystem::create_directories(data_path);
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_ops.h:87:8: note: resolves to this declaration
   87 |   bool create_directories(const path& __p);
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:644:49: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  644 |             std::filesystem::create_directories(data_path);
      |                                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/fs_path.h:330:37: note: default parameter was declared here
  330 |       path(_Source const& __source, format = auto_format)
      |                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:648:54: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  648 |         logError("Failed to create data directory: " + std::string(e.what()));
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3674:5: note: resolves to this declaration
 3674 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:648:56: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  648 |         logError("Failed to create data directory: " + std::string(e.what()));
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:653:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  653 | std::string FGCom_ASTERGDEMLoader::getLastError() const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:653:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  653 | std::string FGCom_ASTERGDEMLoader::getLastError() const {
      | ~~~~~~~~~~~                        ^
      | auto                                                    -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:657:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  657 | void FGCom_ASTERGDEMLoader::setLastError(const std::string& error) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:658:16: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  658 |     last_error = error;
      |                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:812:7: note: resolves to this declaration
  812 |       operator=(const basic_string& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:661:36: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  661 | std::string FGCom_ASTERGDEMLoader::constructDownloadURL(const std::string& tile_name) const {
      |                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:661:36: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  661 | std::string FGCom_ASTERGDEMLoader::constructDownloadURL(const std::string& tile_name) const {
      | ~~~~~~~~~~~                        ^
      | auto                                                                                        -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:662:25: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  662 |     return download_url + tile_name + ".tif";
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3553:5: note: resolves to this declaration
 3553 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:662:37: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  662 |     return download_url + tile_name + ".tif";
      |                                     ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:665:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  665 | bool FGCom_ASTERGDEMLoader::downloadFile(const std::string& url, const std::string& filepath) {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:665:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  665 | bool FGCom_ASTERGDEMLoader::downloadFile(const std::string& url, const std::string& filepath) {
      | ~~~~                        ^
      | auto                                                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:670:5: warning: variable 'temp_file' of type 'std::string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness]
  670 |     std::string temp_file = filepath + ".tmp";
      |     ^
      |                 const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:670:38: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  670 |     std::string temp_file = filepath + ".tmp";
      |                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3607:5: note: resolves to this declaration
 3607 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:13: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:82: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:94: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:102: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:673:108: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  673 |     command = "wget --timeout=30 --tries=3 --user-agent='FGCom-mumble/1.0' -O '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: calling 'system' uses a command processor [cert-env33-c]
  674 |     int result = system(command.c_str());
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: function is not thread safe [concurrency-mt-unsafe]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: 'system' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/stdlib.h:923:12: note: resolves to this declaration
  923 | extern int system (const char *__command) __wur;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:674:18: warning: no header providing "system" is directly included [misc-include-cleaner]
   19 |     int result = system(command.c_str());
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:17: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:853:7: note: resolves to this declaration
  853 |       operator=(basic_string&& __str)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:99: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:111: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:119: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                                       ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3637:5: note: resolves to this declaration
 3637 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:678:125: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  678 |         command = "curl --connect-timeout 30 --max-time 300 --user-agent 'FGCom-mumble/1.0' -o '" + temp_file + "' '" + url + "' 2>/dev/null";
      |                                                                                                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:679:18: warning: calling 'system' uses a command processor [cert-env33-c]
  679 |         result = system(command.c_str());
      |                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:679:18: warning: function is not thread safe [concurrency-mt-unsafe]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:679:18: warning: 'system' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
/usr/include/stdlib.h:923:12: note: resolves to this declaration
  923 | extern int system (const char *__command) __wur;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:683:50: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  683 |         setLastError("Failed to download file: " + url + " (wget/curl failed)");
      |                                                  ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:683:56: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  683 |         setLastError("Failed to download file: " + url + " (wget/curl failed)");
      |                                                        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3688:5: note: resolves to this declaration
 3688 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:688:52: warning: 'operator|' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  688 |     std::ifstream file(temp_file, std::ios::binary | std::ios::ate);
      |                                                    ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/ios_base.h:130:3: note: resolves to this declaration
  130 |   operator|(_Ios_Openmode __a, _Ios_Openmode __b)
      |   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:690:62: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  690 |         setLastError("Downloaded file could not be opened: " + temp_file);
      |                                                              ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:694:5: warning: variable 'size' of type 'std::streamsize' (aka 'long') can be declared 'const' [misc-const-correctness]
  694 |     std::streamsize size = file.tellg();
      |     ^
      |                     const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:698:51: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  698 |         setLastError("Downloaded file is empty: " + temp_file);
      |                                                   ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:9: warning: the value returned by this function should not be disregarded; neglecting it may lead to errors [cert-err33-c]
  699 |         std::remove(temp_file.c_str());
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:9: note: cast the expression to void to silence this warning
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:9: warning: 'remove' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  699 |         std::remove(temp_file.c_str());
      |         ^
/usr/include/stdio.h:158:12: note: resolves to this declaration
  158 | extern int remove (const char *__filename) __THROW;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:699:14: warning: no header providing "std::remove" is directly included [misc-include-cleaner]
   19 |         std::remove(temp_file.c_str());
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:704:9: warning: 'rename' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  704 |     if (std::rename(temp_file.c_str(), filepath.c_str()) != 0) {
      |         ^
/usr/include/stdio.h:160:12: note: resolves to this declaration
  160 | extern int rename (const char *__old, const char *__new) __THROW;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:704:14: warning: no header providing "std::rename" is directly included [misc-include-cleaner]
  704 |     if (std::rename(temp_file.c_str(), filepath.c_str()) != 0) {
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:705:75: warning: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  705 |         setLastError("Failed to move downloaded file to final location: " + filepath);
      |                                                                           ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:3571:5: note: resolves to this declaration
 3571 |     operator+(const _CharT* __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:706:9: warning: the value returned by this function should not be disregarded; neglecting it may lead to errors [cert-err33-c]
  706 |         std::remove(temp_file.c_str());
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:706:9: note: cast the expression to void to silence this warning
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:706:9: warning: 'remove' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  706 |         std::remove(temp_file.c_str());
      |         ^
/usr/include/stdio.h:158:12: note: resolves to this declaration
  158 | extern int remove (const char *__filename) __THROW;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:713:29: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  713 | void FGCom_ASTERGDEMLoader::logError(const std::string& error) const {
      |                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:713:29: warning: method 'logError' can be made static [readability-convert-member-functions-to-static]
  713 | void FGCom_ASTERGDEMLoader::logError(const std::string& error) const {
      |                             ^                                  ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:15: warning: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
  662 |     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:45: warning: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:4032:5: note: resolves to this declaration
 4032 |     operator<<(basic_ostream<_CharT, _Traits>& __os,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:54: warning: 'operator<<' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                                      ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
  110 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:57: warning: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
  735 |     endl(basic_ostream<_CharT, _Traits>& __os)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:714:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  714 |     std::cerr << "[FGCom_ASTERGDEMLoader] " << error << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:721:35: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  721 | FGCom_TerrainObstructionAnalyzer::FGCom_TerrainObstructionAnalyzer(double fresnel_clearance, 
      |                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:728:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  728 | ObstructionResult FGCom_TerrainObstructionAnalyzer::analyzeObstruction(const TerrainProfile& profile,
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:728:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  728 | ObstructionResult FGCom_TerrainObstructionAnalyzer::analyzeObstruction(const TerrainProfile& profile,
      | ~~~~~~~~~~~~~~~~~                                   ^
      | auto
  729 |                                                                        double alt1, double alt2,
  730 |                                                                        double frequency_mhz) {
      |                                                                                              -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:743:33: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  743 |         result.obstruction_type = "mountain"; // Simplified classification
      |                                 ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:823:7: note: resolves to this declaration
  823 |       operator=(const _CharT* __s)
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:746:34: warning: 20.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  746 |         result.terrain_loss_db = 20.0 * std::log10(profile.obstruction_height_m / 10.0);
      |                                  ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:746:83: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  746 |         result.terrain_loss_db = 20.0 * std::log10(profile.obstruction_height_m / 10.0);
      |                                                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:758:9: warning: variable 'fresnel' of type 'FresnelZoneResult' can be declared 'const' [misc-const-correctness]
  758 |         FresnelZoneResult fresnel = calculateFresnelZone(profile, alt1, alt2, frequency_mhz);
      |         ^
      |                           const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:766:53: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  766 | FresnelZoneResult FGCom_TerrainObstructionAnalyzer::calculateFresnelZone(const TerrainProfile& profile,
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:766:53: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  766 | FresnelZoneResult FGCom_TerrainObstructionAnalyzer::calculateFresnelZone(const TerrainProfile& profile,
      | ~~~~~~~~~~~~~~~~~                                   ^
      | auto
  767 |                                                                          double alt1, double alt2,
  768 |                                                                          double frequency_mhz) {
      |                                                                                                -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:767:87: warning: 2 adjacent parameters of 'calculateFresnelZone' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  767 |                                                                          double alt1, double alt2,
      |                                                                                       ^~~~~~~~~~~~
  768 |                                                                          double frequency_mhz) {
      |                                                                          ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:767:94: note: the first parameter in the range is 'alt2'
  767 |                                                                          double alt1, double alt2,
      |                                                                                              ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:768:81: note: the last parameter in the range is 'frequency_mhz'
  768 |                                                                          double frequency_mhz) {
      |                                                                                 ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:776:5: warning: variable 'total_distance_km' of type 'double' can be declared 'const' [misc-const-correctness]
  776 |     double total_distance_km = profile.points.back().distance_km;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      | ~~~~~~                                   ^
      | auto
  793 |                                                                 double distance_km,
  794 |                                                                 double frequency_mhz) {
      |                                                                                       -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:42: warning: method 'calculateDiffractionLoss' can be made const [readability-make-member-function-const]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                          ^
  793 |                                                                 double distance_km,
  794 |                                                                 double frequency_mhz) {
      |                                                                                       const
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:67: warning: 3 adjacent parameters of 'calculateDiffractionLoss' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
  793 |                                                                 double distance_km,
      |                                                                 ~~~~~~~~~~~~~~~~~~~
  794 |                                                                 double frequency_mhz) {
      |                                                                 ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:792:74: note: the first parameter in the range is 'obstruction_height_m'
  792 | double FGCom_TerrainObstructionAnalyzer::calculateDiffractionLoss(double obstruction_height_m, 
      |                                                                          ^~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:794:72: note: the last parameter in the range is 'frequency_mhz'
  794 |                                                                 double frequency_mhz) {
      |                                                                        ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:800:5: warning: variable 'wavelength_m' of type 'double' can be declared 'const' [misc-const-correctness]
  800 |     double wavelength_m = 300.0 / frequency_mhz; // Speed of light / frequency
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:800:27: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  800 |     double wavelength_m = 300.0 / frequency_mhz; // Speed of light / frequency
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:801:5: warning: variable 'fresnel_radius' of type 'double' can be declared 'const' [misc-const-correctness]
  801 |     double fresnel_radius = std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:801:68: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  801 |     double fresnel_radius = std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:801:77: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  801 |     double fresnel_radius = std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:803:5: warning: variable 'v' of type 'double' can be declared 'const' [misc-const-correctness]
  803 |     double v = obstruction_height_m / fresnel_radius;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:803:12: warning: variable name 'v' is too short, expected at least 3 characters [readability-identifier-length]
  803 |     double v = obstruction_height_m / fresnel_radius;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:805:14: warning: 0.8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  805 |     if (v < -0.8) {
      |              ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:807:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  807 |     } else if (v < 0.0) {
      |       ^~~~~~~~~~~~~~~~~~~
  808 |         return 6.0 + 8.0 * v; // Partial obstruction
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  809 |     } else {
      |     ~~~~~~~~
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  811 |     }
      |     ~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:808:16: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  808 |         return 6.0 + 8.0 * v; // Partial obstruction
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:808:22: warning: 8.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  808 |         return 6.0 + 8.0 * v; // Partial obstruction
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:810:16: warning: 6.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:810:22: warning: 8.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:810:32: warning: 8.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  810 |         return 6.0 + 8.0 * v + 8.0 * v * v; // Full obstruction
      |                                ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:814:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  814 | bool FGCom_TerrainObstructionAnalyzer::isLineOfSightClear(const TerrainProfile& profile, 
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:814:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  814 | bool FGCom_TerrainObstructionAnalyzer::isLineOfSightClear(const TerrainProfile& profile, 
      | ~~~~                                   ^
      | auto
  815 |                                                          double alt1, double alt2) {
      |                                                                                    -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:814:40: warning: method 'isLineOfSightClear' can be made static [readability-convert-member-functions-to-static]
  814 | bool FGCom_TerrainObstructionAnalyzer::isLineOfSightClear(const TerrainProfile& profile, 
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:820:5: warning: variable 'total_distance_km' of type 'double' can be declared 'const' [misc-const-correctness]
  820 |     double total_distance_km = profile.points.back().distance_km;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  822 |     for (const auto& point : profile.points) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:5: warning: replace loop by 'std::all_of()' [readability-use-anyofallof]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:28: warning: 'operator!=<const TerrainPoint *, std::vector<TerrainPoint>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  822 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  822 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:822:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  822 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:824:9: warning: variable 'fraction' of type 'double' can be declared 'const' [misc-const-correctness]
  824 |         double fraction = point.distance_km / total_distance_km;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:825:9: warning: variable 'expected_elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  825 |         double expected_elevation = alt1 + (alt2 - alt1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:828:54: warning: 10.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  828 |         if (point.elevation_m > expected_elevation + 10.0) { // 10m threshold
      |                                                      ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:42: warning: method 'calculateFresnelRadius' can be made static [readability-convert-member-functions-to-static]
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                          ^                                                                ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:65: warning: 2 adjacent parameters of 'calculateFresnelRadius' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:72: note: the first parameter in the range is 'distance_km'
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                                                        ^~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:836:92: note: the last parameter in the range is 'frequency_mhz'
  836 | double FGCom_TerrainObstructionAnalyzer::calculateFresnelRadius(double distance_km, double frequency_mhz) const {
      |                                                                                            ^~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:837:5: warning: variable 'wavelength_m' of type 'double' can be declared 'const' [misc-const-correctness]
  837 |     double wavelength_m = 300.0 / frequency_mhz;
      |     ^
      |            const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:837:27: warning: 300.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  837 |     double wavelength_m = 300.0 / frequency_mhz;
      |                           ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:838:51: warning: 1000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  838 |     return std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                   ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:838:60: warning: 2.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  838 |     return std::sqrt(wavelength_m * distance_km * 1000.0 / 2.0);
      |                                                            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:841:42: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  841 | double FGCom_TerrainObstructionAnalyzer::calculateRequiredClearance(const TerrainProfile& profile, 
      |                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:841:42: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:841:42: warning: method 'calculateRequiredClearance' can be made static [readability-convert-member-functions-to-static]
  841 | double FGCom_TerrainObstructionAnalyzer::calculateRequiredClearance(const TerrainProfile& profile, 
      |                                          ^
  842 |                                                                    double alt1, double alt2) const {
      |                                                                                              ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  845 |     for (const auto& point : profile.points) {
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:28: warning: 'operator!=<const TerrainPoint *, std::vector<TerrainPoint>>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  845 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1241:5: note: resolves to this declaration
 1241 |     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:28: warning: 'operator*' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  845 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1099:7: note: resolves to this declaration
 1099 |       operator*() const _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:845:28: warning: 'operator++' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  845 |     for (const auto& point : profile.points) {
      |                            ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_iterator.h:1109:7: note: resolves to this declaration
 1109 |       operator++() _GLIBCXX_NOEXCEPT
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:846:9: warning: variable 'fraction' of type 'double' can be declared 'const' [misc-const-correctness]
  846 |         double fraction = point.distance_km / profile.points.back().distance_km;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:847:9: warning: variable 'expected_elevation' of type 'double' can be declared 'const' [misc-const-correctness]
  847 |         double expected_elevation = alt1 + (alt2 - alt1) * fraction;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:848:9: warning: variable 'clearance' of type 'double' can be declared 'const' [misc-const-correctness]
  848 |         double clearance = point.elevation_m - expected_elevation;
      |         ^
      |                const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:849:25: warning: 'max<double>' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  849 |         max_clearance = std::max(max_clearance, clearance);
      |                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:257:5: note: resolves to this declaration
  257 |     max(const _Tp& __a, const _Tp& __b)
      |     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:855:40: warning: declaration must be enclosed within the 'LIBC_NAMESPACE' namespace [llvmlibc-implementation-in-namespace]
  855 | bool FGCom_TerrainObstructionAnalyzer::checkFresnelZoneClearance(const TerrainProfile& profile, 
      |                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:855:40: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  855 | bool FGCom_TerrainObstructionAnalyzer::checkFresnelZoneClearance(const TerrainProfile& profile, 
      | ~~~~                                   ^
      | auto
  856 |                                                                double alt1, double alt2,
  857 |                                                                double frequency_mhz) const {
      |                                                                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:859:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
  859 |     FGCom_TerrainObstructionAnalyzer* non_const_this = const_cast<FGCom_TerrainObstructionAnalyzer*>(this);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |     auto
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:859:56: warning: do not use const_cast to remove const qualifier [cppcoreguidelines-pro-type-const-cast]
  859 |     FGCom_TerrainObstructionAnalyzer* non_const_this = const_cast<FGCom_TerrainObstructionAnalyzer*>(this);
      |                                                        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:860:5: warning: variable 'fresnel' of type 'FresnelZoneResult' can be declared 'const' [misc-const-correctness]
  860 |     FresnelZoneResult fresnel = non_const_this->calculateFresnelZone(profile, alt1, alt2, frequency_mhz);
      |     ^
      |                       const 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:18:9: warning: header guard does not follow preferred style [llvm-header-guard]
   18 | #ifndef FGCOM_TERRAIN_ELEVATION_H
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_ELEVATION_H
   19 | #define FGCOM_TERRAIN_ELEVATION_H
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~
      |         HOME_HAAKEN_GITHUB_PROJECTS_FGCOM_MUMBLE_CLIENT_MUMBLE_PLUGIN_LIB_TERRAIN_ELEVATION_H
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:21:1: warning: #includes are not sorted properly [llvm-include-order]
   21 | #include <string>
      | ^
note: this fix will not be applied because it overlaps with another fix
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:21:1: warning: system include string not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   21 | #include <string>
      | ^~~~~~~~~~~~~~~~~
   22 | #include <vector>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:22:1: warning: system include vector not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   22 | #include <vector>
      | ^~~~~~~~~~~~~~~~~
   23 | #include <map>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:23:1: warning: system include map not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   23 | #include <map>
      | ^~~~~~~~~~~~~~
   24 | #include <memory>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:24:1: warning: system include memory not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   24 | #include <memory>
      | ^~~~~~~~~~~~~~~~~
   25 | #include <mutex>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:25:1: warning: system include mutex not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   25 | #include <mutex>
      | ^~~~~~~~~~~~~~~~
   26 | #include <atomic>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:26:1: warning: system include atomic not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   26 | #include <atomic>
      | ^~~~~~~~~~~~~~~~~
   27 | #include <thread>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:27:1: warning: system include thread not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   27 | #include <thread>
      | ^~~~~~~~~~~~~~~~~
   28 | #include <future>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:28:1: warning: system include future not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   28 | #include <future>
      | ^~~~~~~~~~~~~~~~~
   29 | #include <functional>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:29:1: warning: system include functional not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   29 | #include <functional>
      | ^~~~~~~~~~~~~~~~~~~~~
   30 | #include <queue>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:30:1: warning: system include queue not allowed, transitively included from /home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h [llvmlibc-restrict-system-libc-headers]
   30 | #include <queue>
      | ^~~~~~~~~~~~~~~~
   31 | 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:40:8: warning: accessing fields in struct 'TerrainPoint' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
   40 | struct TerrainPoint {
      |        ^
   41 |     double latitude;
   42 |     double longitude;
   43 |     double elevation_m;
   44 |     double distance_km;
   45 |     
   46 |     TerrainPoint() : latitude(0.0), longitude(0.0), elevation_m(0.0), distance_km(0.0) {}
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
   48 |         : latitude(lat), longitude(lon), elevation_m(elev), distance_km(dist) {}
   49 | };
      |  
      |   __attribute__((aligned(32)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:40:8: note: use "__attribute__((aligned(32)))" to align struct 'TerrainPoint' to 32 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:41:12: warning: member variable 'latitude' has public visibility [misc-non-private-member-variables-in-classes]
   41 |     double latitude;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:42:12: warning: member variable 'longitude' has public visibility [misc-non-private-member-variables-in-classes]
   42 |     double longitude;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:43:12: warning: member variable 'elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
   43 |     double elevation_m;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:44:12: warning: member variable 'distance_km' has public visibility [misc-non-private-member-variables-in-classes]
   44 |     double distance_km;
      |            ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:46:5: warning: 'TerrainPoint' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   46 |     TerrainPoint() : latitude(0.0), longitude(0.0), elevation_m(0.0), distance_km(0.0) {}
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:5: warning: 'TerrainPoint' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:18: warning: 4 adjacent parameters of 'TerrainPoint' of similar type ('double') are easily swapped by mistake [bugprone-easily-swappable-parameters]
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:25: note: the first parameter in the range is 'lat'
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                         ^~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:62: note: the last parameter in the range is 'dist'
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                                                              ^~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:47:55: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
   47 |     TerrainPoint(double lat, double lon, double elev, double dist = 0.0) 
      |                                                       ^           ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: warning: accessing fields in struct 'TerrainProfile' is inefficient due to padding; only needs 65 bytes but is using 72 bytes [altera-struct-pack-align]
   54 | struct TerrainProfile {
      |        ^
   55 |     std::vector<TerrainPoint> points;
   56 |     double max_elevation_m;
   57 |     double min_elevation_m;
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
   65 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'TerrainProfile'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: warning: accessing fields in struct 'TerrainProfile' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   54 | struct TerrainProfile {
      |        ^
   55 |     std::vector<TerrainPoint> points;
   56 |     double max_elevation_m;
   57 |     double min_elevation_m;
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
   65 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:54:8: note: use "__attribute__((aligned(128)))" to align struct 'TerrainProfile' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:55:31: warning: member variable 'points' has public visibility [misc-non-private-member-variables-in-classes]
   55 |     std::vector<TerrainPoint> points;
      |                               ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:56:12: warning: use default member initializer for 'max_elevation_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   56 |     double max_elevation_m;
      |            ^              
      |                           {0.0}
   57 |     double min_elevation_m;
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |                        ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:56:12: warning: member variable 'max_elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:57:12: warning: use default member initializer for 'min_elevation_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   57 |     double min_elevation_m;
      |            ^              
      |                           {0.0}
   58 |     double average_elevation_m;
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |                                              ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:57:12: warning: member variable 'min_elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:58:12: warning: use default member initializer for 'average_elevation_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   58 |     double average_elevation_m;
      |            ^                  
      |                               {0.0}
   59 |     bool line_of_sight_clear;
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:58:12: warning: member variable 'average_elevation_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:59:10: warning: use default member initializer for 'line_of_sight_clear' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   59 |     bool line_of_sight_clear;
      |          ^                  
      |                             {true}
   60 |     double obstruction_height_m;
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:59:10: warning: member variable 'line_of_sight_clear' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:60:12: warning: use default member initializer for 'obstruction_height_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   60 |     double obstruction_height_m;
      |            ^                   
      |                                {0.0}
   61 |     double obstruction_distance_km;
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
      |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:60:12: warning: member variable 'obstruction_height_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:61:12: warning: use default member initializer for 'obstruction_distance_km' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   61 |     double obstruction_distance_km;
      |            ^                      
      |                                   {0.0}
   62 |     
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
   64 |                       line_of_sight_clear(true), obstruction_height_m(0.0), obstruction_distance_km(0.0) {}
      |                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:61:12: warning: member variable 'obstruction_distance_km' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:63:5: warning: 'TerrainProfile' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   63 |     TerrainProfile() : max_elevation_m(0.0), min_elevation_m(0.0), average_elevation_m(0.0),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: warning: accessing fields in struct 'ObstructionResult' is inefficient due to padding; only needs 74 bytes but is using 88 bytes [altera-struct-pack-align]
   70 | struct ObstructionResult {
      |        ^
   71 |     bool blocked;
   72 |     double obstruction_height_m;
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
   83 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ObstructionResult'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: warning: accessing fields in struct 'ObstructionResult' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
   70 | struct ObstructionResult {
      |        ^
   71 |     bool blocked;
   72 |     double obstruction_height_m;
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
   83 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:70:8: note: use "__attribute__((aligned(128)))" to align struct 'ObstructionResult' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:71:10: warning: use default member initializer for 'blocked' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   71 |     bool blocked;
      |          ^      
      |                 {false}
   72 |     double obstruction_height_m;
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |                           ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:71:10: warning: member variable 'blocked' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:72:12: warning: use default member initializer for 'obstruction_height_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   72 |     double obstruction_height_m;
      |            ^                   
      |                                {0.0}
   73 |     double obstruction_distance_km;
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:72:12: warning: member variable 'obstruction_height_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:73:12: warning: use default member initializer for 'obstruction_distance_km' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   73 |     double obstruction_distance_km;
      |            ^                      
      |                                   {0.0}
   74 |     double terrain_loss_db;
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:73:12: warning: member variable 'obstruction_distance_km' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:74:12: warning: use default member initializer for 'terrain_loss_db' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   74 |     double terrain_loss_db;
      |            ^              
      |                           {0.0}
   75 |     double diffraction_loss_db;
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
      |                          ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:74:12: warning: member variable 'terrain_loss_db' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:75:12: warning: use default member initializer for 'diffraction_loss_db' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   75 |     double diffraction_loss_db;
      |            ^                  
      |                               {0.0}
   76 |     bool fresnel_zone_clear;
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
      |                                                ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:75:12: warning: member variable 'diffraction_loss_db' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:76:10: warning: use default member initializer for 'fresnel_zone_clear' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   76 |     bool fresnel_zone_clear;
      |          ^                 
      |                            {true}
   77 |     double fresnel_clearance_percent;
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
      |                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:76:10: warning: member variable 'fresnel_zone_clear' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:77:12: warning: use default member initializer for 'fresnel_clearance_percent' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   77 |     double fresnel_clearance_percent;
      |            ^                        
      |                                     {0.0}
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
   79 |     
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
   81 |                          terrain_loss_db(0.0), diffraction_loss_db(0.0), fresnel_zone_clear(true),
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:77:12: warning: member variable 'fresnel_clearance_percent' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:78:17: warning: member variable 'obstruction_type' has public visibility [misc-non-private-member-variables-in-classes]
   78 |     std::string obstruction_type;  // "mountain", "building", "hill", "none"
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:80:5: warning: 'ObstructionResult' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   80 |     ObstructionResult() : blocked(false), obstruction_height_m(0.0), obstruction_distance_km(0.0),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:82:58: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
   82 |                          fresnel_clearance_percent(0.0), obstruction_type("none") {}
      |                                                          ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: warning: accessing fields in struct 'FresnelZoneResult' is inefficient due to padding; only needs 33 bytes but is using 40 bytes [altera-struct-pack-align]
   88 | struct FresnelZoneResult {
      |        ^
   89 |     double fresnel_radius_m;
   90 |     double clearance_percent;
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
   97 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'FresnelZoneResult'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: warning: accessing fields in struct 'FresnelZoneResult' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
   88 | struct FresnelZoneResult {
      |        ^
   89 |     double fresnel_radius_m;
   90 |     double clearance_percent;
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
   97 | };
      |  
      |   __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:88:8: note: use "__attribute__((aligned(64)))" to align struct 'FresnelZoneResult' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:89:12: warning: use default member initializer for 'fresnel_radius_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   89 |     double fresnel_radius_m;
      |            ^               
      |                            {0.0}
   90 |     double clearance_percent;
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |                           ~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:89:12: warning: member variable 'fresnel_radius_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:90:12: warning: use default member initializer for 'clearance_percent' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   90 |     double clearance_percent;
      |            ^                
      |                             {0.0}
   91 |     bool zone_clear;
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |                                                  ~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:90:12: warning: member variable 'clearance_percent' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:91:10: warning: use default member initializer for 'zone_clear' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   91 |     bool zone_clear;
      |          ^         
      |                    {true}
   92 |     double required_clearance_m;
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |                                                                          ~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:91:10: warning: member variable 'zone_clear' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:92:12: warning: use default member initializer for 'required_clearance_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   92 |     double required_clearance_m;
      |            ^                   
      |                                {0.0}
   93 |     double actual_clearance_m;
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:92:12: warning: member variable 'required_clearance_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:93:12: warning: use default member initializer for 'actual_clearance_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   93 |     double actual_clearance_m;
      |            ^                 
      |                              {0.0}
   94 |     
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
   96 |                          required_clearance_m(0.0), actual_clearance_m(0.0) {}
      |                                                     ~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:93:12: warning: member variable 'actual_clearance_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:95:5: warning: 'FresnelZoneResult' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
   95 |     FresnelZoneResult() : fresnel_radius_m(0.0), clearance_percent(0.0), zone_clear(true),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: warning: accessing fields in struct 'ASTERGDEMTile' is inefficient due to padding; only needs 105 bytes but is using 112 bytes [altera-struct-pack-align]
  102 | struct ASTERGDEMTile {
      |        ^
  103 |     std::string filename;
  104 |     double min_lat, max_lat;
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
  112 | };
      |  
      |   __attribute__((packed))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'ASTERGDEMTile'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: warning: accessing fields in struct 'ASTERGDEMTile' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  102 | struct ASTERGDEMTile {
      |        ^
  103 |     std::string filename;
  104 |     double min_lat, max_lat;
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
  112 | };
      |  
      |   __attribute__((aligned(128)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:102:8: note: use "__attribute__((aligned(128)))" to align struct 'ASTERGDEMTile' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:103:17: warning: member variable 'filename' has public visibility [misc-non-private-member-variables-in-classes]
  103 |     std::string filename;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:12: warning: use default member initializer for 'min_lat' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  104 |     double min_lat, max_lat;
      |            ^      
      |                   {0.0}
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                       ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:12: warning: member variable 'min_lat' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:21: warning: use default member initializer for 'max_lat' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  104 |     double min_lat, max_lat;
      |                     ^      
      |                            {0.0}
  105 |     double min_lon, max_lon;
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                                     ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:104:21: warning: member variable 'max_lat' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:12: warning: use default member initializer for 'min_lon' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  105 |     double min_lon, max_lon;
      |            ^      
      |                   {0.0}
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                                                   ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:12: warning: member variable 'min_lon' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:21: warning: use default member initializer for 'max_lon' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  105 |     double min_lon, max_lon;
      |                     ^      
      |                            {0.0}
  106 |     std::string file_path;
  107 |     bool loaded;
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |                                                                 ~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:105:21: warning: member variable 'max_lon' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:106:17: warning: member variable 'file_path' has public visibility [misc-non-private-member-variables-in-classes]
  106 |     std::string file_path;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:107:10: warning: use default member initializer for 'loaded' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  107 |     bool loaded;
      |          ^     
      |                {false}
  108 |     size_t file_size_bytes;
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
      |                      ~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:107:10: warning: member variable 'loaded' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:108:12: warning: use default member initializer for 'file_size_bytes' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  108 |     size_t file_size_bytes;
      |            ^              
      |                           {0}
  109 |     
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
  111 |                      loaded(false), file_size_bytes(0) {}
      |                                     ~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:108:12: warning: member variable 'file_size_bytes' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:110:5: warning: 'ASTERGDEMTile' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  110 |     ASTERGDEMTile() : min_lat(0.0), max_lat(0.0), min_lon(0.0), max_lon(0.0), 
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: warning: accessing fields in struct 'TerrainElevationConfig' is inefficient due to padding; only needs 142 bytes but is using 184 bytes [altera-struct-pack-align]
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'TerrainElevationConfig'
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: warning: accessing fields in struct 'TerrainElevationConfig' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
  117 | struct TerrainElevationConfig {
      |        ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: use "__attribute__((aligned(128)))" to align struct 'TerrainElevationConfig' to 128 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: warning: Excessive padding in 'struct TerrainElevationConfig' (42 padding bytes, where 2 is optimal). Optimal fields order: cache_size_mb, terrain_resolution_m, fresnel_clearance_percent, max_profile_distance_km, profile_cache_size_mb, elevation_source, data_path, download_url, enabled, auto_download, enable_obstruction_detection, enable_fresnel_zone, enable_diffraction, enable_profile_caching, consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
  117 | struct TerrainElevationConfig {
      | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
  118 |     bool enabled;
      |     ~~~~~~~~~~~~~
  119 |     std::string elevation_source;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  120 |     std::string data_path;
      |     ~~~~~~~~~~~~~~~~~~~~~~
  121 |     bool auto_download;
      |     ~~~~~~~~~~~~~~~~~~~
  122 |     std::string download_url;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  123 |     size_t cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~
  124 |     bool enable_obstruction_detection;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  125 |     double terrain_resolution_m;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  126 |     bool enable_fresnel_zone;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     double fresnel_clearance_percent;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  128 |     bool enable_diffraction;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     double max_profile_distance_km;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  130 |     bool enable_profile_caching;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 |     size_t profile_cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  132 |     
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:117:8: note: Excessive padding in 'struct TerrainElevationConfig' (42 padding bytes, where 2 is optimal). Optimal fields order: cache_size_mb, terrain_resolution_m, fresnel_clearance_percent, max_profile_distance_km, profile_cache_size_mb, elevation_source, data_path, download_url, enabled, auto_download, enable_obstruction_detection, enable_fresnel_zone, enable_diffraction, enable_profile_caching, consider reordering the fields or adding explicit padding members
  117 | struct TerrainElevationConfig {
      | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
  118 |     bool enabled;
      |     ~~~~~~~~~~~~~
  119 |     std::string elevation_source;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  120 |     std::string data_path;
      |     ~~~~~~~~~~~~~~~~~~~~~~
  121 |     bool auto_download;
      |     ~~~~~~~~~~~~~~~~~~~
  122 |     std::string download_url;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  123 |     size_t cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~
  124 |     bool enable_obstruction_detection;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  125 |     double terrain_resolution_m;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  126 |     bool enable_fresnel_zone;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |     double fresnel_clearance_percent;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  128 |     bool enable_diffraction;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~
  129 |     double max_profile_distance_km;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  130 |     bool enable_profile_caching;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  131 |     size_t profile_cache_size_mb;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  132 |     
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:118:10: warning: use default member initializer for 'enabled' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  118 |     bool enabled;
      |          ^      
      |                 {false}
  119 |     std::string elevation_source;
  120 |     std::string data_path;
  121 |     bool auto_download;
  122 |     std::string download_url;
  123 |     size_t cache_size_mb;
  124 |     bool enable_obstruction_detection;
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
      |                                ~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:118:10: warning: member variable 'enabled' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:119:17: warning: member variable 'elevation_source' has public visibility [misc-non-private-member-variables-in-classes]
  119 |     std::string elevation_source;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:120:17: warning: member variable 'data_path' has public visibility [misc-non-private-member-variables-in-classes]
  120 |     std::string data_path;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:121:10: warning: use default member initializer for 'auto_download' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  121 |     bool auto_download;
      |          ^            
      |                       {false}
  122 |     std::string download_url;
  123 |     size_t cache_size_mb;
  124 |     bool enable_obstruction_detection;
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
      |                                                                                ~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:121:10: warning: member variable 'auto_download' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:122:17: warning: member variable 'download_url' has public visibility [misc-non-private-member-variables-in-classes]
  122 |     std::string download_url;
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:123:12: warning: use default member initializer for 'cache_size_mb' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  123 |     size_t cache_size_mb;
      |            ^            
      |                         {1000}
  124 |     bool enable_obstruction_detection;
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
      |                               ~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:123:12: warning: member variable 'cache_size_mb' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:124:10: warning: use default member initializer for 'enable_obstruction_detection' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  124 |     bool enable_obstruction_detection;
      |          ^                           
      |                                      {true}
  125 |     double terrain_resolution_m;
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
      |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:124:10: warning: member variable 'enable_obstruction_detection' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:125:12: warning: use default member initializer for 'terrain_resolution_m' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  125 |     double terrain_resolution_m;
      |            ^                   
      |                                {30.0}
  126 |     bool enable_fresnel_zone;
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:125:12: warning: member variable 'terrain_resolution_m' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:126:10: warning: use default member initializer for 'enable_fresnel_zone' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  126 |     bool enable_fresnel_zone;
      |          ^                  
      |                             {true}
  127 |     double fresnel_clearance_percent;
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
      |                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:126:10: warning: member variable 'enable_fresnel_zone' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:127:12: warning: use default member initializer for 'fresnel_clearance_percent' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  127 |     double fresnel_clearance_percent;
      |            ^                        
      |                                     {0.6}
  128 |     bool enable_diffraction;
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:127:12: warning: member variable 'fresnel_clearance_percent' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:128:10: warning: use default member initializer for 'enable_diffraction' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  128 |     bool enable_diffraction;
      |          ^                 
      |                            {true}
  129 |     double max_profile_distance_km;
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
      |                                                               ~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:128:10: warning: member variable 'enable_diffraction' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:129:12: warning: use default member initializer for 'max_profile_distance_km' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  129 |     double max_profile_distance_km;
      |            ^                      
      |                                   {100.0}
  130 |     bool enable_profile_caching;
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
  139 |                               max_profile_distance_km(100.0), enable_profile_caching(true),
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:129:12: warning: member variable 'max_profile_distance_km' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:130:10: warning: use default member initializer for 'enable_profile_caching' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  130 |     bool enable_profile_caching;
      |          ^                     
      |                                {true}
  131 |     size_t profile_cache_size_mb;
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
  139 |                               max_profile_distance_km(100.0), enable_profile_caching(true),
      |                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:130:10: warning: member variable 'enable_profile_caching' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:131:12: warning: use default member initializer for 'profile_cache_size_mb' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  131 |     size_t profile_cache_size_mb;
      |            ^                    
      |                                 {500}
  132 |     
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
  139 |                               max_profile_distance_km(100.0), enable_profile_caching(true),
  140 |                               profile_cache_size_mb(500) {}
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:131:12: warning: member variable 'profile_cache_size_mb' has public visibility [misc-non-private-member-variables-in-classes]
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:133:5: warning: 'TerrainElevationConfig' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:133:48: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  133 |     TerrainElevationConfig() : enabled(false), elevation_source("aster_gdem"),
      |                                                ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:134:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  134 |                               data_path("/usr/share/fgcom-mumble/aster_gdem"), auto_download(false),
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:135:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  135 |                               download_url("https://e4ftl01.cr.usgs.gov/ASTT/ASTGTM.003/2000.03.01/"),
      |                               ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/basic_string.h:641:39: note: default parameter was declared here
  641 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      |                                       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:136:45: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  136 |                               cache_size_mb(1000), enable_obstruction_detection(true),
      |                                             ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:137:52: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  137 |                               terrain_resolution_m(30.0), enable_fresnel_zone(true),
      |                                                    ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:138:57: warning: 0.6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  138 |                               fresnel_clearance_percent(0.6), enable_diffraction(true),
      |                                                         ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:140:53: warning: 500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  140 |                               profile_cache_size_mb(500) {}
      |                                                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:146:7: warning: class 'FGCom_TerrainElevationManager' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  146 | class FGCom_TerrainElevationManager {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:174:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  174 |     bool initialize(const TerrainElevationConfig& config);
      |     ~~~~ ^                                               
      |     auto                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:176:5: warning: 'isInitialized' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  176 |     bool isInitialized() const { return initialized.load(); }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:176:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  176 |     bool isInitialized() const { return initialized.load(); }
      |     ~~~~ ^
      |     auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:176:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  176 |     bool isInitialized() const { return initialized.load(); }
      |                                         ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:180:5: warning: 'getConfig' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  180 |     TerrainElevationConfig getConfig() const { return config; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:180:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  180 |     TerrainElevationConfig getConfig() const { return config; }
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                     -> TerrainElevationConfig
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:183:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  183 |     double getElevation(double latitude, double longitude);
      |     ~~~~~~ ^                                              
      |     auto                                                   -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:184:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  184 |     TerrainProfile getTerrainProfile(double lat1, double lon1, double lat2, double lon2, 
      |     ~~~~~~~~~~~~~~ ^
      |     auto
  185 |                                    double resolution_m = 30.0);
      |                                                               
      |                                                                -> TerrainProfile
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:185:36: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  185 |                                    double resolution_m = 30.0);
      |                                    ^                   ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:185:58: warning: 30.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  185 |                                    double resolution_m = 30.0);
      |                                                          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:186:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  186 |     ObstructionResult analyzeObstruction(double lat1, double lon1, double alt1,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  187 |                                         double lat2, double lon2, double alt2,
  188 |                                         double frequency_mhz);
      |                                                              
      |                                                               -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:191:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  191 |     bool loadASTERGDEMTile(double latitude, double longitude);
      |     ~~~~ ^                                                   
      |     auto                                                      -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:192:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     std::vector<ASTERGDEMTile> getAvailableTiles() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^                        
      |     auto                                                 -> std::vector<ASTERGDEMTile>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:193:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     bool downloadASTERGDEMTile(const std::string& tile_name);
      |     ~~~~ ^                                                  
      |     auto                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:196:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  196 |     FresnelZoneResult calculateFresnelZone(double lat1, double lon1, double alt1,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  197 |                                          double lat2, double lon2, double alt2,
  198 |                                          double frequency_mhz);
      |                                                               
      |                                                                -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:201:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  201 |     double calculateDiffractionLoss(double obstruction_height_m, double distance_km,
      |     ~~~~~~ ^
      |     auto
  202 |                                   double frequency_mhz);
      |                                                        
      |                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:207:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  207 |     size_t getCacheSize() const;
      |     ~~~~~~ ^                   
      |     auto                        -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:208:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  208 |     size_t getProfileCacheSize() const;
      |     ~~~~~~ ^                          
      |     auto                               -> size_t
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:211:12: warning: accessing fields in struct 'Statistics' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 64 bytes [altera-struct-pack-align]
  211 |     struct Statistics {
      |            ^
  212 |         size_t tiles_loaded;
  213 |         size_t profiles_calculated;
  214 |         size_t cache_hits;
  215 |         size_t cache_misses;
  216 |         double cache_hit_rate;
  217 |         size_t memory_usage_mb;
  218 |     };
      |      
      |       __attribute__((aligned(64)))
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:211:12: note: use "__attribute__((aligned(64)))" to align struct 'Statistics' to 64 bytes
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:219:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  219 |     Statistics getStatistics() const;
      |     ~~~~~~~~~~ ^                    
      |     auto                             -> Statistics
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:222:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  222 |     std::string getLastError() const;
      |     ~~~~~~~~~~~ ^                   
      |     auto                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:227:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     std::string getTileName(double latitude, double longitude) const;
      |     ~~~~~~~~~~~ ^                                                   
      |     auto                                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:228:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  228 |     bool loadTileFromFile(const std::string& tile_path, ASTERGDEMTile& tile);
      |     ~~~~ ^                                                                  
      |     auto                                                                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:229:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  229 |     double interpolateElevation(const ASTERGDEMTile& tile, double lat, double lon);
      |     ~~~~~~ ^                                                                      
      |     auto                                                                           -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:230:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  230 |     std::vector<TerrainPoint> generateProfilePoints(double lat1, double lon1, 
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto
  231 |                                                    double lat2, double lon2, 
  232 |                                                    double resolution_m);
      |                                                                        
      |                                                                         -> std::vector<TerrainPoint>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:233:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     bool isPointInTile(const ASTERGDEMTile& tile, double lat, double lon) const;
      |     ~~~~ ^                                                                     
      |     auto                                                                        -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:241:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  241 |     bool isCacheFull() const;
      |     ~~~~ ^                  
      |     auto                     -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:251:7: warning: class 'FGCom_ASTERGDEMLoader' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
  251 | class FGCom_ASTERGDEMLoader {
      |       ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:262:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  262 |     bool loadTile(double latitude, double longitude, ASTERGDEMTile& tile);
      |     ~~~~ ^                                                               
      |     auto                                                                  -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:263:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  263 |     bool downloadTile(const std::string& tile_name);
      |     ~~~~ ^                                         
      |     auto                                            -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:264:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  264 |     std::vector<std::string> getAvailableTiles() const;
      |     ~~~~~~~~~~~~~~~~~~~~~~~~ ^                        
      |     auto                                               -> std::vector<std::string>
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:265:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  265 |     bool isTileAvailable(double latitude, double longitude) const;
      |     ~~~~ ^                                                       
      |     auto                                                          -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:268:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  268 |     std::string getTilePath(double latitude, double longitude) const;
      |     ~~~~~~~~~~~ ^                                                   
      |     auto                                                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:269:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  269 |     std::string getTileFilename(double latitude, double longitude) const;
      |     ~~~~~~~~~~~ ^                                                       
      |     auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:270:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  270 |     bool createDataDirectory();
      |     ~~~~ ^                    
      |     auto                       -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:273:5: warning: 'setDownloadEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  273 |     void setDownloadEnabled(bool enabled) { download_enabled.store(enabled); }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:273:45: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  273 |     void setDownloadEnabled(bool enabled) { download_enabled.store(enabled); }
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:103:21: note: default parameter was declared here
  103 |     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
      |                     ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:274:5: warning: 'isDownloadEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  274 |     bool isDownloadEnabled() const { return download_enabled.load(); }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:274:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  274 |     bool isDownloadEnabled() const { return download_enabled.load(); }
      |     ~~~~ ^
      |     auto                           -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:274:45: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
  274 |     bool isDownloadEnabled() const { return download_enabled.load(); }
      |                                             ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:111:10: note: default parameter was declared here
  111 |     load(memory_order __m = memory_order_seq_cst) const noexcept
      |          ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:277:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  277 |     std::string getLastError() const;
      |     ~~~~~~~~~~~ ^                   
      |     auto                             -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:282:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  282 |     std::string constructDownloadURL(const std::string& tile_name) const;
      |     ~~~~~~~~~~~ ^                                                       
      |     auto                                                                 -> std::string
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:283:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  283 |     bool downloadFile(const std::string& url, const std::string& filepath);
      |     ~~~~ ^                                                                
      |     auto                                                                   -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:297:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions]
  297 |     FGCom_TerrainObstructionAnalyzer(double fresnel_clearance = 0.6, 
      |     ^
      |     explicit 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:297:38: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  297 |     FGCom_TerrainObstructionAnalyzer(double fresnel_clearance = 0.6, 
      |                                      ^                        ~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:297:65: warning: 0.6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  297 |     FGCom_TerrainObstructionAnalyzer(double fresnel_clearance = 0.6, 
      |                                                                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:298:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  298 |                                     bool enable_diffraction = true,
      |                                     ^                       ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:299:37: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments-declarations]
  299 |                                     bool enable_fresnel = true);
      |                                     ^                   ~~~~~~
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:302:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  302 |     ObstructionResult analyzeObstruction(const TerrainProfile& profile,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  303 |                                        double alt1, double alt2,
  304 |                                        double frequency_mhz);
      |                                                             
      |                                                              -> ObstructionResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:307:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  307 |     FresnelZoneResult calculateFresnelZone(const TerrainProfile& profile,
      |     ~~~~~~~~~~~~~~~~~ ^
      |     auto
  308 |                                          double alt1, double alt2,
  309 |                                          double frequency_mhz);
      |                                                               
      |                                                                -> FresnelZoneResult
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:312:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  312 |     double calculateDiffractionLoss(double obstruction_height_m, double distance_km,
      |     ~~~~~~ ^
      |     auto
  313 |                                   double frequency_mhz);
      |                                                        
      |                                                         -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:316:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  316 |     bool isLineOfSightClear(const TerrainProfile& profile, double alt1, double alt2);
      |     ~~~~ ^                                                                          
      |     auto                                                                             -> bool
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:319:5: warning: 'setFresnelClearancePercent' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  319 |     void setFresnelClearancePercent(double percent) { fresnel_clearance_percent = percent; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:320:5: warning: 'setDiffractionEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  320 |     void setDiffractionEnabled(bool enabled) { enable_diffraction = enabled; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:321:5: warning: 'setFresnelZoneEnabled' must be tagged with the LIBC_INLINE macro; the macro should be placed at the beginning of the declaration [llvmlibc-inline-function-decl]
  321 |     void setFresnelZoneEnabled(bool enabled) { enable_fresnel_zone = enabled; }
      |     ^
      |     LIBC_INLINE 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:324:5: warning: function 'calculateFresnelRadius' should be marked [[nodiscard]] [modernize-use-nodiscard]
  324 |     double calculateFresnelRadius(double distance_km, double frequency_mhz) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:324:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  324 |     double calculateFresnelRadius(double distance_km, double frequency_mhz) const;
      |     ~~~~~~ ^                                                                     
      |     auto                                                                          -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:325:5: warning: function 'calculateRequiredClearance' should be marked [[nodiscard]] [modernize-use-nodiscard]
  325 |     double calculateRequiredClearance(const TerrainProfile& profile, double alt1, double alt2) const;
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:325:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  325 |     double calculateRequiredClearance(const TerrainProfile& profile, double alt1, double alt2) const;
      |     ~~~~~~ ^                                                                                        
      |     auto                                                                                             -> double
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:326:5: warning: function 'checkFresnelZoneClearance' should be marked [[nodiscard]] [modernize-use-nodiscard]
  326 |     bool checkFresnelZoneClearance(const TerrainProfile& profile, double alt1, double alt2,
      |     ^
      |     [[nodiscard]] 
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:326:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  326 |     bool checkFresnelZoneClearance(const TerrainProfile& profile, double alt1, double alt2,
      |     ~~~~ ^
      |     auto
  327 |                                  double frequency_mhz) const;
      |                                                             
      |                                                              -> bool
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/stl_algobase.h:398:10: warning: 'operator=' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  398 |         { *__to = *__from; }
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.h:40:8: note: resolves to this declaration
   40 | struct TerrainPoint {
      |        ^
/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/condition_variable:104:10: warning: 'operator()' must resolve to a function declared within the namespace defined by the 'LIBC_NAMESPACE' macro [llvmlibc-callee-namespace]
  104 |         while (!__p())
      |                 ^
/home/haaken/github-projects/fgcom-mumble/client/mumble-plugin/lib/terrain_elevation.cpp:508:32: note: resolves to this declaration
  508 |             task_cv.wait(lock, [this] { return !task_queue.empty() || !workers_running.load(); });
      |                                ^
